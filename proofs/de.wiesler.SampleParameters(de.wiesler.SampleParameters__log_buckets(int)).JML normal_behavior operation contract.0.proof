\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 05 14:33:40 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 05 14:33:40 CEST 2022
contract=de.wiesler.SampleParameters[de.wiesler.SampleParameters\\:\\:log_buckets(int)].JML normal_behavior operation contract.0
name=de.wiesler.SampleParameters[de.wiesler.SampleParameters\\:\\:log_buckets(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "288")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "4") (term "0,0,1,0,1"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_log_buckets,savedHeapBefore_log_buckets"))
 (builtin "One Step Simplification" (formula "4"))
(rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
(rule "less_equal_than_comparison_simple" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "ifElseSplit" (formula "4"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "returnUnfold" (formula "5") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "5") (term "1"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "var"))
   (rule "assignment" (formula "5") (term "1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "var_1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "5") (term "1"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "var_2"))
   (rule "assignmentDivisionInt" (formula "5"))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaDivInt" (formula "5") (term "0,1,0"))
       (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_log2,result_0,exc_0") (contract "de.wiesler.Constants[de.wiesler.Constants::log2(int)].JML normal_behavior operation contract.0"))
      (branch "Post (log2)"
          (builtin "One Step Simplification" (formula "6"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "assignment" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "blockEmpty" (formula "7") (term "1"))
          (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_max,result_1,exc_1") (contract "de.wiesler.Functions[de.wiesler.Functions::max(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (max)"
             (builtin "One Step Simplification" (formula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "eqSymm" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
            (rule "assignment" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "blockEmpty" (formula "9") (term "1"))
            (rule "methodCallReturn" (formula "9") (term "1"))
            (rule "assignment" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "methodCallEmpty" (formula "9") (term "1"))
            (rule "tryEmpty" (formula "9") (term "1"))
            (rule "emptyModality" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
         (branch "Exceptional Post (max)"
             (builtin "One Step Simplification" (formula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "close" (formula "10") (ifseqformula "9"))
         )
         (branch "Pre (max)"
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "7"))
         )
      )
      (branch "Exceptional Post (log2)"
          (builtin "One Step Simplification" (formula "5"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "notLeft" (formula "5"))
         (rule "close" (formula "7") (ifseqformula "6"))
      )
      (branch "Pre (log2)"
          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
         (rule "inEqSimp_gtRight" (formula "5"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "jdiv_axiom" (formula "1") (term "0"))
         (rule "eqSymm" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "6"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
         (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
         (rule "qeq_literals" (formula "1") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "equal_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_addComm1" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "3"))
         (rule "mul_literals" (formula "9") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0"))
         (rule "add_literals" (formula "9") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1"))
         (rule "inEqSimp_contradInEq3" (formula "9") (ifseqformula "5"))
         (rule "times_zero_1" (formula "9") (term "0,1,0"))
         (rule "greater_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "qeq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "closeFalse" (formula "9"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "5"))
      (rule "equal_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "closeTrue" (formula "5"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_leqRight" (formula "4"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_1"))
   (rule "less_equal_than_comparison_simple" (formula "4") (term "1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "ifElseSplit" (formula "4"))
   (branch "if x_1 true"
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "returnUnfold" (formula "5") (term "1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_2"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "5") (term "1"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "var"))
      (rule "assignment" (formula "5") (term "1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "var_1"))
      (rule "compound_division_1" (formula "5") (term "1") (inst "#v=x_3"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_3"))
      (rule "remove_parentheses_right" (formula "5") (term "1"))
      (rule "compound_addition_1" (formula "5") (term "1") (inst "#v=x_4"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_4"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "5") (term "1"))
      (rule "variableDeclarationAssign" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "var_2"))
      (rule "assignmentDivisionInt" (formula "5"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaDivInt" (formula "5") (term "0,1,0"))
          (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_log2,result_0,exc_0") (contract "de.wiesler.Constants[de.wiesler.Constants::log2(int)].JML normal_behavior operation contract.0"))
         (branch "Post (log2)"
             (builtin "One Step Simplification" (formula "6"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "assignment" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "blockEmpty" (formula "7") (term "1"))
            (rule "assignmentAdditionInt" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaAddInt" (formula "7") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
            (rule "assignmentDivisionInt" (formula "7"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaDivInt" (formula "7") (term "0,1,0"))
                (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_max,result_1,exc_1") (contract "de.wiesler.Functions[de.wiesler.Functions::max(int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (max)"
                   (builtin "One Step Simplification" (formula "8"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "8"))
                  (rule "eqSymm" (formula "8"))
                  (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                  (rule "assignment" (formula "9") (term "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "blockEmpty" (formula "9") (term "1"))
                  (rule "methodCallReturn" (formula "9") (term "1"))
                  (rule "assignment" (formula "9") (term "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "methodCallEmpty" (formula "9") (term "1"))
                  (rule "tryEmpty" (formula "9") (term "1"))
                  (rule "emptyModality" (formula "9") (term "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "closeTrue" (formula "9"))
               )
               (branch "Exceptional Post (max)"
                   (builtin "One Step Simplification" (formula "8"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "7"))
                  (rule "notLeft" (formula "7"))
                  (rule "close" (formula "10") (ifseqformula "9"))
               )
               (branch "Pre (max)"
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "3")))
                  (rule "closeTrue" (formula "7"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "7"))
               (rule "equal_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "closeTrue" (formula "7"))
            )
         )
         (branch "Exceptional Post (log2)"
             (builtin "One Step Simplification" (formula "6"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "close" (formula "7") (ifseqformula "6"))
         )
         (branch "Pre (log2)"
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
            (rule "inEqSimp_gtRight" (formula "5"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "jdiv_axiom" (formula "1") (term "0"))
            (rule "eqSymm" (formula "1"))
            (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "4"))
            (rule "leq_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
            (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption4" (formula "2") (ifseqformula "6"))
            (rule "times_zero_1" (formula "2") (term "0,1,0"))
            (rule "greater_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
            (rule "mul_literals" (formula "7") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1"))
            (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "5"))
            (rule "times_zero_1" (formula "7") (term "0,1,0"))
            (rule "greater_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "qeq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "5"))
         (rule "equal_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "closeTrue" (formula "5"))
      )
   )
   (branch "if x_1 false"
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "4"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "blockReturn" (formula "5") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
      (rule "leq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "methodCallReturn" (formula "4") (term "1"))
      (rule "assignment" (formula "4") (term "1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "methodCallEmpty" (formula "4") (term "1"))
      (rule "tryEmpty" (formula "4") (term "1"))
      (rule "emptyModality" (formula "4") (term "1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "closeTrue" (formula "4"))
   )
)
)
}
