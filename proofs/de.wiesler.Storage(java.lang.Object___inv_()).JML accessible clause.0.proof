\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Apr 15 23:40:40 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Apr 15 23:40:40 CEST 2022
contract=de.wiesler.Storage[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=de.wiesler.Storage[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "909")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self_25,anon_heap"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "replace_known_left" (formula "8") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "8"))
(rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
 (builtin "One Step Simplification" (formula "6"))
(rule "translateJavaMulInt" (formula "6") (term "1,1,0,0,0,0,1,0,0"))
(rule "translateJavaMulInt" (formula "6") (term "1,1,0,0,0,0,0,1,0,0"))
(rule "translateJavaMulInt" (formula "6") (term "0,1,1,0,0,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "1,1,0,0,0,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "1,1,0,0,0,0,1,0,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "17"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "disjointDefinition" (formula "42"))
 (builtin "One Step Simplification" (formula "42"))
(rule "notLeft" (formula "42"))
(rule "disjointDefinition" (formula "41"))
 (builtin "One Step Simplification" (formula "41"))
(rule "notLeft" (formula "41"))
(rule "disjointDefinition" (formula "40"))
 (builtin "One Step Simplification" (formula "40"))
(rule "notLeft" (formula "40"))
(rule "eqSymm" (formula "40"))
(rule "disjointDefinition" (formula "39"))
 (builtin "One Step Simplification" (formula "39"))
(rule "notLeft" (formula "39"))
(rule "eqSymm" (formula "39"))
(rule "disjointDefinition" (formula "38"))
 (builtin "One Step Simplification" (formula "38"))
(rule "notLeft" (formula "38"))
(rule "eqSymm" (formula "38"))
(rule "disjointDefinition" (formula "37"))
 (builtin "One Step Simplification" (formula "37"))
(rule "notLeft" (formula "37"))
(rule "eqSymm" (formula "37"))
(rule "disjointDefinition" (formula "36"))
 (builtin "One Step Simplification" (formula "36"))
(rule "notLeft" (formula "36"))
(rule "eqSymm" (formula "36"))
(rule "disjointDefinition" (formula "35"))
 (builtin "One Step Simplification" (formula "35"))
(rule "notLeft" (formula "35"))
(rule "eqSymm" (formula "35"))
(rule "disjointDefinition" (formula "34"))
 (builtin "One Step Simplification" (formula "34"))
(rule "notLeft" (formula "34"))
(rule "eqSymm" (formula "34"))
(rule "disjointDefinition" (formula "33"))
 (builtin "One Step Simplification" (formula "33"))
(rule "notLeft" (formula "33"))
(rule "eqSymm" (formula "33"))
(rule "disjointDefinition" (formula "32"))
 (builtin "One Step Simplification" (formula "32"))
(rule "notLeft" (formula "32"))
(rule "eqSymm" (formula "32"))
(rule "disjointDefinition" (formula "31"))
 (builtin "One Step Simplification" (formula "31"))
(rule "notLeft" (formula "31"))
(rule "eqSymm" (formula "31"))
(rule "disjointDefinition" (formula "30"))
 (builtin "One Step Simplification" (formula "30"))
(rule "notLeft" (formula "30"))
(rule "eqSymm" (formula "30"))
(rule "disjointDefinition" (formula "29"))
 (builtin "One Step Simplification" (formula "29"))
(rule "notLeft" (formula "29"))
(rule "eqSymm" (formula "29"))
(rule "disjointDefinition" (formula "28"))
 (builtin "One Step Simplification" (formula "28"))
(rule "notLeft" (formula "28"))
(rule "eqSymm" (formula "28"))
(rule "disjointDefinition" (formula "27"))
 (builtin "One Step Simplification" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "disjointDefinition" (formula "26"))
 (builtin "One Step Simplification" (formula "26"))
(rule "notLeft" (formula "26"))
(rule "eqSymm" (formula "26"))
(rule "disjointDefinition" (formula "25"))
 (builtin "One Step Simplification" (formula "25"))
(rule "notLeft" (formula "25"))
(rule "eqSymm" (formula "25"))
(rule "disjointDefinition" (formula "24"))
 (builtin "One Step Simplification" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "disjointDefinition" (formula "23"))
 (builtin "One Step Simplification" (formula "23"))
(rule "notLeft" (formula "23"))
(rule "disjointDefinition" (formula "22"))
 (builtin "One Step Simplification" (formula "22"))
(rule "notLeft" (formula "22"))
(rule "disjointDefinition" (formula "21"))
 (builtin "One Step Simplification" (formula "21"))
(rule "notLeft" (formula "21"))
(rule "disjointDefinition" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "disjointDefinition" (formula "19"))
 (builtin "One Step Simplification" (formula "19"))
(rule "notLeft" (formula "19"))
(rule "disjointDefinition" (formula "18"))
 (builtin "One Step Simplification" (formula "18"))
(rule "notLeft" (formula "18"))
(rule "disjointDefinition" (formula "17"))
 (builtin "One Step Simplification" (formula "17"))
(rule "notLeft" (formula "17"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "commuteUnion" (formula "14") (term "1,1,1"))
(rule "commuteUnion_2" (formula "14") (term "0,1"))
(rule "commuteUnion" (formula "14") (term "0,0,1"))
(rule "commuteUnion_2" (formula "14") (term "0,1"))
(rule "commuteUnion_2" (formula "14") (term "1"))
(rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "52"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")) (ifInst ""  (formula "45")) (ifInst ""  (formula "46")) (ifInst ""  (formula "47")) (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
(rule "translateJavaMulInt" (formula "52") (term "1,1,0,0"))
(rule "translateJavaMulInt" (formula "52") (term "1,0,0,0"))
(rule "translateJavaMulInt" (formula "52") (term "0,1,1,0,0"))
(rule "mul_literals" (formula "52") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0"))
(rule "mul_literals" (formula "52") (term "1,1,0,0"))
(rule "replace_known_left" (formula "52") (term "1,0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "8")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1") (ifseqformula "29"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,1") (ifseqformula "34"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,1") (ifseqformula "33"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "20")))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "41")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "15")))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "40"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "27")))
(rule "disjointDefinition" (formula "52") (term "1,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "42")))
(rule "disjointDefinition" (formula "52") (term "1,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,1"))
(rule "replace_known_right" (formula "52") (term "0,1,1") (ifseqformula "39"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "17")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "18")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,0,1") (ifseqformula "36"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "19")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "24")))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "37"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "0,0,0,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "16")))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "35"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "22")))
(rule "disjointDefinition" (formula "52") (term "0,0,0,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "21")))
(rule "disjointDefinition" (formula "52") (term "1,0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,0,0,0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,0,0,0,0,1") (ifseqformula "26"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "32"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,1"))
(rule "replace_known_right" (formula "52") (term "0,1,1") (ifseqformula "38"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,0,1"))
(rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "30"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1,1"))
(rule "replace_known_right" (formula "52") (term "0,1,1") (ifseqformula "31"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "23")))
(rule "disjointDefinition" (formula "52") (term "0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,0,1"))
(rule "replace_known_right" (formula "52") (term "0,0,1") (ifseqformula "25"))
 (builtin "One Step Simplification" (formula "52"))
(rule "disjointDefinition" (formula "52") (term "1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "eqSymm" (formula "52") (term "0,1"))
(rule "replace_known_right" (formula "52") (term "0,1") (ifseqformula "28"))
 (builtin "One Step Simplification" (formula "52"))
(rule "applyEq" (formula "52") (term "0") (ifseqformula "14"))
(rule "eqSymm" (formula "52"))
(rule "commuteUnion" (formula "52") (term "0,0,0"))
(rule "commuteUnion" (formula "52") (term "1,1,0"))
(rule "commuteUnion" (formula "52") (term "0,0"))
(rule "associativeLawUnion" (formula "14") (term "0,1"))
(rule "arrayLengthNotNegative" (formula "13") (term "0"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "qeq_literals" (formula "13"))
(rule "true_left" (formula "13"))
(rule "arrayLengthIsAShort" (formula "13") (term "0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "true_left" (formula "13"))
(rule "arrayLengthNotNegative" (formula "12") (term "0"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
(rule "qeq_literals" (formula "12"))
(rule "true_left" (formula "12"))
(rule "arrayLengthIsAShort" (formula "12") (term "0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "true_left" (formula "12"))
(rule "arrayLengthNotNegative" (formula "11") (term "0"))
(rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
(rule "qeq_literals" (formula "11"))
(rule "true_left" (formula "11"))
(rule "arrayLengthIsAShort" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "arrayLengthNotNegative" (formula "10") (term "0"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
(rule "qeq_literals" (formula "10"))
(rule "true_left" (formula "10"))
(rule "arrayLengthIsAShort" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "arrayLengthIsAShort" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthNotNegative" (formula "9") (term "0"))
(rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
(rule "qeq_literals" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthIsAShort" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "arrayLengthNotNegative" (formula "8") (term "0"))
(rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
(rule "qeq_literals" (formula "8"))
(rule "true_left" (formula "8"))
(rule "arrayLengthIsAShort" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "true_left" (formula "7"))
(rule "arrayLengthNotNegative" (formula "7") (term "0"))
(rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
(rule "qeq_literals" (formula "7"))
(rule "true_left" (formula "7"))
(rule "arrayLengthIsAShort" (formula "6") (term "0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "true_left" (formula "6"))
(rule "arrayLengthNotNegative" (formula "6") (term "0"))
(rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
(rule "qeq_literals" (formula "6"))
(rule "true_left" (formula "6"))
(rule "associativeLawUnion" (formula "52") (term "0"))
(rule "associativeLawUnion" (formula "52") (term "0,1"))
(rule "associativeLawUnion" (formula "14") (term "0,1"))
(rule "associativeLawUnion" (formula "52") (term "0"))
(rule "associativeLawUnion" (formula "52") (term "0,1"))
(rule "equalityToElementOfRight" (formula "52") (inst "ov=ov") (inst "fv=fv"))
(rule "allRight" (formula "52") (inst "sk=ov_0"))
(rule "allRight" (formula "52") (inst "sk=fv_0"))
(rule "elementOfUnion" (formula "52") (term "1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,1"))
(rule "elementOfUnion" (formula "52") (term "0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "1,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0"))
(rule "elementOfUnion" (formula "52") (term "1,0,0,0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0"))
(rule "elementOfUnion" (formula "52") (term "1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "shift_paren_or" (formula "52") (term "0,0,0,1"))
(rule "commute_or_2" (formula "52") (term "0,0,1"))
(rule "shift_paren_or" (formula "52") (term "0,0,0,0"))
(rule "commute_or_2" (formula "52") (term "0,0,0"))
(rule "commute_or_2" (formula "52") (term "0,0,0,0,1"))
(rule "commute_or_2" (formula "52") (term "0,0,0,1"))
(rule "shift_paren_or" (formula "52") (term "0,0,0,0"))
(rule "commute_or_2" (formula "52") (term "0,0"))
(rule "commute_or_2" (formula "52") (term "0"))
(rule "commute_or_2" (formula "52") (term "0,0,0"))
(rule "commute_or_2" (formula "52") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "52") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "52"))
(rule "closeTrue" (formula "52"))
)
}
