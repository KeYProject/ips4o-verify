\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Dec 31 15:51:14 CET 2021
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Dec 31 15:51:14 CET 2021
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:classify(int)].JML normal_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:classify(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "666bcb0c95"))

(autoModeTime "2213")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaMulInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "7") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "5") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_classify,savedHeapBefore_classify,_valueBefore_classify"))
 (builtin "One Step Simplification" (formula "12"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "b"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "i"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "elim_double_block_3" (formula "12") (term "1"))
 (builtin "Loop Invariant" (formula "12") (newnames "variant,b_0,heapBefore_LOOP,iBefore_LOOP,bBefore_LOOP,i_0,b_1,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
   (rule "translateJavaAddInt" (formula "12") (term "1,1,1"))
   (rule "leq_literals" (formula "12") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "add_zero_left" (formula "12") (term "1,1,1"))
   (rule "translateJavaShiftLeftIntZero" (formula "12") (term "0,1,0"))
   (rule "leq_literals" (formula "12") (term "1,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaShiftLeftIntConstant" (formula "12") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1"))
   (rule "add_literals" (formula "12") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1"))
   (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "6"))
   (rule "leq_literals" (formula "12") (term "0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_geqRight" (formula "12"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "javaShiftLeftIntDef" (formula "1") (term "0"))
   (rule "mod_axiom" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "div_literals" (formula "1") (term "0,1,1,0,0"))
   (rule "times_zero_2" (formula "1") (term "1,1,0,0"))
   (rule "add_zero_right" (formula "1") (term "1,0,0"))
   (rule "shiftleft_literals" (formula "1") (term "0,0"))
   (rule "arrayLengthIsAShort" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "qeq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "expand_moduloInteger" (formula "1") (term "0") (userinteraction))
   (rule "replace_int_MIN" (formula "1") (term "0,0") (userinteraction))
   (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0") (userinteraction))
   (rule "replace_int_RANGE" (formula "1") (term "1,1,0") (userinteraction))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "mod_axiom" (formula "1") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
   (rule "div_literals" (formula "1") (term "0,1,0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0,1,0"))
   (rule "add_zero_right" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
   (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,0,1,1,0,1,1"))
   (rule "andLeft" (formula "11"))
   (rule "impRight" (formula "15"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "eqSymm" (formula "19") (term "0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "16") (term "1,1"))
   (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "16"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_0_1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "19") (term "1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "16"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0"))
   (rule "polySimp_elimOne" (formula "16") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "8"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "polySimp_elimOne" (formula "13") (term "0"))
   (rule "boxToDiamond" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "compound_less_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "17") (term "1"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "variableDeclarationAssign" (formula "17") (term "1"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
   (rule "assignment_read_attribute_this" (formula "17"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "less_than_comparison_simple" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "emptyModality" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "notRight" (formula "17"))
   (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
   (rule "add_literals" (formula "14") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0"))
   (rule "qeq_literals" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
   (rule "leq_literals" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_2"))
   (rule "compound_less_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_4"))
   (rule "assignment_read_attribute_this" (formula "19"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "less_than_comparison_simple" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,0"))
   (rule "replace_known_left" (formula "19") (term "0,0,1,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
   (rule "qeq_literals" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAShort" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "ifSplit" (formula "19"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "compound_addition_2" (formula "19") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_5"))
      (rule "assignmentMultiplicationInt" (formula "19") (term "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "translateJavaMulInt" (formula "19") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_6"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_1"))
      (rule "eval_order_array_access4" (formula "19") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr"))
      (rule "assignment_read_attribute_this" (formula "19"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "assignment_array2" (formula "19"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "19"))
         (rule "variableDeclarationAssign" (formula "19") (term "1"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_2"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
          (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_cmp,result_0,exc_0") (contract "de.wiesler.Constants[de.wiesler.Constants::cmp(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (cmp)"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "18"))
            (rule "eqSymm" (formula "18"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
            (rule "assignment" (formula "21") (term "1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "blockEmpty" (formula "21") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
             (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_toInt,result_1,exc_2") (contract "de.wiesler.Constants[de.wiesler.Constants::toInt(boolean)].JML normal_behavior operation contract.0"))
            (branch "Post (toInt)"
                (builtin "One Step Simplification" (formula "22"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "eqSymm" (formula "20"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignmentAdditionInt" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "translateJavaAddInt" (formula "23") (term "0,1,0"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "preincrement" (formula "23") (term "1"))
               (rule "compound_int_cast_expression" (formula "23") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "23") (term "1"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_7"))
               (rule "remove_parentheses_right" (formula "23") (term "1"))
               (rule "assignmentAdditionInt" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "translateJavaAddInt" (formula "23") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "23") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "tryEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "emptyModality" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "2")))
               (rule "polySimp_homoEq" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "0,0,1"))
               (rule "mul_literals" (formula "23") (term "0,0,0,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "1,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,0,0"))
               (rule "precOfInt" (formula "23") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1"))
               (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,1,1"))
               (rule "add_literals" (formula "23") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "23") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "23") (term "0,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,1"))
               (rule "add_zero_left" (formula "23") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,1"))
               (rule "add_literals" (formula "23") (term "1,0,1,1"))
               (rule "times_zero_1" (formula "23") (term "0,1,1"))
               (rule "leq_literals" (formula "23") (term "1,1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
               (rule "times_zero_2" (formula "23") (term "1,0,1"))
               (rule "add_zero_right" (formula "23") (term "0,1"))
               (rule "polySimp_sepNegMonomial" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_sepPosMonomial" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
               (rule "mul_literals" (formula "23") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
               (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_contradEq7" (formula "23") (term "0,1,0") (ifseqformula "13"))
               (rule "add_zero_left" (formula "23") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,0,0,1,0"))
               (rule "leq_literals" (formula "23") (term "0,0,1,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_subsumption1" (formula "23") (term "0,0") (ifseqformula "13"))
               (rule "leq_literals" (formula "23") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "ifthenelse_split" (formula "18") (term "0"))
               (branch "self.tree[b_1] <= -1 + value TRUE"
                  (rule "eqSymm" (formula "19"))
                  (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "eqSymm" (formula "21"))
                  (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "21"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,0"))
                  (rule "applyEq" (formula "24") (term "1,1,1") (ifseqformula "21"))
                  (rule "polySimp_addComm1" (formula "24") (term "1,1"))
                  (rule "add_literals" (formula "24") (term "0,1,1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andRight" (formula "25") (userinteraction))
                  (branch "Case 1"
                     (rule "shiftLeftSplitTwo" (formula "25") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,1,0,0,1"))
                     (rule "add_zero_left" (formula "1") (term "1,0,0,1"))
                     (rule "eqSymm" (formula "1") (term "1"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                     (rule "inEqSimp_subsumption0" (formula "2") (term "0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "17"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "shiftLeftSplitTwo" (formula "25") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "1") (term "1"))
                     (rule "inEqSimp_geqRight" (formula "26"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "16"))
                     (rule "leq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_subsumption0" (formula "2") (term "0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "19"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "self.tree[b_1] <= -1 + value FALSE"
                  (rule "eqSymm" (formula "18"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "eqSymm" (formula "19"))
                  (rule "inEqSimp_leqRight" (formula "21"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "24") (term "1,0"))
                  (rule "applyEq" (formula "24") (term "1,1,1") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "24") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "andRight" (formula "25") (userinteraction))
                  (branch "Case 1"
                     (rule "shiftLeftSplitTwo" (formula "25") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,1,0,0,1"))
                     (rule "add_zero_left" (formula "1") (term "1,0,0,1"))
                     (rule "eqSymm" (formula "1") (term "1"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                     (rule "inEqSimp_subsumption0" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "18"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "shiftLeftSplitTwo" (formula "25") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "1") (term "1"))
                     (rule "inEqSimp_geqRight" (formula "26"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "2") (term "1,0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "2") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "20"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Exceptional Post (toInt)"
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "close" (formula "22") (ifseqformula "21"))
            )
            (branch "Pre (toInt)"
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")))
               (rule "closeTrue" (formula "21"))
            )
         )
         (branch "Exceptional Post (cmp)"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "close" (formula "20") (ifseqformula "19"))
         )
         (branch "Pre (cmp)"
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "3")))
            (rule "closeTrue" (formula "19"))
         )
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but b Out of Bounds!)"
         (rule "false_right" (formula "20"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "orLeft" (formula "1") (userinteraction))
         (branch "self.tree.length <= b_1"
            (rule "cut" (inst "cutFormula=leq(add(Z(1(#)), i_0), Z(6(#)))<<origin(\"User_Interaction @ node 1191 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: 1 + i_0 <= 6 TRUE"
               (rule "shiftLeftUpperBoundLe" (formula "18") (term "0") (ifseqformula "1") (userinteraction))
               (rule "impLeft" (formula "18") (userinteraction))
               (branch "Case 1"
                  (rule "leq_literals" (formula "19") (term "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "17") (term "1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1"))
                  (rule "add_literals" (formula "17") (term "0,0,1"))
                  (rule "leq_literals" (formula "17") (term "0,1"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "notLeft" (formula "17"))
                  (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "qeq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
               (branch "Case 2"
                  (rule "translateJavaShiftLeftIntConstant" (formula "18") (term "1") (userinteraction))
                  (rule "javaShiftLeftIntDef" (formula "18") (term "1") (userinteraction))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "mod_axiom" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "div_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "times_zero_2" (formula "18") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "1,0,0"))
                  (rule "shiftleft_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "16") (term "1") (ifseqformula "1"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,1"))
                  (rule "add_literals" (formula "16") (term "0,0,1"))
                  (rule "leq_literals" (formula "16") (term "0,1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "notLeft" (formula "16"))
                  (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "18"))
                  (rule "add_zero_right" (formula "14") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "14"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "leq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1"))
                  (rule "mul_literals" (formula "17") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                  (rule "expand_moduloInteger" (formula "16") (term "1"))
                  (rule "replace_int_RANGE" (formula "16") (term "1,1,1"))
                  (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,1"))
                  (rule "replace_int_MIN" (formula "16") (term "0,1"))
                  (rule "add_literals" (formula "16") (term "0,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "mod_axiom" (formula "16") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                  (rule "div_literals" (formula "16") (term "0,1,1,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "CUT: 1 + i_0 <= 6 FALSE"
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "17") (term "1") (ifseqformula "2"))
               (rule "mul_literals" (formula "17") (term "1,0,0,1"))
               (rule "add_literals" (formula "17") (term "0,0,1"))
               (rule "leq_literals" (formula "17") (term "0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0"))
               (rule "leq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "b_1 < 0"
            (rule "shiftLeftLowerBoundGe" (formula "15") (term "0") (ifseqformula "14") (userinteraction))
            (rule "leq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaShiftLeftIntZero" (formula "15") (term "1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "17") (term "1") (ifseqformula "1"))
            (rule "mul_literals" (formula "17") (term "1,0,0,1"))
            (rule "add_literals" (formula "17") (term "0,0,1"))
            (rule "qeq_literals" (formula "17") (term "0,1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "18"))
            (rule "add_zero_right" (formula "14") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "14"))
            (rule "times_zero_1" (formula "18") (term "1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "leq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "false_right" (formula "18"))
            (rule "inEqSimp_subsumption0" (formula "15") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
            (rule "mul_literals" (formula "15") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
            (rule "qeq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "polySimp_addComm0" (formula "15") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "15"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "b_0_1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0"))
   (rule "polySimp_elimOne" (formula "15") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "7"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "polySimp_elimOne" (formula "12") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x"))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_1"))
   (rule "assignment_read_attribute_this" (formula "19"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "less_than_comparison_simple" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,0"))
   (rule "methodCallEmpty" (formula "19") (term "1"))
   (rule "emptyModality" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "impRight" (formula "19"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "17"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,0"))
   (rule "times_zero_1" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "12"))
   (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
   (rule "inEqSimp_homoInEq1" (formula "13"))
   (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
   (rule "add_literals" (formula "13") (term "1,0"))
   (rule "times_zero_1" (formula "13") (term "0"))
   (rule "leq_literals" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
   (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "12"))
   (rule "inEqSimp_contradEq7" (formula "14") (term "0") (ifseqformula "6"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0"))
   (rule "leq_literals" (formula "14") (term "0,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "methodCallReturn" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "emptyModality" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "7"))
   (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "7"))
   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16") (term "1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
   (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "7"))
   (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,0,0,1") (ifseqformula "11"))
   (rule "replace_known_left" (formula "16") (term "0,0,1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "11"))
   (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "7"))
   (rule "eqSymm" (formula "16") (term "1"))
   (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_geqRight" (formula "16"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "arrayLengthIsAShort" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "qeq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "shiftLeftTimesTwo" (formula "1") (term "0") (userinteraction))
   (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "9"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption0" (formula "1") (term "0") (ifseqformula "13"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
   (rule "inEqSimp_contradInEq2" (formula "16") (ifseqformula "2"))
   (rule "greater_literals" (formula "16") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "greater_literals" (formula "16") (term "0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "polySimp_mulComm0" (formula "16") (term "0"))
   (rule "polySimp_rightDist" (formula "16") (term "1"))
   (rule "mul_literals" (formula "16") (term "0,1"))
   (rule "inEqSimp_homoInEq1" (formula "16"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
   (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
   (rule "add_literals" (formula "16") (term "1,1,0"))
   (rule "times_zero_1" (formula "16") (term "1,0"))
   (rule "add_zero_right" (formula "16") (term "0"))
   (rule "leq_literals" (formula "16"))
   (rule "closeFalse" (formula "16"))
)
)
}
