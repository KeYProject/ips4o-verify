\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Feb 04 13:00:23 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Feb 04 13:00:23 CET 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isBucketClassifiedWith(int,de.wiesler.Classifier)].JML accessible clause.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isBucketClassifiedWith(int,de.wiesler.Classifier)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "a684beee49"))

(autoModeTime "21653")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self_25,bucket,classifier,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "14") (userinteraction))
(rule "Definition_axiom_for_isBucketClassifiedWith_in_de_wiesler_Buffers" (formula "14") (term "0") (inst "i=i") (ifseqformula "4") (userinteraction))
(rule "Definition_axiom_for_isBucketClassifiedWith_in_de_wiesler_Buffers" (formula "14") (term "1") (inst "i=i") (ifseqformula "4") (userinteraction))
 (builtin "One Step Simplification" (formula "14") (userinteraction))
 (builtin "Use Dependency Contract" (formula "14") (term "0,1,1,0,0,0,1") (ifInst ""  (formula "14") (term "0,0,2,0,1,0,0,0")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferAt(int)].JML accessible clause.0") (userinteraction))
(rule "impLeft" (formula "12") (userinteraction))
(branch "Case 1"
   (rule "andRight" (formula "12"))
   (branch
      (rule "andRight" (formula "12"))
      (branch
         (rule "andRight" (formula "12"))
         (branch
            (rule "andRight" (formula "12"))
            (branch
               (rule "andRight" (formula "12"))
               (branch
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "notRight" (formula "11"))
                  (rule "close" (formula "12") (ifseqformula "1"))
               )
               (branch
                  (rule "close" (formula "12") (ifseqformula "3"))
               )
            )
            (branch
               (rule "andRight" (formula "12"))
               (branch
                  (rule "close" (formula "12") (ifseqformula "1"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "wellFormedAnon" (formula "12"))
                  (rule "true_left" (formula "5"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "11"))
               )
            )
         )
         (branch
            (rule "close" (formula "12") (ifseqformula "5"))
         )
      )
      (branch
         (rule "andRight" (formula "12"))
         (branch
            (rule "andRight" (formula "12"))
            (branch
               (rule "close" (formula "12") (ifseqformula "9"))
            )
            (branch
               (rule "close" (formula "12") (ifseqformula "10"))
            )
         )
         (branch
            (rule "close" (formula "12") (ifseqformula "11"))
         )
      )
   )
   (branch
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "5"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,1,0,0,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,1,0,0,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,1,0,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,0,1,1,0,0,0,2,0,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "11") (term "2,1,1"))
      (rule "translateJavaMulInt" (formula "11") (term "0,2,1,0,1,0"))
      (rule "translateJavaMulInt" (formula "11") (term "1,1,1"))
      (rule "translateJavaMulInt" (formula "11") (term "1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
      (rule "translateJavaMulInt" (formula "11") (term "0,2,1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "2,1,0,1,0"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,0,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "0,0,2,1,1"))
      (rule "translateJavaAddInt" (formula "11") (term "0,0,2,1,0,1,0"))
      (rule "eqSymm" (formula "14"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "polySimp_elimSub" (formula "11") (term "2,1,1"))
      (rule "mul_literals" (formula "11") (term "1,2,1,1"))
      (rule "polySimp_elimSub" (formula "11") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,0,1,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,2,1,1"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "0,2,1,1"))
      (rule "mul_literals" (formula "11") (term "0,0,2,1,1"))
      (rule "polySimp_addComm1" (formula "11") (term "2,1,1"))
      (rule "add_literals" (formula "11") (term "0,2,1,1"))
      (rule "polySimp_rightDist" (formula "11") (term "0,2,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,0,2,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "2,1,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,2,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "14") (term "0,0,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "mul_literals" (formula "14") (term "0,0,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,2,1,0,1,1,0,0,1,1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,1,0,1,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,2,1,0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,2,1,0,1,1,0,0,0,2,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0"))
      (rule "castedGetAny" (formula "14") (term "2,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1"))
      (rule "disjointDefinition" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "castedGetAny" (formula "14") (term "2,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0"))
      (rule "polySimp_elimOne" (formula "9") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0"))
      (rule "distributeIntersection" (formula "11") (term "0"))
      (rule "unionEqualsEmpty" (formula "11"))
      (rule "disjointWithSingleton1" (formula "11") (term "0"))
      (rule "elementOfSetMinus" (formula "11") (term "0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "sortsDisjointModuloNull" (formula "11") (term "1,0"))
      (rule "replace_known_right" (formula "11") (term "1,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0"))
      (rule "elementOfArrayRangeConcrete" (formula "11") (term "1,0"))
      (rule "elementOfSingleton" (formula "11") (term "0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "commuteUnion" (formula "14") (term "1,1,0,0,1,0,0,0"))
      (rule "commuteUnion" (formula "14") (term "1,1,0,0,2,0,1,0,0,0"))
      (rule "commuteUnion_2" (formula "14") (term "1,1,0,0,1,1,1,0,0,0,0"))
      (rule "commuteUnion" (formula "11") (term "1,0,0"))
      (rule "commuteUnion" (formula "14") (term "0,1,1,0,0,1,1,1,0,0,0,0"))
      (rule "commuteIntersection" (formula "11") (term "0"))
      (rule "nnf_imp2or" (formula "14") (term "0,0,1"))
      (rule "eqSymm" (formula "14"))
      (rule "nnf_imp2or" (formula "14") (term "0,0,1"))
      (rule "eqSymm" (formula "14"))
      (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1"))
      (rule "eqSymm" (formula "14"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
      (rule "eqSymm" (formula "14"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "14") (term "0,2,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "4")))
      (rule "wellFormedAnon" (formula "1") (term "1,0"))
      (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
      (rule "pullOutSelect" (formula "1") (term "0,0,0") (inst "selectSK=de_wiesler_Buffers_buckets_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "15") (term "0,2,0,1,0,0,1"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "3")) (ifInst ""  (formula "14")) (ifInst ""  (formula "12")))
      (rule "true_left" (formula "1"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "15") (term "0,1,1,0,0,0,1"))
      (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")) (ifInst ""  (formula "12")))
      (rule "true_left" (formula "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "11") (inst "i=i") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "11") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "notLeft" (formula "11"))
      (rule "eqSymm" (formula "18"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "14"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0"))
      (rule "mul_literals" (formula "10") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "23") (term "0,1,1,0,0,0,0") (inst "i=i") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "translateJavaMulInt" (formula "23") (term "0,1,0,1,1,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "23") (term "0,0,1,1,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "23") (term "1,0,1,1,0,0,0,0"))
      (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "23") (term "1,1,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor0" (formula "23") (term "0,1,1,1,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "1,0,1,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "23") (term "0,1,1,1,0,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "1,1,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,1,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,0,0,0,0"))
      (rule "pullOutSelect" (formula "23") (term "1,1,1,0,0,0,0") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "24") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,1,1,0,0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,0,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,0,1,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0,0"))
      (rule "inEqSimp_invertInEq1" (formula "1") (term "1,0,1,0,0,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,1,0,0,0,0"))
      (rule "inEqSimp_subsumption6" (formula "1") (term "1,1,0,0,0,0") (ifseqformula "10"))
      (rule "times_zero_1" (formula "1") (term "1,1,0,1,1,0,0,0,0"))
      (rule "greater_literals" (formula "1") (term "0,0,1,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0,1,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elimGcdLeq" (formula "1") (term "1,1,0,0,0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(5(5(2(#))))"))
      (rule "sub_literals" (formula "1") (term "0,0,0,0,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1,1,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "0,0,0,1,0,1,1,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,1,0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,0,1,0,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "0,1,0,1,1,0,0,0,0"))
      (rule "qeq_literals" (formula "1") (term "1,0,1,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1,1,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,1,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "1") (term "1,2,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
      (rule "applyEq" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "2") (term "0,0,0,0,0"))
      (rule "eqSymm" (formula "2") (term "0,1,0,0,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRange" (formula "1") (term "1,0,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
      (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
      (rule "eqSymm" (formula "1") (term "0,1,0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "24") (term "0,2,0,1,0,0,1"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "23")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "24") (term "0,2,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")))
      (rule "wellFormedAnon" (formula "1") (term "1,0"))
      (rule "replaceKnownSelect_taclet10_0" (formula "1") (term "1,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "1") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
      (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "25") (term "0,1,1,0,0,0,1"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "24")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "equalityToElementOfRight" (formula "22") (inst "ov=ov") (inst "fv=fv"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "allRight" (formula "22") (inst "sk=ov_0"))
      (rule "allRight" (formula "22") (inst "sk=fv_0"))
      (rule "notRight" (formula "22"))
      (rule "elementOfIntersect" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
      (rule "andLeft" (formula "1"))
      (rule "exLeft" (formula "2") (inst "sk=iv_0"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
      (rule "elementOfSetMinus" (formula "5"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "notLeft" (formula "5"))
      (rule "elementOfUnion" (formula "23"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "orRight" (formula "23"))
      (rule "sortsDisjointModuloNull" (formula "23"))
      (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
      (rule "false_right" (formula "23"))
      (rule "elementOfUnion" (formula "23"))
      (rule "orRight" (formula "23"))
      (rule "elementOfSingleton" (formula "23"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "eqSymm" (formula "23") (term "0"))
      (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "false_right" (formula "23"))
      (rule "elementOfArrayRangeConcrete" (formula "23"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "4")))
      (rule "inEqSimp_leqRight" (formula "23"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Case 2"
   (rule "applyEq" (formula "15") (term "0,1,1,0,0,0,1") (ifseqformula "12") (userinteraction))
   (rule "applyEq" (formula "15") (term "0,0,2,0,1,0,0,1") (ifseqformula "12") (userinteraction))
   (rule "ifthenelse_split" (formula "15") (term "0") (userinteraction))
   (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) = bucket) TRUE"
      (rule "ifthenelse_split" (formula "16") (term "1") (userinteraction))
      (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) @heap[anon( allLocs setMinus {(self_25.indices, arr(bucket))} cup arrayRange(self_25.buffer, javaMulInt(bucket, 256), javaSubInt(javaMulInt(javaAddInt(bucket, 1), 256), 1)) cup classifier.*, anon_heap<<anonHeapFunction>>)] = bucket) TRUE"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "closeTrue" (formula "17"))
      )
      (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) @heap[anon( allLocs setMinus {(self_25.indices, arr(bucket))} cup arrayRange(self_25.buffer, javaMulInt(bucket, 256), javaSubInt(javaMulInt(javaAddInt(bucket, 1), 256), 1)) cup classifier.*, anon_heap<<anonHeapFunction>>)] = bucket) FALSE"
         (rule "allRight" (formula "16") (inst "sk=i_0") (userinteraction))
         (rule "allLeftHide" (formula "1") (inst "t=i_0") (userinteraction))
          (builtin "Use Dependency Contract" (formula "16") (term "0,1") (ifInst ""  (formula "1") (term "0,1")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::classOf(int)].JML accessible clause.0") (userinteraction))
         (rule "impLeft" (formula "14") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "14"))
            (branch "Case 1"
               (rule "andRight" (formula "14"))
               (branch
                  (rule "andRight" (formula "14"))
                  (branch
                     (rule "andRight" (formula "14"))
                     (branch
                        (rule "andRight" (formula "14"))
                        (branch
                            (builtin "One Step Simplification" (formula "6"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "6"))
                           (rule "false_right" (formula "17"))
                           (rule "translateJavaMulInt" (formula "16") (term "1,1,0,1,1,0,0,1"))
                           (rule "translateJavaSubInt" (formula "16") (term "2,1,0,1,1,0,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,1,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,1,1,0,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "16") (term "0,0,2,1,0,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,0,2,1,0,1,1,0,0"))
                           (rule "notRight" (formula "13"))
                           (rule "close" (formula "15") (ifseqformula "1"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "6"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "6"))
                           (rule "false_right" (formula "17"))
                           (rule "translateJavaMulInt" (formula "16") (term "1,1,0,1,1,0,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,1,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "16") (term "2,1,0,1,1,0,0,1"))
                           (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,1,1,0,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "16") (term "0,0,2,1,0,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,0,2,1,0,1,1,0,0"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "15")))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                     (branch
                        (rule "andRight" (formula "14"))
                        (branch
                           (rule "close" (formula "14") (ifseqformula "2"))
                        )
                        (branch
                           (rule "wellFormedAnon" (formula "14"))
                            (builtin "One Step Simplification" (formula "6"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "6"))
                           (rule "false_right" (formula "17"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,1,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "16") (term "1,1,0,1,1,0,0,1"))
                           (rule "translateJavaSubInt" (formula "16") (term "2,1,0,1,1,0,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "16") (term "0,0,2,1,0,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,0,2,1,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,1,1,0,0,1"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "4")))
                           (rule "closeTrue" (formula "15"))
                        )
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "6"))
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "closeTrue" (formula "14"))
                  )
               )
               (branch
                   (opengoal " ")
               )
            )
            (branch "Case 2"
                (opengoal " ")
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "6"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "6"))
            (rule "false_right" (formula "17"))
            (rule "translateJavaMulInt" (formula "16") (term "1,1,0,1,1,0,0,1"))
            (rule "translateJavaMulInt" (formula "12") (term "1,1,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "16") (term "2,1,0,1,1,0,0,1"))
            (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "13") (term "1,1,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "13") (term "2,1,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "16") (term "0,0,2,1,0,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,2,1,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "13") (term "0,0,2,1,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,1,1,0,0,1"))
            (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "13") (term "0,2,1,0,1,1,0,0"))
            (rule "impRight" (formula "16"))
            (rule "andLeft" (formula "1"))
            (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
            (rule "polySimp_elimSub" (formula "14") (term "2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,2,1,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "15") (term "2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "15") (term "1,2,1,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,2,1,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,2,1,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "1,0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "1,0,2,1,0,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "0,2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "2,1,0,1,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,2,1,0,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "0,2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "2,1,0,1,1,0,0"))
            (rule "add_literals" (formula "15") (term "0,2,1,0,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "0,2,1,0,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,0,2,1,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "18") (term "2,1,0,1,1,0,0"))
            (rule "add_literals" (formula "18") (term "0,2,1,0,1,1,0,0"))
            (rule "castedGetAny" (formula "15") (term "2,0"))
            (rule "eqSymm" (formula "15"))
            (rule "castedGetAny" (formula "18") (term "2,0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "castedGetAny" (formula "3") (term "2,0"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "castedGetAny" (formula "15") (term "2,0"))
            (rule "eqSymm" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "15"))
            (rule "close" (formula "18") (ifseqformula "3"))
         )
      )
   )
   (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) = bucket) FALSE"
      (rule "ifthenelse_split" (formula "16") (term "1") (userinteraction))
      (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) @heap[anon( allLocs setMinus {(self_25.indices, arr(bucket))} cup arrayRange(self_25.buffer, javaMulInt(bucket, 256), javaSubInt(javaMulInt(javaAddInt(bucket, 1), 256), 1)) cup classifier.*, anon_heap<<anonHeapFunction>>)] = bucket) TRUE"
          (opengoal " ")
      )
      (branch "forall int i; ( 0 <= i & i < self_25.bufferAt(bucket).length -> classifier.classOf((int)(self_25.bufferAt(bucket)[i])) @heap[anon( allLocs setMinus {(self_25.indices, arr(bucket))} cup arrayRange(self_25.buffer, javaMulInt(bucket, 256), javaSubInt(javaMulInt(javaAddInt(bucket, 1), 256), 1)) cup classifier.*, anon_heap<<anonHeapFunction>>)] = bucket) FALSE"
          (builtin "One Step Simplification" (formula "5"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "closeTrue" (formula "17"))
      )
   )
)
)
}
