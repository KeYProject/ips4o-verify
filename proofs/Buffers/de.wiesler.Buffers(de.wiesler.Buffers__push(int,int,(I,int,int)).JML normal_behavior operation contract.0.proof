\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 06 21:17:21 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src/de/wiesler";

\proofObligation "#Proof Obligation Settings
#Thu Jan 06 21:17:21 CET 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:push(int,int,[I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:push(int,int,[I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "666bcb0c95"))

(autoModeTime "3339")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "1,1,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,2,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,2,1,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,1,0,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "2"))
(rule "notLeft" (formula "13"))
(rule "eqSymm" (formula "15") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "15") (term "1,0,0,1,1,1,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "15") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "15") (term "1,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addLiterals" (formula "15") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "15") (term "2,1,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "15") (term "1,2,1,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "11") (term "0"))
(rule "polySimp_mulComm0" (formula "15") (term "0,2,1,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "1,0,2,1,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "15") (term "0,2,1,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "15") (term "0,0,2,1,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "15") (term "2,1,0,2,0,0,0,0,1,0,1"))
(rule "add_literals" (formula "15") (term "0,2,1,0,2,0,0,0,0,1,0,1"))
(rule "eqSeqSingleton" (formula "15") (term "0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "elementOfUnion" (formula "15") (term "0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "15") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "15") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "15") (term "0,0,0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "15") (term "1,0,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_push,savedHeapBefore_push"))
 (builtin "One Step Simplification" (formula "15"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "buffer_offset"))
(rule "assignmentMultiplicationInt" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "translateJavaMulInt" (formula "15") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "index_1"))
(rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "assignment_array2" (formula "15"))
(branch "Normal Execution (x_arr != null)"
    (builtin "One Step Simplification" (formula "15"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "written"))
   (rule "assignment" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "lenNonNegative" (formula "10") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "qeq_literals" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "ifSplit" (formula "15"))
   (branch "if x true"
       (builtin "Block Contract (Internal)" (formula "16") (newnames "result#0,exc#1,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "6")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "14"))
         (rule "translateJavaAddInt" (formula "16") (term "0,1,0,0,1"))
         (rule "eqSymm" (formula "16") (term "0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "16") (term "0,1,0,0,1"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "exc#1_1"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "emptyStatement" (formula "16") (term "1"))
         (rule "emptyStatement" (formula "16") (term "1"))
         (rule "tryEmpty" (formula "16") (term "1"))
         (rule "blockEmptyLabel" (formula "16") (term "1"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "emptyModality" (formula "16") (term "1"))
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
      )
      (branch "Precondition"
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "6")))
               (rule "closeTrue" (formula "16"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                  (rule "closeTrue" (formula "16"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "4")))
               (rule "closeTrue" (formula "16"))
            )
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "polySimp_addComm0" (formula "15") (term "0"))
         (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "1"))
         (rule "elim_double_block_2" (formula "18") (term "1"))
         (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
         (rule "inequality_comparison_simple" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "ifSplit" (formula "18"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "18") (term "1"))
            (rule "methodCallUnfoldArguments" (formula "18") (term "1"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "var"))
            (rule "assignment_read_attribute_this" (formula "18"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_1"))
            (rule "assignment" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_2"))
            (rule "assignment" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_4"))
            (rule "assignment" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
             (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_copy,exc_25,heapAfter_copy,anon_heap_copy") (contract "de.wiesler.Functions[de.wiesler.Functions::copy([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (copy)"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,1,0,0"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "polySimp_elimSub" (formula "17") (term "2,1,0"))
               (rule "mul_literals" (formula "17") (term "1,2,1,0"))
               (rule "polySimp_addLiterals" (formula "17") (term "2,1,0"))
               (rule "polySimp_addComm0" (formula "17") (term "2,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment" (formula "22") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "assignment" (formula "22") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "eval_order_array_access1" (formula "22") (term "1") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "22") (term "1"))
               (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr_1"))
               (rule "assignment_read_attribute_this" (formula "22"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=de_wiesler_Buffers_buffer_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "4")))
               (rule "eval_order_array_access2" (formula "23") (term "1") (inst "#v0=x") (inst "#ar1=x_arr_2"))
               (rule "variableDeclarationAssign" (formula "23") (term "1"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr_2"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "variableDeclarationAssign" (formula "23") (term "1"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_2"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "19") (term "0,0"))
               (rule "assignmentAdditionInt" (formula "22") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,1,0"))
               (rule "assignment_to_primitive_array_component" (formula "22"))
               (branch "Normal Execution (x_arr_2 != null)"
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "eval_order_array_access1" (formula "22") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "22") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr_3"))
                  (rule "assignment_read_attribute_this" (formula "22"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "dismissNonSelectedField" (formula "22") (term "0,1,0"))
                  (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "4")))
                  (rule "eval_order_array_access3" (formula "23") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr_4"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr_4"))
                  (rule "assignment" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_3"))
                  (rule "assignment" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_4"))
                  (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "assignmentAdditionInt" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
                  (rule "add_zero_left" (formula "22") (term "0,1,0"))
                  (rule "assignment_to_primitive_array_component" (formula "22"))
                  (branch "Normal Execution (x_arr_4 != null)"
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "methodCallReturn" (formula "22") (term "1"))
                     (rule "assignment" (formula "22") (term "1"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "methodCallEmpty" (formula "22") (term "1"))
                     (rule "tryEmpty" (formula "22") (term "1"))
                     (rule "emptyModality" (formula "22") (term "1"))
                     (rule "andRight" (formula "22"))
                     (branch "Case 1"
                        (rule "andRight" (formula "22"))
                        (branch "Case 1"
                           (rule "andRight" (formula "22"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "closeTrue" (formula "22"))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "22"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=i_0"))
                                 (rule "impRight" (formula "22"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "polySimp_addComm0" (formula "24") (term "0,2,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1"))
                                 (rule "mul_literals" (formula "14") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_0"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
                                 (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "15") (term "0"))
                                 (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "19")) (ifInst ""  (formula "25")) (ifInst ""  (formula "7")) (ifInst ""  (formula "26")) (ifInst ""  (formula "19")))
                                 (rule "true_left" (formula "15"))
                                 (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "16") (term "0,0"))
                                 (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "7")) (ifInst ""  (formula "26")) (ifInst ""  (formula "19")))
                                 (rule "true_left" (formula "16"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "18") (inst "i=i") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "translateJavaMulInt" (formula "18") (term "1,1,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "18") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "16") (term "0,0") (inst "i=i") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "translateJavaMulInt" (formula "16") (term "0,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "16") (term "0,0,0"))
                                 (rule "translateJavaAddInt" (formula "16") (term "1,0,0"))
                                 (rule "lenOfSeqDef" (formula "16") (term "0"))
                                 (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "16") (term "0,1,0"))
                                 (rule "add_literals" (formula "16") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "16") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "16") (term "1,0"))
                                 (rule "ifEqualsInteger" (formula "16"))
                                 (rule "equal_literals" (formula "16") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "5")))
                                 (rule "inEqSimp_ltToLeq" (formula "16"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "5"))
                                 (rule "mul_literals" (formula "16") (term "1,0"))
                                 (rule "add_literals" (formula "16") (term "0"))
                                 (rule "leq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "15") (term "0") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "inEqSimp_commuteLeq" (formula "12"))
                                 (rule "inEqSimp_commuteLeq" (formula "13"))
                                 (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_commuteLeq" (formula "12"))
                                 (rule "inEqSimp_commuteLeq" (formula "11"))
                                 (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "11") (term "0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                 (rule "mul_literals" (formula "11") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "19"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0"))
                                 (rule "add_literals" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0"))
                                 (rule "commute_or" (formula "26") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "21") (term "0"))
                                 (rule "distr_forallAnd" (formula "21"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "commute_or" (formula "22") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "allLeft" (formula "21") (inst "t=bucket"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                                 (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "21") (term "1"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "allLeft" (formula "27") (inst "t=i_0"))
                                 (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1"))
                                 (rule "replaceKnownSelect_taclet01000001200_6" (formula "27") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01000001200_7" (formula "27") (term "0,1"))
                                 (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "27") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "27"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "22"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "22"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_ltToLeq" (formula "8"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                       (rule "mul_literals" (formula "12") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
                                       (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "11"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")))
                                       (rule "andLeft" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "qeq_literals" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                                       (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "21")) (ifInst ""  (formula "2")) (ifInst ""  (formula "22")) (ifInst ""  (formula "14")))
                                       (rule "true_left" (formula "11"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "22") (term "0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "notLeft" (formula "14"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
                                       (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
                                       (rule "lenOfSeqDef" (formula "12") (term "0"))
                                       (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
                                       (rule "add_literals" (formula "12") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "12") (term "1,0"))
                                       (rule "ifEqualsInteger" (formula "12"))
                                       (rule "equal_literals" (formula "12") (term "1,1"))
                                        (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_ltToLeq" (formula "12"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0"))
                                       (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                       (rule "mul_literals" (formula "12") (term "1,0"))
                                       (rule "add_literals" (formula "12") (term "0"))
                                       (rule "leq_literals" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "eqSymm" (formula "22"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                                       (rule "times_zero_1" (formula "9") (term "0,0"))
                                       (rule "add_zero_left" (formula "9") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "mul_literals" (formula "9") (term "1"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "inEqSimp_commuteLeq" (formula "13"))
                                       (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "30") (term "0,0") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "translateJavaAddInt" (formula "30") (term "1,0,0"))
                                       (rule "translateJavaMulInt" (formula "30") (term "0,0,0"))
                                       (rule "translateJavaMulInt" (formula "30") (term "0,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "30") (term "1,2,0,0"))
                                       (rule "dismissNonSelectedField" (formula "30") (term "1,1,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "30") (term "1,2,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "30") (term "1,2,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "30") (term "1,2,0,0"))
                                       (rule "dismissNonSelectedField" (formula "30") (term "1,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "30") (term "1,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "30") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "30") (term "0"))
                                       (rule "polySimp_elimSub" (formula "30") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                                       (rule "polySimp_addComm1" (formula "30") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "30") (term "0,1,0"))
                                       (rule "add_literals" (formula "30") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "30") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "30") (term "1,0"))
                                       (rule "ifEqualsInteger" (formula "30"))
                                       (rule "equal_literals" (formula "30") (term "1,1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0,0"))
                                       (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "0,0"))
                                       (rule "pullOutSelect" (formula "30") (term "0,1") (inst "selectSK=arr_0"))
                                       (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "31") (term "0,1") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "31"))
                                       (rule "closeTrue" (formula "31"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1"))
                                       (rule "mul_literals" (formula "12") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")))
                                       (rule "true_left" (formula "11"))
                                       (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
                                       (rule "replace_known_left" (formula "10") (term "0,0,0,0,0") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "14")))
                                       (rule "true_left" (formula "10"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")))
                                       (rule "andLeft" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "qeq_literals" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "22") (term "0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "22") (term "0,0") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "translateJavaMulInt" (formula "22") (term "0,0,0"))
                                       (rule "translateJavaAddInt" (formula "22") (term "1,0,0"))
                                       (rule "translateJavaMulInt" (formula "22") (term "0,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,2,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,2,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "22") (term "1,2,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "22") (term "1,2,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "1,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "1,1,1,0,0"))
                                       (rule "getOfSeqDef" (formula "22") (term "0"))
                                       (rule "castDel" (formula "22") (term "2,0"))
                                       (rule "castDel" (formula "22") (term "1,0"))
                                       (rule "leq_literals" (formula "22") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "add_zero_left" (formula "22") (term "0,2,1,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "22") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                       (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                                       (rule "elimGcdEq" (formula "1") (term "1,0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(5(5(2(#))))"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,1,0,1,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "0,0,1,1,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "leq_literals" (formula "1") (term "0,0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "23") (term "0,0,0") (inst "selectSK=arr_1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_2"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "15") (inst "i=i") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "translateJavaMulInt" (formula "15") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "eqSymm" (formula "26"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "22"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "allRight" (formula "22") (inst "sk=b_0"))
                                       (rule "impRight" (formula "22"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "eqSymm" (formula "22"))
                                       (rule "dismissNonSelectedField" (formula "2") (term "1"))
                                       (rule "dismissNonSelectedField" (formula "2") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1"))
                                       (rule "mul_literals" (formula "14") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                                       (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=de_wiesler_Buffers_buckets_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")) (ifInst ""  (formula "6")))
                                       (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "22")))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0"))
                                       (rule "qeq_literals" (formula "13") (term "0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "13") (term "0"))
                                       (rule "replace_known_right" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "25")) (ifInst ""  (formula "16")))
                                       (rule "true_left" (formula "13"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "14") (term "0,0"))
                                       (rule "replace_known_left" (formula "14") (term "0,0,0,0") (ifseqformula "16"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "25")) (ifInst ""  (formula "16")))
                                       (rule "true_left" (formula "14"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "25") (term "0,1,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "25") (term "0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "25") (term "0,1,1,0,1"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "25") (term "0,0,1,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "14") (term "0,0") (inst "i=i") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "translateJavaAddInt" (formula "14") (term "1,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "14") (term "0"))
                                       (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,0"))
                                       (rule "add_literals" (formula "14") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "14") (term "1,0"))
                                       (rule "ifEqualsInteger" (formula "14"))
                                       (rule "equal_literals" (formula "14") (term "1,1"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "3")))
                                       (rule "inEqSimp_ltToLeq" (formula "14"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0"))
                                       (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "14") (term "1,0"))
                                       (rule "add_literals" (formula "14") (term "0"))
                                       (rule "leq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "notLeft" (formula "14"))
                                       (rule "eqSymm" (formula "26"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "17") (term "0"))
                                       (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                       (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "13") (term "0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "eqSymm" (formula "24"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "31") (term "0,1,1,0,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "21"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "20")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "21"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "inEqSimp_commuteLeq" (formula "13"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "20"))
                                       (rule "mul_literals" (formula "11") (term "0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "commute_or" (formula "24") (term "0,0"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "33") (term "0,0,0") (inst "i=i") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "translateJavaMulInt" (formula "33") (term "0,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "33") (term "1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "33") (term "0,1,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "33") (term "1,2,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "33") (term "1,2,0,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "33") (term "1,2,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "33") (term "1,2,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                       (rule "add_zero_left" (formula "33") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0"))
                                       (rule "pullOutSelect" (formula "33") (term "1,0,0") (inst "selectSK=arr_0"))
                                       (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                       (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "18") (term "0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "19"))
                                       (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "20"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "37") (term "0,0,1,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "37")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "37") (term "0,1,1,0,1"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "37")))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "37") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "37")))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "37") (term "0,1,1,0,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "37"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "26")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "cnf_rightDist" (formula "22") (term "0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "38") (term "0,1,1,0,1") (inst "i=i") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,1,0,1,1,0,1"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,0,1,1,0,1"))
                                       (rule "translateJavaAddInt" (formula "38") (term "1,0,1,1,0,1"))
                                       (rule "eqSymm" (formula "38") (term "1,0,1"))
                                       (rule "getOfSeqDef" (formula "38") (term "0,1,0,1"))
                                       (rule "castDel" (formula "38") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "38") (term "1,0,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "38") (term "0,2,1,0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_pullOutFactor0" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                       (rule "add_literals" (formula "38") (term "1,0,1,1,0,0,1,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                       (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,1,0,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "27")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "38")))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,1,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "27")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "commute_or" (formula "23") (term "0"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "38") (term "0,1,0") (inst "i=i") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,1,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "38") (term "1,0,1,0"))
                                       (rule "eqSymm" (formula "38") (term "0"))
                                       (rule "lenOfSeqDef" (formula "38") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "38") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                       (rule "add_zero_left" (formula "38") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "38") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "0,0,0,0"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,1,0,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "38")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,1,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "38")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "38") (term "0,1,1,0,0,1") (inst "i=i") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,1,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,0,1,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "38") (term "1,0,1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,2,0,1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,1,1,0,1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,2,0,1,1,0,0,1"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "38") (term "1,2,0,1,1,0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "38") (term "1,2,0,1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,1,1,0,1,1,0,0,1"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "38") (term "1,1,1,0,1,1,0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "38") (term "1,1,1,0,1,1,0,0,1"))
                                       (rule "replaceKnownSelect_taclet0111000001200_6" (formula "38") (term "1,1,0,1,1,0,0,1"))
                                       (rule "polySimp_addComm0" (formula "38") (term "1,0,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "38") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,1,0,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "38") (term "1,1,1,0,0,1"))
                                       (rule "add_literals" (formula "38") (term "1,1,1,1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "38") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,1,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,1,0,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,1,1,0,0,1"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "38") (term "0,0,1,1,0,0,1"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "38") (term "0,1,1,0,1"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                                       (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "27")))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "38") (term "0,1,1,0,1") (inst "i=i") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "translateJavaAddInt" (formula "38") (term "1,0,1,1,0,1"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,0,1,1,0,1"))
                                       (rule "translateJavaMulInt" (formula "38") (term "0,1,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,2,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,2,0,1,1,0,1"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "38") (term "1,2,0,1,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "38") (term "1,2,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "replaceKnownSelect_taclet0111000001200_6" (formula "38") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "38") (term "1,0,1,1,0,1"))
                                       (rule "getOfSeqDef" (formula "38") (term "1,1,0,1"))
                                       (rule "castDel" (formula "38") (term "2,1,1,0,1"))
                                       (rule "castDel" (formula "38") (term "1,1,1,0,1"))
                                       (rule "eqSymm" (formula "38") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "add_literals" (formula "38") (term "1,1,1,1,0,0,1,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                       (rule "add_zero_right" (formula "38") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "38") (term "0,2,1,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "38") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "self.indices.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "39") (term "0,0,1,1,0,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "39") (term "1,1,1,0,1,1,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "39") (term "1,1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "39") (term "0,0,1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "allRight" (formula "39") (inst "sk=iv_0"))
                                          (rule "orRight" (formula "39"))
                                          (rule "orRight" (formula "39"))
                                          (rule "applyEqReverse" (formula "40") (term "1,1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "inEqSimp_leqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "40") (term "0,0,1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_geqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                          (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                          (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_1"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "eqSymm" (formula "41"))
                                          (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "ifthenelse_negated" (formula "1") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
                                          (rule "true_left" (formula "9"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "1,1,1,0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.indices[b_0] >= 1 TRUE"
                                             (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "3")))
                                             (rule "allLeft" (formula "28") (inst "t=b_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "28") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                                             (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0"))
                                             (rule "leq_literals" (formula "28") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                             (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0"))
                                             (rule "allLeft" (formula "30") (inst "t=bucket"))
                                             (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                                             (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "10"))
                                             (rule "leq_literals" (formula "30") (term "1"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "allLeft" (formula "28") (inst "t=bucket"))
                                             (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                             (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "28") (term "1"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch "iv_0 = b_0 * -256 + bucket * 256 TRUE"
                                                (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "applyEq" (formula "46") (term "1,0,2,0") (ifseqformula "1"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,2,0"))
                                                (rule "polySimp_pullOutFactor0" (formula "46") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "46") (term "1,0,0,2,0"))
                                                (rule "times_zero_1" (formula "46") (term "0,0,2,0"))
                                                (rule "add_zero_left" (formula "46") (term "0,2,0"))
                                                (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "1"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq0" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=b_0") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(6(5(2(#))))"))
                                                (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "5") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                                (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "5") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                                (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "5") (term "0,0"))
                                                (rule "leq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "inEqSimp_strengthen1" (formula "5") (ifseqformula "43"))
                                                (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "5"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "43") (term "0,0"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "false_right" (formula "43"))
                                                (rule "inEqSimp_contradInEq5" (formula "3") (ifseqformula "5"))
                                                (rule "greater_literals" (formula "3") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                (rule "mul_literals" (formula "3") (term "0,1"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_zero_right" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "iv_0 = b_0 * -256 + bucket * 256 FALSE"
                                                (rule "close" (formula "47") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "self.indices[b_0] >= 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0"))
                                             (rule "add_zero_right" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                       (branch "self.indices.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "34"))
                                          (rule "close" (formula "30") (ifseqformula "6"))
                                       )
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1"))
                                       (rule "mul_literals" (formula "12") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                       (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
                                       (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "11"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")))
                                       (rule "andLeft" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "qeq_literals" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                                       (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "22")) (ifInst ""  (formula "14")))
                                       (rule "true_left" (formula "11"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "22") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "translateJavaMulInt" (formula "22") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "22") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                                       (rule "eqSymm" (formula "22") (term "0,1,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,0,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,1,0,1"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "1,0,1,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "1,0,1,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,0,1,0,1"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "1,1,0,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "1,1,0,1,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "0,0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "0,0,1,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,1,0,0,1"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "22") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "22") (term "0,0,1,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "1,0,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet01200_0" (formula "22") (term "1,0,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet01200_1" (formula "22") (term "1,0,1,0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,0,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet001200_2" (formula "22") (term "0,0,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet001200_3" (formula "22") (term "0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                                       (rule "pullOutSelect" (formula "22") (term "1,0,1,0") (inst "selectSK=de_wiesler_Buffers_buckets_0"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "4")))
                                       (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "23") (term "1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "23") (term "1,0,1,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "nnf_imp2or" (formula "22") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "14"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "replace_known_right" (formula "28") (term "0,1,0,0,0,0,0") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "eqSymm" (formula "22"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "11") (term "0,0") (inst "i=i") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "translateJavaAddInt" (formula "11") (term "1,0,0"))
                                       (rule "translateJavaMulInt" (formula "11") (term "0,0,0"))
                                       (rule "translateJavaMulInt" (formula "11") (term "0,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "11") (term "0"))
                                       (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
                                       (rule "add_literals" (formula "11") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "11") (term "1,0"))
                                       (rule "ifEqualsInteger" (formula "11"))
                                       (rule "equal_literals" (formula "11") (term "1,1"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_ltToLeq" (formula "11"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "1"))
                                       (rule "mul_literals" (formula "11") (term "1,0"))
                                       (rule "add_literals" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "18"))
                                       (rule "times_zero_1" (formula "9") (term "0,0"))
                                       (rule "add_zero_left" (formula "9") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "mul_literals" (formula "9") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "inEqSimp_commuteLeq" (formula "15"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "32") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "17")))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0"))
                                       (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "16"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "allRight" (formula "32") (inst "sk=i_0"))
                                       (rule "orRight" (formula "32"))
                                       (rule "orRight" (formula "32"))
                                       (rule "inEqSimp_geqRight" (formula "33"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "33"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "34") (term "0,0") (inst "selectSK=arr_0"))
                                       (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                                       (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "21"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "add_literals" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "cnf_rightDist" (formula "23") (term "0"))
                                       (rule "distr_forallAnd" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "commute_or" (formula "24") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "self.indices.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                          (rule "allLeft" (formula "24") (inst "t=i_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "24") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "25") (inst "t=bucket"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                          (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "25") (term "1"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "allLeft" (formula "26") (inst "t=bucket"))
                                          (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                          (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "26") (term "1"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "allLeft" (formula "26") (inst "t=i_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "26") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "26") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "i_0 = bucket TRUE"
                                             (rule "applyEqReverse" (formula "42") (term "0,0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "42") (term "0"))
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "3"))
                                             (rule "leq_literals" (formula "42"))
                                             (rule "closeTrue" (formula "42"))
                                          )
                                          (branch "i_0 = bucket FALSE"
                                             (rule "applyEqReverse" (formula "42") (term "0,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "42") (term "0,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "25")))
                                             (rule "closeTrue" (formula "41"))
                                          )
                                       )
                                       (branch "self.indices.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "34"))
                                          (rule "close" (formula "31") (ifseqformula "7"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "closeTrue" (formula "22"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "allRight" (formula "22") (inst "sk=f_0"))
                        (rule "allRight" (formula "22") (inst "sk=o_0"))
                        (rule "orRight" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "eqSymm" (formula "26"))
                        (rule "eqSymm" (formula "24") (term "0,0,0,1"))
                        (rule "eqSymm" (formula "23") (term "0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1"))
                        (rule "mul_literals" (formula "12") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                        (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "26"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                        (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "19") (term "0"))
                        (rule "nnf_notAnd" (formula "19") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                        (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                        (rule "replace_known_left" (formula "11") (term "0,0,0,0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "22")) (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "11"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0"))
                        (rule "qeq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "13") (term "0,0"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")))
                        (rule "true_left" (formula "13"))
                        (rule "commute_and" (formula "23"))
                        (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "12") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "13"))
                        (rule "notLeft" (formula "12"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "20"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "notLeft" (formula "13"))
                        (rule "eqSymm" (formula "25"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                        (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
                        (rule "lenOfSeqDef" (formula "12") (term "0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,0"))
                        (rule "add_zero_left" (formula "12") (term "1,0"))
                        (rule "ifEqualsInteger" (formula "12"))
                        (rule "equal_literals" (formula "12") (term "1,1"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0"))
                        (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "2"))
                        (rule "mul_literals" (formula "12") (term "1,0"))
                        (rule "add_literals" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                        (rule "mul_literals" (formula "10") (term "0,0"))
                        (rule "add_zero_left" (formula "10") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "10"))
                        (rule "leq_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "commute_or" (formula "23") (term "0,0"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "commute_and" (formula "1") (term "0,0"))
                        (rule "cnf_rightDist" (formula "19") (term "0"))
                        (rule "distr_forallAnd" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "commute_or" (formula "20") (term "0"))
                        (rule "cut_direct" (formula "37") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "false_right" (formula "38"))
                           (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "35") (term "0,1") (ifseqformula "1"))
                           (rule "eqSymm" (formula "35") (term "1"))
                           (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEqRigid" (formula "35") (term "0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "notRight" (formula "38"))
                           (rule "cut_direct" (formula "37") (term "0"))
                           (branch "CUT: o_0 = values TRUE"
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "1"))
                              (rule "eqSymm" (formula "35") (term "1"))
                              (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "false_right" (formula "35"))
                              (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "35") (term "0"))
                              (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "false_right" (formula "35"))
                              (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "2") (term "1,0,0"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "CUT: o_0 = values FALSE"
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "false_right" (formula "38"))
                              (rule "cut_direct" (formula "36") (term "0"))
                              (branch "CUT: o_0 = self.buffer TRUE"
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "36") (term "1"))
                                 (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "false_right" (formula "36"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "f_0 = arr(bucket * 256) TRUE"
                                    (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "4"))
                                    (rule "narrowSelectArrayType" (formula "37") (term "0") (ifseqformula "6") (ifseqformula "30"))
                                    (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "f_0 = arr(bucket * 256) FALSE"
                                    (rule "close" (formula "38") (ifseqformula "4"))
                                 )
                              )
                              (branch "CUT: o_0 = self.buffer FALSE"
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "false_right" (formula "37"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Null Reference (x_arr_4 = null)"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "false_right" (formula "23"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "mul_literals" (formula "13") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "nnf_imp2or" (formula "19") (term "0"))
                     (rule "nnf_notAnd" (formula "19") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "17"))
                     (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "13") (term "0,0"))
                     (rule "replace_known_left" (formula "13") (term "0,0,0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "12") (term "0,0,0,0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "22")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "12"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                     (rule "closeFalse" (formula "14"))
                  )
                  (branch "Index Out of Bounds (x_arr_4 != null, but x_3 Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "false_right" (formula "23"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_imp2or" (formula "19") (term "0"))
                     (rule "nnf_notAnd" (formula "19") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                     (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
                     (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "12"))
                     (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "22")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")))
                     (rule "true_left" (formula "11"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "17"))
                     (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "21")))
                     (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "notLeft" (formula "14"))
                     (rule "notLeft" (formula "14"))
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "nnf_imp2or" (formula "16") (term "0"))
                     (rule "nnf_notAnd" (formula "16") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                     (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
                     (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
                     (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
                     (rule "lenOfSeqDef" (formula "12") (term "0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
                     (rule "add_literals" (formula "12") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "12") (term "0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,0"))
                     (rule "ifEqualsInteger" (formula "12"))
                     (rule "equal_literals" (formula "12") (term "1,1"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "2"))
                     (rule "mul_literals" (formula "12") (term "1,0"))
                     (rule "add_literals" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "notLeft" (formula "12"))
                     (rule "notLeft" (formula "11"))
                     (rule "eqSymm" (formula "22"))
                     (rule "eqSymm" (formula "21"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "18"))
                     (rule "times_zero_1" (formula "9") (term "0,0"))
                     (rule "add_zero_left" (formula "9") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
                     (rule "leq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
               )
               (branch "Null Reference (x_arr_2 = null)"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0"))
                  (rule "applyEq" (formula "20") (term "1,1,1,0") (ifseqformula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                  (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                  (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "14")))
                  (rule "true_left" (formula "11"))
                  (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "13") (term "0,0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,0,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "13"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                  (rule "closeFalse" (formula "14"))
               )
               (branch "Index Out of Bounds (x_arr_2 != null, but x_2 Out of Bounds!)"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "false_right" (formula "23"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                  (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "1") (term "1,1,0,1"))
                  (rule "greater_literals" (formula "1") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                  (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                  (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "22")) (ifInst ""  (formula "3")) (ifInst ""  (formula "23")) (ifInst ""  (formula "14")))
                  (rule "true_left" (formula "11"))
                  (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
                  (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "14")))
                  (rule "true_left" (formula "12"))
                  (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "13") (term "0,0") (inst "i=i") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,0,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "1,0,0"))
                  (rule "lenOfSeqDef" (formula "13") (term "0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0"))
                  (rule "add_literals" (formula "13") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "13") (term "0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "1,0"))
                  (rule "ifEqualsInteger" (formula "13"))
                  (rule "equal_literals" (formula "13") (term "1,1"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "2")))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "13") (term "1,0"))
                  (rule "add_literals" (formula "13") (term "0"))
                  (rule "leq_literals" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "12") (term "0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "notLeft" (formula "13"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSymm" (formula "19"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "12") (inst "i=i") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")))
                  (rule "translateJavaMulInt" (formula "12") (term "1,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                  (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "leq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "nnf_imp2or" (formula "14") (term "0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                  (rule "times_zero_1" (formula "9") (term "0,0"))
                  (rule "add_zero_left" (formula "9") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "commute_or" (formula "22") (term "0,0"))
                  (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "closeFalse" (formula "8"))
               )
            )
            (branch "Exceptional Post (copy)"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,1,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0,1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0"))
               (rule "andLeft" (formula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "18"))
               (rule "close" (formula "21") (ifseqformula "20"))
            )
            (branch "Pre (copy)"
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,0,1,1,0"))
               (rule "leq_literals" (formula "18") (term "0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "polySimp_addComm0" (formula "18") (term "0,1,0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq1" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "polySimp_rightDist" (formula "12") (term "1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
               (rule "mul_literals" (formula "12") (term "0,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1"))
               (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0") (ifseqformula "7"))
               (rule "greater_literals" (formula "17") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0"))
               (rule "leq_literals" (formula "17") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
               (rule "replace_known_right" (formula "10") (term "0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "13")))
               (rule "true_left" (formula "10"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "qeq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
               (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
               (rule "true_left" (formula "12"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "13"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "13"))
               (rule "eqSymm" (formula "21"))
               (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "13"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0"))
               (rule "elimGcdLeq" (formula "24") (term "0,0") (inst "elimGcdRightDiv=Z(5(5(2(#))))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
               (rule "sub_literals" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "24") (term "0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "24") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "24") (term "1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "24") (term "0,1,0,0,0"))
               (rule "qeq_literals" (formula "24") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0,0"))
               (rule "add_literals" (formula "24") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
               (rule "leq_literals" (formula "24") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "nnf_imp2or" (formula "16") (term "0"))
               (rule "nnf_notAnd" (formula "16") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
               (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
               (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
               (rule "lenOfSeqDef" (formula "12") (term "0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "1,0"))
               (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
               (rule "add_literals" (formula "12") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "0,1,0"))
               (rule "add_zero_left" (formula "12") (term "1,0"))
               (rule "ifEqualsInteger" (formula "12"))
               (rule "equal_literals" (formula "12") (term "1,1"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
               (rule "mul_literals" (formula "12") (term "1,0"))
               (rule "add_literals" (formula "12") (term "0"))
               (rule "leq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "eqSymm" (formula "18"))
               (rule "eqSymm" (formula "17"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "replace_known_left" (formula "26") (term "0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "18"))
               (rule "times_zero_1" (formula "9") (term "0,0"))
               (rule "add_zero_left" (formula "9") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "add_literals" (formula "8") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "28") (term "0,0") (ifseqformula "8"))
               (rule "leq_literals" (formula "28") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "cnf_rightDist" (formula "18") (term "0"))
               (rule "distr_forallAnd" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "commute_or" (formula "19") (term "0"))
               (rule "commute_and" (formula "29"))
               (rule "arrayLengthNotNegative" (formula "15") (term "0"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "arrayLengthNotNegative" (formula "14") (term "0"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "allLeft" (formula "19") (inst "t=bucket"))
               (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
               (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "1"))
               (rule "leq_literals" (formula "19") (term "1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "allLeft" (formula "18") (inst "t=bucket"))
               (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
               (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "arrayLengthNotNegative" (formula "13") (term "0"))
               (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "cut_direct" (formula "30") (term "1"))
               (branch "CUT: values.length >= 256 + write TRUE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "27"))
                  (rule "close" (formula "31") (ifseqformula "3"))
               )
               (branch "CUT: values.length >= 256 + write FALSE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "false_right" (formula "31"))
                  (rule "inEqSimp_geqRight" (formula "30"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "14") (term "0,0"))
                  (rule "add_zero_left" (formula "14") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1"))
                  (rule "mul_literals" (formula "15") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "15"))
                  (rule "andLeft" (formula "24"))
                  (rule "inEqSimp_homoInEq1" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "1,1,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0"))
                  (rule "add_literals" (formula "24") (term "0"))
                  (rule "leq_literals" (formula "24"))
                  (rule "closeFalse" (formula "24"))
               )
            )
         )
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "eval_order_array_access1" (formula "16") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_1"))
      (rule "assignment_read_attribute_this" (formula "16"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "eval_order_array_access2" (formula "16") (term "1") (inst "#v0=x") (inst "#ar1=x_arr_2"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_2"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
      (rule "assignmentAdditionInt" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
      (rule "assignment_to_primitive_array_component" (formula "16"))
      (branch "Normal Execution (x_arr_2 != null)"
          (builtin "One Step Simplification" (formula "16"))
         (rule "eval_order_array_access1" (formula "16") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_3"))
         (rule "assignment_read_attribute_this" (formula "16"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "dismissNonSelectedField" (formula "16") (term "0,1,0"))
         (rule "eval_order_array_access3" (formula "16") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr_4"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_4"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
         (rule "assignmentAdditionInt" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
         (rule "assignment_to_primitive_array_component" (formula "16"))
         (branch "Normal Execution (x_arr_4 != null)"
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "tryEmpty" (formula "16") (term "1"))
            (rule "emptyModality" (formula "16") (term "1"))
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1"))
                     (rule "mul_literals" (formula "11") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                     (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "9") (term "0"))
                     (rule "replace_known_right" (formula "9") (term "0,1,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")) (ifInst ""  (formula "15")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "13")))
                     (rule "true_left" (formula "9"))
                     (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "10") (term "0,0"))
                     (rule "replace_known_left" (formula "10") (term "0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
                     (rule "true_left" (formula "10"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "qeq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "10") (term "0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "notLeft" (formula "11"))
                     (rule "notLeft" (formula "10"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "13"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "12") (inst "i=i") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "translateJavaMulInt" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "notLeft" (formula "14"))
                     (rule "notLeft" (formula "13"))
                     (rule "notLeft" (formula "12"))
                     (rule "eqSymm" (formula "18"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "10") (term "0,0") (inst "i=i") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0"))
                     (rule "translateJavaMulInt" (formula "10") (term "0,0,0"))
                     (rule "translateJavaAddInt" (formula "10") (term "1,0,0"))
                     (rule "lenOfSeqDef" (formula "10") (term "0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0"))
                     (rule "add_literals" (formula "10") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "0,1,0"))
                     (rule "add_zero_left" (formula "10") (term "1,0"))
                     (rule "ifEqualsInteger" (formula "10"))
                     (rule "equal_literals" (formula "10") (term "1,1"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")))
                     (rule "closeFalse" (formula "10"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "16"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "allRight" (formula "16") (inst "sk=i_0"))
                        (rule "impRight" (formula "16"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,2,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                        (rule "mul_literals" (formula "13") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                        (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "19"))
                        (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                        (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "14") (term "0,0"))
                        (rule "replace_known_right" (formula "14") (term "0,1,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "14"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "14") (term "0"))
                        (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "20")) (ifInst ""  (formula "6")) (ifInst ""  (formula "21")) (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "14"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "i=i") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "eqSymm" (formula "23"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "14") (term "0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "20"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "26"))
                        (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
                        (rule "lenOfSeqDef" (formula "12") (term "0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,0"))
                        (rule "add_zero_left" (formula "12") (term "1,0"))
                        (rule "ifEqualsInteger" (formula "12"))
                        (rule "equal_literals" (formula "12") (term "1,1"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "23")))
                        (rule "closeFalse" (formula "12"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "16"))
                        (branch "Case 1"
                           (rule "andRight" (formula "16"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1"))
                              (rule "polySimp_rightDist" (formula "11") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                              (rule "mul_literals" (formula "11") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                              (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "9") (term "0"))
                              (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")) (ifInst ""  (formula "15")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
                              (rule "true_left" (formula "9"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "10") (term "0,0"))
                              (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
                              (rule "true_left" (formula "10"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "17") (term "0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "11") (term "0,0") (inst "i=i") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaAddInt" (formula "11") (term "1,0,0"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,0,0"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,1,0,0"))
                              (rule "lenOfSeqDef" (formula "11") (term "0"))
                              (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "11") (term "1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
                              (rule "add_literals" (formula "11") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "11") (term "0,1,0"))
                              (rule "add_zero_left" (formula "11") (term "1,0"))
                              (rule "ifEqualsInteger" (formula "11"))
                              (rule "equal_literals" (formula "11") (term "1,1"))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")))
                              (rule "closeFalse" (formula "11"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1"))
                              (rule "polySimp_rightDist" (formula "11") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                              (rule "mul_literals" (formula "11") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
                              (rule "replace_known_left" (formula "10") (term "0,0,0,0,0") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "16")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
                              (rule "true_left" (formula "10"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
                              (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
                              (rule "true_left" (formula "11"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "17") (term "0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "17") (term "0,0") (inst "i=i") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0"))
                              (rule "translateJavaMulInt" (formula "17") (term "0,0,0"))
                              (rule "translateJavaAddInt" (formula "17") (term "1,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,2,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,2,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "17") (term "0"))
                              (rule "castDel" (formula "17") (term "2,0"))
                              (rule "castDel" (formula "17") (term "1,0"))
                              (rule "leq_literals" (formula "17") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "add_zero_left" (formula "17") (term "0,2,1,0"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "17") (term "0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "17") (term "1,0") (inst "selectSK=arr_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                              (rule "elimGcdEq" (formula "1") (term "1,0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(5(5(2(#))))"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "add_zero_left" (formula "1") (term "0,1,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "0,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "0,0,1,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "times_zero_1" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "qeq_literals" (formula "1") (term "1,0,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "leq_literals" (formula "1") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "18") (term "0,0,0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "19") (term "0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_invertInEq0" (formula "18") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                              (rule "times_zero_2" (formula "18") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "polySimp_invertEq" (formula "1") (term "0,0"))
                              (rule "times_zero_2" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "13") (term "0,0") (inst "i=i") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "translateJavaAddInt" (formula "13") (term "1,0,0"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,0,0"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0"))
                              (rule "lenOfSeqDef" (formula "13") (term "0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0"))
                              (rule "add_literals" (formula "13") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "13") (term "0,1,0"))
                              (rule "add_zero_left" (formula "13") (term "1,0"))
                              (rule "ifEqualsInteger" (formula "13"))
                              (rule "equal_literals" (formula "13") (term "1,1"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "16")))
                              (rule "closeFalse" (formula "13"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "16"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "allRight" (formula "16") (inst "sk=b_0"))
                              (rule "impRight" (formula "16"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "15"))
                              (rule "dismissNonSelectedField" (formula "2") (term "1"))
                              (rule "dismissNonSelectedField" (formula "2") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1"))
                              (rule "polySimp_rightDist" (formula "13") (term "1"))
                              (rule "mul_literals" (formula "13") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "19") (inst "iv=iv"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "19") (term "0,1"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,1"))
                              (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
                              (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")) (ifInst ""  (formula "18")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "19")))
                              (rule "true_left" (formula "11"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
                              (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "19")))
                              (rule "true_left" (formula "12"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "17")))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "15"))
                              (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                              (rule "add_literals" (formula "12") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0"))
                              (rule "qeq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "20") (term "0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "20") (term "0,1,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "16")))
                              (rule "true_left" (formula "1"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "20") (term "0,1,1,0,1"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "5")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
                              (rule "true_left" (formula "1"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "20") (term "0,0,1,0,1"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "20") (term "0,1,1,0,0,1"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "12") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "eqSymm" (formula "16"))
                              (rule "eqSymm" (formula "15"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
                              (rule "lenOfSeqDef" (formula "12") (term "0"))
                              (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "add_zero_left" (formula "12") (term "1,0"))
                              (rule "ifEqualsInteger" (formula "12"))
                              (rule "equal_literals" (formula "12") (term "1,1"))
                               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
                              (rule "closeFalse" (formula "12"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1"))
                              (rule "polySimp_rightDist" (formula "11") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                              (rule "mul_literals" (formula "11") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "10") (term "0,0"))
                              (rule "replace_known_left" (formula "10") (term "0,0,0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
                              (rule "true_left" (formula "10"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
                              (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
                              (rule "true_left" (formula "10"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "i=i") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,0"))
                              (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                              (rule "eqSymm" (formula "17") (term "0,1,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "17") (term "0,1"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0,1"))
                              (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "10") (term "0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "11"))
                              (rule "notLeft" (formula "10"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "13"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "12") (inst "i=i") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "translateJavaMulInt" (formula "12") (term "1,1,0,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "notLeft" (formula "13"))
                              (rule "andLeft" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "eqSymm" (formula "18"))
                              (rule "replace_known_right" (formula "24") (term "0,0,0,0,0,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "16")) (ifInst ""  (formula "18")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "10") (term "0,0") (inst "i=i") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "translateJavaMulInt" (formula "10") (term "0,0,0"))
                              (rule "translateJavaAddInt" (formula "10") (term "1,0,0"))
                              (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0"))
                              (rule "lenOfSeqDef" (formula "10") (term "0"))
                              (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "10") (term "1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0"))
                              (rule "add_literals" (formula "10") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "10") (term "0,1,0"))
                              (rule "add_zero_left" (formula "10") (term "1,0"))
                              (rule "ifEqualsInteger" (formula "10"))
                              (rule "equal_literals" (formula "10") (term "1,1"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")))
                              (rule "closeFalse" (formula "10"))
                           )
                        )
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "16"))
               (rule "allRight" (formula "16") (inst "sk=f_0"))
               (rule "allRight" (formula "16") (inst "sk=o_0"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "eqSymm" (formula "20"))
               (rule "eqSymm" (formula "18") (term "0,0,0,1"))
               (rule "eqSymm" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1"))
               (rule "polySimp_rightDist" (formula "11") (term "1"))
               (rule "mul_literals" (formula "11") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1"))
               (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "21"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
               (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
               (rule "true_left" (formula "11"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "qeq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
               (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")) (ifInst ""  (formula "17")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "18")))
               (rule "true_left" (formula "11"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "eqSymm" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
               (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
               (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
               (rule "lenOfSeqDef" (formula "12") (term "0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "1,0"))
               (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
               (rule "add_literals" (formula "12") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "0,1,0"))
               (rule "add_zero_left" (formula "12") (term "1,0"))
               (rule "ifEqualsInteger" (formula "12"))
               (rule "equal_literals" (formula "12") (term "1,1"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")))
               (rule "closeFalse" (formula "12"))
            )
         )
         (branch "Null Reference (x_arr_4 = null)"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "inEqSimp_ltToLeq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1"))
            (rule "polySimp_rightDist" (formula "12") (term "1"))
            (rule "mul_literals" (formula "12") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1"))
            (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
            (rule "replace_known_right" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
            (rule "true_left" (formula "10"))
            (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
            (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
            (rule "true_left" (formula "11"))
            (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "qeq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
            (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
            (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
            (rule "lenOfSeqDef" (formula "12") (term "0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "1,0"))
            (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
            (rule "add_literals" (formula "12") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "0,1,0"))
            (rule "add_zero_left" (formula "12") (term "1,0"))
            (rule "ifEqualsInteger" (formula "12"))
            (rule "equal_literals" (formula "12") (term "1,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0"))
            (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
            (rule "close" (formula "16") (ifseqformula "13"))
         )
         (branch "Index Out of Bounds (x_arr_4 != null, but x_2 Out of Bounds!)"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1"))
            (rule "polySimp_rightDist" (formula "12") (term "1"))
            (rule "mul_literals" (formula "12") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
            (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
            (rule "true_left" (formula "11"))
            (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
            (rule "replace_known_right" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
            (rule "true_left" (formula "10"))
            (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "qeq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
            (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
            (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
            (rule "lenOfSeqDef" (formula "12") (term "0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "1,0"))
            (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
            (rule "add_literals" (formula "12") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "0,1,0"))
            (rule "add_zero_left" (formula "12") (term "1,0"))
            (rule "ifEqualsInteger" (formula "12"))
            (rule "equal_literals" (formula "12") (term "1,1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch "Null Reference (x_arr_2 = null)"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "inEqSimp_ltToLeq" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1"))
         (rule "polySimp_rightDist" (formula "12") (term "1"))
         (rule "mul_literals" (formula "12") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1"))
         (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
         (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "14")))
         (rule "true_left" (formula "11"))
         (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
         (rule "replace_known_right" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
         (rule "true_left" (formula "10"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0"))
         (rule "qeq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "12"))
         (rule "notLeft" (formula "11"))
         (rule "eqSymm" (formula "15"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "14"))
         (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "11") (term "0,0") (inst "i=i") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaAddInt" (formula "11") (term "1,0,0"))
         (rule "translateJavaMulInt" (formula "11") (term "0,0,0"))
         (rule "translateJavaMulInt" (formula "11") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "11") (term "0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "1,0"))
         (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
         (rule "add_literals" (formula "11") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "0,1,0"))
         (rule "add_zero_left" (formula "11") (term "1,0"))
         (rule "ifEqualsInteger" (formula "11"))
         (rule "equal_literals" (formula "11") (term "1,1"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "11"))
      )
      (branch "Index Out of Bounds (x_arr_2 != null, but x_1 Out of Bounds!)"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1"))
         (rule "polySimp_rightDist" (formula "12") (term "1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
         (rule "mul_literals" (formula "12") (term "0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
         (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "17")) (ifInst ""  (formula "2")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
         (rule "true_left" (formula "10"))
         (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
         (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "18")))
         (rule "true_left" (formula "11"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0"))
         (rule "qeq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
         (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
         (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "12") (term "0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "1,0"))
         (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
         (rule "add_literals" (formula "12") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "12") (term "0,1,0"))
         (rule "add_zero_left" (formula "12") (term "1,0"))
         (rule "ifEqualsInteger" (formula "12"))
         (rule "equal_literals" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "12"))
      )
   )
)
(branch "Null Reference (x_arr = null)"
    (builtin "One Step Simplification" (formula "1"))
   (rule "false_right" (formula "16"))
   (rule "inEqSimp_ltToLeq" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "polySimp_elimOne" (formula "8") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1"))
   (rule "polySimp_rightDist" (formula "12") (term "1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
   (rule "mul_literals" (formula "12") (term "0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1"))
   (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "11") (term "0"))
   (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
   (rule "true_left" (formula "11"))
   (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
   (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
   (rule "true_left" (formula "12"))
   (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "12") (term "0,0") (inst "i=i") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaAddInt" (formula "12") (term "1,0,0"))
   (rule "translateJavaMulInt" (formula "12") (term "0,0,0"))
   (rule "translateJavaMulInt" (formula "12") (term "0,1,0,0"))
   (rule "lenOfSeqDef" (formula "12") (term "0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "1,0"))
   (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
   (rule "add_literals" (formula "12") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "0,1,0"))
   (rule "add_zero_left" (formula "12") (term "1,0"))
   (rule "ifEqualsInteger" (formula "12"))
   (rule "equal_literals" (formula "12") (term "1,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "12"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0"))
   (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
   (rule "add_literals" (formula "12") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0"))
   (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "1,0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "13"))
   (rule "mul_literals" (formula "12") (term "1,0"))
   (rule "add_literals" (formula "12") (term "0"))
   (rule "leq_literals" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "11") (term "0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "eqSymm" (formula "15"))
   (rule "eqSymm" (formula "14"))
   (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
   (rule "eqSymm" (formula "14"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "i=i") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "13"))
)
(branch "Index Out of Bounds (x_arr != null, but _bucket Out of Bounds!)"
    (builtin "One Step Simplification" (formula "1"))
   (rule "false_right" (formula "16"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_homoInEq1" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "polySimp_elimOne" (formula "8") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1"))
   (rule "polySimp_rightDist" (formula "12") (term "1"))
   (rule "mul_literals" (formula "12") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
   (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
   (rule "true_left" (formula "11"))
   (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
   (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
   (rule "true_left" (formula "10"))
   (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "14"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "i=i") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
   (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
   (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "eqSymm" (formula "18"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "10") (term "0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "10"))
   (rule "eqSymm" (formula "17"))
   (rule "eqSymm" (formula "16"))
   (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "10") (term "0,0") (inst "i=i") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaAddInt" (formula "10") (term "1,0,0"))
   (rule "translateJavaMulInt" (formula "10") (term "0,0,0"))
   (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0"))
   (rule "lenOfSeqDef" (formula "10") (term "0"))
   (rule "polySimp_elimSub" (formula "10") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
   (rule "polySimp_addComm1" (formula "10") (term "1,0"))
   (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0"))
   (rule "add_literals" (formula "10") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "0,1,0"))
   (rule "add_zero_left" (formula "10") (term "1,0"))
   (rule "ifEqualsInteger" (formula "10"))
   (rule "equal_literals" (formula "10") (term "1,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0"))
   (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "11"))
   (rule "mul_literals" (formula "10") (term "1,0"))
   (rule "add_literals" (formula "10") (term "0"))
   (rule "leq_literals" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "13"))
   (rule "mul_literals" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "mul_literals" (formula "8") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
   (rule "leq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "16"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "17"))
   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
   (rule "mul_literals" (formula "7") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "add_literals" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
