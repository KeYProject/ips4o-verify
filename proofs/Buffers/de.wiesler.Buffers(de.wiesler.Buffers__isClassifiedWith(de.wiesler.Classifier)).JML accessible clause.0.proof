\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Apr 08 13:40:05 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Apr 08 13:40:05 CEST 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isClassifiedWith(de.wiesler.Classifier)].JML accessible clause.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isClassifiedWith(de.wiesler.Classifier)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "29165")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,classifier,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
 (builtin "One Step Simplification" (formula "12") (userinteraction))
(rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "12") (term "1") (inst "b=b") (userinteraction))
(rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "12") (term "0") (inst "b=b") (userinteraction))
 (builtin "One Step Simplification" (formula "12") (userinteraction))
(rule "equiv_right" (formula "12") (userinteraction))
(branch "Case '->'"
   (rule "allRight" (formula "13") (inst "sk=b_0") (userinteraction))
   (rule "instAll" (formula "13") (term "1,0,0") (ifseqformula "1") (userinteraction))
    (builtin "Use Dependency Contract" (formula "14") (term "1,4,0,1") (ifInst ""  (formula "2") (term "1,4,0,1,0")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0") (userinteraction))
   (rule "impLeft" (formula "12") (userinteraction))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
      (rule "wellFormedAnon" (formula "12") (term "0,0"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
      (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
      (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
      (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
      (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1"))
      (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
      (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
      (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1"))
      (rule "impRight" (formula "15"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "replace_known_left" (formula "14") (term "1,1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0"))
      (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0"))
      (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0"))
      (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "disjointDefinition" (formula "14"))
      (rule "disjointWithSingleton1" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "elementOfSetMinus" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elementOfUnion" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "eqSymm" (formula "15"))
      (rule "elementOfUnion" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "eqSymm" (formula "15"))
      (rule "elementOfUnion" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "elementOfArrayRangeConcrete" (formula "15"))
      (rule "elementOfArrayRangeConcrete" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0"))
      (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_leqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "applyEq" (formula "15") (term "1,4,0,1") (ifseqformula "12") (userinteraction))
       (builtin "Use Dependency Contract" (formula "15") (term "0,1") (ifInst ""  (formula "1") (term "0,1")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::isClassOfSlice([I,int,int,int)].JML accessible clause.0") (userinteraction))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "9")) (userinteraction))
      (rule "impLeft" (formula "13") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "13"))
         (branch "Case 1"
            (rule "andRight" (formula "13"))
            (branch "Case 1"
               (rule "andRight" (formula "13"))
               (branch
                  (rule "andRight" (formula "13"))
                  (branch
                     (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                     (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
                     (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                     (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
                     (rule "impRight" (formula "16"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "9"))
                  )
                  (branch
                     (rule "wellFormedAnon" (formula "13"))
                     (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                     (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                     (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
                     (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
                     (rule "impRight" (formula "16"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "5")))
                     (rule "closeTrue" (formula "15"))
                  )
               )
               (branch "Case 2"
                  (rule "orRight" (formula "13"))
                  (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
                  (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                  (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                  (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
                  (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
                  (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
                  (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                  (rule "impRight" (formula "17"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                  (rule "polySimp_elimSub" (formula "14") (term "2,0,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,2,0,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "2,1,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,1,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "commuteUnion" (formula "14") (term "0,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "19") (term "0,1,1,0,0"))
                  (rule "commuteUnion" (formula "14") (term "0,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "19") (term "1,1,0,0"))
                  (rule "commuteUnion_2" (formula "14") (term "1,1,0,0"))
                  (rule "commuteUnion" (formula "19") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                  (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "7")) (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
                  (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                  (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")))
                  (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "notLeft" (formula "14"))
                  (rule "notLeft" (formula "13"))
                  (rule "eqSymm" (formula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "21") (term "1"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "12"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaMulInt" (formula "12") (term "1,1,1,0,0,0,0"))
                  (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1,0"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "12"))
                  (rule "notLeft" (formula "13"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "17"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimSub" (formula "17") (term "0,2,1"))
                  (rule "mul_literals" (formula "17") (term "1,0,2,1"))
                  (rule "polySimp_elimSub" (formula "17") (term "0,2,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,2,1"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,2,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "19"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "19"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "12"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "34") (term "1,4,0"))
                  (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "4") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulAssoc" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "25") (term "0"))
                  (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "25"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")))
                  (rule "eqSymm" (formula "26"))
                  (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "elementOfSetMinus" (formula "25") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "elementOfUnion" (formula "25") (term "0,0,0,0"))
                  (rule "elementOfUnion" (formula "25") (term "1,0,0,0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "25") (term "1,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "elementOfArrayRangeConcrete" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "replace_known_right" (formula "25") (term "0,0,0,1,0,0,0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "replace_known_left" (formula "25") (term "0,1,0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0"))
                  (rule "replace_known_left" (formula "25") (term "1,0,0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "5") (term "0,1,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,1,0,0,1,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "5") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "5") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "24") (term "0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "23") (term "0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "translateJavaSubInt" (formula "17") (term "3,0,1"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "19"))
                  (rule "notLeft" (formula "18"))
                  (rule "notLeft" (formula "17"))
                  (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                  (rule "mul_literals" (formula "23") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteLeq" (formula "21"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "14"))
                  (rule "inEqSimp_commuteGeq" (formula "22"))
                  (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "19"))
                  (rule "eqSymm" (formula "16"))
                  (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "32") (term "0") (ifseqformula "14"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                  (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                  (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "19"))
                  (rule "eqSymm" (formula "16"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "22"))
                  (rule "mul_literals" (formula "20") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                  (rule "mul_literals" (formula "20") (term "1"))
                  (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "42") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "allRight" (formula "42") (inst "sk=i_0"))
                  (rule "impRight" (formula "42"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "44") (term "2,0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "42")))
                  (rule "applyEqReverse" (formula "45") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "33"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "7") (term "0,1,0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "7") (term "1,1,1,0,0"))
                  (rule "cnf_rightDist" (formula "32") (term "0"))
                  (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "8") (term "0,1,0,1,0"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "8") (term "1,1,1,0,0,1,0"))
                  (rule "distr_forallAnd" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "18") (term "0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1,0"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "27") (term "0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                  (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "46") (term "0"))
                  (rule "commute_or" (formula "33") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                  (rule "qeq_literals" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                  (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                  (rule "qeq_literals" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "commute_or" (formula "18") (term "0,0,1,0"))
                  (rule "cut_direct" (formula "36") (term "0"))
                  (branch "CUT: self_129.indices.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "true_left" (formula "37"))
                     (rule "all_pull_out3" (formula "8") (term "0"))
                     (rule "shift_paren_or" (formula "8") (term "0,0"))
                     (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                     (rule "ifthenelse_split" (formula "16") (term "0"))
                     (branch "classifier.equal_buckets = TRUE TRUE"
                        (rule "newSym_eq" (formula "17") (inst "l=l_0") (inst "newSymDef=mul(int::final(self, de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "17") (term "1,1"))
                        (rule "add_zero_right" (formula "17") (term "1"))
                        (rule "applyEq" (formula "27") (term "1") (ifseqformula "17"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "18"))
                        (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "21"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "28"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "20") (term "1,0,0,0,1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "18"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                        (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "21"))
                        (rule "applyEq" (formula "48") (term "1,2,1,1,1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "48") (term "0,1,2,0,1,1,1,0,0") (ifseqformula "18"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "1,2,0,1,1,1,0,0"))
                        (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "18"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "26"))
                        (rule "mul_literals" (formula "15") (term "1,1,0"))
                        (rule "greater_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "elimGcdLeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "neg_literal" (formula "32") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0"))
                        (rule "qeq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "26"))
                        (rule "greater_literals" (formula "4") (term "0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,0"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "associativeLawUnion" (formula "47") (term "1,1,0,0"))
                        (rule "all_pull_out3" (formula "19") (term "0"))
                        (rule "shift_paren_or" (formula "19") (term "0,0"))
                        (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                        (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,1,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "33") (term "0,0"))
                        (rule "times_zero_2" (formula "33") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                        (rule "mul_literals" (formula "33") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "33") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "33") (term "0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "polySimp_addAssoc" (formula "19") (term "1,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                        (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "21"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "26"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "commute_or" (formula "19") (term "0,0"))
                        (rule "allLeft" (formula "7") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "allLeft" (formula "9") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq0" (formula "9") (term "1,0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "9") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                        (rule "mul_literals" (formula "36") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "36") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,1,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "38") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0"))
                        (rule "mul_literals" (formula "38") (term "1,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "38") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                        (rule "times_zero_2" (formula "38") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "38") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,1,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0"))
                        (rule "mul_literals" (formula "39") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "39") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "39") (term "0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                        (rule "qeq_literals" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                        (rule "qeq_literals" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "27"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "allLeft" (formula "31") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0,0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "9") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "9") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "allLeft" (formula "33") (inst "t=i_0"))
                        (rule "allLeft" (formula "44") (inst "t=i_0"))
                        (rule "allLeft" (formula "8") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,1,1,0"))
                        (rule "allLeft" (formula "35") (inst "t=mul(b_0, Z(neglit(6(5(2(#))))))"))
                        (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0"))
                        (rule "mul_literals" (formula "35") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0"))
                        (rule "elimGcdGeq" (formula "35") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,0"))
                        (rule "sub_literals" (formula "35") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "35") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "35") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "35") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "35") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,0,0"))
                        (rule "add_literals" (formula "35") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "35") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "35") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "allLeft" (formula "23") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "polySimp_addAssoc" (formula "23") (term "1,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "23") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "23") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0,0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "23") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "commute_or" (formula "23") (term "0,0"))
                        (rule "inEqSimp_or_antiSymm0" (formula "23") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "23") (term "1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "commute_or" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "23"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,0"))
                        (rule "times_zero_1" (formula "23") (term "0"))
                        (rule "leq_literals" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "11") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "11") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "allLeft" (formula "44") (inst "t=i_0"))
                        (rule "allLeft" (formula "9") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,1,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0"))
                        (rule "elimGcdGeq" (formula "9") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(5(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "sub_literals" (formula "9") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "9") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "commute_or_2" (formula "9"))
                        (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,1,0"))
                        (rule "allLeft" (formula "26") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "26") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "allLeft" (formula "27") (inst "t=mul(b_0, Z(6(5(2(#)))))"))
                        (rule "inEqSimp_contradInEq5" (formula "27") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "greater_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "allLeft" (formula "28") (inst "t=i_0"))
                        (rule "allLeft" (formula "29") (inst "t=mul(l_0, Z(2(1(5(#)))))"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "29") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_subsumption6" (formula "29") (term "1,0,0,0,0") (ifseqformula "36"))
                        (rule "mul_literals" (formula "29") (term "1,1,0,1,0,0,0,0"))
                        (rule "greater_literals" (formula "29") (term "0,0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "allLeft" (formula "14") (inst "t=i_0"))
                        (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,1,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,1,0"))
                        (rule "add_literals" (formula "26") (term "0,1,0"))
                        (rule "leq_literals" (formula "26") (term "1,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0"))
                        (rule "qeq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "26"))
                        (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                        (rule "add_literals" (formula "26") (term "1,0"))
                        (rule "times_zero_1" (formula "26") (term "0"))
                        (rule "leq_literals" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "commute_or_2" (formula "27") (term "0,0"))
                        (rule "commute_or_2" (formula "28") (term "0,0"))
                        (rule "commute_or_2" (formula "29") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "58") (term "1,0") (ifseqformula "16") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "58") (term "0") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "59")))
                        (rule "true_left" (formula "58"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "61") (term "0") (ifseqformula "16") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "33") (term "0,0") (ifseqformula "17") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "65") (term "1") (ifseqformula "17") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "classifier.equal_buckets = TRUE FALSE"
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "26"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "19"))
                        (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "18") (term "1,0,0,0,1,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "19"))
                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "16"))
                        (rule "associativeLawUnion" (formula "46") (term "1,1,0,0"))
                        (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "24"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "all_pull_out3" (formula "18") (term "0"))
                        (rule "shift_paren_or" (formula "18") (term "0,0"))
                        (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                        (rule "allLeft" (formula "7") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "allLeft" (formula "19") (inst "t=b_0"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "commute_or" (formula "19") (term "0,0"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_addAssoc" (formula "20") (term "1,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "20") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "22"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "commute_or" (formula "20") (term "0,0"))
                        (rule "allLeft" (formula "35") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,1,0"))
                        (rule "add_literals" (formula "35") (term "0,1,0"))
                        (rule "leq_literals" (formula "35") (term "1,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,1,0"))
                        (rule "add_literals" (formula "36") (term "0,1,0"))
                        (rule "leq_literals" (formula "36") (term "1,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "36") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0"))
                        (rule "times_zero_2" (formula "36") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,1,0"))
                        (rule "add_literals" (formula "38") (term "0,1,0"))
                        (rule "leq_literals" (formula "38") (term "1,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_homoInEq0" (formula "38") (term "0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0"))
                        (rule "add_zero_left" (formula "38") (term "0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "38") (term "0"))
                        (rule "times_zero_2" (formula "38") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,1,0"))
                        (rule "add_literals" (formula "39") (term "0,1,0"))
                        (rule "leq_literals" (formula "39") (term "1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "39") (term "0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                        (rule "qeq_literals" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "26"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                        (rule "qeq_literals" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,1,0"))
                        (rule "leq_literals" (formula "19") (term "1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,1,0"))
                        (rule "add_literals" (formula "21") (term "0,1,0"))
                        (rule "leq_literals" (formula "21") (term "1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0"))
                        (rule "qeq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "24"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "1,0"))
                        (rule "times_zero_1" (formula "21") (term "0"))
                        (rule "leq_literals" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_addAssoc" (formula "22") (term "1,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "22") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_invertInEq1" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "22") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "22") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "commute_or" (formula "22") (term "0,0"))
                        (rule "inEqSimp_or_antiSymm0" (formula "22") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "22") (term "1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "22") (term "0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "commute_or" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "22"))
                        (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,0"))
                        (rule "times_zero_1" (formula "22") (term "0"))
                        (rule "leq_literals" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "allLeft" (formula "31") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "42") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "42") (term "1,0"))
                        (rule "allLeft" (formula "32") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                        (rule "allLeft" (formula "33") (inst "t=mul(b_0, Z(neglit(6(5(2(#))))))"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0"))
                        (rule "elimGcdGeq" (formula "33") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,0,0"))
                        (rule "sub_literals" (formula "33") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "33") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "33") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "8") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,1,0"))
                        (rule "add_literals" (formula "8") (term "1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                        (rule "elimGcdGeq" (formula "8") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(5(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,0"))
                        (rule "sub_literals" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "8") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "8") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "commute_or_2" (formula "8"))
                        (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,1,0"))
                        (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
                        (rule "allLeft" (formula "12") (inst "t=b_0"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                        (rule "true_left" (formula "12"))
                        (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "12") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "13") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "13") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "allLeft" (formula "46") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "46") (term "1,0"))
                        (rule "allLeft" (formula "27") (inst "t=mul(int::final(self, de.wiesler.Buffers::$num_buckets),
    Z(6(5(2(#)))))"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq5" (formula "27") (term "0,0,0,0,0") (ifseqformula "21"))
                        (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0,0,0"))
                        (rule "greater_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_subsumption6" (formula "27") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0,0"))
                        (rule "greater_literals" (formula "27") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "leq_literals" (formula "27") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "27") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0,0,0"))
                        (rule "allLeft" (formula "28") (inst "t=mul(b_0, Z(6(5(2(#)))))"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq5" (formula "28") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "28") (term "1,1,0,0,0,0,0,0"))
                        (rule "greater_literals" (formula "28") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "allLeft" (formula "14") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "57") (term "1,0") (ifseqformula "16") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "57") (term "0") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "58")))
                        (rule "true_left" (formula "57"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "68") (term "0,0,0,0,1,1,0,0") (ifseqformula "16") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0,0") (ifseqformula "17") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "66") (term "0") (ifseqformula "17") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "CUT: self_129.indices.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "all_pull_out3" (formula "8") (term "0"))
                     (rule "shift_paren_or" (formula "8") (term "0,0"))
                     (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                     (rule "ifthenelse_split" (formula "16") (term "0"))
                     (branch "classifier.equal_buckets = TRUE TRUE"
                        (rule "newSym_eq" (formula "17") (inst "l=l_0") (inst "newSymDef=mul(int::final(self, de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "17") (term "1,1"))
                        (rule "add_zero_right" (formula "17") (term "1"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "18"))
                        (rule "applyEq" (formula "27") (term "1") (ifseqformula "17"))
                        (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "28"))
                        (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "21"))
                        (rule "applyEq" (formula "20") (term "1,0,0,0,1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "18"))
                        (rule "applyEq" (formula "49") (term "1,2,1,1,1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "21"))
                        (rule "applyEq" (formula "49") (term "0,1,2,0,1,1,1,0,0") (ifseqformula "18"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,2,0,1,1,1,0,0"))
                        (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "17"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "26"))
                        (rule "mul_literals" (formula "15") (term "1,1,0"))
                        (rule "greater_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "elimGcdLeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "32") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0"))
                        (rule "qeq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "26"))
                        (rule "mul_literals" (formula "4") (term "1,1,0"))
                        (rule "greater_literals" (formula "4") (term "0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "associativeLawUnion" (formula "48") (term "1,1,0,0"))
                        (rule "all_pull_out3" (formula "19") (term "0"))
                        (rule "shift_paren_or" (formula "19") (term "0,0"))
                        (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                        (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,1,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "34") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                        (rule "mul_literals" (formula "34") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "34") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "34") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,1,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                        (rule "mul_literals" (formula "33") (term "1,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "33") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                        (rule "times_zero_2" (formula "33") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "33") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "33") (term "0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "8") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (term "1,0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "8") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                        (rule "true_left" (formula "8"))
                        (rule "allLeft" (formula "7") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "polySimp_addAssoc" (formula "20") (term "1,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "20") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "22"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "commute_or" (formula "20") (term "0,0"))
                        (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                        (rule "mul_literals" (formula "36") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "36") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,1,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0"))
                        (rule "mul_literals" (formula "39") (term "1,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0"))
                        (rule "times_zero_2" (formula "39") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "39") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "39") (term "0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                        (rule "qeq_literals" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                        (rule "qeq_literals" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "27"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                        (rule "allLeft" (formula "31") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "8") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                        (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "10") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0,0,0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "10") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "10") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0,0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "11") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0"))
                        (rule "allLeft" (formula "46") (inst "t=i_0"))
                        (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(1(#))), l_0)"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0"))
                        (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "25") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "25") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0,0") (ifseqformula "32"))
                        (rule "qeq_literals" (formula "25") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "commute_or" (formula "25") (term "0,0"))
                        (rule "inEqSimp_or_antiSymm0" (formula "25") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "25") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "25") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "commute_or" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_homoInEq1" (formula "25"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "leq_literals" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "allLeft" (formula "10") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,1,0"))
                        (rule "add_literals" (formula "10") (term "1,0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0"))
                        (rule "elimGcdGeq" (formula "10") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(5(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,1,0,0,0"))
                        (rule "sub_literals" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "10") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "10") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "commute_or_2" (formula "10"))
                        (rule "allLeft" (formula "44") (inst "t=i_0"))
                        (rule "allLeft" (formula "26") (inst "t=b_0"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "26") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "allLeft" (formula "38") (inst "t=i_0"))
                        (rule "allLeft" (formula "39") (inst "t=mul(b_0, Z(neglit(6(5(2(#))))))"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                        (rule "mul_literals" (formula "39") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,1,0"))
                        (rule "elimGcdGeq" (formula "39") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "sub_literals" (formula "39") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "39") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "39") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "39") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "27") (inst "t=mul(l_0, Z(2(1(5(#)))))"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "27") (term "1,0,0,0,0"))
                        (rule "times_zero_2" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_subsumption6" (formula "27") (term "1,0,0,0,0") (ifseqformula "34"))
                        (rule "mul_literals" (formula "27") (term "1,1,0,1,0,0,0,0"))
                        (rule "greater_literals" (formula "27") (term "0,0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "27") (inst "t=mul(b_0, Z(6(5(2(#)))))"))
                        (rule "inEqSimp_contradInEq5" (formula "27") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "greater_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "allLeft" (formula "28") (inst "t=i_0"))
                        (rule "allLeft" (formula "14") (inst "t=i_0"))
                        (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(2(#))), l_0)"))
                        (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0,0"))
                        (rule "qeq_literals" (formula "26") (term "0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "26"))
                        (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                        (rule "add_literals" (formula "26") (term "1,0"))
                        (rule "times_zero_1" (formula "26") (term "0"))
                        (rule "leq_literals" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "commute_or_2" (formula "27") (term "0,0"))
                        (rule "commute_or_2" (formula "28") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0,0") (ifseqformula "16") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "60") (term "1,0") (ifseqformula "16") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "classifier.equal_buckets = TRUE FALSE"
                        (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "19"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "18") (term "1,0,0,0,1,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "25"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "19"))
                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "16"))
                        (rule "associativeLawUnion" (formula "47") (term "1,1,0,0"))
                        (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "24"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "all_pull_out3" (formula "18") (term "0"))
                        (rule "shift_paren_or" (formula "18") (term "0,0"))
                        (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                        (rule "allLeft" (formula "18") (inst "t=b_0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "18") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "commute_or" (formula "18") (term "0,0"))
                        (rule "allLeft" (formula "7") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "allLeft" (formula "9") (inst "t=b_0"))
                        (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "9") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "35") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "35") (term "0,1,0"))
                        (rule "leq_literals" (formula "35") (term "1,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_addAssoc" (formula "20") (term "1,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "20") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "22"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "commute_or" (formula "20") (term "0,0"))
                        (rule "allLeft" (formula "35") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "35") (term "0,1,0"))
                        (rule "leq_literals" (formula "35") (term "1,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_invertInEq1" (formula "35") (term "0"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "38") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "38") (term "0,1,0"))
                        (rule "leq_literals" (formula "38") (term "1,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_invertInEq1" (formula "38") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0,0"))
                        (rule "times_zero_2" (formula "38") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "0,1,0"))
                        (rule "leq_literals" (formula "36") (term "1,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                        (rule "qeq_literals" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "26"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                        (rule "qeq_literals" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "21") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_invertInEq1" (formula "21") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "21") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "commute_or" (formula "21") (term "0,0"))
                        (rule "inEqSimp_or_antiSymm0" (formula "21") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "21") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "21") (term "1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "21") (term "0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "commute_or" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "1,0"))
                        (rule "times_zero_1" (formula "21") (term "0"))
                        (rule "leq_literals" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "30") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "30") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_invertInEq1" (formula "9") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,0") (ifseqformula "17"))
                        (rule "qeq_literals" (formula "9") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "allLeft" (formula "8") (inst "t=b_0"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,1,0"))
                        (rule "add_literals" (formula "8") (term "1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                        (rule "elimGcdGeq" (formula "8") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(5(5(2(#))))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0,0,0"))
                        (rule "sub_literals" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "8") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "8") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "commute_or_2" (formula "8"))
                        (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                        (rule "allLeft" (formula "34") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                        (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "allLeft" (formula "46") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "46") (term "1,0"))
                        (rule "allLeft" (formula "43") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "43") (term "1,0"))
                        (rule "allLeft" (formula "36") (inst "t=mul(b_0, Z(neglit(6(5(2(#))))))"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0"))
                        (rule "elimGcdGeq" (formula "36") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=b_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,0"))
                        (rule "sub_literals" (formula "36") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,0,0,0,1,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "36") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,1,0,0,0"))
                        (rule "leq_literals" (formula "36") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "polySimp_pullOutFactor0" (formula "36") (term "0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "36") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "36") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0"))
                        (rule "allLeft" (formula "26") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0,0,0,0"))
                        (rule "allLeft" (formula "27") (inst "t=mul(b_0, Z(6(5(2(#)))))"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq5" (formula "27") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "greater_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "allLeft" (formula "28") (inst "t=mul(int::final(self, de.wiesler.Buffers::$num_buckets),
    Z(6(5(2(#)))))"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "28") (term "1,0,0,0,0"))
                        (rule "times_zero_2" (formula "28") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq5" (formula "28") (term "0,0,0,0,0") (ifseqformula "21"))
                        (rule "greater_literals" (formula "28") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_subsumption6" (formula "28") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "greater_literals" (formula "28") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "24") (term "0,1,0"))
                        (rule "leq_literals" (formula "24") (term "1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0"))
                        (rule "leq_literals" (formula "24") (term "0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "allLeft" (formula "14") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0,0"))
                        (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(2(#))),
    int::final(self, de.wiesler.Buffers::$num_buckets))"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0"))
                        (rule "leq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "27"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,0"))
                        (rule "times_zero_1" (formula "27") (term "0"))
                        (rule "leq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "commute_or_2" (formula "28") (term "0,0"))
                        (rule "commute_or_2" (formula "29") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "1,1,1,0,0") (ifseqformula "16") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0,0") (ifseqformula "16") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "65") (term "0") (ifseqformula "16") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch
               (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
               (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
               (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
               (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
               (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
               (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
               (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
               (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
               (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
               (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
               (rule "notRight" (formula "13"))
               (rule "impRight" (formula "16"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
               (rule "polySimp_elimSub" (formula "15") (term "2,0,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "15") (term "1,2,0,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "15") (term "2,1,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "15") (term "1,2,1,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,2,1,0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "2,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "2,1,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "applyEq" (formula "18") (term "2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "5") (term "2,0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "15") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "18") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "commuteUnion_2" (formula "15") (term "0,1,1,0,0"))
               (rule "commuteUnion" (formula "18") (term "0,0,1,1,0,0"))
               (rule "commuteUnion" (formula "15") (term "0,0,1,1,0,0"))
               (rule "commuteUnion" (formula "18") (term "0,1,1,0,0"))
               (rule "commuteUnion_2" (formula "15") (term "1,1,0,0"))
               (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
               (rule "commuteUnion_2" (formula "15") (term "0,1,1,0,0"))
               (rule "commuteUnion_2" (formula "15") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "5") (term "0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "12"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaMulInt" (formula "12") (term "1,1,1,0,0,0,0"))
               (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "eqSymm" (formula "17"))
               (rule "eqSymm" (formula "14"))
               (rule "polySimp_elimSub" (formula "17") (term "0,2,0"))
               (rule "mul_literals" (formula "17") (term "1,0,2,0"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_elimSub" (formula "17") (term "0,2,0"))
               (rule "mul_literals" (formula "17") (term "1,0,2,0"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,2,1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,2,0"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "19"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "19"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "19"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "21") (inst "b=b"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "4")))
               (rule "closeFalse" (formula "21"))
            )
         )
         (branch "Case 2"
            (rule "translateJavaSubInt" (formula "13") (term "2,0,0,0,1,0"))
            (rule "translateJavaSubInt" (formula "13") (term "2,1,0,0,1,0"))
            (rule "translateJavaMulInt" (formula "13") (term "1,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "2,1,1"))
            (rule "translateJavaMulInt" (formula "13") (term "0,2,1,0,0,1,0"))
            (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "2,0,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "1,2,0,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "2,1,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "2,1,1"))
            (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,1,0,0,1,0"))
            (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,2,1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "2,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "2,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "2,1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1"))
            (rule "disjointDefinition" (formula "13"))
            (rule "distributeIntersection" (formula "13") (term "0"))
            (rule "distributeIntersection" (formula "13") (term "0,0"))
            (rule "unionEqualsEmpty" (formula "13"))
            (rule "unionEqualsEmpty" (formula "13") (term "0"))
            (rule "commuteUnion" (formula "13") (term "0,1,0,0,1"))
            (rule "commuteIntersection" (formula "13") (term "0,0,0"))
            (rule "commuteUnion" (formula "13") (term "0,1,0,0,1,0"))
            (rule "commuteIntersection" (formula "13") (term "0,1"))
            (rule "commuteUnion_2" (formula "13") (term "0,1,1,0,0,0"))
            (rule "commuteIntersection" (formula "13") (term "0,1,0"))
            (rule "commuteUnion" (formula "13") (term "1,0,1,1,0,1"))
            (rule "commuteUnion" (formula "13") (term "0,0,1,1,0,0,0"))
            (rule "commuteUnion_2" (formula "13") (term "1,1,0,1,0"))
            (rule "commuteUnion_2" (formula "13") (term "1,1,0,1"))
            (rule "commuteUnion_2" (formula "13") (term "0,1,1,0,0,0"))
            (rule "commuteUnion_2" (formula "13") (term "1,1,0,0,0"))
            (rule "commuteUnion_2" (formula "13") (term "0,1,1,0,0,0"))
            (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "13") (term "1,2,0,0,1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "14") (term "1,2,0,0,1"))
            (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,1,1"))
            (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,0,1"))
            (rule "commute_and_2" (formula "14"))
            (rule "commute_and" (formula "14") (term "0"))
            (rule "associativeLawUnion" (formula "14") (term "1,1,0,1"))
            (rule "commuteUnion_2" (formula "14") (term "1,1,0,1"))
            (rule "associativeLawUnion" (formula "14") (term "1,1,0,0,0"))
            (rule "commute_and" (formula "14") (term "0"))
            (rule "commute_and_2" (formula "14"))
            (rule "cut_direct" (formula "1") (term "0,0"))
            (branch "CUT: b_0 >= 0 TRUE"
                (builtin "One Step Simplification" (formula "2"))
               (rule "cut_direct" (formula "15") (term "0,0"))
               (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "cut_direct" (formula "3") (term "0"))
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 TRUE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cut_direct" (formula "18") (term "0"))
                     (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "equalityToElementOfRight" (formula "19") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "translateJavaMulInt" (formula "19") (term "1,0,2,0,2,0,0,0"))
                        (rule "allRight" (formula "19") (inst "sk=ov_0"))
                        (rule "allRight" (formula "19") (inst "sk=fv_0"))
                        (rule "notRight" (formula "19"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                        (rule "mul_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                        (rule "elementOfSetMinus" (formula "5"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "notLeft" (formula "5"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "elementOfArrayRangeConcrete" (formula "24"))
                        (rule "eqSymm" (formula "24") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "elementOfArrayRangeConcrete" (formula "24"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "elementOfUnion" (formula "23"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "eqSymm" (formula "23"))
                        (rule "eqSymm" (formula "24"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,1,1,0") (ifseqformula "14") (ifseqformula "16"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "8") (term "0,1,0,1,1,0") (ifseqformula "15") (ifseqformula "17"))
                        (rule "cut_direct" (formula "29") (term "1,0"))
                        (branch "CUT: iv_0 >= 0 TRUE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "inEqSimp_geqRight" (formula "29"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "13"))
                           (rule "mul_literals" (formula "2") (term "1,1,0"))
                           (rule "greater_literals" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "inEqSimp_exactShadow2" (formula "13") (ifseqformula "1"))
                           (rule "greater_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "13"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0"))
                           (rule "add_literals" (formula "6") (term "0"))
                           (rule "leq_literals" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch "CUT: iv_0 >= 0 FALSE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "false_right" (formula "30"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "false_right" (formula "28"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                           (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "12"))
                           (rule "mul_literals" (formula "4") (term "1,1,0"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                     (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "equalityToElementOfRight" (formula "18") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "allRight" (formula "18") (inst "sk=ov_0"))
                        (rule "allRight" (formula "18") (inst "sk=fv_0"))
                        (rule "notRight" (formula "18"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfArrayRange" (formula "20") (inst "iv=iv"))
                        (rule "eqSymm" (formula "20") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,1"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfUnion" (formula "19"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "closeTrue" (formula "19"))
                     )
                  )
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 FALSE"
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "equalityToElementOfRight" (formula "17") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaMulInt" (formula "17") (term "1,0,2,0,2,0,0,0"))
                        (rule "allRight" (formula "17") (inst "sk=ov_0"))
                        (rule "allRight" (formula "17") (inst "sk=fv_0"))
                        (rule "notRight" (formula "17"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                        (rule "mul_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                        (rule "elementOfSetMinus" (formula "5"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "notLeft" (formula "5"))
                        (rule "elementOfUnion" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "elementOfArrayRangeConcrete" (formula "22"))
                        (rule "eqSymm" (formula "22") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
                        (rule "elementOfUnion" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "elementOfArrayRangeConcrete" (formula "22"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
                        (rule "elementOfUnion" (formula "21"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "22"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,1,1,0") (ifseqformula "11") (ifseqformula "13"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "8") (term "0,1,0,1,1,0") (ifseqformula "12") (ifseqformula "14"))
                        (rule "cut_direct" (formula "26") (term "1,0"))
                        (branch "CUT: iv_0 >= 0 TRUE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "cut_direct" (formula "9") (term "0"))
                           (branch "CUT: self_129.indices = null TRUE"
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "27") (term "0"))
                              (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "11") (term "0,1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "9"))
                              (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                              (rule "commuteUnion_2" (formula "11") (term "1,1,0"))
                              (rule "cut_direct" (formula "10") (term "0"))
                              (branch "CUT: self_129.buffer = null TRUE"
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_geqRight" (formula "27"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "4") (term "1") (ifseqformula "11"))
                                 (rule "applyEq" (formula "27") (term "1") (ifseqformula "11"))
                                 (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "8") (term "0,1,1,1,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "26") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                  (builtin "Use Dependency Contract" (formula "25") (term "0") (ifInst ""  (formula "30") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "29")) (ifInst ""  (formula "18")) (ifInst ""  (formula "16")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                                 (rule "true_left" (formula "26"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,0,0,0,1,1,0,0,1"))
                                 (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "30") (term "3,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                 (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "30") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,4,0,1"))
                                 (rule "impRight" (formula "30"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                                 (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "16") (term "2,0,1,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "26") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "26") (term "0,1,0,0,1,1,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,0,0") (ifseqformula "12"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "10"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0"))
                                 (rule "add_zero_right" (formula "10") (term "0"))
                                 (rule "leq_literals" (formula "10"))
                                 (rule "closeFalse" (formula "10"))
                              )
                              (branch "CUT: self_129.buffer = null FALSE"
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "false_right" (formula "28"))
                                  (builtin "Use Dependency Contract" (formula "24") (term "0") (ifInst ""  (formula "30") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                                 (rule "true_left" (formula "25"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,0,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,0,0,0,1,1,0,0,1"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "30") (term "3,0,1"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "30") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "13") (term "3,0,1"))
                                 (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1,0"))
                                 (rule "impRight" (formula "30"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "25") (term "0,0,0,0,1,1,0,0") (ifseqformula "10"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "9"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0"))
                                 (rule "add_literals" (formula "9") (term "0"))
                                 (rule "leq_literals" (formula "9"))
                                 (rule "closeFalse" (formula "9"))
                              )
                           )
                           (branch "CUT: self_129.indices = null FALSE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "cut_direct" (formula "10") (term "0"))
                              (branch "CUT: self_129.buffer = null TRUE"
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "applyEq" (formula "7") (term "0,1,0,1,1,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "27") (term "1") (ifseqformula "10"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,1,1,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "10"))
                                 (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "false_right" (formula "28"))
                                 (rule "applyEq" (formula "26") (term "1") (ifseqformula "10"))
                                  (builtin "Use Dependency Contract" (formula "24") (term "0") (ifInst ""  (formula "30") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                                 (rule "true_left" (formula "25"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,0,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,0,0,0,1,1,0,0,1"))
                                 (rule "translateJavaSubInt" (formula "30") (term "2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "30") (term "3,0,1"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "13") (term "3,0,1"))
                                 (rule "translateJavaAddInt" (formula "30") (term "4,0,1"))
                                 (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "30") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1,0"))
                                 (rule "impRight" (formula "30"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "2,1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "25") (term "0,1,0,0,1,1,0,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "15") (term "2,0,1,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "9"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0"))
                                 (rule "add_zero_right" (formula "9") (term "0"))
                                 (rule "leq_literals" (formula "9"))
                                 (rule "closeFalse" (formula "9"))
                              )
                              (branch "CUT: self_129.buffer = null FALSE"
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "cut_direct" (formula "29") (term "1"))
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                    (rule "greater_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "inEqSimp_geqRight" (formula "29"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                     (builtin "Use Dependency Contract" (formula "25") (term "0") (ifInst ""  (formula "32") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "18")) (ifInst ""  (formula "16")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                                    (rule "true_left" (formula "26"))
                                    (rule "translateJavaSubInt" (formula "32") (term "2,0,0,0,1,1,0,0,1"))
                                    (rule "translateJavaSubInt" (formula "32") (term "2,1,0,0,1,1,0,0,1"))
                                    (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                    (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                    (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                    (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                    (rule "translateJavaMulInt" (formula "32") (term "3,0,1"))
                                    (rule "translateJavaAddInt" (formula "32") (term "4,0,1"))
                                    (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                    (rule "translateJavaMulInt" (formula "32") (term "0,2,1,0,0,1,1,0,0,1"))
                                    (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                    (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                    (rule "translateJavaMulInt" (formula "32") (term "0,4,0,1"))
                                    (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                    (rule "impRight" (formula "32"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                                    (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "34") (term "2,1,0,0,1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "1,2,1,0,0,1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "34") (term "2,0,0,0,1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "1,2,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "34") (term "2,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "34") (term "2,1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                    (rule "add_literals" (formula "10") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0"))
                                    (rule "add_literals" (formula "10") (term "0"))
                                    (rule "leq_literals" (formula "10"))
                                    (rule "closeFalse" (formula "10"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: iv_0 >= 0 FALSE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "false_right" (formula "27"))
                           (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "false_right" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                           (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "12"))
                           (rule "mul_literals" (formula "4") (term "1,1,0"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                     (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "false_right" (formula "17"))
                        (rule "equalityToElementOfRight" (formula "16") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "allRight" (formula "16") (inst "sk=ov_0"))
                        (rule "allRight" (formula "16") (inst "sk=fv_0"))
                        (rule "notRight" (formula "16"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfArrayRange" (formula "19") (inst "iv=iv"))
                        (rule "eqSymm" (formula "19") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1"))
                        (rule "elementOfArrayRange" (formula "18") (inst "iv=iv"))
                        (rule "eqSymm" (formula "18") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                        (rule "elementOfUnion" (formula "17"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "closeTrue" (formula "17"))
                     )
                  )
               )
               (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "false_right" (formula "16"))
                  (rule "equalityToElementOfRight" (formula "15") (inst "fv=fv") (inst "ov=ov"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "allRight" (formula "15") (inst "sk=ov_0"))
                  (rule "allRight" (formula "15") (inst "sk=fv_0"))
                  (rule "notRight" (formula "15"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "elementOfUnion" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "elementOfArrayRange" (formula "18") (inst "iv=iv"))
                  (rule "eqSymm" (formula "18") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "16"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch "CUT: b_0 >= 0 FALSE"
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "13"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "cut_direct" (formula "14") (term "0,0"))
               (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "equalityToElementOfRight" (formula "16") (inst "fv=fv") (inst "ov=ov"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaMulInt" (formula "16") (term "1,0,2,0,2,0,0,0"))
                     (rule "allRight" (formula "16") (inst "sk=ov_0"))
                     (rule "allRight" (formula "16") (inst "sk=fv_0"))
                     (rule "notRight" (formula "16"))
                     (rule "elementOfIntersect" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "elementOfSetMinus" (formula "2"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                     (rule "andLeft" (formula "1"))
                     (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                     (rule "mul_literals" (formula "4") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                     (rule "elementOfUnion" (formula "20"))
                     (rule "orRight" (formula "20"))
                     (rule "elementOfArrayRangeConcrete" (formula "21"))
                     (rule "eqSymm" (formula "21") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                     (rule "elementOfUnion" (formula "20"))
                     (rule "orRight" (formula "20"))
                     (rule "elementOfArrayRangeConcrete" (formula "21"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                     (rule "elementOfUnion" (formula "20"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "orRight" (formula "20"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "21"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,1,1,1,0") (ifseqformula "10") (ifseqformula "12"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,0,1,1,0") (ifseqformula "11") (ifseqformula "13"))
                     (rule "cut_direct" (formula "25") (term "1,0"))
                     (branch "CUT: iv_0 >= 0 TRUE"
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_geqRight" (formula "25"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "cut_direct" (formula "8") (term "0"))
                        (branch "CUT: self_129.indices = null TRUE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "8"))
                           (rule "eqSymm" (formula "26") (term "0"))
                           (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "8"))
                           (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                           (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                           (rule "cut_direct" (formula "9") (term "0"))
                           (branch "CUT: self_129.buffer = null TRUE"
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "0,1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "8") (term "0,1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                               (builtin "Use Dependency Contract" (formula "24") (term "0") (ifInst ""  (formula "29") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "28")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                              (rule "true_left" (formula "25"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "29") (term "3,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "14") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                              (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,4,0,1"))
                              (rule "impRight" (formula "29"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "16") (term "2,0,1,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "26") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1,1,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,0,0") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self_129.buffer = null FALSE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                               (builtin "Use Dependency Contract" (formula "23") (term "0") (ifInst ""  (formula "29") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                              (rule "true_left" (formula "24"))
                              (rule "translateJavaSubInt" (formula "23") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "29") (term "3,0,1"))
                              (rule "translateJavaSubInt" (formula "23") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "23") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1,0"))
                              (rule "impRight" (formula "29"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "25") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "CUT: self_129.indices = null FALSE"
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "cut_direct" (formula "9") (term "0"))
                           (branch "CUT: self_129.buffer = null TRUE"
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                              (rule "applyEq" (formula "25") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "7") (term "0,1,0,1,1,0") (ifseqformula "9"))
                               (builtin "Use Dependency Contract" (formula "23") (term "0") (ifInst ""  (formula "29") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                              (rule "true_left" (formula "24"))
                              (rule "translateJavaSubInt" (formula "23") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "29") (term "3,0,1"))
                              (rule "translateJavaSubInt" (formula "23") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "23") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1,0"))
                              (rule "impRight" (formula "29"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "25") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "15") (term "2,0,1,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "25") (term "0,1,0,0,1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                           (branch "CUT: self_129.buffer = null FALSE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "cut_direct" (formula "28") (term "1"))
                              (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                 (rule "greater_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0"))
                                 (rule "greater_literals" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                  (builtin "Use Dependency Contract" (formula "24") (term "0") (ifInst ""  (formula "31") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                                 (rule "true_left" (formula "25"))
                                 (rule "translateJavaSubInt" (formula "31") (term "2,0,0,0,1,1,0,0,1"))
                                 (rule "translateJavaSubInt" (formula "31") (term "2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "13") (term "3,0,1"))
                                 (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "31") (term "3,0,1"))
                                 (rule "translateJavaAddInt" (formula "31") (term "4,0,1"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,0,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "31") (term "0,2,1,0,0,1,1,0,0,1"))
                                 (rule "translateJavaMulInt" (formula "13") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "31") (term "0,4,0,1"))
                                 (rule "translateJavaMulInt" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "impRight" (formula "31"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "33") (term "2,0,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "33") (term "2,1,0,0,1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "2,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "2,1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "closeFalse" (formula "14"))
                              )
                           )
                        )
                     )
                     (branch "CUT: iv_0 >= 0 FALSE"
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "false_right" (formula "26"))
                        (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "false_right" (formula "24"))
                        (rule "inEqSimp_geqRight" (formula "24"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                        (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "4") (ifseqformula "11"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "greater_literals" (formula "4") (term "0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cut_direct" (formula "7") (term "0"))
                        (branch "CUT: self_129.indices = null TRUE"
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "applyEq" (formula "9") (term "0,1,1,1,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "6") (term "0,1,1,1,0") (ifseqformula "7"))
                           (rule "commuteUnion_2" (formula "9") (term "1,1,0"))
                           (rule "commuteUnion_2" (formula "6") (term "1,1,0"))
                           (rule "cut_direct" (formula "8") (term "0"))
                           (branch "CUT: self_129.buffer = null TRUE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq" (formula "6") (term "0,1,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "8"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "8"))
                              (rule "applyEq" (formula "9") (term "0,1,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "8"))
                               (builtin "Use Dependency Contract" (formula "22") (term "0") (ifInst ""  (formula "27") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")) (ifInst ""  (formula "15")) (ifInst ""  (formula "13")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "23"))
                              (rule "translateJavaSubInt" (formula "27") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "27") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "27") (term "3,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                              (rule "translateJavaAddInt" (formula "27") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "22") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "27") (term "0,4,0,1"))
                              (rule "impRight" (formula "27"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "24") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "14") (term "2,0,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "29") (term "0,1,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self_129.buffer = null FALSE"
                               (builtin "One Step Simplification" (formula "8"))
                               (builtin "Use Dependency Contract" (formula "22") (term "0") (ifInst ""  (formula "28") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "27")) (ifInst ""  (formula "15")) (ifInst ""  (formula "13")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "23"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "28") (term "3,0,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "11") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "28") (term "4,0,1"))
                              (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "22") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "28") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1,0"))
                              (rule "impRight" (formula "28"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "24") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "CUT: self_129.indices = null FALSE"
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "cut_direct" (formula "8") (term "0"))
                           (branch "CUT: self_129.buffer = null TRUE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "8"))
                              (rule "applyEq" (formula "6") (term "0,1,0,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "9") (term "0,1,0,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "8"))
                              (rule "applyEq" (formula "25") (term "1") (ifseqformula "8"))
                               (builtin "Use Dependency Contract" (formula "22") (term "0") (ifInst ""  (formula "28") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "27")) (ifInst ""  (formula "15")) (ifInst ""  (formula "13")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "23"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "28") (term "3,0,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "11") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "28") (term "4,0,1"))
                              (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "22") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "28") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1,0"))
                              (rule "impRight" (formula "28"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "2")))
                              (rule "polySimp_elimSub" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "14") (term "2,0,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self_129.buffer = null FALSE"
                               (builtin "One Step Simplification" (formula "8"))
                               (builtin "Use Dependency Contract" (formula "22") (term "0") (ifInst ""  (formula "29") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")) (ifInst ""  (formula "15")) (ifInst ""  (formula "13")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "23"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "3,0,1"))
                              (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,0,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0,1"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,4,0,1"))
                              (rule "translateJavaMulInt" (formula "22") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "impRight" (formula "29"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                              (rule "polySimp_elimSub" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,0,0,0,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "2,1,0,0,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "2,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                  )
                  (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "equalityToElementOfRight" (formula "15") (inst "fv=fv") (inst "ov=ov"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "allRight" (formula "15") (inst "sk=ov_0"))
                     (rule "allRight" (formula "15") (inst "sk=fv_0"))
                     (rule "notRight" (formula "15"))
                     (rule "elementOfIntersect" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "elementOfSetMinus" (formula "2"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "elementOfUnion" (formula "16"))
                     (rule "orRight" (formula "16"))
                     (rule "elementOfArrayRange" (formula "17") (inst "iv=iv"))
                     (rule "eqSymm" (formula "17") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,1"))
                     (rule "elementOfUnion" (formula "16"))
                     (rule "orRight" (formula "16"))
                     (rule "elementOfUnion" (formula "16"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "closeTrue" (formula "16"))
                  )
               )
               (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "false_right" (formula "15"))
                  (rule "equalityToElementOfRight" (formula "14") (inst "fv=fv") (inst "ov=ov"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "allRight" (formula "14") (inst "sk=ov_0"))
                  (rule "allRight" (formula "14") (inst "sk=fv_0"))
                  (rule "notRight" (formula "14"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "15"))
                  (rule "orRight" (formula "15"))
                  (rule "elementOfUnion" (formula "15"))
                  (rule "orRight" (formula "15"))
                  (rule "elementOfArrayRange" (formula "17") (inst "iv=iv"))
                  (rule "eqSymm" (formula "17") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "15"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "closeTrue" (formula "15"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
         (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
         (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
         (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
         (rule "translateJavaSubInt" (formula "13") (term "2,0,0,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "13") (term "2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
         (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "3,0"))
         (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
         (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
         (rule "translateJavaAddInt" (formula "13") (term "4,0"))
         (rule "translateJavaMulInt" (formula "13") (term "3,1"))
         (rule "translateJavaAddInt" (formula "13") (term "4,1"))
         (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
         (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "0,2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
         (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
         (rule "translateJavaMulInt" (formula "13") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "13") (term "0,4,1"))
         (rule "impRight" (formula "16"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
         (rule "polySimp_elimSub" (formula "14") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "15") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "14") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "15") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "apply_eq_boolean" (formula "15") (term "0") (ifseqformula "18"))
         (rule "eqSymm" (formula "15"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
         (rule "closeFalse" (formula "15"))
      )
   )
)
(branch "Case '<-'"
   (rule "allRight" (formula "13") (inst "sk=b_0") (userinteraction))
   (rule "instAll" (formula "13") (term "1,0,0") (ifseqformula "1") (userinteraction))
    (builtin "Use Dependency Contract" (formula "1") (term "1,4,0,1") (ifInst ""  (formula "14") (term "1,4,0,1")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0") (userinteraction))
   (rule "impLeft" (formula "12") (userinteraction))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
      (rule "wellFormedAnon" (formula "12") (term "0,0"))
      (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
      (rule "translateJavaSubInt" (formula "2") (term "2,0,0,0,1,1,0,0,1,0"))
      (rule "translateJavaSubInt" (formula "2") (term "2,1,0,0,1,1,0,0,1,0"))
      (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,0,0,1,1,0,0,1"))
      (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
      (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
      (rule "translateJavaMulInt" (formula "2") (term "0,2,1,0,0,1,1,0,0,1,0"))
      (rule "translateJavaSubInt" (formula "2") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "translateJavaSubInt" (formula "2") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
      (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
      (rule "translateJavaMulInt" (formula "1") (term "0,2,1,0,0,1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,1,1,0,1,4,0,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,0,0,1,1,0,1,4,0,1"))
      (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "2") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "translateJavaMulInt" (formula "1") (term "0,2,1,0,0,1,1,0,1,4,0,1"))
      (rule "impRight" (formula "15"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "replace_known_left" (formula "14") (term "1,1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,0,0,0,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,0,0,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,1,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "1,2,1,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,1,0,0,1,1,0,1,4,0"))
      (rule "mul_literals" (formula "3") (term "1,2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,0,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "1,2,0,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,0,0,0,1,1,0,1,4,0"))
      (rule "mul_literals" (formula "3") (term "1,2,0,0,0,1,1,0,1,4,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,0,0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,0,0,0,1,1,0,1,4,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,1,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,1,0,0,1,1,0,1,4,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "disjointDefinition" (formula "14"))
      (rule "disjointWithSingleton1" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "elementOfSetMinus" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elementOfUnion" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "eqSymm" (formula "15"))
      (rule "elementOfUnion" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "eqSymm" (formula "15"))
      (rule "elementOfUnion" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "elementOfArrayRangeConcrete" (formula "15"))
      (rule "elementOfArrayRangeConcrete" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0"))
      (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_leqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "applyEq" (formula "1") (term "1,4,0,1") (ifseqformula "12") (userinteraction))
       (builtin "Use Dependency Contract" (formula "1") (term "0,1") (ifInst ""  (formula "15") (term "0,1")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::isClassOfSlice([I,int,int,int)].JML accessible clause.0") (userinteraction))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "9")) (userinteraction))
      (rule "impLeft" (formula "13") (userinteraction))
      (branch "Case 1"
         (rule "wellFormedAnon" (formula "13") (term "1,0,0,0"))
         (rule "translateJavaSubInt" (formula "13") (term "2,0,0,0,1,0,1"))
         (rule "translateJavaSubInt" (formula "13") (term "2,1,0,0,1,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "1,1,1,1"))
         (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1"))
         (rule "translateJavaMulInt" (formula "13") (term "0,2,1,0,0,1,0,1"))
         (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,1"))
         (rule "replace_known_left" (formula "13") (term "1,1,0,0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")))
         (rule "polySimp_elimSub" (formula "13") (term "2,0,0,0,1,0,1"))
         (rule "mul_literals" (formula "13") (term "1,2,0,0,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1"))
         (rule "polySimp_elimSub" (formula "13") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,1,1,1"))
         (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,1,0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "0,2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "2,0,0,0,1,0,1"))
         (rule "polySimp_addComm1" (formula "13") (term "2,1,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,1"))
         (rule "disjointDefinition" (formula "13") (term "1"))
         (rule "distributeIntersection" (formula "13") (term "0,1"))
         (rule "unionEqualsEmpty" (formula "13") (term "1"))
         (rule "distributeIntersection" (formula "13") (term "0,0,1"))
         (rule "unionEqualsEmpty" (formula "13") (term "0,1"))
         (rule "commuteIntersection" (formula "13") (term "0,1,1"))
         (rule "commuteUnion" (formula "13") (term "0,1,0,0,0,0,1"))
         (rule "commuteUnion" (formula "13") (term "0,0,1,0,0,1,0,1"))
         (rule "commuteUnion" (formula "13") (term "0,1,1,0,1,1"))
         (rule "commuteIntersection" (formula "13") (term "0,0,0,1"))
         (rule "commuteIntersection" (formula "13") (term "0,1,0,1"))
         (rule "commuteUnion_2" (formula "13") (term "1,1,0,1,1"))
         (rule "commuteUnion_2" (formula "13") (term "1,1,0,0,0,1"))
         (rule "commuteUnion" (formula "13") (term "0,1,1,0,1,0,1"))
         (rule "commuteUnion_2" (formula "13") (term "1,1,0,1,0,1"))
         (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "13") (term "1,2,0,0,1,1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "14") (term "1,2,0,0,1,1"))
         (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "1") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")) (ifInst ""  (formula "13")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,1,1"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,0,1"))
         (rule "commute_and_2" (formula "14") (term "0"))
         (rule "commute_and_2" (formula "14"))
         (rule "commute_and" (formula "14") (term "0,0"))
         (rule "commute_and" (formula "14") (term "0,1,0"))
         (rule "shift_paren_and" (formula "14") (term "0"))
         (rule "shift_paren_and" (formula "14") (term "0,0"))
         (rule "associativeLawUnion" (formula "14") (term "1,1,0,1,0"))
         (rule "commuteUnion_2" (formula "14") (term "1,1,0,1,0"))
         (rule "commute_and_2" (formula "14") (term "0"))
         (rule "associativeLawUnion" (formula "14") (term "1,1,0,1,0,0,0"))
         (rule "cut_direct" (formula "1") (term "0,0"))
         (branch "CUT: b_0 >= 0 TRUE"
             (builtin "One Step Simplification" (formula "2"))
            (rule "cut_direct" (formula "15") (term "0,0,0,0,0,0"))
            (branch "CUT: self_129.buffer = null TRUE"
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
               (rule "false_right" (formula "16"))
               (rule "cut_direct" (formula "3") (term "0"))
               (branch "CUT: self_129.num_buckets >= 1 + b_0 TRUE"
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "1") (term "0") (ifseqformula "8") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "5") (term "1,0") (ifseqformula "8") (ifseqformula "10"))
                  (rule "cut_direct" (formula "5") (term "0"))
                  (branch "CUT: self_129.indices = null TRUE"
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "5"))
                     (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "21") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "21") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "2,0,0,0,1,1,0,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "7") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "8") (term "4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "21") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "impRight" (formula "21"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
                     (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,0,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_elimSub" (formula "9") (term "2,0,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,2,0,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "9") (term "2,1,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "2,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "2,1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "9") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "9") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "2,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0,1,4,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "commuteUnion" (formula "8") (term "0,1,1,0,0,1,0"))
                     (rule "commuteUnion" (formula "7") (term "0,1,1,0,0"))
                     (rule "commuteUnion" (formula "18") (term "0,1,1,0,0"))
                     (rule "commuteUnion" (formula "8") (term "0,1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,0,1,0"))
                     (rule "commuteUnion_2" (formula "7") (term "1,1,0,0"))
                     (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,1,4,0,1,0"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
                     (rule "closeFalse" (formula "17"))
                  )
                  (branch "CUT: self_129.indices = null FALSE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "translateJavaMulInt" (formula "22") (term "3,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "2,0,0,0,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "22") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "7") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "8") (term "4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "22") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "7") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "impRight" (formula "22"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
                     (rule "polySimp_elimSub" (formula "10") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,0,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_elimSub" (formula "9") (term "2,1,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "9") (term "2,0,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,2,0,0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "2,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "2,1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "2,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0,1,4,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "commuteUnion" (formula "7") (term "0,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "8") (term "0,1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "0,1,1,0,0,1,0"))
                     (rule "commuteUnion" (formula "18") (term "0,0,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "7") (term "1,1,0,0"))
                     (rule "commuteUnion" (formula "8") (term "0,0,1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion" (formula "8") (term "0,0,1,1,0,0,1,0"))
                     (rule "commuteUnion" (formula "18") (term "0,1,1,0,0"))
                     (rule "commuteUnion" (formula "7") (term "1,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,0,1,0"))
                     (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
                     (rule "commuteUnion_2" (formula "8") (term "0,1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "0,1,1,0,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,1,4,0,1,0"))
                     (rule "commuteUnion_2" (formula "8") (term "1,1,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "15"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "translateJavaMulInt" (formula "15") (term "1,1,1,0,0,0,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "0,2,1,1,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1,0"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "17"))
                     (rule "notLeft" (formula "16"))
                     (rule "notLeft" (formula "15"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "17"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,2,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,2,0"))
                     (rule "eqSymm" (formula "20"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,2,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,2,0"))
                     (rule "eqSymm" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,2,1"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,2,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "22"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "22"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "22"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "25") (term "1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "24") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")) (ifInst ""  (formula "28")))
                     (rule "closeFalse" (formula "24"))
                  )
               )
               (branch "CUT: self_129.num_buckets >= 1 + b_0 FALSE"
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_geqRight" (formula "15"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "2") (term "0") (ifseqformula "6") (ifseqformula "8"))
                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                  (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "3,0,1"))
                  (rule "translateJavaAddInt" (formula "4") (term "4,0,1"))
                  (rule "translateJavaSubInt" (formula "5") (term "2,0,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "5") (term "2,1,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "5") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "5") (term "4,0,1,0"))
                  (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "5") (term "0,2,1,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "5") (term "0,4,0,1,0"))
                  (rule "translateJavaSubInt" (formula "5") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "translateJavaSubInt" (formula "5") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                  (rule "translateJavaMulInt" (formula "5") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "impRight" (formula "18"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
                  (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "2,0,0,0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,2,0,0,0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "2,1,0,0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,2,1,0,0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "polySimp_elimSub" (formula "6") (term "2,0,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,2,0,0,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "6") (term "2,1,0,0,1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,2,1,0,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,0,0,0,1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                  (rule "polySimp_addComm0" (formula "6") (term "2,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,1,0,0,1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "polySimp_addComm0" (formula "6") (term "2,1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "2,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0,1,4,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "5") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "CUT: self_129.buffer = null FALSE"
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
               (rule "commute_and_2" (formula "16"))
               (rule "commute_and_2" (formula "16") (term "0"))
               (rule "commute_and_2" (formula "16") (term "0,0"))
               (rule "cut_direct" (formula "16") (term "0,0,0,0"))
               (branch "CUT: classifier.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "cut_direct" (formula "3") (term "0"))
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 TRUE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cut_direct" (formula "19") (term "0,0,0"))
                     (branch "CUT: self_129.buffer.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "19") (term "0") (ifseqformula "9") (ifseqformula "11"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "20") (term "1"))
                        (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "commuteUnion" (formula "1") (term "1,1,1,0"))
                           (rule "associativeLawUnion" (formula "1") (term "1,1,0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "1,0") (ifseqformula "10") (ifseqformula "12"))
                           (rule "cut_direct" (formula "6") (term "0"))
                           (branch "CUT: self_129.indices = null TRUE"
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "6"))
                              (rule "applyEq" (formula "22") (term "0,1,1,1,0,1") (ifseqformula "6"))
                              (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "6"))
                              (rule "applyEq" (formula "22") (term "1,1,2,0,0,1") (ifseqformula "6"))
                              (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "6"))
                              (rule "applyEq" (formula "1") (term "0,1,1,1,0") (ifseqformula "6"))
                              (rule "commuteUnion_2" (formula "22") (term "1,1,0,1"))
                              (rule "commuteUnion_2" (formula "22") (term "1,1,0,0"))
                              (rule "commuteUnion_2" (formula "1") (term "1,1,0"))
                              (rule "commuteIntersection" (formula "22") (term "0,1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "1") (term "0,0,0") (ifseqformula "11") (ifseqformula "3"))
                              (rule "cut_direct" (formula "1") (term "0"))
                              (branch "CUT: classifier.sorted_splitters = null TRUE"
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0,0,0,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,0,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0,0,0,0") (ifseqformula "12") (ifseqformula "4"))
                                 (rule "cut_direct" (formula "1") (term "0"))
                                 (branch "CUT: classifier.tree = null TRUE"
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "3") (term "0,0,1,0,0,1,1,0") (ifseqformula "1"))
                                    (rule "cut_direct" (formula "24") (term "0"))
                                    (branch "CUT: de.wiesler.Tree.tree.* cap allLocs setMinus null.* cup de.wiesler.Tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "equalityToElementOfRight" (formula "25") (inst "fv=fv") (inst "ov=ov"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "translateJavaMulInt" (formula "25") (term "1,0,2,1,2,0,0,0"))
                                       (rule "allRight" (formula "25") (inst "sk=ov_0"))
                                       (rule "allRight" (formula "25") (inst "sk=fv_0"))
                                       (rule "notRight" (formula "25"))
                                       (rule "elementOfIntersect" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "elementOfSetMinus" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "applyEqRigid" (formula "28") (term "1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                                       (rule "mul_literals" (formula "4") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                                       (rule "elementOfUnion" (formula "28"))
                                       (rule "orRight" (formula "28"))
                                       (rule "elementOfArrayRangeConcrete" (formula "29"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                                       (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                       (rule "elementOfUnion" (formula "28"))
                                       (rule "orRight" (formula "28"))
                                       (rule "elementOfArrayRangeConcrete" (formula "29"))
                                       (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "false_right" (formula "29"))
                                       (rule "elementOfUnion" (formula "28"))
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "30")))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "15"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: iv_0 >= 0 TRUE"
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "inEqSimp_geqRight" (formula "31"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "15") (ifseqformula "1"))
                                          (rule "greater_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1"))
                                          (rule "mul_literals" (formula "15") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                          (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0"))
                                          (rule "qeq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "14"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "5") (term "0"))
                                          (rule "add_literals" (formula "5") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0"))
                                          (rule "add_literals" (formula "5") (term "0"))
                                          (rule "leq_literals" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                       (branch "CUT: iv_0 >= 0 FALSE"
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "false_right" (formula "31"))
                                          (rule "inEqSimp_geqRight" (formula "30"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                          (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "14"))
                                          (rule "greater_literals" (formula "4") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "mul_literals" (formula "4") (term "1,0"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                    )
                                    (branch "CUT: de.wiesler.Tree.tree.* cap allLocs setMinus null.* cup de.wiesler.Tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "false_right" (formula "25"))
                                       (rule "equalityToElementOfRight" (formula "24") (inst "fv=fv") (inst "ov=ov"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "allRight" (formula "24") (inst "sk=ov_0"))
                                       (rule "allRight" (formula "24") (inst "sk=fv_0"))
                                       (rule "notRight" (formula "24"))
                                       (rule "elementOfIntersect" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "elementOfSetMinus" (formula "2"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "elementOfUnion" (formula "24"))
                                       (rule "orRight" (formula "24"))
                                       (rule "elementOfUnion" (formula "24"))
                                       (rule "orRight" (formula "24"))
                                       (rule "elementOfArrayRange" (formula "26") (inst "iv=iv"))
                                       (rule "eqSymm" (formula "26") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0,1"))
                                       (rule "elementOfUnion" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "closeTrue" (formula "24"))
                                    )
                                 )
                                 (branch "CUT: classifier.tree = null FALSE"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "cut_direct" (formula "25") (term "0"))
                                    (branch "CUT: classifier.tree.tree.* cap allLocs setMinus null.* cup classifier.tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "equalityToElementOfRight" (formula "26") (inst "fv=fv") (inst "ov=ov"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "translateJavaMulInt" (formula "26") (term "1,0,2,1,2,0,0,0"))
                                       (rule "allRight" (formula "26") (inst "sk=ov_0"))
                                       (rule "allRight" (formula "26") (inst "sk=fv_0"))
                                       (rule "notRight" (formula "26"))
                                       (rule "elementOfIntersect" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_commuteLeq" (formula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                                       (rule "mul_literals" (formula "5") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                                       (rule "elementOfSetMinus" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "elementOfUnion" (formula "28"))
                                       (rule "orRight" (formula "28"))
                                       (rule "elementOfArrayRangeConcrete" (formula "29"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                                       (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                       (rule "elementOfUnion" (formula "28"))
                                       (rule "orRight" (formula "28"))
                                       (rule "elementOfArrayRangeConcrete" (formula "29"))
                                       (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "false_right" (formula "29"))
                                       (rule "elementOfUnion" (formula "28"))
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "15"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "19") (ifseqformula "7"))
                                       (rule "cut_direct" (formula "31") (term "0"))
                                       (branch "CUT: iv_0 >= 0 TRUE"
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "inEqSimp_geqRight" (formula "32"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "16") (ifseqformula "1"))
                                          (rule "greater_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "16"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                          (rule "mul_literals" (formula "6") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0"))
                                          (rule "add_literals" (formula "6") (term "0"))
                                          (rule "leq_literals" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "CUT: iv_0 >= 0 FALSE"
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "false_right" (formula "32"))
                                          (rule "inEqSimp_geqRight" (formula "31"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                          (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "15"))
                                          (rule "mul_literals" (formula "4") (term "1,1,0"))
                                          (rule "greater_literals" (formula "4") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                    )
                                    (branch "CUT: classifier.tree.tree.* cap allLocs setMinus null.* cup classifier.tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "false_right" (formula "26"))
                                       (rule "equalityToElementOfRight" (formula "25") (inst "fv=fv") (inst "ov=ov"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "allRight" (formula "25") (inst "sk=ov_0"))
                                       (rule "allRight" (formula "25") (inst "sk=fv_0"))
                                       (rule "notRight" (formula "25"))
                                       (rule "elementOfIntersect" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "elementOfSetMinus" (formula "2"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "elementOfUnion" (formula "24"))
                                       (rule "orRight" (formula "24"))
                                       (rule "elementOfArrayRange" (formula "25") (inst "iv=iv"))
                                       (rule "eqSymm" (formula "25") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,1"))
                                       (rule "elementOfUnion" (formula "24"))
                                       (rule "orRight" (formula "24"))
                                       (rule "elementOfUnion" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "closeTrue" (formula "24"))
                                    )
                                 )
                              )
                              (branch "CUT: classifier.sorted_splitters = null FALSE"
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "cut_direct" (formula "24") (term "0"))
                                 (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "equalityToElementOfRight" (formula "25") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "translateJavaMulInt" (formula "25") (term "1,0,2,1,2,0,0,0"))
                                    (rule "allRight" (formula "25") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "25") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "25"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "5"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                                    (rule "mul_literals" (formula "5") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfUnion" (formula "27"))
                                    (rule "orRight" (formula "27"))
                                    (rule "elementOfArrayRangeConcrete" (formula "28"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                                    (rule "elementOfUnion" (formula "27"))
                                    (rule "orRight" (formula "27"))
                                    (rule "elementOfArrayRangeConcrete" (formula "28"))
                                    (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "false_right" (formula "28"))
                                    (rule "elementOfUnion" (formula "27"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "orRight" (formula "27"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
                                    (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: iv_0 >= 0 TRUE"
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "inEqSimp_geqRight" (formula "31"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_exactShadow2" (formula "14") (ifseqformula "1"))
                                       (rule "greater_literals" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1"))
                                       (rule "mul_literals" (formula "14") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "14"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                       (rule "add_literals" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "leq_literals" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "CUT: iv_0 >= 0 FALSE"
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "false_right" (formula "31"))
                                       (rule "inEqSimp_geqRight" (formula "30"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                       (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "13"))
                                       (rule "mul_literals" (formula "4") (term "1,1,0"))
                                       (rule "greater_literals" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(null, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "false_right" (formula "25"))
                                    (rule "equalityToElementOfRight" (formula "24") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "allRight" (formula "24") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "24") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "24"))
                                    (rule "elementOfIntersect" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "elementOfSetMinus" (formula "2"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "elementOfUnion" (formula "23"))
                                    (rule "orRight" (formula "23"))
                                    (rule "elementOfArrayRange" (formula "24") (inst "iv=iv"))
                                    (rule "eqSymm" (formula "24") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1"))
                                    (rule "elementOfUnion" (formula "23"))
                                    (rule "orRight" (formula "23"))
                                    (rule "elementOfUnion" (formula "23"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeTrue" (formula "23"))
                                 )
                              )
                           )
                           (branch "CUT: self_129.indices = null FALSE"
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "cut_direct" (formula "23") (term "0"))
                              (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "equalityToElementOfRight" (formula "24") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "translateJavaMulInt" (formula "24") (term "1,0,2,0,2,0,0,0"))
                                 (rule "allRight" (formula "24") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "24") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "applyEqRigid" (formula "26") (term "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                                 (rule "mul_literals" (formula "4") (term "0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfArrayRangeConcrete" (formula "27"))
                                 (rule "eqSymm" (formula "27") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfArrayRangeConcrete" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
                                 (rule "elementOfUnion" (formula "26"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "13"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,0,0") (ifseqformula "17") (ifseqformula "9"))
                                 (rule "cut_direct" (formula "31") (term "1,0"))
                                 (branch "CUT: iv_0 >= 0 TRUE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                                    (rule "mul_literals" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "14"))
                                    (rule "mul_literals" (formula "2") (term "1,1,0"))
                                    (rule "greater_literals" (formula "2") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_exactShadow2" (formula "14") (ifseqformula "1"))
                                    (rule "greater_literals" (formula "14") (term "0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1"))
                                    (rule "mul_literals" (formula "14") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "5"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0"))
                                    (rule "add_literals" (formula "13") (term "0"))
                                    (rule "leq_literals" (formula "13"))
                                    (rule "closeFalse" (formula "13"))
                                 )
                                 (branch "CUT: iv_0 >= 0 FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "inEqSimp_geqRight" (formula "30"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                    (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "13"))
                                    (rule "greater_literals" (formula "4") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1,0"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                              (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "false_right" (formula "24"))
                                 (rule "equalityToElementOfRight" (formula "23") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "allRight" (formula "23") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "23") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "23"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfArrayRange" (formula "23") (inst "iv=iv"))
                                 (rule "eqSymm" (formula "23") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,1"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfUnion" (formula "22"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                           )
                        )
                        (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "commuteUnion" (formula "20") (term "1,1,1,0"))
                           (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "allRight" (formula "20") (inst "sk=ov_0"))
                           (rule "allRight" (formula "20") (inst "sk=fv_0"))
                           (rule "notRight" (formula "20"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "20"))
                           (rule "orRight" (formula "20"))
                           (rule "elementOfUnion" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "elementOfUnion" (formula "20"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "closeTrue" (formula "20"))
                        )
                     )
                     (branch "CUT: self_129.buffer.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "0") (ifseqformula "8") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 FALSE"
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0") (ifseqformula "6") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "cut_direct" (formula "18") (term "1"))
                     (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "commuteUnion" (formula "1") (term "1,1,1,0"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,0"))
                        (rule "cut_direct" (formula "19") (term "0"))
                        (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "translateJavaMulInt" (formula "20") (term "1,0,2,0,2,0,0,0"))
                           (rule "allRight" (formula "20") (inst "sk=ov_0"))
                           (rule "allRight" (formula "20") (inst "sk=fv_0"))
                           (rule "notRight" (formula "20"))
                           (rule "elementOfIntersect" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "elementOfUnion" (formula "23"))
                           (rule "orRight" (formula "23"))
                           (rule "elementOfArrayRangeConcrete" (formula "24"))
                           (rule "eqSymm" (formula "24") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                           (rule "elementOfUnion" (formula "23"))
                           (rule "orRight" (formula "23"))
                           (rule "elementOfArrayRangeConcrete" (formula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                           (rule "elementOfUnion" (formula "23"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "orRight" (formula "23"))
                           (rule "eqSymm" (formula "23"))
                           (rule "eqSymm" (formula "24"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,0") (ifseqformula "13") (ifseqformula "9"))
                           (rule "cut_direct" (formula "27") (term "1,0"))
                           (branch "CUT: iv_0 >= 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_geqRight" (formula "27"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "cut_direct" (formula "8") (term "0"))
                              (branch "CUT: classifier.sorted_splitters = null TRUE"
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "7") (term "0,0,0,0,1,1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "9") (term "0,0,0,0,1,1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,1,1,0") (ifseqformula "16") (ifseqformula "18"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "8") (term "0,0,0,0") (ifseqformula "17") (ifseqformula "13"))
                                 (rule "cut_direct" (formula "29") (term "1"))
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                    (rule "greater_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "inEqSimp_geqRight" (formula "29"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "8"))
                                       (rule "commuteUnion_2" (formula "12") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                                       (rule "cut_direct" (formula "9") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "applyEq" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "9"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                          (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "33"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "34")))
                                          (rule "true_left" (formula "25"))
                                          (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "0,0,0") (ifseqformula "19") (ifseqformula "9"))
                                          (rule "cut_direct" (formula "10") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "12") (term "0,1,0,0,1,1,0") (ifseqformula "10"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "33"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "34")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "inEqSimp_homoInEq1" (formula "15"))
                                             (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                             (rule "add_literals" (formula "15") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "15") (term "1,0"))
                                             (rule "add_zero_right" (formula "15") (term "0"))
                                             (rule "leq_literals" (formula "15"))
                                             (rule "closeFalse" (formula "15"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "36"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "inEqSimp_homoInEq1" (formula "16"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0"))
                                             (rule "leq_literals" (formula "16"))
                                             (rule "closeFalse" (formula "16"))
                                          )
                                       )
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "cut_direct" (formula "9") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "applyEq" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "9"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "34"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "35")))
                                          (rule "true_left" (formula "25"))
                                          (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "0,1,0,0,1,1,0") (ifseqformula "19") (ifseqformula "9"))
                                          (rule "cut_direct" (formula "12") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "12") (term "0,1,0,0,1,1,0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "11"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "34"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "35")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "12"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "37") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "37") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "37") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "37"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "38")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "inEqSimp_homoInEq1" (formula "16"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0"))
                                             (rule "leq_literals" (formula "16"))
                                             (rule "closeFalse" (formula "16"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: classifier.sorted_splitters = null FALSE"
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,0,1,0,0,1,1,0") (ifseqformula "16") (ifseqformula "12"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "0,1,1,1,0") (ifseqformula "17") (ifseqformula "19"))
                                 (rule "cut_direct" (formula "31") (term "1"))
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                    (rule "greater_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "cut_direct" (formula "10") (term "0"))
                                    (branch "CUT: classifier.tree = null TRUE"
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "10"))
                                       (rule "cut_direct" (formula "11") (term "0"))
                                       (branch "CUT: self_129.indices = null TRUE"
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "8") (term "0,1,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "11"))
                                          (rule "commuteUnion_2" (formula "8") (term "1,1,0"))
                                          (rule "commuteUnion_2" (formula "12") (term "1,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "35") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "35"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "36")))
                                          (rule "true_left" (formula "25"))
                                          (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: self_129.indices = null FALSE"
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "36"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                                          (rule "true_left" (formula "25"))
                                          (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "CUT: classifier.tree = null FALSE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "cut_direct" (formula "11") (term "0"))
                                       (branch "CUT: self_129.indices = null TRUE"
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "8") (term "0,1,1,1,0") (ifseqformula "11"))
                                          (rule "commuteUnion_2" (formula "12") (term "1,1,0"))
                                          (rule "commuteUnion_2" (formula "8") (term "1,1,0"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "0,1,0,0,1,1,0") (ifseqformula "19") (ifseqformula "10"))
                                          (rule "cut_direct" (formula "12") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "12"))
                                             (rule "eqSymm" (formula "33"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "12"))
                                             (rule "commuteUnion" (formula "8") (term "0,0,1,1,0"))
                                             (rule "commuteUnion" (formula "13") (term "0,0,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "36"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "13"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "16"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "38") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "38") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "38") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "38"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "16"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self_129.indices = null FALSE"
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "33") (term "0") (ifseqformula "19") (ifseqformula "10"))
                                          (rule "cut_direct" (formula "1") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                             (rule "commuteUnion" (formula "13") (term "0,0,1,1,0"))
                                             (rule "commuteUnion" (formula "9") (term "0,0,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "37") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "37") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "37") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "37"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "38")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "inEqSimp_homoInEq1" (formula "16"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0"))
                                             (rule "leq_literals" (formula "16"))
                                             (rule "closeFalse" (formula "16"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "39") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "39") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "19") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "39") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "39"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "40")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "16"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: iv_0 >= 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "false_right" (formula "28"))
                              (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "13"))
                              (rule "greater_literals" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1,0"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                        (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "false_right" (formula "20"))
                           (rule "equalityToElementOfRight" (formula "19") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "allRight" (formula "19") (inst "sk=ov_0"))
                           (rule "allRight" (formula "19") (inst "sk=fv_0"))
                           (rule "notRight" (formula "19"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "19"))
                           (rule "orRight" (formula "19"))
                           (rule "elementOfUnion" (formula "19"))
                           (rule "orRight" (formula "19"))
                           (rule "elementOfArrayRange" (formula "21") (inst "iv=iv"))
                           (rule "eqSymm" (formula "21") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0,1"))
                           (rule "elementOfArrayRange" (formula "20") (inst "iv=iv"))
                           (rule "eqSymm" (formula "20") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,1"))
                           (rule "elementOfUnion" (formula "19"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "closeTrue" (formula "19"))
                        )
                     )
                     (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "commuteUnion" (formula "18") (term "1,1,1,0"))
                        (rule "equalityToElementOfRight" (formula "18") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "allRight" (formula "18") (inst "sk=ov_0"))
                        (rule "allRight" (formula "18") (inst "sk=fv_0"))
                        (rule "notRight" (formula "18"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfUnion" (formula "18"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "closeTrue" (formula "18"))
                     )
                  )
               )
               (branch "CUT: classifier.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "false_right" (formula "17"))
                  (rule "cut_direct" (formula "2") (term "0"))
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 TRUE"
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "17") (term "0") (ifseqformula "7") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "5") (term "1,0") (ifseqformula "8") (ifseqformula "10"))
                     (rule "cut_direct" (formula "5") (term "0"))
                     (branch "CUT: self_129.indices = null TRUE"
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "5"))
                        (rule "translateJavaSubInt" (formula "7") (term "2,0,0,0,1,1,0,0,1"))
                        (rule "translateJavaSubInt" (formula "7") (term "2,1,0,0,1,1,0,0,1"))
                        (rule "translateJavaMulInt" (formula "7") (term "3,0,1"))
                        (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "7") (term "4,0,1"))
                        (rule "translateJavaMulInt" (formula "23") (term "3,0,1"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaMulInt" (formula "8") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "23") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "8") (term "4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0,0,1,1,0,0,1"))
                        (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "7") (term "0,4,0,1"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaMulInt" (formula "23") (term "0,4,0,1"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                        (rule "impRight" (formula "23"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "22")))
                        (rule "closeFalse" (formula "15"))
                     )
                     (branch "CUT: self_129.indices = null FALSE"
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "translateJavaMulInt" (formula "24") (term "3,0,1"))
                        (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "7") (term "2,0,0,0,1,1,0,0,1"))
                        (rule "translateJavaSubInt" (formula "7") (term "2,1,0,0,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "4,0,1"))
                        (rule "translateJavaMulInt" (formula "7") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "7") (term "4,0,1"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaMulInt" (formula "8") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "8") (term "4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0,0,1,1,0,0,1"))
                        (rule "translateJavaMulInt" (formula "24") (term "0,4,0,1"))
                        (rule "translateJavaMulInt" (formula "7") (term "0,4,0,1"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,0,1,0"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "8") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                        (rule "impRight" (formula "24"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "25")))
                        (rule "closeFalse" (formula "15"))
                     )
                  )
                  (branch "CUT: self_129.num_buckets >= 1 + b_0 FALSE"
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_geqRight" (formula "14"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "0") (ifseqformula "5") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,0,1"))
                     (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "4") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "4") (term "4,0,1"))
                     (rule "translateJavaMulInt" (formula "20") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "5") (term "2,0,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "5") (term "2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "5") (term "4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "4") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "20") (term "0,4,0,1"))
                     (rule "translateJavaMulInt" (formula "5") (term "0,2,1,0,0,1,1,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "0,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "5") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "5") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                     (rule "impRight" (formula "20"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "19")))
                     (rule "closeFalse" (formula "12"))
                  )
               )
            )
         )
         (branch "CUT: b_0 >= 0 FALSE"
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "13"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "cut_direct" (formula "14") (term "0,0,0,0,0,0"))
            (branch "CUT: self_129.buffer = null TRUE"
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
               (rule "false_right" (formula "15"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "1") (term "0") (ifseqformula "5") (ifseqformula "7"))
               (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0"))
               (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
               (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
               (rule "translateJavaSubInt" (formula "3") (term "2,0,0,0,1,1,0,0,1"))
               (rule "translateJavaSubInt" (formula "3") (term "2,1,0,0,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "3") (term "3,0,1"))
               (rule "translateJavaAddInt" (formula "3") (term "4,0,1"))
               (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
               (rule "translateJavaMulInt" (formula "4") (term "3,0,1,0"))
               (rule "translateJavaAddInt" (formula "4") (term "4,0,1,0"))
               (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0"))
               (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
               (rule "translateJavaMulInt" (formula "3") (term "0,2,1,0,0,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "3") (term "0,4,0,1"))
               (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,0,1,0"))
               (rule "translateJavaMulInt" (formula "4") (term "0,4,0,1,0"))
               (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
               (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "impRight" (formula "17"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
               (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "6") (term "2,0,0,0,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,2,0,0,0,1,1,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "6") (term "2,1,0,0,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,2,1,0,0,1,1,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "polySimp_elimSub" (formula "5") (term "2,0,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "1,2,0,0,0,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "5") (term "2,1,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "1,2,1,0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,0,0,1,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "2,0,0,0,1,1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "2,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "2,1,0,0,1,1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "2,1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0,0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "6") (term "2,0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "5") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "16") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0,1,4,0,1,0") (ifseqformula "3"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch "CUT: self_129.buffer = null FALSE"
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
               (rule "commute_and_2" (formula "15"))
               (rule "commute_and_2" (formula "15") (term "0"))
               (rule "commute_and_2" (formula "15") (term "0,0"))
               (rule "cut_direct" (formula "15") (term "0,0,0,0"))
               (branch "CUT: classifier.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "cut_direct" (formula "16") (term "0,0,0"))
                  (branch "CUT: self_129.buffer.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0") (ifseqformula "6") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "17") (term "1"))
                     (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} TRUE"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "commuteUnion" (formula "1") (term "1,1,1,0"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,0"))
                        (rule "cut_direct" (formula "18") (term "0"))
                        (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} TRUE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "equalityToElementOfRight" (formula "19") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "translateJavaMulInt" (formula "19") (term "1,0,2,0,2,0,0,0"))
                           (rule "allRight" (formula "19") (inst "sk=ov_0"))
                           (rule "allRight" (formula "19") (inst "sk=fv_0"))
                           (rule "notRight" (formula "19"))
                           (rule "elementOfIntersect" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "elementOfUnion" (formula "22"))
                           (rule "orRight" (formula "22"))
                           (rule "elementOfArrayRangeConcrete" (formula "23"))
                           (rule "eqSymm" (formula "23") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
                           (rule "mul_literals" (formula "23") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
                           (rule "elementOfUnion" (formula "22"))
                           (rule "orRight" (formula "22"))
                           (rule "elementOfArrayRangeConcrete" (formula "23"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
                           (rule "mul_literals" (formula "23") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
                           (rule "elementOfUnion" (formula "22"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "orRight" (formula "22"))
                           (rule "eqSymm" (formula "22"))
                           (rule "eqSymm" (formula "23"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,0") (ifseqformula "12") (ifseqformula "8"))
                           (rule "cut_direct" (formula "26") (term "1,0"))
                           (branch "CUT: iv_0 >= 0 TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "cut_direct" (formula "8") (term "0"))
                              (branch "CUT: classifier.sorted_splitters = null TRUE"
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "9") (term "0,0,0,0,1,1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "applyEq" (formula "7") (term "0,0,0,0,1,1,0") (ifseqformula "8"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,1,1,0") (ifseqformula "15") (ifseqformula "17"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,0,0,0") (ifseqformula "16") (ifseqformula "12"))
                                 (rule "cut_direct" (formula "28") (term "1"))
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                    (rule "greater_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "cut_direct" (formula "11") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "9") (term "0,1,1,1,0") (ifseqformula "11"))
                                       (rule "commuteUnion_2" (formula "12") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "9") (term "1,1,0"))
                                       (rule "cut_direct" (formula "8") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "9") (term "0,0,1,0,0,1,1,0") (ifseqformula "8"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "32") (term "3,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                                          (rule "translateJavaAddInt" (formula "32") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "32") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "32"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "33")))
                                          (rule "true_left" (formula "24"))
                                          (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "17"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "29") (term "0") (ifseqformula "18") (ifseqformula "8"))
                                          (rule "cut_direct" (formula "1") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "33"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "34")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "3"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "35") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "35") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "35") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "35"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "36")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "14"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "cut_direct" (formula "8") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "9") (term "0,0,1,0,0,1,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "8"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "33"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "34")))
                                          (rule "true_left" (formula "24"))
                                          (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "17"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "18") (ifseqformula "8"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "9"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "34"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "35")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "36"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: classifier.sorted_splitters = null FALSE"
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,1,1,0") (ifseqformula "15") (ifseqformula "17"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "0,0,1,0,0,1,1,0") (ifseqformula "16") (ifseqformula "12"))
                                 (rule "cut_direct" (formula "30") (term "1"))
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 TRUE"
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "2"))
                                    (rule "greater_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "4"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: self_129.num_buckets >= 1 + iv_0 FALSE"
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "false_right" (formula "31"))
                                    (rule "inEqSimp_geqRight" (formula "30"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "cut_direct" (formula "10") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "applyEq" (formula "8") (term "0,1,1,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "12") (term "0,1,1,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "10"))
                                       (rule "commuteUnion_2" (formula "8") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "12") (term "1,1,0"))
                                       (rule "cut_direct" (formula "11") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "11"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "34"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "35")))
                                          (rule "true_left" (formula "24"))
                                          (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "13"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "17"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "18") (ifseqformula "11"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "commuteUnion" (formula "9") (term "0,0,1,1,0"))
                                             (rule "commuteUnion" (formula "13") (term "0,0,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "35") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "35") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "35") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "35"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "36")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "10"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaMulInt" (formula "37") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "37") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "37") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "37"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "13"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "18") (term "0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "closeFalse" (formula "18"))
                                          )
                                       )
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "cut_direct" (formula "11") (term "0"))
                                       (branch "CUT: classifier.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "11"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "35") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "17") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "35"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "36")))
                                          (rule "true_left" (formula "24"))
                                          (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "13"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "closeFalse" (formula "17"))
                                       )
                                       (branch "CUT: classifier.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0") (ifseqformula "18") (ifseqformula "11"))
                                          (rule "cut_direct" (formula "1") (term "0"))
                                          (branch "CUT: classifier.tree.tree = null TRUE"
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "33"))
                                             (rule "commuteUnion" (formula "9") (term "0,0,1,1,0"))
                                             (rule "commuteUnion" (formula "13") (term "0,0,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "36"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: classifier.tree.tree = null FALSE"
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,0,0,0,1,1,0,0,1"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,0,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "3,0,1"))
                                             (rule "translateJavaAddInt" (formula "17") (term "4,0,1"))
                                             (rule "translateJavaMulInt" (formula "38") (term "3,0,1"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "38") (term "4,0,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,2,1,0,0,1,1,0,0,1"))
                                             (rule "translateJavaMulInt" (formula "17") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "38") (term "0,4,0,1"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "impRight" (formula "38"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,0,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "29") (term "2,1,0,0,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "18") (term "0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "closeFalse" (formula "18"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: iv_0 >= 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                              (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "false_right" (formula "25"))
                              (rule "inEqSimp_geqRight" (formula "25"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "inEqSimp_subsumption4" (formula "4") (ifseqformula "12"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "greater_literals" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "cut_direct" (formula "7") (term "0"))
                              (branch "CUT: classifier.sorted_splitters = null TRUE"
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEq" (formula "6") (term "0,0,0,0,1,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "7"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,1,0,0,1,1,0") (ifseqformula "14") (ifseqformula "10"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,1,1,0") (ifseqformula "15") (ifseqformula "17"))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: classifier.tree = null TRUE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "7") (term "0,0,1,0,0,1,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,1,0") (ifseqformula "6"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "9"))
                                       (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "30") (term "3,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                       (rule "translateJavaAddInt" (formula "30") (term "4,0,1"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "30") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "impRight" (formula "30"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "31")))
                                       (rule "true_left" (formula "22"))
                                       (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "16") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "26") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "26") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "11"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "closeFalse" (formula "15"))
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                       (rule "translateJavaMulInt" (formula "31") (term "3,0,1"))
                                       (rule "translateJavaAddInt" (formula "31") (term "4,0,1"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "31") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "impRight" (formula "31"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "32")))
                                       (rule "true_left" (formula "22"))
                                       (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "26") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "closeFalse" (formula "15"))
                                    )
                                 )
                                 (branch "CUT: classifier.tree = null FALSE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "9"))
                                       (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,0,0,1,1,0") (ifseqformula "16") (ifseqformula "6"))
                                       (rule "cut_direct" (formula "7") (term "0"))
                                       (branch "CUT: classifier.tree.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "7"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "10") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "30") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "30") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "30") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "30"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "31")))
                                          (rule "true_left" (formula "22"))
                                          (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "26") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "16") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "33"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "34")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "27") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "closeFalse" (formula "16"))
                                       )
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,0,0,1,1,0") (ifseqformula "16") (ifseqformula "6"))
                                       (rule "cut_direct" (formula "7") (term "0"))
                                       (branch "CUT: classifier.tree.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "7"))
                                          (rule "eqSymm" (formula "29"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                          (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "31") (term "3,0,1"))
                                          (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "31") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "31") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "31"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "32")))
                                          (rule "true_left" (formula "22"))
                                          (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "10"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "closeFalse" (formula "15"))
                                       )
                                       (branch "CUT: classifier.tree.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "34"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "35")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "11"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "closeFalse" (formula "16"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: classifier.sorted_splitters = null FALSE"
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,1,0,0,1,1,0") (ifseqformula "14") (ifseqformula "10"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,1,1,1,0") (ifseqformula "15") (ifseqformula "17"))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: classifier.tree = null TRUE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "7") (term "0,0,1,0,0,1,1,0") (ifseqformula "6"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "32") (term "3,0,1"))
                                       (rule "translateJavaAddInt" (formula "32") (term "4,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "32") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "impRight" (formula "32"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "33")))
                                       (rule "true_left" (formula "22"))
                                       (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "26") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "26") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "16") (term "0,0,0,0,1,1,0,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "8"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "closeFalse" (formula "15"))
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                       (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,0,0,0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "3,0,1"))
                                       (rule "translateJavaSubInt" (formula "25") (term "2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "25") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "14") (term "0,4,0,1"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "impRight" (formula "33"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "34")))
                                       (rule "true_left" (formula "22"))
                                       (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,1,4,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "17") (term "0,0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "26") (term "0,0,1,1,1,0,0") (ifseqformula "8"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "closeFalse" (formula "15"))
                                    )
                                 )
                                 (branch "CUT: classifier.tree = null FALSE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: self_129.indices = null TRUE"
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "10") (term "0,1,1,1,0") (ifseqformula "9"))
                                       (rule "commuteUnion_2" (formula "7") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "10") (term "1,1,0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,1,0,0,1,1,0") (ifseqformula "16") (ifseqformula "6"))
                                       (rule "cut_direct" (formula "7") (term "0"))
                                       (branch "CUT: classifier.tree.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "7"))
                                          (rule "eqSymm" (formula "30"))
                                          (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                          (rule "commuteUnion" (formula "11") (term "0,0,1,1,0"))
                                          (rule "commuteUnion" (formula "8") (term "0,0,1,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "33") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "33"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "34")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "27") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "16"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: classifier.tree.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "35") (term "4,0,1"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "35") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "35"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,1,4,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "27") (term "0,0,0,0,1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "closeFalse" (formula "16"))
                                       )
                                    )
                                    (branch "CUT: self_129.indices = null FALSE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,0,0") (ifseqformula "16") (ifseqformula "6"))
                                       (rule "cut_direct" (formula "7") (term "0"))
                                       (branch "CUT: classifier.tree.tree = null TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "7"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                                          (rule "commuteUnion" (formula "8") (term "0,0,1,1,0"))
                                          (rule "commuteUnion" (formula "11") (term "0,0,1,1,0"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "34") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "34"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "35")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,1,1,1,0,1,4,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "closeFalse" (formula "16"))
                                       )
                                       (branch "CUT: classifier.tree.tree = null FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,0,0,0,1,1,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "36") (term "3,0,1"))
                                          (rule "translateJavaAddInt" (formula "36") (term "4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "3,0,1"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,0,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "4,0,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "3,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "26") (term "2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,2,1,0,0,1,1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "36") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "15") (term "0,4,0,1"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "16") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "impRight" (formula "36"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "37")))
                                          (rule "true_left" (formula "23"))
                                          (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "27") (term "2,1,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "closeFalse" (formula "16"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: classifier.tree.tree.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) = {} FALSE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "equalityToElementOfRight" (formula "18") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "allRight" (formula "18") (inst "sk=ov_0"))
                           (rule "allRight" (formula "18") (inst "sk=fv_0"))
                           (rule "notRight" (formula "18"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "elementOfUnion" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "elementOfArrayRange" (formula "20") (inst "iv=iv"))
                           (rule "eqSymm" (formula "20") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,1"))
                           (rule "elementOfUnion" (formula "18"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "closeTrue" (formula "18"))
                        )
                     )
                     (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(self_129.indices, 0, -1 + self_129.num_buckets) cup arrayRange(self_129.buffer, 0, -1 + self_129.num_buckets * 256) = {} FALSE"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "false_right" (formula "18"))
                        (rule "commuteUnion" (formula "17") (term "1,1,1,0"))
                        (rule "equalityToElementOfRight" (formula "17") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "allRight" (formula "17") (inst "sk=ov_0"))
                        (rule "allRight" (formula "17") (inst "sk=fv_0"))
                        (rule "notRight" (formula "17"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfUnion" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "elementOfUnion" (formula "17"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "closeTrue" (formula "17"))
                     )
                  )
                  (branch "CUT: self_129.buffer.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "0") (ifseqformula "5") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "CUT: classifier.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "false_right" (formula "16"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "14") (term "0") (ifseqformula "4") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "translateJavaSubInt" (formula "3") (term "2,0,0,0,1,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,0,0,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "3") (term "2,1,0,0,1,1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "19") (term "3,0,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "4,0,1"))
                  (rule "translateJavaMulInt" (formula "3") (term "3,0,1"))
                  (rule "translateJavaAddInt" (formula "3") (term "4,0,1"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "4") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "4") (term "4,0,1,0"))
                  (rule "translateJavaMulInt" (formula "3") (term "0,2,1,0,0,1,1,0,0,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,2,1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "19") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "3") (term "0,4,0,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,4,0,1,0"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
                  (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
                  (rule "impRight" (formula "19"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "18")))
                  (rule "closeFalse" (formula "11"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "translateJavaSubInt" (formula "12") (term "2,0,0,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "16") (term "3,0,1"))
         (rule "translateJavaSubInt" (formula "13") (term "2,0,0,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "13") (term "2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "13") (term "3,0"))
         (rule "translateJavaAddInt" (formula "16") (term "4,0,1"))
         (rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,1,1,0,0,1"))
         (rule "translateJavaSubInt" (formula "1") (term "2,1,0,0,1,1,0,0,1"))
         (rule "translateJavaMulInt" (formula "1") (term "3,0,1"))
         (rule "translateJavaAddInt" (formula "13") (term "4,0"))
         (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "3,1"))
         (rule "translateJavaAddInt" (formula "13") (term "4,1"))
         (rule "translateJavaSubInt" (formula "2") (term "2,0,0,0,1,1,0,0,1,0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,1,0,0,1,1,0,0,1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "3,0,1,0"))
         (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
         (rule "translateJavaMulInt" (formula "12") (term "0,2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "13") (term "0,2,1,0,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,4,0,1"))
         (rule "translateJavaMulInt" (formula "1") (term "0,2,1,0,0,1,1,0,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "1") (term "0,4,0,1"))
         (rule "translateJavaMulInt" (formula "13") (term "0,4,1"))
         (rule "translateJavaMulInt" (formula "2") (term "0,2,1,0,0,1,1,0,0,1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "0,4,0,1,0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "impRight" (formula "16"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
         (rule "polySimp_elimSub" (formula "14") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "15") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "4") (term "1,2,0,0,0,1,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "15") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "4") (term "1,2,1,0,0,1,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
         (rule "mul_literals" (formula "4") (term "1,2,0,0,0,1,1,0,1,4,0,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "mul_literals" (formula "4") (term "1,2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "polySimp_elimSub" (formula "3") (term "2,1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "3") (term "1,2,1,0,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "3") (term "2,0,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "3") (term "1,2,0,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,0,0,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "2,0,0,0,1,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "2,0,0,0,1,1,0,1,4,0,1,0"))
         (rule "polySimp_addComm0" (formula "3") (term "2,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "2,1,0,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "2,1,0,0,1,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "2,1,0,0,1,1,0,1,4,0,1,0"))
         (rule "polySimp_addComm0" (formula "3") (term "2,1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "15"))
         (rule "close" (formula "18") (ifseqformula "3"))
      )
   )
)
)
}
