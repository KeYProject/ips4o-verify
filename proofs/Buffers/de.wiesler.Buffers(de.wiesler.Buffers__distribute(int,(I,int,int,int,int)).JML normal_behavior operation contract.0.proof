\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 24 12:54:35 CET 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Feb 24 12:54:35 CET 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "30626")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,1,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,0,1,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,1,0,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,0,1,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,0,1,1,1,1,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "16"))
(rule "eqSymm" (formula "18") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "18") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "18") (term "1,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "13"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "18") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "18") (term "1,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "18") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "18") (term "1,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "14") (term "2,1"))
(rule "mul_literals" (formula "14") (term "1,2,1"))
(rule "polySimp_elimSub" (formula "14") (term "2,0"))
(rule "mul_literals" (formula "14") (term "1,2,0"))
(rule "polySimp_addComm0" (formula "18") (term "3,1,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "18") (term "3,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "3,0"))
(rule "polySimp_addComm0" (formula "12") (term "3,0"))
(rule "polySimp_addComm0" (formula "18") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "18") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,0"))
(rule "polySimp_addComm1" (formula "18") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "18") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "14") (term "2,1"))
(rule "polySimp_addComm1" (formula "14") (term "2,0"))
(rule "polySimp_addComm0" (formula "18") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "18") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,0"))
(rule "disjointDefinition" (formula "10"))
 (builtin "One Step Simplification" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "eqSymm" (formula "15"))
(rule "disjointDefinition" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "14"))
(rule "disjointDefinition" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "13"))
(rule "disjointDefinition" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0,0,0,1"))
(rule "disjointArrayRanges" (formula "11"))
 (builtin "One Step Simplification" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1"))
(rule "assignment" (formula "18") (term "1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "elementOfUnion" (formula "18") (term "0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "18") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "18") (term "0,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1,0,0,0,0,0,1,0,1"))
(rule "commute_and" (formula "12") (term "1,1"))
(rule "cnf_rightDist" (formula "12") (term "1"))
(rule "commute_or" (formula "12") (term "0,1"))
(rule "cnf_rightDist" (formula "12") (term "1,1"))
(rule "commute_or" (formula "12") (term "1,1,1"))
(rule "cnf_rightDist" (formula "12") (term "0,1"))
(rule "commute_or" (formula "12") (term "1,0,1"))
(rule "shift_paren_and" (formula "12") (term "1"))
(rule "shift_paren_and" (formula "12"))
(rule "shift_paren_and" (formula "12") (term "0"))
(rule "shift_paren_and" (formula "12") (term "0,0"))
(rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_distribute,savedHeapBefore_distribute"))
 (builtin "One Step Simplification" (formula "18"))
 (builtin "Block Contract (Internal)" (formula "18") (newnames "exc_25,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
(branch "Validity"
    (builtin "One Step Simplification" (formula "19"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "18")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
   (rule "true_left" (formula "12"))
   (rule "translateJavaAddInt" (formula "18") (term "0,1,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,0,1"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "exc_25_1"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "emptyStatement" (formula "18") (term "1"))
   (rule "emptyStatement" (formula "18") (term "1"))
   (rule "tryEmpty" (formula "18") (term "1"))
   (rule "blockEmptyLabel" (formula "18") (term "1"))
   (rule "blockEmpty" (formula "18") (term "1"))
   (rule "methodCallEmpty" (formula "18") (term "1"))
   (rule "emptyModality" (formula "18") (term "1"))
   (rule "andRight" (formula "18"))
   (branch
      (rule "andRight" (formula "18"))
      (branch
          (builtin "One Step Simplification" (formula "18"))
         (rule "closeTrue" (formula "18"))
      )
      (branch
          (builtin "One Step Simplification" (formula "18"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,1,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,1,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_or_tautInEq0" (formula "12") (term "1,0"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,1,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,1,1,0"))
         (rule "add_literals" (formula "12") (term "0,1,1,0"))
         (rule "leq_literals" (formula "12") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "10") (term "0,0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaMulInt" (formula "10") (term "0,0,0"))
         (rule "translateJavaAddInt" (formula "10") (term "1,0,0"))
         (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "10") (term "0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "1,0"))
         (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0"))
         (rule "add_literals" (formula "10") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "10") (term "0,1,0"))
         (rule "add_zero_left" (formula "10") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "11") (inst "b=b"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "11") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "notLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "eqSymm" (formula "18"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "14"))
         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
         (rule "mul_literals" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_homoInEq0" (formula "10"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
         (rule "add_literals" (formula "10") (term "1,1,0"))
         (rule "times_zero_1" (formula "10") (term "1,0"))
         (rule "add_zero_right" (formula "10") (term "0"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_homoInEq0" (formula "13"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0"))
         (rule "add_zero_right" (formula "13") (term "0"))
         (rule "commute_or" (formula "23") (term "1,0"))
         (rule "commute_or" (formula "23") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "21") (term "0"))
         (rule "ifthenelse_split" (formula "15") (term "0"))
         (branch "self.indices[bucket] >= 1 TRUE"
            (rule "close" (formula "31") (ifseqformula "16"))
         )
         (branch "self.indices[bucket] >= 1 FALSE"
            (rule "polySimp_homoEq" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "inEqSimp_geqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "16"))
            (rule "applyEq" (formula "25") (term "0,1,0,0,0") (ifseqformula "16"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,0"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "25") (term "0,1,1,1,1,0,0") (ifseqformula "16"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "25") (term "1,1,1,0,0"))
            (rule "applyEq" (formula "25") (term "0,1,1,1,1,0") (ifseqformula "16"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "25") (term "1,1,1,0"))
            (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "16"))
            (rule "polySimp_pullOutFactor1" (formula "31") (term "1"))
            (rule "add_literals" (formula "31") (term "1,1"))
            (rule "times_zero_1" (formula "31") (term "1"))
            (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,1,0,0,0"))
            (rule "inEqSimp_invertInEq1" (formula "14"))
            (rule "mul_literals" (formula "14") (term "1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "31"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "31") (ifseqformula "1"))
            (rule "mul_literals" (formula "31") (term "1,0,0"))
            (rule "add_literals" (formula "31") (term "0,0"))
            (rule "qeq_literals" (formula "31") (term "0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "false_right" (formula "31"))
            (rule "inEqSimp_contradInEq0" (formula "25") (term "0,0,0,0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "25") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "false_right" (formula "25"))
            (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "14"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "11"))
            (rule "leq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "14") (term "0,1"))
            (rule "add_zero_left" (formula "14") (term "1"))
            (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "11"))
            (rule "add_zero_left" (formula "12") (term "1"))
            (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "15") (term "1"))
            (rule "allLeft" (formula "20") (inst "t=bucket"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
            (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "20") (term "0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,1"))
            (rule "leq_literals" (formula "20") (term "0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "7"))
            (rule "qeq_literals" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "closeFalse" (formula "20"))
         )
      )
   )
   (branch
       (builtin "One Step Simplification" (formula "18"))
      (rule "closeTrue" (formula "18"))
   )
)
(branch "Precondition"
   (rule "andRight" (formula "18"))
   (branch
      (rule "andRight" (formula "18"))
      (branch
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "18"))
      )
      (branch
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "18"))
      )
   )
   (branch
      (rule "andRight" (formula "18"))
      (branch
         (rule "andRight" (formula "18"))
         (branch
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "18"))
         )
         (branch
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
         (rule "closeTrue" (formula "18"))
      )
   )
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "eqSymm" (formula "13"))
   (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "elim_double_block_2" (formula "20") (term "1"))
   (rule "ifUnfold" (formula "20") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "replace_known_left" (formula "20") (term "0,0,1,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "lenNonNegative" (formula "10") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "ifSplit" (formula "21"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "offset"))
      (rule "assignmentMultiplicationInt" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
       (builtin "Block Contract (Internal)" (formula "21") (newnames "exc_26,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "21")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "15"))
         (rule "translateJavaAddInt" (formula "21") (term "3,0,1,0,0,1"))
         (rule "translateJavaMulInt" (formula "21") (term "0,1,0,0"))
         (rule "translateJavaAddInt" (formula "21") (term "0,4,0,1,0,0,1"))
         (rule "translateJavaAddInt" (formula "21") (term "4,0,1,0,0,1"))
         (rule "eqSymm" (formula "21") (term "0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "21") (term "3,0,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "21") (term "0,4,0,1,0,0,1"))
         (rule "polySimp_addComm1" (formula "21") (term "4,0,1,0,0,1"))
         (rule "variableDeclarationAssign" (formula "21") (term "1"))
         (rule "variableDeclaration" (formula "21") (term "1") (newnames "exc_26_1"))
         (rule "assignment" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "emptyStatement" (formula "21") (term "1"))
         (rule "emptyStatement" (formula "21") (term "1"))
         (rule "tryEmpty" (formula "21") (term "1"))
         (rule "blockEmptyLabel" (formula "21") (term "1"))
         (rule "blockEmpty" (formula "21") (term "1"))
         (rule "methodCallEmpty" (formula "21") (term "1"))
         (rule "emptyModality" (formula "21") (term "1"))
         (rule "andRight" (formula "21"))
         (branch
            (rule "andRight" (formula "21"))
            (branch
                (builtin "One Step Simplification" (formula "21"))
               (rule "closeTrue" (formula "21"))
            )
            (branch
                (builtin "One Step Simplification" (formula "21"))
               (rule "polySimp_addComm1" (formula "21") (term "4,0"))
               (rule "polySimp_addComm0" (formula "21") (term "3,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,4,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,1,0,0,0"))
               (rule "inEqSimp_or_tautInEq0" (formula "15") (term "1,0"))
               (rule "inEqSimp_homoInEq1" (formula "15") (term "1,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,1,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,1,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,1,1,0"))
               (rule "add_literals" (formula "15") (term "0,1,1,0"))
               (rule "leq_literals" (formula "15") (term "1,1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
               (rule "replace_known_left" (formula "11") (term "1,0,0,0,0") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "21")) (ifInst ""  (formula "13")))
               (rule "true_left" (formula "11"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_homoInEq0" (formula "9"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "times_zero_1" (formula "9") (term "1,0"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "13") (term "0,0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0"))
               (rule "translateJavaMulInt" (formula "13") (term "0,0,0"))
               (rule "translateJavaAddInt" (formula "13") (term "1,0,0"))
               (rule "lenOfSeqDef" (formula "13") (term "0"))
               (rule "polySimp_elimSub" (formula "13") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "1,0"))
               (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0"))
               (rule "add_literals" (formula "13") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "13") (term "0,1,0"))
               (rule "add_zero_left" (formula "13") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_homoEq" (formula "13") (term "1"))
               (rule "times_zero_2" (formula "13") (term "1,0,1"))
               (rule "add_zero_right" (formula "13") (term "0,1"))
               (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "16"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "13") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_homoInEq0" (formula "12"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0"))
               (rule "add_zero_right" (formula "12") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "16") (inst "b=b"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "16") (term "0,1,1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "18"))
               (rule "notLeft" (formula "16"))
               (rule "notLeft" (formula "16"))
               (rule "eqSymm" (formula "25"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "19"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "32") (term "0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "33")))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "24") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "24") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "24") (term "1,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,0,0,1,0"))
               (rule "add_literals" (formula "24") (term "1,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "24") (term "0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0,1,0"))
               (rule "add_literals" (formula "24") (term "1,0,0,1,0"))
               (rule "times_zero_1" (formula "24") (term "0,0,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,1,0"))
               (rule "replace_known_left" (formula "24") (term "1,0") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
               (rule "mul_literals" (formula "24") (term "1,0,1"))
               (rule "polySimp_addComm1" (formula "24") (term "0,1"))
               (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,1"))
               (rule "inEqSimp_subsumption6" (formula "24") (term "0") (ifseqformula "6"))
               (rule "times_zero_1" (formula "24") (term "1,1,0,0"))
               (rule "greater_literals" (formula "24") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "leq_literals" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
               (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "33") (term "0") (inst "element=element"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "translateJavaAddInt" (formula "33") (term "1,0"))
               (rule "allRight" (formula "33") (inst "sk=element_0"))
               (rule "polySimp_homoEq" (formula "33"))
               (rule "polySimp_addComm1" (formula "33") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "33"))
               (rule "polySimp_mulComm0" (formula "33") (term "1"))
               (rule "polySimp_rightDist" (formula "33") (term "1"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "33") (term "0,1"))
               (rule "commute_or" (formula "27") (term "1,0"))
               (rule "commute_or" (formula "17"))
               (rule "inEqSimp_or_weaken1" (formula "17"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
               (rule "true_left" (formula "17"))
               (rule "commute_or" (formula "26") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0"))
               (rule "distr_forallAnd" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "0") (inst "i=i"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "1,1") (inst "i=i"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "0,0,1") (inst "i=i"))
               (rule "commute_or" (formula "22") (term "0"))
               (rule "cut_direct" (formula "27") (term "0,0,0,0"))
               (branch "CUT: head_len >= 1 TRUE"
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "arrayLengthIsAnInt" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "arrayLengthNotNegative" (formula "12") (term "0"))
                  (rule "commute_and_2" (formula "28"))
                  (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "allLeft" (formula "22") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "26"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1"))
                  (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "allLeft" (formula "23") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                  (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "26"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "23") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "23") (term "0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "23"))
                  (rule "mul_literals" (formula "15") (term "0,0"))
                  (rule "add_zero_left" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "24"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "polySimp_addLiterals" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "10"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "greater_literals" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: head_len >= 1 FALSE"
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "false_right" (formula "28"))
                  (rule "inEqSimp_geqRight" (formula "27"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "11"))
                  (rule "add_zero_right" (formula "32") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "32"))
                  (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                  (rule "add_literals" (formula "32") (term "1,1,0"))
                  (rule "times_zero_1" (formula "32") (term "1,0"))
                  (rule "add_zero_right" (formula "32") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "11"))
                  (rule "times_zero_2" (formula "1") (term "1,1"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "11"))
                  (rule "times_zero_2" (formula "16") (term "1"))
                  (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "11"))
                  (rule "add_zero_right" (formula "31") (term "1,0,0"))
                  (rule "bsum_lower_equals_upper" (formula "31") (term "0,0"))
                  (rule "times_zero_2" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "closeTrue" (formula "31"))
               )
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "21"))
            (rule "closeTrue" (formula "21"))
         )
      )
      (branch "Precondition"
         (rule "andRight" (formula "21"))
         (branch
            (rule "andRight" (formula "21"))
            (branch
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "5")))
               (rule "closeTrue" (formula "21"))
            )
            (branch
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "21"))
            )
         )
         (branch
            (rule "andRight" (formula "21"))
            (branch
               (rule "andRight" (formula "21"))
               (branch
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                  (rule "closeTrue" (formula "21"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")))
                  (rule "closeTrue" (formula "21"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")))
               (rule "closeTrue" (formula "21"))
            )
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaMulInt" (formula "22") (term "0,1,0"))
         (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,3,0,1,0"))
         (rule "translateJavaMulInt" (formula "15") (term "2,0,1,0"))
         (rule "translateJavaAddInt" (formula "15") (term "0,4,0,1,0"))
         (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,0,4,0,1,0"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "elim_double_block_2" (formula "23") (term "1"))
         (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_1"))
         (rule "inequality_comparison_simple" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "replace_known_left" (formula "23") (term "0,0,1,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "ifSplit" (formula "23"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "24"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "24"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "23") (term "1"))
            (rule "methodCallUnfoldArguments" (formula "23") (term "1"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "var"))
            (rule "assignment_read_attribute_this_final" (formula "23"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_1"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_2"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_4"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
             (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_copy_nonoverlapping,exc_27,heapAfter_copy_nonoverlapping,anon_heap_copy_nonoverlapping") (contract "de.wiesler.Functions[de.wiesler.Functions::copy_nonoverlapping([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (copy_nonoverlapping)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,0,1,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,1,1,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "3,1,0,1,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "3,0,0,1,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,0,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,1,0,0"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "21"))
               (rule "eqSymm" (formula "22") (term "0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_elimSub" (formula "18") (term "2,1,0"))
               (rule "mul_literals" (formula "18") (term "1,2,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "3,1,0"))
               (rule "polySimp_addComm0" (formula "21") (term "1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "0,2,1,0"))
               (rule "polySimp_addComm1" (formula "18") (term "2,1,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,2,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "blockEmpty" (formula "29") (term "1"))
               (rule "commute_and" (formula "20") (term "0,0"))
               (rule "methodCallUnfoldArguments" (formula "29") (term "1"))
               (rule "variableDeclarationAssign" (formula "29") (term "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_5"))
               (rule "assignment_read_attribute_this_final" (formula "29"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "variableDeclarationAssign" (formula "29") (term "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_6"))
               (rule "assignmentAdditionInt" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "translateJavaAddInt" (formula "29") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "29") (term "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_7"))
               (rule "assignment" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "variableDeclarationAssign" (formula "29") (term "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_8"))
               (rule "assignment" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "variableDeclarationAssign" (formula "29") (term "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_9"))
               (rule "assignment" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29"))
                (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_copy_nonoverlapping_0,exc_28,heapAfter_copy_nonoverlapping_0,anon_heap_copy_nonoverlapping_0") (contract "de.wiesler.Functions[de.wiesler.Functions::copy_nonoverlapping([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (copy_nonoverlapping)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "3,1,0,1,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0"))
                  (rule "translateJavaAddInt" (formula "24") (term "1,1,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "1,0,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "3,0,0,1,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,0,1,0,0,0,1,1"))
                  (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "25"))
                  (rule "andLeft" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "andLeft" (formula "27"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "28") (term "0"))
                  (rule "polySimp_elimSub" (formula "24") (term "2,1,0"))
                  (rule "mul_literals" (formula "24") (term "1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "28") (term "3,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,2,1,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "2,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,2,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                  (rule "commute_and" (formula "26") (term "0,0"))
                  (rule "methodCallEmpty" (formula "35") (term "1"))
                  (rule "tryEmpty" (formula "35") (term "1"))
                  (rule "emptyModality" (formula "35") (term "1"))
                  (rule "andRight" (formula "35"))
                  (branch "Case 1"
                     (rule "andRight" (formula "35"))
                     (branch "Case 1"
                        (rule "andRight" (formula "35"))
                        (branch "Case 1"
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "allRight" (formula "35") (inst "sk=i_0"))
                           (rule "impRight" (formula "35"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1,0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "31") (term "0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "31") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "0,1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,0,1,0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "0,1,0,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,1,0,0"))
                           (rule "pullOutSelect" (formula "37") (term "1") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                           (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,0,1,1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "8")))
                           (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_or_tautInEq0" (formula "33") (term "1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1,1,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,1,1,0"))
                           (rule "add_literals" (formula "33") (term "0,1,1,0"))
                           (rule "leq_literals" (formula "33") (term "1,1,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_notAnd" (formula "30") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                           (rule "mul_literals" (formula "30") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "30") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "24") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                           (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "20") (term "0"))
                           (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "5")))
                           (rule "true_left" (formula "20"))
                           (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "15") (term "0,0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "translateJavaMulInt" (formula "15") (term "0,0,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "1,0,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "0,1,0,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "1,0"))
                           (rule "polySimp_pullOutFactor0" (formula "15") (term "0,1,0"))
                           (rule "add_literals" (formula "15") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "15") (term "0,1,0"))
                           (rule "add_zero_left" (formula "15") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                           (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,0"))
                           (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,0") (ifseqformula "18"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                           (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_homoEq" (formula "15") (term "1"))
                           (rule "times_zero_2" (formula "15") (term "1,0,1"))
                           (rule "add_zero_right" (formula "15") (term "0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "15") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "32") (term "1,0") (inst "i=i"))
                           (rule "eqSymm" (formula "32") (term "0"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "0,0") (inst "i=i"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "16") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0"))
                           (rule "translateJavaMulInt" (formula "16") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "18"))
                           (rule "notLeft" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "eqSymm" (formula "39"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                           (rule "mul_literals" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "1,1,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0"))
                           (rule "add_zero_right" (formula "14") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "32") (term "1,0") (inst "i=i"))
                           (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "26") (term "0") (inst "element=element"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "translateJavaAddInt" (formula "26") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "26") (term "0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                           (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "inEqSimp_homoInEq0" (formula "16"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "1,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "49") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "49")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "49") (term "0,0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "translateJavaAddInt" (formula "49") (term "1,0,0"))
                           (rule "translateJavaMulInt" (formula "49") (term "0,0,0"))
                           (rule "translateJavaMulInt" (formula "49") (term "0,1,0,0"))
                           (rule "getOfSeqDef" (formula "49") (term "0"))
                           (rule "castDel" (formula "49") (term "2,0"))
                           (rule "castDel" (formula "49") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "49") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "49") (term "0,2,1,0"))
                           (rule "polySimp_addComm1" (formula "49") (term "1,1,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "49") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "49") (term "1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "49") (term "0,1,1,0,0"))
                           (rule "add_zero_left" (formula "49") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "49") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                           (rule "replace_known_left" (formula "49") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "applyEq" (formula "49") (term "0,1,0,0,0") (ifseqformula "26"))
                           (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "49") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "49") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "49") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "24") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                           (rule "commute_or" (formula "43") (term "1,0"))
                           (rule "commute_or" (formula "38") (term "0,0"))
                           (rule "commute_or" (formula "43") (term "1,0,0"))
                           (rule "commute_or" (formula "32") (term "0,0"))
                           (rule "commute_or" (formula "19"))
                           (rule "inEqSimp_or_weaken1" (formula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                           (rule "true_left" (formula "19"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1,0") (inst "i=i"))
                           (rule "eqSymm" (formula "39") (term "0"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0") (inst "i=i"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "1,1,0") (inst "i=i"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                           (rule "andLeft" (formula "32"))
                           (rule "lenOfSeqDef" (formula "32") (term "0"))
                           (rule "eqSymm" (formula "32"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                           (rule "polySimp_addComm1" (formula "32") (term "1,1"))
                           (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,1"))
                           (rule "add_literals" (formula "32") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "32") (term "0,1,1"))
                           (rule "add_zero_left" (formula "32") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "1,1,1,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,1,0,0"))
                           (rule "add_literals" (formula "33") (term "1,0,1,1,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "0,1,1,1,0,0"))
                           (rule "add_zero_left" (formula "33") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "33") (term "1,1,0"))
                           (rule "castDel" (formula "33") (term "2,1,1,0"))
                           (rule "castDel" (formula "33") (term "1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "1,1,0,1,1,0"))
                           (rule "add_literals" (formula "33") (term "1,1,1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "33") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,2,1,1,1,0"))
                           (rule "getOfSeqDef" (formula "33") (term "0,1,0"))
                           (rule "castDel" (formula "33") (term "2,0,1,0"))
                           (rule "castDel" (formula "33") (term "1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,2,1,0,1,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "1,1,0,0,1,0"))
                           (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,0,0,1,0"))
                           (rule "add_literals" (formula "33") (term "1,0,1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "33") (term "0,1,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "33") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "32") (term "0"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "1,0"))
                           (rule "add_literals" (formula "32") (term "1,1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,1,0"))
                           (rule "add_zero_right" (formula "32") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1"))
                           (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0,0,1"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0,1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,1,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "33") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "33") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "32") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,0,1,1,1,0,0"))
                           (rule "replace_known_left" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "nnf_imp2or" (formula "32") (term "0"))
                           (rule "nnf_notAnd" (formula "32") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                           (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
                           (rule "andLeft" (formula "39"))
                           (rule "lenOfSeqDef" (formula "39") (term "0"))
                           (rule "eqSymm" (formula "39"))
                           (rule "polySimp_elimSub" (formula "39") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,1"))
                           (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "39") (term "1,1"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,1"))
                           (rule "add_literals" (formula "39") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "39") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "39") (term "0,1,1"))
                           (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,1"))
                           (rule "add_literals" (formula "39") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "39") (term "0,1,1"))
                           (rule "add_zero_left" (formula "39") (term "1,1"))
                           (rule "getOfSeqDef" (formula "40") (term "0,1,0"))
                           (rule "castDel" (formula "40") (term "2,0,1,0"))
                           (rule "castDel" (formula "40") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "40") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_mulAssoc" (formula "40") (term "0,1,1,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "40") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,1,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,1,1,1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "40") (term "0,1,1,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "39") (term "0"))
                           (rule "polySimp_elimSub" (formula "39") (term "1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "39") (term "1,0"))
                           (rule "add_literals" (formula "39") (term "1,1,1,0"))
                           (rule "times_zero_1" (formula "39") (term "1,1,0"))
                           (rule "add_zero_right" (formula "39") (term "1,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,0,1,1,0"))
                           (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,1,0,1,1,0"))
                           (rule "add_literals" (formula "40") (term "1,0,0,0,1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "40") (term "0,0,0,1,1,0,1,1,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,1,0,1,1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,1,0,1,1,0"))
                           (rule "add_literals" (formula "40") (term "1,0,1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "40") (term "0,1,1,0,1,1,0"))
                           (rule "add_zero_left" (formula "40") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1"))
                           (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,1"))
                           (rule "getOfSeqDef" (formula "40") (term "0,1,0"))
                           (rule "castDel" (formula "40") (term "2,0,1,0"))
                           (rule "castDel" (formula "40") (term "1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "40") (term "1,1,0,0,1,0"))
                           (rule "add_literals" (formula "40") (term "1,1,1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "40") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "40") (term "1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "40") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,1,1,0,0"))
                           (rule "add_literals" (formula "40") (term "1,0,0,0,1,1,1,0,0"))
                           (rule "times_zero_1" (formula "40") (term "0,0,0,1,1,1,0,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,1,1,0,0"))
                           (rule "add_literals" (formula "40") (term "1,0,1,1,1,0,0"))
                           (rule "times_zero_1" (formula "40") (term "0,1,1,1,0,0"))
                           (rule "add_zero_left" (formula "40") (term "1,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "40") (term "0,0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "0,0,0,1,0,0,0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,0,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0"))
                           (rule "eqSymm" (formula "39"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "40") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "39") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0,0"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,0"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "39") (term "0,0,0,0,1,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,0,0,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1,1,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "39") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "39") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "39") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "0,0,1,1,1,0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "replace_known_left" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "2"))
                              (rule "leq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "17") (term "0,0"))
                              (rule "add_zero_left" (formula "17") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "6"))
                              (rule "polySimp_mulAssoc" (formula "17") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1"))
                              (rule "mul_literals" (formula "17") (term "0,1"))
                              (rule "cnf_rightDist" (formula "26") (term "0"))
                              (rule "nnf_imp2or" (formula "42") (term "0"))
                              (rule "nnf_notAnd" (formula "42") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                              (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                              (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "35") (term "0"))
                              (rule "arrayLengthIsAnInt" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                              (rule "qeq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                              (rule "qeq_literals" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "arrayLengthIsAnInt" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                              (rule "ifthenelse_split" (formula "54") (term "0"))
                              (branch "tail_len >= 1 + head_len * -1 + i_0 TRUE"
                                 (rule "eqSymm" (formula "55"))
                                 (rule "distr_forallAnd" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "1,0") (ifseqformula "8") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "49"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "53") (term "0") (ifseqformula "8") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or_2" (formula "47") (term "0"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "commute_or" (formula "30") (term "0"))
                                 (rule "commute_or" (formula "47") (term "0,0"))
                                 (rule "commute_and_2" (formula "52"))
                                 (rule "ifthenelse_to_or_right" (formula "40") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "commute_or_2" (formula "40") (term "0"))
                                 (rule "commute_or_2" (formula "40") (term "0,1,0"))
                                 (rule "commute_or" (formula "40") (term "1,1,0"))
                                 (rule "commute_or" (formula "40") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "40") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "40") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "40") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "40") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "40") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "40") (term "1,0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "shift_paren_or" (formula "40") (term "1,1,0"))
                                 (rule "commute_or" (formula "40") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "40") (term "1,1,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "40") (term "1,1,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,1,1,0"))
                                 (rule "add_literals" (formula "40") (term "1,0,1,1,1,0"))
                                 (rule "times_zero_1" (formula "40") (term "0,1,1,1,0"))
                                 (rule "leq_literals" (formula "40") (term "1,1,1,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "shift_paren_or" (formula "40") (term "0"))
                                 (rule "commute_or_2" (formula "40") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "shift_paren_or" (formula "40") (term "0,0"))
                                 (rule "commute_or" (formula "40") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "ifthenelse_to_or_left" (formula "47") (term "0,0,0"))
                                 (rule "eqSymm" (formula "47") (term "1,0,0,0,0"))
                                 (rule "eqSymm" (formula "47") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "nnf_notAnd" (formula "47") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "47") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "47") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "47") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "47") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "1,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "47") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "47") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "47") (term "1,1,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "47") (term "0,0"))
                                 (rule "commute_or_2" (formula "47") (term "0"))
                                 (rule "commute_or_2" (formula "47") (term "0,1,0"))
                                 (rule "commute_or" (formula "47") (term "1,1,0"))
                                 (rule "commute_or" (formula "47") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "47") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "47") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "47") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "47") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "47") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "47") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "47") (term "1,0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "shift_paren_or" (formula "47") (term "1,1,0"))
                                 (rule "commute_or" (formula "47") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "47") (term "1,1,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "47") (term "1,1,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "47") (term "0,1,1,1,0"))
                                 (rule "add_literals" (formula "47") (term "1,0,1,1,1,0"))
                                 (rule "times_zero_1" (formula "47") (term "0,1,1,1,0"))
                                 (rule "leq_literals" (formula "47") (term "1,1,1,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "shift_paren_or" (formula "47") (term "0"))
                                 (rule "commute_or_2" (formula "47") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "shift_paren_or" (formula "47") (term "0,0"))
                                 (rule "commute_or" (formula "47") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "ifthenelse_to_or_left" (formula "40") (term "0,0,0"))
                                 (rule "eqSymm" (formula "40") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "commute_or_2" (formula "40") (term "0"))
                                 (rule "commute_or_2" (formula "40") (term "0,1,0"))
                                 (rule "commute_or" (formula "40") (term "1,1,0"))
                                 (rule "commute_or" (formula "40") (term "0,0,1,0"))
                                 (rule "allLeft" (formula "39") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet000001212_1" (formula "39") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000001212_2" (formula "39") (term "0,1"))
                                 (rule "eqSymm" (formula "39") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "39") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "inEqSimp_contradInEq0" (formula "39") (term "0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "39") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "39") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0"))
                                 (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,0"))
                                 (rule "leq_literals" (formula "39") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "53")) (ifInst ""  (formula "1")))
                                 (rule "eqSymm" (formula "40"))
                                 (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "40"))
                                 (rule "hideAuxiliaryEq" (formula "40"))
                                 (rule "elementOfArrayRangeConcrete" (formula "39") (term "0,0"))
                                 (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "cnf_rightDist" (formula "41") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "41") (term "0"))
                                 (rule "distr_forallAnd" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "commute_or" (formula "42") (term "0"))
                                 (rule "shift_paren_or" (formula "41") (term "0"))
                                 (rule "commute_or_2" (formula "41") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "commute_or" (formula "42") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "41") (term "0,0"))
                                 (rule "commute_or" (formula "41") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "cnf_rightDist" (formula "42") (term "0"))
                                 (rule "distr_forallAnd" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "commute_or_2" (formula "42") (term "0"))
                                 (rule "shift_paren_or" (formula "43") (term "0"))
                                 (rule "commute_or_2" (formula "43") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,0"))
                                 (rule "add_literals" (formula "43") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "43") (term "0,1,0"))
                                 (rule "leq_literals" (formula "43") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "true_left" (formula "43"))
                                 (rule "shift_paren_or" (formula "42") (term "0,0"))
                                 (rule "commute_or" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0"))
                                 (rule "add_zero_right" (formula "42") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "42") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "ifthenelse_to_or_left" (formula "48") (term "0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "1,1,0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "48") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,0,0,0"))
                                 (rule "commute_or" (formula "48") (term "0,0"))
                                 (rule "commute_or_2" (formula "48") (term "0"))
                                 (rule "commute_or_2" (formula "48") (term "0,1,0"))
                                 (rule "commute_or" (formula "48") (term "1,1,0"))
                                 (rule "andRight" (formula "53"))
                                 (branch
                                    (rule "commute_or" (formula "48") (term "0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "48") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "48") (term "0"))
                                    (rule "distr_forallAnd" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "commute_or" (formula "49") (term "0"))
                                    (rule "shift_paren_or" (formula "48") (term "0"))
                                    (rule "commute_or_2" (formula "48") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "commute_or" (formula "49") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "48") (term "0,0"))
                                    (rule "commute_or" (formula "48") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "cnf_rightDist" (formula "49") (term "0"))
                                    (rule "distr_forallAnd" (formula "49"))
                                    (rule "andLeft" (formula "49"))
                                    (rule "commute_or_2" (formula "49") (term "0"))
                                    (rule "shift_paren_or" (formula "50") (term "0"))
                                    (rule "commute_or_2" (formula "50") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "50") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "50") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "50") (term "0,1,0"))
                                    (rule "add_literals" (formula "50") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "50") (term "0,1,0"))
                                    (rule "leq_literals" (formula "50") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "true_left" (formula "50"))
                                    (rule "shift_paren_or" (formula "49") (term "0,0"))
                                    (rule "commute_or" (formula "49") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "49") (term "0,0"))
                                    (rule "add_zero_right" (formula "49") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "49") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "allLeft" (formula "29") (inst "t=bucket"))
                                    (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                                    (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "34"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                                    (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "allLeft" (formula "30") (inst "t=bucket"))
                                    (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                                    (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "34"))
                                    (rule "inEqSimp_homoInEq0" (formula "30") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "30") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "30") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "30") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
                                    (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "30") (term "0,0,0"))
                                    (rule "leq_literals" (formula "30") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "31"))
                                    (rule "mul_literals" (formula "5") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "2"))
                                    (rule "polySimp_mulAssoc" (formula "23") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "23") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                    (rule "mul_literals" (formula "23") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "23") (term "0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "andRight" (formula "56"))
                                    (branch
                                       (rule "orRight" (formula "56"))
                                       (rule "inEqSimp_geqRight" (formula "57"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_geqRight" (formula "57"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "26") (term "0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                       (rule "mul_literals" (formula "26") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "26"))
                                       (rule "leq_literals" (formula "21") (term "0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1"))
                                       (rule "mul_literals" (formula "9") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                                       (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0"))
                                       (rule "add_zero_right" (formula "10") (term "0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "13") (term "0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "closeFalse" (formula "13"))
                                    )
                                    (branch
                                       (rule "orRight" (formula "56"))
                                       (rule "inEqSimp_leqRight" (formula "56"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_leqRight" (formula "57"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch
                                    (rule "orRight" (formula "53"))
                                    (rule "inEqSimp_geqRight" (formula "54"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "54"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "24") (term "0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "10"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                              (branch "tail_len >= 1 + head_len * -1 + i_0 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "54"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "3") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "3"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "8"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                 (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0"))
                                 (rule "add_literals" (formula "8") (term "0"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "closeFalse" (formula "8"))
                              )
                           )
                           (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 FALSE"
                              (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "nnf_imp2or" (formula "38") (term "0"))
                              (rule "cnf_rightDist" (formula "22") (term "0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                              (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                              (rule "cut_direct" (formula "44") (term "0,0,0"))
                              (branch "CUT: tail_len >= 1 TRUE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "replace_known_left" (formula "39") (term "0,1,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "commute_or_2" (formula "31") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                                 (rule "distr_forallAnd" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "ifthenelse_split" (formula "52") (term "0"))
                                 (branch "tail_len >= 1 + head_len * -1 + i_0 TRUE"
                                    (rule "eqSymm" (formula "53"))
                                    (rule "commute_or_2" (formula "41") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "1,2,0") (ifseqformula "6") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "1,0") (ifseqformula "6") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "commute_or" (formula "35") (term "0,0"))
                                    (rule "commute_or" (formula "25") (term "0"))
                                    (rule "commute_or" (formula "43") (term "0,0"))
                                    (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or" (formula "35") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                    (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                                    (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "35") (term "1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,1,1,0"))
                                    (rule "add_literals" (formula "35") (term "1,0,1,1,1,0"))
                                    (rule "times_zero_1" (formula "35") (term "0,1,1,1,0"))
                                    (rule "leq_literals" (formula "35") (term "1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "ifthenelse_to_or_left" (formula "43") (term "0,0,0"))
                                    (rule "eqSymm" (formula "43") (term "1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "eqSymm" (formula "43") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0,0"))
                                    (rule "commute_or" (formula "43") (term "0,0"))
                                    (rule "commute_or_2" (formula "43") (term "0"))
                                    (rule "commute_or" (formula "43") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,0"))
                                    (rule "commute_and_2" (formula "49"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,1,1,0"))
                                    (rule "cnf_rightDist" (formula "43") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "43") (term "1,1,0,0,1,1,0"))
                                    (rule "qeq_literals" (formula "43") (term "1,0,0,1,1,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "shift_paren_or" (formula "43") (term "1,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "43") (term "1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "43") (term "1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,1,1,0"))
                                    (rule "add_literals" (formula "43") (term "1,0,1,1,1,0"))
                                    (rule "times_zero_1" (formula "43") (term "0,1,1,1,0"))
                                    (rule "leq_literals" (formula "43") (term "1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "shift_paren_or" (formula "43") (term "0"))
                                    (rule "commute_or_2" (formula "43") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "shift_paren_or" (formula "43") (term "0,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                    (rule "commute_or" (formula "35") (term "1,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                    (rule "allLeft" (formula "34") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet000001212_1" (formula "34") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000001212_2" (formula "34") (term "0,1"))
                                    (rule "eqSymm" (formula "34") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "34") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "34") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "50")) (ifInst ""  (formula "38")))
                                    (rule "eqSymm" (formula "35"))
                                    (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "35"))
                                    (rule "hideAuxiliaryEq" (formula "35"))
                                    (rule "elementOfArrayRangeConcrete" (formula "34") (term "0,0"))
                                    (rule "replace_known_right" (formula "34") (term "0,0,0,0") (ifseqformula "52"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "close" (formula "56") (ifseqformula "34"))
                                 )
                                 (branch "tail_len >= 1 + head_len * -1 + i_0 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                    (rule "polySimp_mulAssoc" (formula "19") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                    (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                                    (rule "add_literals" (formula "19") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "2") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "2"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                              (branch "CUT: tail_len >= 1 FALSE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "false_right" (formula "45"))
                                 (rule "replace_known_right" (formula "38") (term "0,1,1,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "inEqSimp_geqRight" (formula "44"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "50") (term "0,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "50") (term "0,0"))
                                 (rule "times_zero_2" (formula "50") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "50") (term "0,0,0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "15"))
                                 (rule "inEqSimp_commuteGeq" (formula "18"))
                                 (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "41") (term "1,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "41") (term "0,0"))
                                 (rule "eqSymm" (formula "41") (term "0"))
                                 (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "40") (term "1,0"))
                                 (rule "seqDef_lower_equals_upper" (formula "40") (term "0"))
                                 (rule "eqSymm" (formula "40"))
                                 (rule "applyEq" (formula "39") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "39") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "39") (term "1,0"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "26") (term "1,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "26") (term "0,0"))
                                 (rule "polySimp_homoEq" (formula "26") (term "0"))
                                 (rule "times_zero_2" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "applyEq" (formula "41") (term "0,1,1,1") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "41") (term "1,1"))
                                 (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "applyEq" (formula "37") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                                 (rule "add_literals" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "37") (term "1,0"))
                                 (rule "applyEq" (formula "34") (term "1,0,2,1,0") (ifseqformula "15"))
                                 (rule "add_literals" (formula "34") (term "0,2,1,0"))
                                 (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                                 (rule "add_zero_left" (formula "16") (term "1"))
                                 (rule "applyEq" (formula "39") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "add_zero_left" (formula "39") (term "1,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "39") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "15"))
                                 (rule "add_zero_left" (formula "38") (term "1,0"))
                                 (rule "seqDef_lower_equals_upper" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "true_left" (formula "38"))
                                 (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "24") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                 (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "inEqSimp_invertInEq0" (formula "17"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0"))
                                 (rule "add_zero_right" (formula "36") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "36") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "35") (term "0,0"))
                                 (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "35") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "inEqSimp_and_contradInEq0" (formula "35"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,1"))
                                 (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "35") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,1"))
                                 (rule "add_literals" (formula "35") (term "0,1"))
                                 (rule "leq_literals" (formula "35") (term "1"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "commute_or_2" (formula "29") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthIsAnInt" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                                 (rule "distr_forallAnd" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "1,0") (ifseqformula "4") (ifseqformula "5"))
                                 (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "41") (term "0") (ifseqformula "4") (ifseqformula "5"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "24") (term "0"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "shift_paren_or" (formula "33") (term "1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "33") (term "1,1,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "1,0,1,1,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "0,1,1,1,0"))
                                 (rule "leq_literals" (formula "33") (term "1,1,1,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "shift_paren_or" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33") (term "1,0,0,0,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0"))
                                 (rule "distr_forallAnd" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "cnf_rightDist" (formula "34") (term "0"))
                                 (rule "distr_forallAnd" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "commute_or_2" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "35") (term "0"))
                                 (rule "commute_or_2" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "shift_paren_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "allLeft" (formula "32") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet000001212_1" (formula "32") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000001212_2" (formula "32") (term "0,1"))
                                 (rule "eqSymm" (formula "32") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_contradInEq0" (formula "32") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "42")) (ifInst ""  (formula "1")))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "33"))
                                 (rule "hideAuxiliaryEq" (formula "33"))
                                 (rule "elementOfArrayRangeConcrete" (formula "32") (term "0,0"))
                                 (rule "replace_known_right" (formula "32") (term "0,0,0,0") (ifseqformula "43"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "close" (formula "47") (ifseqformula "32"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "35"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "allRight" (formula "35") (inst "sk=i_0"))
                              (rule "impRight" (formula "35"))
                              (rule "andLeft" (formula "1"))
                              (rule "polySimp_addComm0" (formula "37") (term "0,2,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1,0,0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,1,0,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                              (rule "pullOutSelect" (formula "37") (term "1") (inst "selectSK=arr_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                              (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_or_tautInEq0" (formula "31") (term "1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "1,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1,1,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,1,1,0"))
                              (rule "add_literals" (formula "31") (term "0,1,1,0"))
                              (rule "leq_literals" (formula "31") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "30") (term "0,0") (inst "i=i"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
                              (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "notLeft" (formula "16"))
                              (rule "notLeft" (formula "14"))
                              (rule "notLeft" (formula "14"))
                              (rule "eqSymm" (formula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                              (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                              (rule "mul_literals" (formula "9") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "add_literals" (formula "9") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "19") (term "0"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "inEqSimp_homoInEq0" (formula "12"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,1,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0"))
                              (rule "add_zero_right" (formula "12") (term "0"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "31") (term "0,0") (inst "i=i"))
                              (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "25") (term "0"))
                              (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")) (ifInst ""  (formula "26")))
                              (rule "true_left" (formula "25"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "31") (term "1,0") (inst "i=i"))
                              (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "16") (term "0,0"))
                              (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")) (ifInst ""  (formula "46")))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "inEqSimp_commuteLeq" (formula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "15"))
                              (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,1,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0"))
                              (rule "add_zero_right" (formula "15") (term "0"))
                              (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "27") (term "0") (inst "element=element"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "translateJavaAddInt" (formula "27") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "27") (term "0"))
                              (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1,0") (inst "i=i"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "18") (term "0,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,1,0,0"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0"))
                              (rule "lenOfSeqDef" (formula "18") (term "0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "18") (term "0,1,0"))
                              (rule "add_literals" (formula "18") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "18") (term "0,1,0"))
                              (rule "add_zero_left" (formula "18") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,0,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                              (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "polySimp_homoEq" (formula "18") (term "1"))
                              (rule "times_zero_2" (formula "18") (term "1,0,1"))
                              (rule "add_zero_right" (formula "18") (term "0,1"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "25"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "18") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0"))
                              (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "48") (term "0,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "translateJavaMulInt" (formula "48") (term "0,0,0"))
                              (rule "translateJavaMulInt" (formula "48") (term "0,1,0,0"))
                              (rule "translateJavaAddInt" (formula "48") (term "1,0,0"))
                              (rule "getOfSeqDef" (formula "48") (term "0"))
                              (rule "castDel" (formula "48") (term "2,0"))
                              (rule "castDel" (formula "48") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "48") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,2,1,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "48") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "48") (term "1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "48") (term "0,1,1,0,0"))
                              (rule "add_zero_left" (formula "48") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "48") (term "0,0,2,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0,0"))
                              (rule "times_zero_2" (formula "48") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                              (rule "applyEq" (formula "48") (term "0,1,0,1,0,0") (ifseqformula "25"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "48") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "48") (term "0,1,0,0"))
                              (rule "replace_known_left" (formula "48") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "commute_or" (formula "42") (term "1,0"))
                              (rule "commute_or" (formula "31") (term "0,0"))
                              (rule "commute_or" (formula "42") (term "1,0,0"))
                              (rule "commute_or" (formula "37") (term "0,0"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0") (inst "i=i"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "1,1,0") (inst "i=i"))
                              (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i"))
                              (rule "cnf_rightDist" (formula "23") (term "0"))
                              (rule "distr_forallAnd" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "commute_or" (formula "18"))
                              (rule "inEqSimp_or_weaken1" (formula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                              (rule "true_left" (formula "18"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                              (rule "andLeft" (formula "32"))
                              (rule "lenOfSeqDef" (formula "32") (term "1"))
                              (rule "polySimp_elimSub" (formula "32") (term "1,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "1,1"))
                              (rule "add_literals" (formula "32") (term "1,1,1,1"))
                              (rule "times_zero_1" (formula "32") (term "1,1,1"))
                              (rule "add_zero_right" (formula "32") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "1,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,0,1,1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "0,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "33") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "33") (term "1,1,0"))
                              (rule "castDel" (formula "33") (term "2,1,1,0"))
                              (rule "castDel" (formula "33") (term "1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "1,1,1,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,2,1,1,1,0"))
                              (rule "lenOfSeqDef" (formula "32") (term "0"))
                              (rule "eqSymm" (formula "32"))
                              (rule "polySimp_elimSub" (formula "32") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                              (rule "polySimp_addComm1" (formula "32") (term "1,1"))
                              (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,1"))
                              (rule "add_literals" (formula "32") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "32") (term "0,1,1"))
                              (rule "add_zero_left" (formula "32") (term "1,1"))
                              (rule "getOfSeqDef" (formula "33") (term "0,1,0"))
                              (rule "castDel" (formula "33") (term "2,0,1,0"))
                              (rule "castDel" (formula "33") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,2,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "1,0,1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "33") (term "0,1,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                              (rule "eqSymm" (formula "32"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "32") (term "0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "33") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "33") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                              (rule "eqSymm" (formula "32"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "32"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0,0,0"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "32") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "32") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "32") (term "0"))
                              (rule "nnf_notAnd" (formula "32") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                              (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
                              (rule "andLeft" (formula "39"))
                              (rule "lenOfSeqDef" (formula "40") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,1,1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "40") (term "0,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,1,1,1,0,0"))
                              (rule "add_literals" (formula "40") (term "1,1,0,1,1,1,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,1,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "40") (term "0,1,1,1,0,0"))
                              (rule "add_literals" (formula "40") (term "1,0,1,1,1,0,0"))
                              (rule "times_zero_1" (formula "40") (term "0,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "40") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "39") (term "0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "polySimp_elimSub" (formula "39") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,1"))
                              (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1"))
                              (rule "polySimp_addComm1" (formula "39") (term "1,1"))
                              (rule "getOfSeqDef" (formula "40") (term "1,1,0"))
                              (rule "castDel" (formula "40") (term "1,1,1,0"))
                              (rule "castDel" (formula "40") (term "2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0,1,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "1,1,0,1,1,0"))
                              (rule "add_literals" (formula "40") (term "1,1,1,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "40") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "40") (term "1,1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,1,0"))
                              (rule "getOfSeqDef" (formula "40") (term "0,1,0"))
                              (rule "castDel" (formula "40") (term "2,0,1,0"))
                              (rule "castDel" (formula "40") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,2,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "40") (term "0,1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "1,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,1"))
                              (rule "add_literals" (formula "39") (term "1,0,0,0,1,1"))
                              (rule "times_zero_1" (formula "39") (term "0,0,0,1,1"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,1"))
                              (rule "add_literals" (formula "39") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "39") (term "0,1,1"))
                              (rule "add_zero_left" (formula "39") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "39") (term "0"))
                              (rule "polySimp_elimSub" (formula "39") (term "1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "39") (term "1,0"))
                              (rule "add_literals" (formula "39") (term "1,1,1,0"))
                              (rule "times_zero_1" (formula "39") (term "1,1,0"))
                              (rule "add_zero_right" (formula "39") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "40") (term "0,0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0,0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,0,0,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,1,0,0,1,0"))
                              (rule "add_literals" (formula "40") (term "1,0,0,0,1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "40") (term "0,0,0,1,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "40") (term "0,0,1,1,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,1,0,0,1,0"))
                              (rule "add_literals" (formula "40") (term "1,0,1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "40") (term "0,1,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "40") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1"))
                              (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0,0,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,0,0,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "40") (term "0,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "39") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "39") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "39") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "39") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,1,1,1,0,0"))
                              (rule "commute_or" (formula "23") (term "0"))
                              (rule "nnf_imp2or" (formula "39") (term "0"))
                              (rule "nnf_notAnd" (formula "39") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                              (rule "cut_direct" (formula "44") (term "0,0,0,0"))
                              (branch "CUT: head_len >= 1 TRUE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                                 (rule "ifthenelse_split" (formula "51") (term "0"))
                                 (branch "i_0 >= head_len * -1 TRUE"
                                    (rule "eqSymm" (formula "52"))
                                    (rule "commute_or_2" (formula "41") (term "0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "1,2,0") (ifseqformula "5") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "5") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or" (formula "43") (term "0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0"))
                                    (rule "ifthenelse_to_or_right" (formula "43") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0,0"))
                                    (rule "commute_or" (formula "43") (term "0,0"))
                                    (rule "commute_or_2" (formula "43") (term "0"))
                                    (rule "commute_or" (formula "43") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,1,1,0"))
                                    (rule "cnf_rightDist" (formula "43") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "43") (term "1,1,0,0,1,1,0"))
                                    (rule "qeq_literals" (formula "43") (term "1,0,0,1,1,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "shift_paren_or" (formula "43") (term "1,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "43") (term "1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "43") (term "1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,1,1,0"))
                                    (rule "add_literals" (formula "43") (term "1,0,1,1,1,0"))
                                    (rule "times_zero_1" (formula "43") (term "0,1,1,1,0"))
                                    (rule "leq_literals" (formula "43") (term "1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "commute_or_2" (formula "43") (term "0"))
                                    (rule "shift_paren_or" (formula "43") (term "0,0"))
                                    (rule "shift_paren_or" (formula "43") (term "0,0,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or" (formula "35") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                    (rule "commute_and_2" (formula "48"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                    (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                                    (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                                    (rule "commute_or" (formula "35") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "35") (term "1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,1,1,0"))
                                    (rule "add_literals" (formula "35") (term "1,0,1,1,1,0"))
                                    (rule "times_zero_1" (formula "35") (term "0,1,1,1,0"))
                                    (rule "leq_literals" (formula "35") (term "1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "shift_paren_or" (formula "35") (term "0,0"))
                                    (rule "commute_or" (formula "35") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "ifthenelse_to_or_left" (formula "43") (term "0,0,0,0"))
                                    (rule "eqSymm" (formula "43") (term "1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,0"))
                                    (rule "commute_or_2" (formula "43") (term "0"))
                                    (rule "commute_or" (formula "43") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "43") (term "0,1,0"))
                                    (rule "commute_or" (formula "43") (term "0,0,1,0"))
                                    (rule "allLeft" (formula "42") (inst "t=i_0"))
                                    (rule "eqSymm" (formula "42") (term "1"))
                                    (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1"))
                                    (rule "replaceKnownSelect_taclet0100001212_0" (formula "42") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100001212_1" (formula "42") (term "1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "42") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "42") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "42") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "inEqSimp_contradInEq1" (formula "42") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "42") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=arr_1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "49")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,1,0,0") (ifseqformula "32"))
                                    (rule "eqSymm" (formula "43"))
                                    (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "43"))
                                    (rule "hideAuxiliaryEq" (formula "43"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,1,0,0") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "elementOfArrayRangeConcrete" (formula "42") (term "0,0"))
                                    (rule "replace_known_right" (formula "42") (term "0,0,0,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "49")) (ifInst ""  (formula "36")))
                                    (rule "eqSymm" (formula "43"))
                                    (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "43"))
                                    (rule "hideAuxiliaryEq" (formula "43"))
                                    (rule "elementOfArrayRangeConcrete" (formula "42") (term "0,0"))
                                    (rule "replace_known_right" (formula "42") (term "0,0,0,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "eqSymm" (formula "42"))
                                    (rule "close" (formula "55") (ifseqformula "42"))
                                 )
                                 (branch "i_0 >= head_len * -1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "51"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "3") (term "0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                              (branch "CUT: head_len >= 1 FALSE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "false_right" (formula "45"))
                                 (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_geqRight" (formula "44"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                                 (rule "applyEq" (formula "43") (term "1,0,0,0") (ifseqformula "13"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,0"))
                                 (rule "applyEq" (formula "29") (term "1,0,0,0") (ifseqformula "13"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_homoEq" (formula "29") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0"))
                                 (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "13"))
                                 (rule "add_zero_right" (formula "42") (term "0,0"))
                                 (rule "applyEq" (formula "51") (term "0,1,0,0") (ifseqformula "13"))
                                 (rule "times_zero_2" (formula "51") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "eqSymm" (formula "51"))
                                 (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "32") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "32") (term "1,0"))
                                 (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "12"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "33") (term "1,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "33") (term "0,0"))
                                 (rule "eqSymm" (formula "33") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "32") (term "1,0"))
                                 (rule "seqDef_lower_equals_upper" (formula "32") (term "0"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "31") (term "1,0"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "26") (term "1,0,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "26") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "times_zero_2" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "applyEq" (formula "27") (term "1,0,2,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                 (rule "applyEq" (formula "37") (term "1,0,0,2,1,0,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,2,1,0,1,0"))
                                 (rule "applyEq" (formula "39") (term "1,0,1,0,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "39") (term "0,1,0,0"))
                                 (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "12"))
                                 (rule "add_zero_left" (formula "13") (term "1"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "12"))
                                 (rule "add_zero_left" (formula "32") (term "1,0,0"))
                                 (rule "bsum_lower_equals_upper" (formula "32") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "applyEq" (formula "37") (term "1,0,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "37") (term "0,1,0"))
                                 (rule "applyEq" (formula "46") (term "1,0,0,2,1") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "46") (term "0,0,2,1"))
                                 (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "12"))
                                 (rule "add_zero_left" (formula "24") (term "1"))
                                 (rule "applyEq" (formula "35") (term "1,0,0,2,1,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "35") (term "0,0,2,1,1,0"))
                                 (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "12"))
                                 (rule "add_zero_left" (formula "31") (term "1,0"))
                                 (rule "seqDef_lower_equals_upper" (formula "31") (term "0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "29") (term "0,0"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "29") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                                 (rule "arrayLengthIsAnInt" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "40") (term "0") (ifseqformula "3") (ifseqformula "4"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "1,0") (ifseqformula "4") (ifseqformula "5"))
                                 (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "commute_or" (formula "36") (term "0,0"))
                                 (rule "ifthenelse_to_or_left" (formula "36") (term "0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "nnf_notAnd" (formula "36") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "36") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "36") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "36") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "36") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "36") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "36") (term "0,0"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "commute_or" (formula "36") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "36") (term "1,0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "shift_paren_or" (formula "36") (term "1,1,0"))
                                 (rule "commute_or" (formula "36") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "36") (term "1,1,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "36") (term "1,1,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,1,1,0"))
                                 (rule "add_literals" (formula "36") (term "1,0,1,1,1,0"))
                                 (rule "times_zero_1" (formula "36") (term "0,1,1,1,0"))
                                 (rule "leq_literals" (formula "36") (term "1,1,1,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "ifthenelse_to_or_left" (formula "36") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "36") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,0"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                 (rule "commute_or" (formula "36") (term "1,1,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "36") (term "0"))
                                 (rule "distr_forallAnd" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "commute_or" (formula "37") (term "0"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0"))
                                 (rule "commute_or" (formula "37") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "cnf_rightDist" (formula "37") (term "0"))
                                 (rule "distr_forallAnd" (formula "37"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "commute_or_2" (formula "37") (term "0"))
                                 (rule "shift_paren_or" (formula "38") (term "0"))
                                 (rule "commute_or_2" (formula "37") (term "0,0"))
                                 (rule "shift_paren_or" (formula "38") (term "0,0"))
                                 (rule "commute_or_2" (formula "38") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "38") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "true_left" (formula "38"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                                 (rule "commute_or" (formula "36") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "commute_or" (formula "37") (term "0,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "37") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "37") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "allLeft" (formula "23") (inst "t=bucket"))
                                 (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                                 (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "28"))
                                 (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "allLeft" (formula "24") (inst "t=bucket"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                 (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "28"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "24") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "24") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "getOfSeqDef" (formula "40") (term "1,1,0"))
                                 (rule "castDel" (formula "40") (term "2,1,1,0"))
                                 (rule "castDel" (formula "40") (term "1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "40") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "40") (term "1,1,0,1,1,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,1,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "40") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,1,0"))
                                 (rule "lenOfSeqDefEQ" (formula "39") (term "1") (ifseqformula "41"))
                                 (rule "polySimp_elimSub" (formula "39") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                                 (rule "polySimp_addComm1" (formula "39") (term "1,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,1"))
                                 (rule "add_literals" (formula "39") (term "1,0,1,1"))
                                 (rule "times_zero_1" (formula "39") (term "0,1,1"))
                                 (rule "add_zero_left" (formula "39") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "39") (term "0"))
                                 (rule "polySimp_elimSub" (formula "39") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                                 (rule "polySimp_addComm1" (formula "39") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,0"))
                                 (rule "add_literals" (formula "39") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "39") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "39") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "40") (term "0,1,0"))
                                 (rule "castDel" (formula "40") (term "2,0,1,0"))
                                 (rule "castDel" (formula "40") (term "1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "40") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "40") (term "0,1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "40") (term "1,0,1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "40") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "40") (term "1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "1,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "40") (term "0,1,1,1,0,0"))
                                 (rule "add_literals" (formula "40") (term "1,0,1,1,1,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "0,1,1,1,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "40") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,1,1,0"))
                                 (rule "eqSymm" (formula "40") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "40") (term "0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,0,0,0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0,0,1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "39") (term "1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "39") (term "0,0,0,1"))
                                 (rule "add_zero_left" (formula "39") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "eqSymm" (formula "39") (term "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
                                 (rule "eqSymm" (formula "40") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
                                 (rule "eqSymm" (formula "40") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "39") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "0,0,1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "40") (term "0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "39"))
                                 (rule "inEqSimp_or_weaken1" (formula "39"))
                                 (rule "add_zero_right" (formula "39") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "18")))
                                 (rule "true_left" (formula "39"))
                                 (rule "commute_or_2" (formula "39") (term "0"))
                                 (rule "allLeft" (formula "37") (inst "t=i_0"))
                                 (rule "eqSymm" (formula "37") (term "1"))
                                 (rule "polySimp_addComm0" (formula "37") (term "0,2,1,1"))
                                 (rule "replaceKnownSelect_taclet0100001212_0" (formula "37") (term "1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0100001212_1" (formula "37") (term "1,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "37") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "37") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "37") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "37") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=arr_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "45")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,0,0") (ifseqformula "32"))
                                 (rule "eqSymm" (formula "38"))
                                 (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "38"))
                                 (rule "hideAuxiliaryEq" (formula "38"))
                                 (rule "replace_known_left" (formula "37") (term "0,0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "elementOfArrayRangeConcrete" (formula "37") (term "0,0"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0,0") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "45")) (ifInst ""  (formula "1")))
                                 (rule "eqSymm" (formula "38"))
                                 (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "38"))
                                 (rule "hideAuxiliaryEq" (formula "38"))
                                 (rule "elementOfArrayRangeConcrete" (formula "37") (term "0,0"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0,0") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "eqSymm" (formula "37"))
                                 (rule "close" (formula "50") (ifseqformula "37"))
                              )
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "35"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "35") (userinteraction))
                                 (rule "allRight" (formula "35") (inst "sk=element_0") (userinteraction))
                                 (rule "instAll" (formula "35") (term "4,0,0") (ifseqformula "28") (userinteraction))
                                 (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "17") (term "0") (inst "element=element") (userinteraction))
                                  (builtin "One Step Simplification" (formula "17") (userinteraction))
                                 (rule "instAll" (formula "1") (term "4,1") (ifseqformula "17") (userinteraction))
                                 (rule "translateJavaAddInt" (formula "1") (term "1") (userinteraction))
                                  (builtin "Use Dependency Contract" (formula "2") (term "0") (ifInst ""  (formula "18") (term "1,1,0")) (ifInst ""  (formula "26")) (ifInst ""  (formula "20")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
                                 (rule "impLeft" (formula "31") (userinteraction))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "3")))
                                    (rule "wellFormedAnonEQ" (formula "31") (term "0,0,0") (ifseqformula "26"))
                                    (rule "wellFormedAnonEQ" (formula "31") (term "0,0,0,0") (ifseqformula "20"))
                                    (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                                    (rule "translateJavaSubInt" (formula "31") (term "2,1,1"))
                                    (rule "replace_known_left" (formula "31") (term "1,0,0,0,0") (ifseqformula "19"))
                                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "3")) (ifInst ""  (formula "25")))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_homoEq" (formula "38"))
                                    (rule "polySimp_homoEq" (formula "18") (term "0"))
                                    (rule "polySimp_elimSub" (formula "31") (term "2,1,1"))
                                    (rule "mul_literals" (formula "31") (term "1,2,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "31") (term "2,1,1"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0,2,1,1"))
                                    (rule "polySimp_addComm0" (formula "31") (term "0,0,2,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                    (rule "disjointDefinition" (formula "31") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "9"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "9") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "32") (term "0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "32") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "32") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "32") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "32") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "32") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0,0,1,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0,0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "31") (term "1,0,0,0,0,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "31") (term "0,0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,0,1,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "31") (term "1,0,0,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "31") (term "0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "38"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,0,1,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,0,1,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,0,1,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,0,0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0,1,0"))
                                    (rule "distributeIntersection_2" (formula "31") (term "0,1"))
                                    (rule "unionEqualsEmpty" (formula "31") (term "1"))
                                    (rule "disjointArrayRanges" (formula "31") (term "1,1"))
                                    (rule "eqSymm" (formula "31") (term "0,0,0,0,1,1"))
                                    (rule "replace_known_right" (formula "31") (term "0,0,0,0,1,1") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "disjointArrayRanges" (formula "31") (term "1"))
                                    (rule "eqSymm" (formula "31") (term "0,0,0,0,1"))
                                    (rule "replace_known_right" (formula "31") (term "0,0,0,0,1") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "32") (term "1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "32") (term "1,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1,1,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,1,1,0"))
                                    (rule "leq_literals" (formula "32") (term "1,1,0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "28") (term "0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                                    (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "13") (term "0,0"))
                                    (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "38")) (ifInst ""  (formula "15")))
                                    (rule "true_left" (formula "13"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "notLeft" (formula "14"))
                                    (rule "notLeft" (formula "14"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "replace_known_right" (formula "37") (term "0,1,1") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16"))
                                    (rule "applyEq" (formula "37") (term "0,1,1") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "37") (term "1,1"))
                                    (rule "mul_literals" (formula "37") (term "1,0,1,1"))
                                    (rule "polySimp_addComm1" (formula "37") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "37") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "37") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                                    (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "9") (term "0"))
                                    (rule "add_literals" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "12") (term "0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "inEqSimp_homoInEq0" (formula "13"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0"))
                                    (rule "add_zero_right" (formula "13") (term "0"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "11"))
                                    (rule "inEqSimp_homoInEq0" (formula "12"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0"))
                                    (rule "add_zero_right" (formula "12") (term "0"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "1") (inst "i=i"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "0,0") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "1,0") (inst "i=i"))
                                    (rule "eqSymm" (formula "33") (term "0"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1,0") (inst "i=i"))
                                    (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "18") (term "0,0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "translateJavaAddInt" (formula "18") (term "1,0,0"))
                                    (rule "translateJavaMulInt" (formula "18") (term "0,0,0"))
                                    (rule "translateJavaMulInt" (formula "18") (term "0,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "18") (term "0"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                    (rule "polySimp_addComm1" (formula "18") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "18") (term "0,1,0"))
                                    (rule "add_literals" (formula "18") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "18") (term "0,1,0"))
                                    (rule "add_zero_left" (formula "18") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "18") (term "0,1,0,0,0") (ifseqformula "25"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                    (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "polySimp_homoEq" (formula "18") (term "1"))
                                    (rule "times_zero_2" (formula "18") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "18") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "0,0"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "1,1") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0,0,1") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "1,1,0") (inst "i=i"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i"))
                                    (rule "Contract_axiom_for_countElementInBucket_in_Buffers" (formula "49") (term "0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "49") (term "0,1,1") (inst "i=i"))
                                    (rule "polySimp_homoEq" (formula "49"))
                                    (rule "polySimp_addComm1" (formula "49") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "49"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "0"))
                                    (rule "commute_or" (formula "43") (term "1,0"))
                                    (rule "commute_or" (formula "31") (term "0,0"))
                                    (rule "commute_or" (formula "43") (term "1,0,0"))
                                    (rule "commute_or" (formula "37") (term "0,0"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "1") (inst "i=i"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "1,0") (inst "i=i"))
                                    (rule "eqSymm" (formula "33") (term "0"))
                                    (rule "commute_or" (formula "18"))
                                    (rule "inEqSimp_or_weaken1" (formula "18"))
                                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                                    (rule "true_left" (formula "18"))
                                    (rule "cnf_rightDist" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "Definition_axiom_for_countElementInBucket_in_de_wiesler_Buffers" (formula "49") (term "0,1") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "translateJavaAddInt" (formula "49") (term "1,0,1"))
                                    (rule "translateJavaMulInt" (formula "49") (term "0,0,1"))
                                    (rule "translateJavaCastInt" (formula "49") (term "0,0,2,0,1"))
                                    (rule "translateJavaMulInt" (formula "49") (term "0,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "49") (term "1"))
                                    (rule "applyEq" (formula "49") (term "1,1,1,1") (ifseqformula "25"))
                                    (rule "polySimp_addAssoc" (formula "49") (term "1,1,1"))
                                    (rule "shift_paren_and" (formula "42"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "38") (inst "iv=iv"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "lenOfSeqDef" (formula "38") (term "0"))
                                    (rule "eqSymm" (formula "38"))
                                    (rule "polySimp_elimSub" (formula "38") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "38") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "38") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "38") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0,0,1,1"))
                                    (rule "add_literals" (formula "38") (term "1,0,0,0,1,1"))
                                    (rule "times_zero_1" (formula "38") (term "0,0,0,1,1"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,1"))
                                    (rule "add_literals" (formula "38") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "38") (term "0,1,1"))
                                    (rule "add_zero_left" (formula "38") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "39") (term "1,1,0"))
                                    (rule "castDel" (formula "39") (term "2,1,1,0"))
                                    (rule "castDel" (formula "39") (term "1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "39") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "1,1,0,1,1,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,1,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "39") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "39") (term "0,2,1,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,1,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "1,1,1,0,0"))
                                    (rule "getOfSeqDef" (formula "39") (term "0,1,0"))
                                    (rule "castDel" (formula "39") (term "2,0,1,0"))
                                    (rule "castDel" (formula "39") (term "1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "39") (term "0,2,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "1,1,0,0,1,0"))
                                    (rule "lenOfSeqDef" (formula "38") (term "0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "1,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,1,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "38") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "38") (term "0,0,1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,0,0,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,1,1,0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,1,1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,1,1,0,0"))
                                    (rule "add_literals" (formula "39") (term "1,0,1,1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "0,1,1,1,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "1,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,1,0,0,1,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,1,1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,1,0,0,1,0"))
                                    (rule "add_literals" (formula "39") (term "1,0,1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "39") (term "0,1,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0"))
                                    (rule "eqSymm" (formula "38"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,1,1,0"))
                                    (rule "eqSymm" (formula "38") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0,0,1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "38") (term "0"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "lenOfSeqDef" (formula "32") (term "1"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "1,1"))
                                    (rule "add_literals" (formula "32") (term "1,1,1,1"))
                                    (rule "times_zero_1" (formula "32") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "32") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "33") (term "1,1,0"))
                                    (rule "castDel" (formula "33") (term "1,1,1,0"))
                                    (rule "castDel" (formula "33") (term "2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "33") (term "1,1,0,1,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,1,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "33") (term "0,2,1,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "32") (term "0"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                                    (rule "polySimp_addComm1" (formula "32") (term "1,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,1"))
                                    (rule "add_literals" (formula "32") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "32") (term "0,1,1"))
                                    (rule "add_zero_left" (formula "32") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "33") (term "0,1,0"))
                                    (rule "castDel" (formula "33") (term "2,0,1,0"))
                                    (rule "castDel" (formula "33") (term "1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "33") (term "0,2,1,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "33") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,0,0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "33") (term "1,1,0,0,1,0"))
                                    (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "33") (term "1,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1,1,0,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,1,1,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,1,1,0,0"))
                                    (rule "add_zero_left" (formula "33") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0,1"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "33") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0"))
                                    (rule "eqSymm" (formula "33") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "33") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,0,0,0,1,1,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "33") (term "0,0,0,1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "0,0,1,1,1,0,0"))
                                    (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "0,0,1") (inst "i=i"))
                                    (rule "polySimp_homoEq" (formula "51"))
                                    (rule "polySimp_addComm0" (formula "51") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "51") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "51"))
                                    (rule "polySimp_mulLiterals" (formula "51") (term "0"))
                                    (rule "polySimp_elimOne" (formula "51") (term "0"))
                                    (rule "commute_or" (formula "23") (term "0"))
                                    (rule "nnf_imp2or" (formula "32") (term "0"))
                                    (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                    (rule "cut_direct" (formula "45") (term "1,0,0,0"))
                                    (branch "CUT: tail_len >= 1 TRUE"
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "replace_known_left" (formula "40") (term "0,1,1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAnInt" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                       (rule "commute_or_2" (formula "33") (term "0"))
                                       (rule "commute_or_2" (formula "40") (term "0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
                                       (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "4") (ifseqformula "5"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0"))
                                       (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0"))
                                       (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "34") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or_2" (formula "34") (term "0,1,0"))
                                       (rule "commute_or" (formula "34") (term "1,1,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "34") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "34") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "shift_paren_or" (formula "34") (term "1,1,0"))
                                       (rule "commute_or" (formula "34") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "34") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "34") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "34") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "34") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "34") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "shift_paren_or" (formula "34") (term "0,0"))
                                       (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifthenelse_to_or_right" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0"))
                                       (rule "commute_or_2" (formula "42") (term "0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                       (rule "commute_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_and_2" (formula "48"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "42") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "42") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "shift_paren_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "42") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "42") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "42") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "42") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "shift_paren_or" (formula "42") (term "0"))
                                       (rule "commute_or_2" (formula "42") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "shift_paren_or" (formula "42") (term "0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0,0"))
                                       (rule "eqSymm" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "eqSymm" (formula "34") (term "1,1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or" (formula "34") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,1,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,1,0"))
                                       (rule "allLeft" (formula "24") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                       (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                                       (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "34") (term "0"))
                                       (rule "distr_forallAnd" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "commute_or" (formula "35") (term "0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or" (formula "35") (term "1,1,0"))
                                       (rule "shift_paren_or" (formula "34") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "cnf_rightDist" (formula "35") (term "0"))
                                       (rule "distr_forallAnd" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "shift_paren_or" (formula "36") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0,0"))
                                       (rule "shift_paren_or" (formula "36") (term "0,0"))
                                       (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "36") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "true_left" (formula "36"))
                                       (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "commute_or" (formula "35") (term "0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "35") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "ifthenelse_to_or_left" (formula "42") (term "0,0,0"))
                                       (rule "eqSymm" (formula "42") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0"))
                                       (rule "commute_or_2" (formula "42") (term "0"))
                                       (rule "commute_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "42") (term "0"))
                                       (rule "distr_forallAnd" (formula "42"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "commute_or" (formula "43") (term "0"))
                                       (rule "shift_paren_or" (formula "42") (term "0"))
                                       (rule "commute_or_2" (formula "42") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "commute_or" (formula "43") (term "1,1,0"))
                                       (rule "shift_paren_or" (formula "42") (term "0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "cnf_rightDist" (formula "43") (term "0"))
                                       (rule "distr_forallAnd" (formula "43"))
                                       (rule "andLeft" (formula "43"))
                                       (rule "commute_or_2" (formula "43") (term "0"))
                                       (rule "shift_paren_or" (formula "44") (term "0"))
                                       (rule "commute_or_2" (formula "44") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "44") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "44") (term "0,1,0"))
                                       (rule "add_literals" (formula "44") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "44") (term "0,1,0"))
                                       (rule "leq_literals" (formula "44") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "shift_paren_or" (formula "43") (term "0,0"))
                                       (rule "commute_or" (formula "43") (term "0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0,0"))
                                       (rule "add_zero_right" (formula "43") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "43") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "cut_direct" (formula "47") (term "0"))
                                       (branch "CUT: head_len >= bucket * -256 TRUE"
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_leqRight" (formula "48"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                          (rule "mul_literals" (formula "1") (term "0,0,1"))
                                          (rule "allLeft" (formula "27") (inst "t=bucket"))
                                          (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                          (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "30"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "27") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "14"))
                                          (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "27") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "27") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "27"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "14"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "greater_literals" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: head_len >= bucket * -256 FALSE"
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "false_right" (formula "48"))
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "15") (term "0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "inEqSimp_contradInEq5" (formula "15") (ifseqformula "11"))
                                          (rule "greater_literals" (formula "15") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "times_zero_1" (formula "15") (term "1,0"))
                                          (rule "qeq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "closeFalse" (formula "15"))
                                       )
                                    )
                                    (branch "CUT: tail_len >= 1 FALSE"
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "false_right" (formula "46"))
                                       (rule "replace_known_right" (formula "39") (term "0,1,1,0,0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "16"))
                                       (rule "add_zero_right" (formula "28") (term "1,0,0"))
                                       (rule "bsum_lower_equals_upper" (formula "28") (term "0,0"))
                                       (rule "polySimp_homoEq" (formula "28") (term "0"))
                                       (rule "times_zero_2" (formula "28") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "39") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "39") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "39") (term "1,0"))
                                       (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "44") (term "0,1") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "44") (term "1"))
                                       (rule "times_zero_2" (formula "44") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "44") (term "0,1"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_commuteGeq" (formula "17"))
                                       (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "40") (term "1,0"))
                                       (rule "seqDef_lower_equals_upper" (formula "40") (term "0"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "1") (term "1,0"))
                                       (rule "bsum_lower_equals_upper" (formula "1") (term "0"))
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "times_zero_2" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "2") (term "1,0"))
                                       (rule "bsum_lower_equals_upper" (formula "2") (term "0"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "41") (term "1,0,0"))
                                       (rule "bsum_lower_equals_upper" (formula "41") (term "0,0"))
                                       (rule "eqSymm" (formula "41") (term "0"))
                                       (rule "applyEq" (formula "1") (term "1,1,1,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,0"))
                                       (rule "times_zero_1" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "38") (term "1,1,1,0,0,1,0") (ifseqformula "14"))
                                       (rule "add_zero_right" (formula "38") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "38") (term "1,0"))
                                       (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "14"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "26") (term "0,0"))
                                       (rule "add_literals" (formula "26") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "14"))
                                       (rule "add_zero_left" (formula "15") (term "1"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "14"))
                                       (rule "add_zero_left" (formula "1") (term "1,0"))
                                       (rule "bsum_lower_equals_upper" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "13"))
                                       (rule "add_zero_right" (formula "23") (term "1"))
                                       (rule "applyEq" (formula "47") (term "0,1,0") (ifseqformula "13"))
                                       (rule "add_zero_left" (formula "47") (term "1,0"))
                                       (rule "bsum_lower_equals_upper" (formula "47") (term "0"))
                                       (rule "polySimp_homoEq" (formula "47"))
                                       (rule "times_zero_2" (formula "47") (term "1,0"))
                                       (rule "add_zero_right" (formula "47") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,0,2,1,0") (ifseqformula "13"))
                                       (rule "add_zero_right" (formula "33") (term "0,2,1,0"))
                                       (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "13"))
                                       (rule "add_zero_left" (formula "37") (term "1,0"))
                                       (rule "seqDef_lower_equals_upper" (formula "37") (term "0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "applyEq" (formula "37") (term "0,1,0,0") (ifseqformula "13"))
                                       (rule "add_zero_left" (formula "37") (term "1,0,0"))
                                       (rule "bsum_lower_equals_upper" (formula "37") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "applyEq" (formula "45") (term "1,1,0,0") (ifseqformula "13"))
                                       (rule "add_zero_right" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "45"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                       (rule "polySimp_elimOne" (formula "45") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "15"))
                                       (rule "mul_literals" (formula "15") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "35") (term "0,0"))
                                       (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "35") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "34") (term "0,0"))
                                       (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "arrayLengthIsAnInt" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "arrayLengthIsAnInt" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "arrayLengthIsAnInt" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "29") (term "0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "1,0") (ifseqformula "1") (ifseqformula "2"))
                                       (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "1,2,0") (ifseqformula "1") (ifseqformula "2"))
                                       (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "commute_or" (formula "30") (term "0,0"))
                                       (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0"))
                                       (rule "eqSymm" (formula "30") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "commute_or" (formula "30") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "30") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "shift_paren_or" (formula "30") (term "1,1,0"))
                                       (rule "commute_or" (formula "30") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "30") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "30") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "30") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "30") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "30") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "shift_paren_or" (formula "30") (term "0,0"))
                                       (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0,0"))
                                       (rule "eqSymm" (formula "30") (term "1,1,0,0,0,0"))
                                       (rule "eqSymm" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,0"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                       (rule "commute_or" (formula "30") (term "1,1,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "30") (term "0"))
                                       (rule "distr_forallAnd" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "commute_or" (formula "31") (term "0"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "commute_or" (formula "31") (term "1,1,0"))
                                       (rule "shift_paren_or" (formula "30") (term "0,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "cnf_rightDist" (formula "31") (term "0"))
                                       (rule "distr_forallAnd" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "commute_or_2" (formula "31") (term "0"))
                                       (rule "shift_paren_or" (formula "32") (term "0"))
                                       (rule "commute_or_2" (formula "31") (term "0,0"))
                                       (rule "shift_paren_or" (formula "32") (term "0,0"))
                                       (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "32") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "true_left" (formula "32"))
                                       (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "commute_or" (formula "31") (term "0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "20") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                       (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "allLeft" (formula "21") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                                       (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "21") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0"))
                                       (rule "leq_literals" (formula "21") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "cut_direct" (formula "40") (term "0"))
                                       (branch "CUT: head_len >= bucket * -256 TRUE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "inEqSimp_leqRight" (formula "41"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "22"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "9"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "greater_literals" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: head_len >= bucket * -256 FALSE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "false_right" (formula "41"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "11") (term "0,0"))
                                          (rule "add_zero_left" (formula "11") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                          (rule "inEqSimp_contradInEq5" (formula "11") (ifseqformula "7"))
                                          (rule "greater_literals" (formula "11") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "times_zero_1" (formula "11") (term "1,0"))
                                          (rule "qeq_literals" (formula "11") (term "0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "closeFalse" (formula "11"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "applyEqReverse" (formula "38") (term "1,0") (ifseqformula "2") (userinteraction))
                                    (rule "instAll" (formula "31") (term "4,0") (ifseqformula "24") (userinteraction))
                                     (builtin "Use Dependency Contract" (formula "39") (term "0,0") (ifInst ""  (formula "31") (term "1")) (ifInst ""  (formula "26")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
                                    (rule "impLeft" (formula "33") (userinteraction))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "38")) (ifInst ""  (formula "38")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "1,0,0") (ifseqformula "20"))
                                       (rule "wellFormedAnonEQ" (formula "33") (term "1,0,0,0") (ifseqformula "26"))
                                       (rule "wellFormedAnonEQ" (formula "33") (term "0,0,0,0") (ifseqformula "20"))
                                       (rule "wellFormedAnonEQ" (formula "33") (term "0,1,0,0,0") (ifseqformula "20"))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                                       (rule "translateJavaSubInt" (formula "33") (term "2,1,1"))
                                       (rule "replace_known_left" (formula "33") (term "1,0,0,0,0") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "19")) (ifInst ""  (formula "25")) (ifInst ""  (formula "6")))
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "polySimp_homoEq" (formula "40"))
                                       (rule "polySimp_homoEq" (formula "18") (term "0"))
                                       (rule "polySimp_elimSub" (formula "33") (term "2,1,1"))
                                       (rule "mul_literals" (formula "33") (term "1,2,1,1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "33") (term "2,1,1"))
                                       (rule "polySimp_addComm0" (formula "33") (term "0,2,1,1"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                       (rule "disjointDefinition" (formula "33") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "9"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "disjointArrayRanges" (formula "33") (term "1"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "34") (term "0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "34") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "34") (term "1,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,1,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "34") (term "0,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0,0,1"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0,0,1"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1,0,0,1"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,1,0,0,1"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,1,0,0,1"))
                                       (rule "add_zero_right" (formula "33") (term "0,1,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,1,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,1,0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,0,1,0,1,0,1"))
                                       (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "32"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "2"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0"))
                                       (rule "polySimp_sepPosMonomial" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                       (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "40") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                                       (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "32") (term "1") (ifseqformula "1"))
                                       (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "40"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "0,1,0,1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,0,1,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,0,1,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,1,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "0,1,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,0,1,0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,0,1,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "33") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,1,0,1"))
                                       (rule "mul_literals" (formula "33") (term "0,0,1,1,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,1,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,0,1,1,0,1,0,1"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "34") (term "1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "34") (term "1,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,1,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,1,1,0"))
                                       (rule "leq_literals" (formula "34") (term "1,1,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "nnf_imp2or" (formula "28") (term "0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "replace_known_left" (formula "35") (term "1,0") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0"))
                                       (rule "add_zero_right" (formula "11") (term "0"))
                                       (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "notRight" (formula "35"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "2")))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "17") (term "0,0") (inst "i=i"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaMulInt" (formula "17") (term "0,0,0"))
                                       (rule "translateJavaAddInt" (formula "17") (term "1,0,0"))
                                       (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "17") (term "0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                                       (rule "polySimp_addComm1" (formula "17") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1,0"))
                                       (rule "add_literals" (formula "17") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "17") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "17") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "polySimp_homoEq" (formula "17") (term "1"))
                                       (rule "mul_literals" (formula "17") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "17") (term "0,1"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "20"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "28") (term "0,0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "36") (term "0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "34") (term "1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "34") (term "0"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "28") (term "1,0") (inst "i=i"))
                                       (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "inEqSimp_commuteLeq" (formula "17"))
                                       (rule "inEqSimp_commuteLeq" (formula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "16"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0"))
                                       (rule "add_zero_right" (formula "16") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "19") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "translateJavaMulInt" (formula "19") (term "1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "19") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "22"))
                                       (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0"))
                                       (rule "add_literals" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "0"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "1") (inst "i=i"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "5") (term "0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "4") (term "0") (inst "i=i"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "4") (term "1,1") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "4") (term "0,0,1") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "5") (term "1,1") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "5") (term "0,0,1") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "42") (term "0,0,1") (inst "i=i"))
                                       (rule "polySimp_addComm0" (formula "42") (term "1"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "28") (term "0,0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "28") (term "1,1,0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "28") (term "0,0,1,0") (inst "i=i"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "0,1,1") (inst "i=i"))
                                       (rule "polySimp_homoEq" (formula "51"))
                                       (rule "polySimp_addComm1" (formula "51") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "51"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "0"))
                                       (rule "polySimp_elimOne" (formula "51") (term "0"))
                                       (rule "commute_or" (formula "32") (term "0,0"))
                                       (rule "commute_or" (formula "38") (term "0,0"))
                                       (rule "commute_or" (formula "45") (term "0,0"))
                                       (rule "commute_or" (formula "45") (term "1,0"))
                                       (rule "commute_or" (formula "19"))
                                       (rule "inEqSimp_or_weaken1" (formula "19"))
                                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                                       (rule "true_left" (formula "19"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "39") (term "0"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "42") (term "0,1") (inst "i=i"))
                                       (rule "polySimp_addComm0" (formula "42") (term "1"))
                                       (rule "Contract_axiom_for_countElementInBucket_in_Buffers" (formula "51") (term "0,0,1"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "51")))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "15"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "0,1,1") (inst "i=i"))
                                       (rule "polySimp_homoEq" (formula "51"))
                                       (rule "polySimp_addComm1" (formula "51") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "51"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "0"))
                                       (rule "polySimp_elimOne" (formula "51") (term "0"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "33") (inst "iv=iv"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "lenOfSeqDef" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "1,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "34") (term "0,1,1,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,0,1,1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "0,1,1,1,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "33") (term "1"))
                                       (rule "polySimp_elimSub" (formula "33") (term "1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "1,1"))
                                       (rule "add_literals" (formula "33") (term "1,1,1,1"))
                                       (rule "times_zero_1" (formula "33") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "33") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "34") (term "1,1,0"))
                                       (rule "castDel" (formula "34") (term "2,1,1,0"))
                                       (rule "castDel" (formula "34") (term "1,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "1,1,0,1,1,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,1,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "34") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,2,1,1,1,0"))
                                       (rule "lenOfSeqDef" (formula "33") (term "0"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "polySimp_elimSub" (formula "33") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                                       (rule "polySimp_addComm1" (formula "33") (term "1,1"))
                                       (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,1"))
                                       (rule "add_literals" (formula "33") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "33") (term "0,1,1"))
                                       (rule "add_zero_left" (formula "33") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "34") (term "0,1,0"))
                                       (rule "castDel" (formula "34") (term "2,0,1,0"))
                                       (rule "castDel" (formula "34") (term "1,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,2,1,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "34") (term "0,1,1,0,0,1,0"))
                                       (rule "add_literals" (formula "34") (term "1,0,1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "34") (term "0,1,1,0,0,1,0"))
                                       (rule "add_zero_left" (formula "34") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0,1"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "34") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,1,1,0"))
                                       (rule "eqSymm" (formula "34") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "true_left" (formula "33"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "0,0,1,1,1,0,0"))
                                       (rule "replace_known_left" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "40") (inst "iv=iv"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "lenOfSeqDef" (formula "40") (term "1"))
                                       (rule "polySimp_elimSub" (formula "40") (term "1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "40") (term "1,1"))
                                       (rule "add_literals" (formula "40") (term "1,1,1,1"))
                                       (rule "times_zero_1" (formula "40") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "40") (term "1,1"))
                                       (rule "lenOfSeqDef" (formula "40") (term "0"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "polySimp_elimSub" (formula "40") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,1"))
                                       (rule "polySimp_mulAssoc" (formula "40") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "40") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "41") (term "0,1,0"))
                                       (rule "castDel" (formula "41") (term "2,0,1,0"))
                                       (rule "castDel" (formula "41") (term "1,0,1,0"))
                                       (rule "eqSymm" (formula "41") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "41") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "41") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "41") (term "0,1,1,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,1,0,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "1,1,0,1,1,0"))
                                       (rule "lenOfSeqDef" (formula "41") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "41") (term "1,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,1,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,1,1,1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "41") (term "0,1,1,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "1,1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,1,1"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0,0,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,1,1"))
                                       (rule "add_literals" (formula "40") (term "1,1,0,1,1"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,1,1"))
                                       (rule "add_zero_right" (formula "40") (term "0,1,1"))
                                       (rule "polySimp_pullOutFactor0" (formula "40") (term "0,1,1"))
                                       (rule "add_literals" (formula "40") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "40") (term "0,1,1"))
                                       (rule "add_zero_left" (formula "40") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,0,1,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,1,0,1,1,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,1,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "41") (term "0,1,1,0,1,1,0"))
                                       (rule "add_literals" (formula "41") (term "1,0,1,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "41") (term "0,1,1,0,1,1,0"))
                                       (rule "add_zero_left" (formula "41") (term "1,1,0,1,1,0"))
                                       (rule "getOfSeqDef" (formula "41") (term "0,1,0"))
                                       (rule "castDel" (formula "41") (term "2,0,1,0"))
                                       (rule "castDel" (formula "41") (term "1,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "41") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "41") (term "1,1,0,0,1,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "41") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "41") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "41") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,1,1,0,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,1,1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "41") (term "0,1,1,1,0,0"))
                                       (rule "add_literals" (formula "41") (term "1,0,1,1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "0,1,1,1,0,0"))
                                       (rule "add_zero_left" (formula "41") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "0,1,0,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "0,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "41") (term "0,0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "0,0,0,1,0,0,0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1,0,0,0,1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor2b" (formula "40") (term "0,0,1"))
                                       (rule "add_literals" (formula "40") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "40") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "41") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,1,1,0"))
                                       (rule "eqSymm" (formula "41") (term "1,0"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,0,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,0,0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,0,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,0,0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "polySimp_rightDist" (formula "40") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "0,0,0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "40") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "40") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "40") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "0,0,1,1,1,0,0"))
                                       (rule "replace_known_left" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "commute_or" (formula "3"))
                                       (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "53") (term "1,0,1") (inst "i=i"))
                                       (rule "Contract_axiom_for_countElementInBucket_in_Buffers" (formula "53") (term "0,0,1"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "53")))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "15"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "Definition_axiom_for_countElementInBucket_in_de_wiesler_Buffers" (formula "53") (term "0,0,1") (inst "i=i"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "translateJavaCastInt" (formula "53") (term "0,0,2,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "53") (term "1,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "53") (term "0,0,0,1"))
                                       (rule "translateJavaMulInt" (formula "53") (term "0,1,0,0,1"))
                                       (rule "polySimp_addComm0" (formula "53") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "53") (term "1"))
                                       (rule "applyEq" (formula "53") (term "1,1,1,1") (ifseqformula "26"))
                                       (rule "polySimp_addComm1" (formula "53") (term "1"))
                                       (rule "polySimp_addAssoc" (formula "53") (term "1,1,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "53") (term "1"))
                                       (rule "add_literals" (formula "53") (term "1,1,1"))
                                       (rule "times_zero_1" (formula "53") (term "1,1"))
                                       (rule "add_zero_right" (formula "53") (term "1"))
                                       (rule "cnf_rightDist" (formula "24") (term "0"))
                                       (rule "cnf_rightDist" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "nnf_imp2or" (formula "41") (term "0"))
                                       (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                       (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                       (rule "commute_and_2" (formula "49"))
                                       (rule "arrayLengthIsAnInt" (formula "23") (term "0"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "distr_forallAnd" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "commute_or" (formula "4"))
                                       (rule "replace_known_left" (formula "50") (term "1,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "commute_or" (formula "5"))
                                       (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "orRight" (formula "50"))
                                       (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "Case 2"
                                       (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "33") (userinteraction))
                                       (rule "applyEqReverse" (formula "40") (term "0,0") (ifseqformula "31") (userinteraction))
                                        (builtin "Use Dependency Contract" (formula "40") (term "0,0") (ifInst ""  (formula "18") (term "0,1,0")) (ifInst ""  (formula "20")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
                                       (rule "impLeft" (formula "34") (userinteraction))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "3")))
                                          (rule "wellFormedAnonEQ" (formula "34") (term "0,0,0") (ifseqformula "20"))
                                          (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                                          (rule "translateJavaSubInt" (formula "34") (term "2,1,1"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "19")))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_homoEq" (formula "41"))
                                          (rule "polySimp_homoEq" (formula "18") (term "0"))
                                          (rule "polySimp_elimSub" (formula "34") (term "2,1,1"))
                                          (rule "mul_literals" (formula "34") (term "1,2,1,1"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "34") (term "2,1,1"))
                                          (rule "polySimp_addComm0" (formula "34") (term "0,2,1,1"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                          (rule "disjointDefinition" (formula "34") (term "1"))
                                          (rule "disjointArrayRanges" (formula "34") (term "1"))
                                          (rule "eqSymm" (formula "34") (term "0,0,0,0,1"))
                                          (rule "replace_known_right" (formula "34") (term "0,0,0,0,1") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0,0,0,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,1,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "34") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "34") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "34") (term "1,0,0,1,0,0,1"))
                                          (rule "times_zero_1" (formula "34") (term "0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "34") (term "0,1,0,0,1"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "32"))
                                          (rule "polySimp_addComm1" (formula "41") (term "0"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "2") (term "1") (ifseqformula "32"))
                                          (rule "polySimp_sepPosMonomial" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                          (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "41") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "41"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "0,1,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "0,1,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,1,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,1,0,0,0,0"))
                                          (rule "inEqSimp_subsumption6" (formula "34") (term "0,0,0,1") (ifseqformula "8"))
                                          (rule "times_zero_1" (formula "34") (term "1,1,0,0,0,0,1"))
                                          (rule "greater_literals" (formula "34") (term "0,0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "leq_literals" (formula "34") (term "0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "35") (term "1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,1,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,1,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "nnf_imp2or" (formula "22") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "andLeft" (formula "10"))
                                          (rule "andLeft" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "inEqSimp_commuteLeq" (formula "10"))
                                          (rule "inEqSimp_homoInEq0" (formula "11"))
                                          (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                          (rule "add_literals" (formula "11") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0"))
                                          (rule "add_zero_right" (formula "11") (term "0"))
                                          (rule "replace_known_left" (formula "36") (term "0,0,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "1") (inst "i=i"))
                                          (rule "eqSymm" (formula "33"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "0,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "1,0") (inst "i=i"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "16") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "notLeft" (formula "17"))
                                          (rule "andLeft" (formula "16"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "eqSymm" (formula "42"))
                                          (rule "replace_known_right" (formula "42") (term "0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "41")))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18"))
                                          (rule "applyEq" (formula "42") (term "0,1") (ifseqformula "16"))
                                          (rule "inEqSimp_homoInEq1" (formula "42") (term "1"))
                                          (rule "mul_literals" (formula "42") (term "1,0,1"))
                                          (rule "polySimp_addComm1" (formula "42") (term "0,1"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,1"))
                                          (rule "mul_literals" (formula "42") (term "0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "19"))
                                          (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                          (rule "mul_literals" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "nnf_imp2or" (formula "21") (term "0"))
                                          (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "16") (term "0,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "translateJavaAddInt" (formula "16") (term "1,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "16") (term "0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                                          (rule "polySimp_addComm1" (formula "16") (term "1,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "16") (term "0,1,0"))
                                          (rule "add_literals" (formula "16") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "16") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "16") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,0") (ifseqformula "23"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                                          (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "23"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_homoEq" (formula "16") (term "1"))
                                          (rule "times_zero_2" (formula "16") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "37") (term "1,0") (inst "i=i"))
                                          (rule "eqSymm" (formula "37") (term "0"))
                                          (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "inEqSimp_commuteLeq" (formula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "14"))
                                          (rule "inEqSimp_homoInEq0" (formula "15"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                          (rule "add_literals" (formula "15") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0"))
                                          (rule "add_zero_right" (formula "15") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "42") (term "1") (inst "i=i"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "1,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0,0,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0,0,1") (inst "i=i"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "1,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "0,0,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "1,1,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i"))
                                          (rule "Contract_axiom_for_countElementInBucket_in_Buffers" (formula "52") (term "0,0,1"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "52")))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "Definition_axiom_for_countElementInBucket_in_de_wiesler_Buffers" (formula "52") (term "0,0,1") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "translateJavaCastInt" (formula "52") (term "0,0,2,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "52") (term "0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "52") (term "1,0,0,1"))
                                          (rule "translateJavaMulInt" (formula "52") (term "0,1,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "52"))
                                          (rule "polySimp_addComm0" (formula "52") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "52") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "52") (term "0"))
                                          (rule "applyEq" (formula "52") (term "1,1,1,0") (ifseqformula "25"))
                                          (rule "polySimp_addAssoc" (formula "52") (term "1,1,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "52"))
                                          (rule "polySimp_mulComm0" (formula "52") (term "1"))
                                          (rule "polySimp_rightDist" (formula "52") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "52") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "52") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "52") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1"))
                                          (rule "polySimp_elimOne" (formula "52") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "52") (term "0,0,1"))
                                          (rule "commute_or" (formula "46") (term "1,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "40") (term "1") (inst "i=i"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "1,0,0"))
                                          (rule "commute_or" (formula "37") (term "0,0"))
                                          (rule "commute_or" (formula "18"))
                                          (rule "inEqSimp_or_weaken1" (formula "18"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                                          (rule "true_left" (formula "18"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "38") (term "1,0") (inst "i=i"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "i=i"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "1,1") (inst "i=i"))
                                          (rule "polySimp_homoEq" (formula "51"))
                                          (rule "polySimp_addComm1" (formula "51") (term "0"))
                                          (rule "polySimp_sepPosMonomial" (formula "51"))
                                          (rule "polySimp_mulComm0" (formula "51") (term "1"))
                                          (rule "polySimp_rightDist" (formula "51") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "51") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "51") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "51") (term "0,1"))
                                          (rule "polySimp_mulAssoc" (formula "51") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "51") (term "0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "51") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "51") (term "0,0,1"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "31") (inst "iv=iv"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "getOfSeqDef" (formula "32") (term "1,1,0"))
                                          (rule "castDel" (formula "32") (term "2,1,1,0"))
                                          (rule "castDel" (formula "32") (term "1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "add_literals" (formula "32") (term "1,1,1,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_addComm0" (formula "32") (term "0,2,1,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "1,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,1,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "1,0,1,1,1,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "0,1,1,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "1,1,1,0,0"))
                                          (rule "getOfSeqDef" (formula "32") (term "0,1,0"))
                                          (rule "castDel" (formula "32") (term "2,0,1,0"))
                                          (rule "castDel" (formula "32") (term "1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "32") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,1,0,0,1,0"))
                                          (rule "add_literals" (formula "32") (term "1,0,1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "0,1,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "lenOfSeqDef" (formula "31") (term "1"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "31") (term "1,1"))
                                          (rule "add_literals" (formula "31") (term "1,1,1,1"))
                                          (rule "times_zero_1" (formula "31") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "31") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "31") (term "0"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1"))
                                          (rule "polySimp_addComm1" (formula "31") (term "1,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "31") (term "0,1,1"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,1"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,1"))
                                          (rule "add_zero_left" (formula "31") (term "1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "1,1,0,0,0,1,1,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0,1"))
                                          (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "31") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "31") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,0,1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "38") (inst "iv=iv"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "getOfSeqDef" (formula "39") (term "1,1,0"))
                                          (rule "castDel" (formula "39") (term "2,1,1,0"))
                                          (rule "castDel" (formula "39") (term "1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "39") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "1,1,0,1,1,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,1,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "39") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_addComm0" (formula "39") (term "0,2,1,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "39") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,1,1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,1,1,1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "38") (term "0"))
                                          (rule "eqSymm" (formula "38"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,1"))
                                          (rule "polySimp_mulAssoc" (formula "38") (term "0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "38") (term "1,1"))
                                          (rule "getOfSeqDef" (formula "39") (term "0,1,0"))
                                          (rule "castDel" (formula "39") (term "2,0,1,0"))
                                          (rule "castDel" (formula "39") (term "1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "39") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "39") (term "0,1,1,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,1,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,1,1,0,0"))
                                          (rule "add_literals" (formula "39") (term "1,0,0,0,1,1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "0,0,0,1,1,1,0,0"))
                                          (rule "add_zero_left" (formula "39") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,1,1,0,0"))
                                          (rule "add_literals" (formula "39") (term "1,0,1,1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "0,1,1,1,0,0"))
                                          (rule "add_zero_left" (formula "39") (term "1,1,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,1,1"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0,1,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0,0,1,1"))
                                          (rule "add_literals" (formula "38") (term "1,0,0,0,1,1"))
                                          (rule "times_zero_1" (formula "38") (term "0,0,0,1,1"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,1,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,1"))
                                          (rule "add_literals" (formula "38") (term "1,0,1,1"))
                                          (rule "times_zero_1" (formula "38") (term "0,1,1"))
                                          (rule "add_zero_left" (formula "38") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "38") (term "0"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "1,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,1,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "38") (term "1,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,1,0,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "1,0,0,0,1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "39") (term "0,0,0,1,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "39") (term "0,0,1,1,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,1,0,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "1,0,1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "39") (term "0,1,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulAssoc" (formula "38") (term "0,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "0,0,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0"))
                                          (rule "eqSymm" (formula "38"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0,0,0,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "39") (term "0,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "39") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,0"))
                                          (rule "eqSymm" (formula "39") (term "1,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "38") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "38") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                          (rule "cnf_rightDist" (formula "22") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "53") (term "0,1,0,1") (inst "i=i"))
                                          (rule "polySimp_pullOutFactor2b" (formula "53") (term "1"))
                                          (rule "add_literals" (formula "53") (term "1,1,1"))
                                          (rule "times_zero_1" (formula "53") (term "1,1"))
                                          (rule "add_zero_right" (formula "53") (term "1"))
                                          (rule "nnf_imp2or" (formula "38") (term "0"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                          (rule "cut_direct" (formula "47") (term "0,0,0,0"))
                                          (branch "CUT: head_len >= 1 TRUE"
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "13") (term "0"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "14") (term "0"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "arrayLengthIsAnInt" (formula "20") (term "0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                             (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                             (rule "qeq_literals" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                             (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                             (rule "qeq_literals" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "cut_direct" (formula "47") (term "1"))
                                             (branch "CUT: head_len <= 65536 + bucket * -256 TRUE"
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                (rule "mul_literals" (formula "2") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "inEqSimp_subsumption4" (formula "2") (ifseqformula "12"))
                                                (rule "greater_literals" (formula "2") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "0,0"))
                                                (rule "leq_literals" (formula "2") (term "0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "distr_forallAnd" (formula "24"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "56") (term "1") (inst "i=i"))
                                                (rule "commute_or_2" (formula "41") (term "0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "51") (term "0") (ifseqformula "5") (ifseqformula "6"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "1,2,0") (ifseqformula "6") (ifseqformula "7"))
                                                (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "50")))
                                                (rule "closeFalse" (formula "43"))
                                             )
                                             (branch "CUT: head_len <= 65536 + bucket * -256 FALSE"
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "false_right" (formula "48"))
                                                (rule "inEqSimp_leqRight" (formula "47"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "distr_forallAnd" (formula "24"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "55") (term "1") (inst "i=i"))
                                                (rule "commute_or_2" (formula "41") (term "0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "5") (ifseqformula "6"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "1,2,0") (ifseqformula "6") (ifseqformula "7"))
                                                (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "commute_or" (formula "26") (term "0"))
                                                (rule "commute_or" (formula "42") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_and_2" (formula "51"))
                                                (rule "ifthenelse_to_or_right" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "42") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "42") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "42") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "42") (term "0,0"))
                                                (rule "commute_or_2" (formula "42") (term "0"))
                                                (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                                (rule "commute_or" (formula "42") (term "1,1,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "42") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "42") (term "1,0,0,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "shift_paren_or" (formula "42") (term "1,1,0"))
                                                (rule "commute_or" (formula "42") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "42") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "42") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "42") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "42") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "42") (term "1,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "commute_or_2" (formula "42") (term "0"))
                                                (rule "shift_paren_or" (formula "42") (term "0,0"))
                                                (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "ifthenelse_to_or_right" (formula "35") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or" (formula "35") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                                                (rule "commute_or" (formula "35") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "35") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "35") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "35") (term "1,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "shift_paren_or" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "ifthenelse_to_or_left" (formula "42") (term "0,0,0,0"))
                                                (rule "eqSymm" (formula "42") (term "1,1,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "42") (term "0,0"))
                                                (rule "commute_or_2" (formula "42") (term "0"))
                                                (rule "commute_or" (formula "42") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "42") (term "0"))
                                                (rule "distr_forallAnd" (formula "42"))
                                                (rule "andLeft" (formula "42"))
                                                (rule "commute_or_2" (formula "42") (term "0"))
                                                (rule "commute_or" (formula "43") (term "0"))
                                                (rule "shift_paren_or" (formula "42") (term "0,0"))
                                                (rule "commute_or" (formula "43") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "cnf_rightDist" (formula "43") (term "0"))
                                                (rule "distr_forallAnd" (formula "43"))
                                                (rule "andLeft" (formula "43"))
                                                (rule "commute_or_2" (formula "43") (term "0"))
                                                (rule "shift_paren_or" (formula "44") (term "0"))
                                                (rule "commute_or_2" (formula "43") (term "0,0"))
                                                (rule "shift_paren_or" (formula "44") (term "0,0"))
                                                (rule "commute_or_2" (formula "44") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "44") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "44") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "44") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "44") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "44") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                                                (rule "shift_paren_or" (formula "43") (term "0,0,0"))
                                                (rule "commute_or" (formula "42") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "commute_or" (formula "43") (term "0,0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0,0,0"))
                                                (rule "add_zero_right" (formula "43") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "43") (term "1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                                (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                (rule "commute_or" (formula "35") (term "1,1,0"))
                                                (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "35") (term "0"))
                                                (rule "distr_forallAnd" (formula "35"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "commute_or" (formula "36") (term "0"))
                                                (rule "shift_paren_or" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "commute_or" (formula "36") (term "1,1,0"))
                                                (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "cnf_rightDist" (formula "36") (term "0"))
                                                (rule "distr_forallAnd" (formula "36"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "commute_or_2" (formula "36") (term "0"))
                                                (rule "shift_paren_or" (formula "37") (term "0"))
                                                (rule "commute_or_2" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0"))
                                                (rule "add_literals" (formula "37") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "37") (term "0,1,0"))
                                                (rule "leq_literals" (formula "37") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                (rule "commute_or" (formula "36") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                (rule "add_zero_right" (formula "36") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "36") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "cut_direct" (formula "51") (term "0,0,0"))
                                                (branch "CUT: tail_len >= 1 TRUE"
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "replace_known_left" (formula "43") (term "0,1,1,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "19") (term "0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "allLeft" (formula "25") (inst "t=bucket"))
                                                   (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                                   (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "29"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "26") (inst "t=bucket"))
                                                   (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                                   (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "29"))
                                                   (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "0,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "14"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "26") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "12"))
                                                   (rule "qeq_literals" (formula "26") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "26"))
                                                   (rule "mul_literals" (formula "1") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                                   (rule "mul_literals" (formula "4") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                   (rule "mul_literals" (formula "4") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "4") (ifseqformula "15"))
                                                   (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                   (rule "greater_literals" (formula "4") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                                (branch "CUT: tail_len >= 1 FALSE"
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "false_right" (formula "52"))
                                                   (rule "replace_known_right" (formula "42") (term "0,1,1,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "inEqSimp_geqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "19"))
                                                   (rule "add_zero_right" (formula "5") (term "1,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "5") (term "0"))
                                                   (rule "polySimp_homoEq" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "43") (term "1,1,0,0") (ifseqformula "19"))
                                                   (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "18"))
                                                   (rule "add_zero_right" (formula "5") (term "1,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "5") (term "0"))
                                                   (rule "polySimp_homoEq" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "45") (term "1,1,0,0") (ifseqformula "17"))
                                                   (rule "add_zero_right" (formula "45") (term "1,0,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "45") (term "0,0"))
                                                   (rule "eqSymm" (formula "45") (term "0"))
                                                   (rule "applyEq" (formula "44") (term "1,1,0") (ifseqformula "17"))
                                                   (rule "add_zero_right" (formula "44") (term "1,0"))
                                                   (rule "seqDef_lower_equals_upper" (formula "44") (term "0"))
                                                   (rule "eqSymm" (formula "44"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                                   (rule "qeq_literals" (formula "18"))
                                                   (rule "true_left" (formula "18"))
                                                   (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "17"))
                                                   (rule "add_zero_right" (formula "29") (term "1,0,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "29") (term "0,0"))
                                                   (rule "polySimp_homoEq" (formula "29") (term "0"))
                                                   (rule "times_zero_2" (formula "29") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "29") (term "0,0"))
                                                   (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
                                                   (rule "inEqSimp_commuteGeq" (formula "19"))
                                                   (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "17"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
                                                   (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "29") (term "0,0"))
                                                   (rule "add_literals" (formula "29") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "29") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "17"))
                                                   (rule "add_zero_right" (formula "4") (term "1,1,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "1,0"))
                                                   (rule "times_zero_1" (formula "4") (term "0"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "44") (term "0,1,0") (ifseqformula "16"))
                                                   (rule "add_zero_left" (formula "44") (term "1,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "44") (term "0"))
                                                   (rule "polySimp_homoEq" (formula "44"))
                                                   (rule "times_zero_2" (formula "44") (term "1,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0"))
                                                   (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "16"))
                                                   (rule "add_zero_right" (formula "26") (term "1"))
                                                   (rule "applyEq" (formula "36") (term "1,0,2,1,0") (ifseqformula "16"))
                                                   (rule "add_zero_right" (formula "36") (term "0,2,1,0"))
                                                   (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "16"))
                                                   (rule "add_zero_left" (formula "17") (term "1"))
                                                   (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "16"))
                                                   (rule "add_zero_left" (formula "41") (term "1,0"))
                                                   (rule "seqDef_lower_equals_upper" (formula "41") (term "0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "applyEq" (formula "41") (term "0,1,0,0") (ifseqformula "16"))
                                                   (rule "add_zero_left" (formula "41") (term "1,0,0"))
                                                   (rule "bsum_lower_equals_upper" (formula "41") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "applyEq" (formula "42") (term "1,1,1,0") (ifseqformula "16"))
                                                   (rule "add_zero_right" (formula "42") (term "1,1,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "42") (term "0"))
                                                   (rule "add_literals" (formula "42") (term "1,0"))
                                                   (rule "times_zero_1" (formula "42") (term "0"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "true_left" (formula "42"))
                                                   (rule "inEqSimp_invertInEq0" (formula "18"))
                                                   (rule "mul_literals" (formula "18") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "3"))
                                                   (rule "leq_literals" (formula "18") (term "0"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "true_left" (formula "18"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "37") (term "0,0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "37") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                                                   (rule "add_zero_right" (formula "37") (term "1,1,0"))
                                                   (rule "qeq_literals" (formula "37") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "22") (inst "t=bucket"))
                                                   (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "26"))
                                                   (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "inEqSimp_subsumption1" (formula "22") (term "1") (ifseqformula "3"))
                                                   (rule "leq_literals" (formula "22") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "true_left" (formula "22"))
                                                   (rule "allLeft" (formula "23") (inst "t=bucket"))
                                                   (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                                                   (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "26"))
                                                   (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "23") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0"))
                                                   (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "23") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "23") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "23"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "greater_literals" (formula "2") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                          )
                                          (branch "CUT: head_len >= 1 FALSE"
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "false_right" (formula "48"))
                                             (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                                             (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "13"))
                                             (rule "add_zero_right" (formula "3") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "42") (term "1,0"))
                                             (rule "bsum_lower_equals_upper" (formula "42") (term "0"))
                                             (rule "eqSymm" (formula "42"))
                                             (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "polySimp_homoEq" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "12"))
                                             (rule "times_zero_2" (formula "18") (term "1"))
                                             (rule "applyEq" (formula "39") (term "1,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "39") (term "0,0"))
                                             (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                             (rule "qeq_literals" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "32") (term "1,0,0"))
                                             (rule "bsum_lower_equals_upper" (formula "32") (term "0,0"))
                                             (rule "eqSymm" (formula "32") (term "0"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "30") (term "1,0"))
                                             (rule "applyEq" (formula "39") (term "1,0,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "39") (term "0,0,0"))
                                             (rule "applyEq" (formula "45") (term "0,1") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "45") (term "1"))
                                             (rule "times_zero_2" (formula "45") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "45") (term "0,1"))
                                             (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "31") (term "1,0"))
                                             (rule "seqDef_lower_equals_upper" (formula "31") (term "0"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_homoEq" (formula "25") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                                             (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,1,0,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "1") (term "1,0,0"))
                                             (rule "bsum_lower_equals_upper" (formula "1") (term "0,0"))
                                             (rule "times_zero_2" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "24") (term "1,0,0,0"))
                                             (rule "bsum_lower_equals_upper" (formula "24") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "mul_literals" (formula "24") (term "0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "28") (term "1,0"))
                                             (rule "applyEq" (formula "1") (term "1,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "1") (term "0,1,0"))
                                             (rule "applyEq" (formula "49") (term "0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "49") (term "1,0"))
                                             (rule "bsum_lower_equals_upper" (formula "49") (term "0"))
                                             (rule "eqSymm" (formula "49"))
                                             (rule "applyEq" (formula "37") (term "1,0,1,0,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "37") (term "0,1,0,0"))
                                             (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "12") (term "1"))
                                             (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "29") (term "1,0"))
                                             (rule "seqDef_lower_equals_upper" (formula "29") (term "0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "applyEq" (formula "35") (term "1,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "35") (term "0,1,0"))
                                             (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "29") (term "1,0,0"))
                                             (rule "bsum_lower_equals_upper" (formula "29") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "38") (term "1,0"))
                                             (rule "bsum_lower_equals_upper" (formula "38") (term "0"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "applyEq" (formula "25") (term "1,0,2,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "25") (term "0,2,1,0"))
                                             (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "36") (term "1,0"))
                                             (rule "bsum_lower_equals_upper" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "applyEq" (formula "33") (term "1,0,0,2,1,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,2,1,0,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,0,1,1,1") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "1") (term "0,1,1,1"))
                                             (rule "applyEq" (formula "36") (term "1,0,1,1,1") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "36") (term "0,1,1,1"))
                                             (rule "applyEq" (formula "36") (term "1,1,0,0,1") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "36") (term "1,0,0,1"))
                                             (rule "bsum_lower_equals_upper" (formula "36") (term "0,0,1"))
                                             (rule "times_zero_2" (formula "36") (term "0,1"))
                                             (rule "add_zero_left" (formula "36") (term "1"))
                                             (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "11"))
                                             (rule "add_zero_left" (formula "22") (term "1"))
                                             (rule "applyEq" (formula "32") (term "1,0,0,2,1,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,2,1,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,1,0,0,1") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "1") (term "1,0,0,1"))
                                             (rule "bsum_lower_equals_upper" (formula "1") (term "0,0,1"))
                                             (rule "times_zero_2" (formula "1") (term "0,1"))
                                             (rule "add_zero_left" (formula "1") (term "1"))
                                             (rule "applyEq" (formula "45") (term "1,3,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "45") (term "3,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "39") (term "0,1"))
                                             (rule "inEqSimp_subsumption4" (formula "39") (term "1") (ifseqformula "8"))
                                             (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                             (rule "greater_literals" (formula "39") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "leq_literals" (formula "39") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "28") (term "0,0"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthNotNegative" (formula "12") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "13") (term "0"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                             (rule "qeq_literals" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "distr_forallAnd" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "onlyCreatedObjectsAreReferencedFinal" (formula "42") (term "0") (ifseqformula "2") (ifseqformula "3"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "1") (ifseqformula "3") (ifseqformula "4"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "41"))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_homoEq" (formula "18") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0,0,0,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,1,0,0,0,0"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "32"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "2"))
                                          (rule "polySimp_addComm1" (formula "41") (term "0"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "34"))
                                          (rule "polySimp_addComm1" (formula "41") (term "0"))
                                          (rule "applyEq" (formula "33") (term "1") (ifseqformula "34"))
                                          (rule "applyEq" (formula "31") (term "1") (ifseqformula "34"))
                                          (rule "polySimp_sepPosMonomial" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0"))
                                          (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "41") (term "0,0"))
                                          (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "1") (ifseqformula "1"))
                                          (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "41"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "0,1,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "0,1,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,1,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,1,0,0,0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "35") (term "1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,1,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,1,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "22") (term "0"))
                                          (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                                          (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "13") (term "0,0"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "41")) (ifInst ""  (formula "15")))
                                          (rule "true_left" (formula "13"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "31") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "30") (term "0,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "30") (term "1,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "24") (term "1,0") (inst "i=i"))
                                          (rule "eqSymm" (formula "24") (term "0"))
                                          (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "13") (term "0,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "translateJavaAddInt" (formula "13") (term "1,0,0"))
                                          (rule "translateJavaMulInt" (formula "13") (term "0,0,0"))
                                          (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "13") (term "0"))
                                          (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0"))
                                          (rule "add_literals" (formula "13") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "13") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "13") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                          (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "polySimp_homoEq" (formula "13") (term "1"))
                                          (rule "times_zero_2" (formula "13") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,1"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "16"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "13") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "notLeft" (formula "14"))
                                          (rule "notLeft" (formula "14"))
                                          (rule "eqSymm" (formula "41"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                                          (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                          (rule "mul_literals" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "nnf_imp2or" (formula "19") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "38") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1") (inst "i=i"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "12") (term "0"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "andLeft" (formula "12"))
                                          (rule "andLeft" (formula "12"))
                                          (rule "inEqSimp_commuteLeq" (formula "14"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "inEqSimp_homoInEq0" (formula "13"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0"))
                                          (rule "add_zero_right" (formula "13") (term "0"))
                                          (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "inEqSimp_commuteLeq" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "12"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                          (rule "add_literals" (formula "12") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "12") (term "1,0"))
                                          (rule "add_zero_right" (formula "12") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "42") (term "1") (inst "i=i"))
                                          (rule "applyEq" (formula "42") (term "1") (ifseqformula "43"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "40") (term "1") (inst "i=i"))
                                          (rule "applyEq" (formula "40") (term "1") (ifseqformula "43"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "1,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0,0,1") (inst "i=i"))
                                          (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "43"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "1,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0,0,1") (inst "i=i"))
                                          (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "43"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "1,1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "0,0,1") (inst "i=i"))
                                          (rule "applyEq" (formula "41") (term "0,0,1") (ifseqformula "43"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "1,1,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElementInBucket_in_de_wiesler_Buffers" (formula "52") (term "1") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "translateJavaMulInt" (formula "52") (term "0,1"))
                                          (rule "translateJavaAddInt" (formula "52") (term "1,1"))
                                          (rule "translateJavaCastInt" (formula "52") (term "0,0,2,1"))
                                          (rule "translateJavaMulInt" (formula "52") (term "0,1,1"))
                                          (rule "eqSymm" (formula "52"))
                                          (rule "applyEq" (formula "52") (term "1,1,0") (ifseqformula "25"))
                                          (rule "polySimp_addAssoc" (formula "52") (term "1,0"))
                                          (rule "commute_or" (formula "46") (term "1,0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "33") (term "1,0") (inst "i=i"))
                                          (rule "eqSymm" (formula "33") (term "0"))
                                          (rule "commute_or" (formula "37") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "1,0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "18"))
                                          (rule "inEqSimp_or_weaken1" (formula "18"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                                          (rule "true_left" (formula "18"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "42") (term "1") (inst "i=i"))
                                          (rule "eqSymm" (formula "42"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "41") (term "1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "39") (term "1") (inst "i=i"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "1") (term "0,0,1") (inst "i=i"))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "polySimp_sepNegMonomial" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "2") (term "0,0,1") (inst "i=i"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "40") (term "0,0,1") (inst "i=i"))
                                          (rule "polySimp_addComm0" (formula "40") (term "1"))
                                          (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "1") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "closeTrue" (formula "51"))
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "29") (term "1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,1,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,0,1,0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,0,1,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "29") (term "1,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,1,1,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,1,1,0"))
                                 (rule "add_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "leq_literals" (formula "29") (term "1,1,0"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "12") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaMulInt" (formula "12") (term "1,1,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "12") (term "0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "15"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "nnf_imp2or" (formula "17") (term "0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "12"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "inEqSimp_homoInEq0" (formula "11"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0"))
                                 (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "14") (term "0,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,0,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "1,0,0"))
                                 (rule "lenOfSeqDef" (formula "14") (term "0"))
                                 (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,0"))
                                 (rule "add_literals" (formula "14") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "14") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "14") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "polySimp_homoEq" (formula "14") (term "1"))
                                 (rule "times_zero_2" (formula "14") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "14") (term "0,1"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "21"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "14") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "35") (term "0,0") (inst "i=i"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "29") (term "0,0") (inst "i=i"))
                                 (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "11"))
                                 (rule "inEqSimp_commuteLeq" (formula "9"))
                                 (rule "inEqSimp_homoInEq0" (formula "10"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0"))
                                 (rule "add_zero_right" (formula "10") (term "0"))
                                 (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "25") (term "0"))
                                 (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")) (ifInst ""  (formula "1")))
                                 (rule "true_left" (formula "25"))
                                 (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "25") (term "0") (inst "element=element"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "translateJavaAddInt" (formula "25") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "25") (term "0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "25") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "37") (term "1,0") (inst "i=i"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "46") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "39")) (ifInst ""  (formula "38")) (ifInst ""  (formula "18")) (ifInst ""  (formula "20")))
                                 (rule "translateJavaMulInt" (formula "46") (term "1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "46") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,1,0,0"))
                                 (rule "eqSymm" (formula "46") (term "0,0,0,0"))
                                 (rule "replace_known_right" (formula "46") (term "0,0,0,0") (ifseqformula "43"))
                                  (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "17")))
                                 (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "46") (term "0"))
                                 (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "allRight" (formula "46") (inst "sk=b_0"))
                                 (rule "impRight" (formula "46"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "48") (term "0,1") (inst "selectSK=arr_0"))
                                 (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "30"))
                                 (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "45"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "24"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "36") (term "1,0") (inst "i=i"))
                                 (rule "commute_or" (formula "45") (term "1,0"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "commute_or" (formula "45") (term "1,0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "21"))
                                 (rule "inEqSimp_or_weaken1" (formula "21"))
                                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                                 (rule "true_left" (formula "21"))
                                 (rule "cnf_rightDist" (formula "25") (term "0"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "29") (term "0,0") (inst "i=i"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "29") (term "1,1,0") (inst "i=i"))
                                 (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "29") (term "0,0,1,0") (inst "i=i"))
                                 (rule "distr_forallAnd" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "commute_or" (formula "26") (term "0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "41") (inst "iv=iv"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "getOfSeqDef" (formula "42") (term "1,1,0"))
                                 (rule "castDel" (formula "42") (term "1,1,1,0"))
                                 (rule "castDel" (formula "42") (term "2,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "1,1,0,1,1,0"))
                                 (rule "add_literals" (formula "42") (term "1,1,1,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "42") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "42") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1,1,0"))
                                 (rule "getOfSeqDef" (formula "42") (term "0,1,0"))
                                 (rule "castDel" (formula "42") (term "2,0,1,0"))
                                 (rule "castDel" (formula "42") (term "1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "42") (term "0,1,1,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "0,0,1,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "0,1,1,1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "41") (term "1"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "41") (term "1,1"))
                                 (rule "add_literals" (formula "41") (term "1,1,1,1"))
                                 (rule "times_zero_1" (formula "41") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "41") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "41") (term "0"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,1"))
                                 (rule "polySimp_mulAssoc" (formula "41") (term "0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "41") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "42") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "1,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,1,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,1,1,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "42") (term "0,1,1,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "0,0,1,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "0,1,1,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "1,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,0,1,1,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "42") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "42") (term "0,1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "42") (term "1,0,1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "42") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "42") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,1,1"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,1"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,1,1"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,1,1"))
                                 (rule "add_zero_right" (formula "41") (term "0,1,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "41") (term "0,1,1"))
                                 (rule "add_literals" (formula "41") (term "1,0,1,1"))
                                 (rule "times_zero_1" (formula "41") (term "0,1,1"))
                                 (rule "add_zero_left" (formula "41") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "42") (term "0,0,0,1,1,1,0,0"))
                                 (rule "add_literals" (formula "42") (term "1,0,0,0,1,1,1,0,0"))
                                 (rule "times_zero_1" (formula "42") (term "0,0,0,1,1,1,0,0"))
                                 (rule "add_zero_left" (formula "42") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1,1,1,0,0"))
                                 (rule "add_literals" (formula "42") (term "1,0,1,1,1,0,0"))
                                 (rule "times_zero_1" (formula "42") (term "0,1,1,1,0,0"))
                                 (rule "add_zero_left" (formula "42") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "42") (term "0,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "42") (term "0,0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "0,0,0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "0,0,1,0,0,0,1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0,1"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "42") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,1,1,0"))
                                 (rule "eqSymm" (formula "42") (term "1,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,0,0,0,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,0,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0,0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,0,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0,0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "42") (term "0,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,1"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "41") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "41") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "41") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "41") (term "1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0,1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "41") (term "0"))
                                 (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "35") (inst "iv=iv"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "getOfSeqDef" (formula "36") (term "1,1,0"))
                                 (rule "castDel" (formula "36") (term "1,1,1,0"))
                                 (rule "castDel" (formula "36") (term "2,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "36") (term "1,1,0,1,1,0"))
                                 (rule "add_literals" (formula "36") (term "1,1,1,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "36") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,1,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "35") (term "1"))
                                 (rule "polySimp_elimSub" (formula "35") (term "1,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "1,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,1,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "35") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "36") (term "0,1,1,1,0,0"))
                                 (rule "add_literals" (formula "36") (term "1,0,1,1,1,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "0,1,1,1,0,0"))
                                 (rule "add_zero_left" (formula "36") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "35") (term "0"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "polySimp_elimSub" (formula "35") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1"))
                                 (rule "polySimp_addComm1" (formula "35") (term "1,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "35") (term "0,1,1"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,1"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,1"))
                                 (rule "add_zero_left" (formula "35") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "36") (term "0,1,0"))
                                 (rule "castDel" (formula "36") (term "1,0,1,0"))
                                 (rule "castDel" (formula "36") (term "2,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "36") (term "0,1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "36") (term "1,0,1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "36") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "36") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "36") (term "0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0,0,0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "36") (term "1,1,0,0,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,0,1"))
                                 (rule "add_zero_right" (formula "35") (term "0,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "35") (term "0,0,0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "35") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "35") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,1,1,0"))
                                 (rule "eqSymm" (formula "35") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "35") (term "0"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                 (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                 (rule "cut_direct" (formula "47") (term "0,0,0,0"))
                                 (branch "CUT: head_len >= 1 TRUE"
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "replace_known_left" (formula "36") (term "0,1,1,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "16") (term "0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAnInt" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "commute_or_2" (formula "42") (term "0"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "20") (term "0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.indices.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqReverse" (formula "54") (term "0,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "54") (term "0,1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "1,2,0") (ifseqformula "6") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "1,0") (ifseqformula "6") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "2")))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_or" (formula "42") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_and_2" (formula "48"))
                                       (rule "ifthenelse_to_or_right" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0"))
                                       (rule "commute_or_2" (formula "42") (term "0"))
                                       (rule "commute_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "42") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "42") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "shift_paren_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "42") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "42") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "42") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "42") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "commute_or_2" (formula "42") (term "0"))
                                       (rule "shift_paren_or" (formula "42") (term "0,0"))
                                       (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                       (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                       (rule "commute_or" (formula "35") (term "1,1,0"))
                                       (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                                       (rule "commute_or" (formula "35") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "35") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "35") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "35") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "35") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "35") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "shift_paren_or" (formula "35") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "shift_paren_or" (formula "35") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "ifthenelse_to_or_left" (formula "42") (term "0,0,0,0"))
                                       (rule "eqSymm" (formula "42") (term "1,1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "42") (term "0,0"))
                                       (rule "commute_or_2" (formula "42") (term "0"))
                                       (rule "commute_or_2" (formula "42") (term "0,1,0"))
                                       (rule "commute_or" (formula "42") (term "1,1,0"))
                                       (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                       (rule "allLeft" (formula "25") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                       (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "29"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                                       (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "allLeft" (formula "26") (inst "t=b_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "26") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "replace_known_left" (formula "55") (term "1") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "inEqSimp_geqRight" (formula "55"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "27") (term "0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "allLeft" (formula "27") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                       (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "30"))
                                       (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "27") (term "0,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "12"))
                                       (rule "qeq_literals" (formula "27") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0"))
                                       (rule "leq_literals" (formula "27") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "27"))
                                       (rule "times_zero_1" (formula "18") (term "0,0"))
                                       (rule "add_zero_left" (formula "18") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0"))
                                       (rule "allLeft" (formula "27") (inst "t=b_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "27") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "27") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "27"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "leq_literals" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "self.indices.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "49") (term "0") (ifseqformula "6") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "CUT: head_len >= 1 FALSE"
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "false_right" (formula "48"))
                                    (rule "replace_known_right" (formula "35") (term "0,1,1,0,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_geqRight" (formula "47"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                                    (rule "applyEq" (formula "37") (term "1,1,1,0,0,1,0") (ifseqformula "16"))
                                    (rule "add_zero_right" (formula "37") (term "1,1,0,0,1,0"))
                                    (rule "eqSymm" (formula "37") (term "1,0"))
                                    (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "16"))
                                    (rule "add_zero_right" (formula "39") (term "1,0,0"))
                                    (rule "bsum_lower_equals_upper" (formula "39") (term "0,0"))
                                    (rule "eqSymm" (formula "39") (term "0"))
                                    (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "16"))
                                    (rule "times_zero_2" (formula "22") (term "1"))
                                    (rule "applyEq" (formula "31") (term "1,0,0,0") (ifseqformula "16"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0"))
                                    (rule "polySimp_homoEq" (formula "31") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                                    (rule "add_literals" (formula "31") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "44") (term "1,0,0,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "44") (term "0,0,0"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "35") (term "1,0"))
                                    (rule "seqDef_lower_equals_upper" (formula "35") (term "0"))
                                    (rule "eqSymm" (formula "35"))
                                    (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "42") (term "0,0"))
                                    (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "29") (term "1,0,0,0"))
                                    (rule "bsum_lower_equals_upper" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "times_zero_2" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "applyEq" (formula "33") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0"))
                                    (rule "eqSymm" (formula "33") (term "1,0"))
                                    (rule "applyEq" (formula "42") (term "1,0,1,0,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "42") (term "0,1,0,0"))
                                    (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                                    (rule "add_zero_left" (formula "16") (term "1"))
                                    (rule "applyEq" (formula "40") (term "1,0,0,2,1,0,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,2,1,0,1,0"))
                                    (rule "applyEq" (formula "30") (term "1,0,2,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "30") (term "0,2,1,0"))
                                    (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "15"))
                                    (rule "add_zero_left" (formula "35") (term "1,0,0"))
                                    (rule "bsum_lower_equals_upper" (formula "35") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "true_left" (formula "35"))
                                    (rule "applyEq" (formula "40") (term "1,0,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "40") (term "0,1,0"))
                                    (rule "applyEq" (formula "38") (term "1,0,0,2,1,1,0") (ifseqformula "15"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,2,1,1,0"))
                                    (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "15"))
                                    (rule "add_zero_left" (formula "27") (term "1"))
                                    (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "15"))
                                    (rule "add_zero_left" (formula "34") (term "1,0"))
                                    (rule "seqDef_lower_equals_upper" (formula "34") (term "0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0"))
                                    (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "32") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAnInt" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAnInt" (formula "20") (term "0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthIsAnInt" (formula "19") (term "0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.indices.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqReverse" (formula "47") (term "0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "47") (term "0,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "1") (ifseqformula "5") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "6") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                                       (rule "true_left" (formula "1"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "ifthenelse_to_or_left" (formula "37") (term "0,0,0"))
                                       (rule "eqSymm" (formula "37") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "37") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "37") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "37") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "commute_or" (formula "37") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "37") (term "1,0,0,1,1,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "shift_paren_or" (formula "37") (term "1,1,0"))
                                       (rule "commute_or" (formula "37") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "37") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "37") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "37") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "37") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "shift_paren_or" (formula "37") (term "0,0"))
                                       (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "ifthenelse_to_or_left" (formula "37") (term "0,0,0,0"))
                                       (rule "eqSymm" (formula "37") (term "1,1,0,0,0,0"))
                                       (rule "eqSymm" (formula "37") (term "1,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,0"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "commute_or" (formula "37") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,1,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "commute_or" (formula "38") (term "0"))
                                       (rule "shift_paren_or" (formula "37") (term "0,0"))
                                       (rule "commute_or" (formula "38") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "cnf_rightDist" (formula "38") (term "0"))
                                       (rule "distr_forallAnd" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "commute_or_2" (formula "38") (term "0"))
                                       (rule "shift_paren_or" (formula "39") (term "0"))
                                       (rule "commute_or_2" (formula "38") (term "0,0"))
                                       (rule "shift_paren_or" (formula "39") (term "0,0"))
                                       (rule "commute_or_2" (formula "39") (term "0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "39") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "39") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "38") (term "0,0,0"))
                                       (rule "commute_or" (formula "37") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "commute_or" (formula "38") (term "0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "38") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "allLeft" (formula "26") (inst "t=b_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "26") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "27") (term "0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "allLeft" (formula "27") (inst "t=bucket"))
                                       (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                       (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "30"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "12"))
                                       (rule "qeq_literals" (formula "27") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0"))
                                       (rule "leq_literals" (formula "27") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "allLeft" (formula "26") (inst "t=b_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "26") (term "1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "26"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0"))
                                       (rule "add_literals" (formula "6") (term "0"))
                                       (rule "leq_literals" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "self.indices.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "1,0") (ifseqformula "5") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "41")))
                                       (rule "closeFalse" (formula "27"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "closeTrue" (formula "35"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "allRight" (formula "35") (inst "sk=f_0"))
                     (rule "allRight" (formula "35") (inst "sk=o_0"))
                     (rule "orRight" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "eqSymm" (formula "38"))
                     (rule "eqSymm" (formula "36") (term "0,0,0,1"))
                     (rule "eqSymm" (formula "35") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,1,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,1,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,0,1,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,0,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                     (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "19"))
                     (rule "eqSymm" (formula "39"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "inEqSimp_or_tautInEq0" (formula "30") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "30") (term "1,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,1,1,0"))
                     (rule "add_literals" (formula "30") (term "1,1,0,1,1,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0,1,1,0"))
                     (rule "add_zero_right" (formula "30") (term "0,1,1,0"))
                     (rule "leq_literals" (formula "30") (term "1,1,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "nnf_imp2or" (formula "27") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "13") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "notLeft" (formula "15"))
                     (rule "notLeft" (formula "13"))
                     (rule "notLeft" (formula "13"))
                     (rule "eqSymm" (formula "36"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "18") (term "0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_homoInEq0" (formula "11"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0"))
                     (rule "add_zero_right" (formula "11") (term "0"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "36") (term "0,0") (inst "i=i"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "14"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0"))
                     (rule "add_zero_right" (formula "14") (term "0"))
                     (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "17") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "translateJavaAddInt" (formula "17") (term "1,0,0"))
                     (rule "translateJavaMulInt" (formula "17") (term "0,0,0"))
                     (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0"))
                     (rule "lenOfSeqDef" (formula "17") (term "0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1,0"))
                     (rule "add_literals" (formula "17") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "17") (term "0,1,0"))
                     (rule "add_zero_left" (formula "17") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                     (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_homoEq" (formula "17") (term "1"))
                     (rule "times_zero_2" (formula "17") (term "1,0,1"))
                     (rule "add_zero_right" (formula "17") (term "0,1"))
                     (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "24"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                     (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "26") (term "0"))
                     (rule "replace_known_right" (formula "26") (term "0,1,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "2")) (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "38") (term "1,0") (inst "i=i"))
                     (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "26") (term "0") (inst "element=element"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "translateJavaAddInt" (formula "26") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "26") (term "0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "26") (term "0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "32") (term "0,0") (inst "i=i"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "32") (term "1,0") (inst "i=i"))
                     (rule "commute_or" (formula "41") (term "1,0"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "commute_or" (formula "41") (term "1,0,0"))
                     (rule "commute_or" (formula "30") (term "0,0"))
                     (rule "commute_or" (formula "17"))
                     (rule "inEqSimp_or_weaken1" (formula "17"))
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "17"))
                     (rule "cnf_rightDist" (formula "21") (term "0"))
                     (rule "distr_forallAnd" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "0,0") (inst "i=i"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "1,1,0") (inst "i=i"))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "0,0,1,0") (inst "i=i"))
                     (rule "commute_or" (formula "22") (term "0"))
                     (rule "cut_direct" (formula "47") (term "0"))
                     (branch "CUT: o_0 = values TRUE"
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "ifthenelse_negated" (formula "2") (term "0"))
                        (rule "applyEq" (formula "50") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "false_right" (formula "50"))
                        (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,0,0,0,0") (ifseqformula "1"))
                        (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: o_0 = values FALSE"
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "false_right" (formula "48"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "false_right" (formula "48"))
                        (rule "cut_direct" (formula "48") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "false_right" (formula "49"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "49")))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "notRight" (formula "49"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "50")))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
               )
               (branch "Exceptional Post (copy_nonoverlapping)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "1,1,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "1,0,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0"))
                  (rule "translateJavaAddInt" (formula "24") (term "3,1,0,1,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,2,0,1,0,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "24") (term "3,0,0,1,1,0,1,1"))
                  (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0"))
                  (rule "andLeft" (formula "24"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,0") (ifseqformula "24"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0") (ifseqformula "18"))
                  (rule "andLeft" (formula "25"))
                  (rule "andLeft" (formula "26"))
                  (rule "andLeft" (formula "25"))
                  (rule "andLeft" (formula "27"))
                  (rule "notLeft" (formula "25"))
                  (rule "close" (formula "29") (ifseqformula "28"))
               )
               (branch "Pre (copy_nonoverlapping)"
                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1") (ifseqformula "18"))
                  (rule "wellFormedAnonEQ" (formula "29") (term "0,0,1") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1,0,1") (ifseqformula "18"))
                  (rule "translateJavaSubInt" (formula "29") (term "2,0,0,1,1,1,0"))
                  (rule "translateJavaSubInt" (formula "29") (term "2,1,0,1,1,1,0"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,2,0,0,1,1,1,0"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,1,1,1,0"))
                  (rule "replace_known_left" (formula "29") (term "0,0,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "17")) (ifInst ""  (formula "4")))
                  (rule "polySimp_elimSub" (formula "29") (term "2,1,0,1,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,2,1,0,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "2,0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,2,0,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,2,1,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "2,0,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "2,1,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,2,0,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,2,1,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0,0,1,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "disjointDefinition" (formula "29") (term "0,1,1,1,0"))
                  (rule "disjointArrayRanges" (formula "29") (term "0,1,1,1,0"))
                  (rule "replace_known_right" (formula "29") (term "0,0,0,0,0,1,1,1,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0,1,0"))
                  (rule "times_zero_2" (formula "29") (term "1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,1,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "23") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1,1,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,1,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,1,1,0"))
                  (rule "add_literals" (formula "23") (term "0,1,1,0"))
                  (rule "leq_literals" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
                  (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_homoInEq0" (formula "9"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "18") (term "0") (inst "element=element"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                  (rule "polySimp_homoEq" (formula "18") (term "0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "24") (term "0,0") (inst "i=i"))
                  (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "13") (term "0,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "translateJavaAddInt" (formula "13") (term "1,0,0"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,0,0"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0"))
                  (rule "lenOfSeqDef" (formula "13") (term "0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0"))
                  (rule "add_literals" (formula "13") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "13") (term "0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
                  (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "polySimp_homoEq" (formula "13") (term "1"))
                  (rule "mul_literals" (formula "13") (term "1,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,1"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "16"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "13") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                  (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "replace_known_left" (formula "33") (term "1,0,1,1,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0"))
                  (rule "add_zero_right" (formula "12") (term "0"))
                  (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "26") (term "1,0") (inst "i=i"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "16") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "16") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "notLeft" (formula "18"))
                  (rule "notLeft" (formula "16"))
                  (rule "notLeft" (formula "16"))
                  (rule "eqSymm" (formula "33"))
                  (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "32")))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "applyEq" (formula "39") (term "0,1,0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                  (rule "mul_literals" (formula "39") (term "1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "39") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,1,0"))
                  (rule "mul_literals" (formula "39") (term "0,0,1,1,0"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "19"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "25") (term "0,0") (inst "i=i"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "25") (term "1,1,0") (inst "i=i"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "25") (term "0,0,1,0") (inst "i=i"))
                  (rule "commute_or" (formula "34") (term "1,0"))
                  (rule "commute_or" (formula "29") (term "0,0"))
                  (rule "commute_or" (formula "34") (term "1,0,0"))
                  (rule "commute_or" (formula "16"))
                  (rule "inEqSimp_or_weaken1" (formula "16"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "16"))
                  (rule "cnf_rightDist" (formula "20") (term "0"))
                  (rule "distr_forallAnd" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "commute_or" (formula "21") (term "0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "30") (inst "iv=iv"))
                  (rule "andLeft" (formula "30"))
                  (rule "getOfSeqDef" (formula "31") (term "0,1,0"))
                  (rule "castDel" (formula "31") (term "2,0,1,0"))
                  (rule "castDel" (formula "31") (term "1,0,1,0"))
                  (rule "eqSymm" (formula "31") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "31") (term "0,2,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "1,1,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "31") (term "0,1,1,0,1,1,0"))
                  (rule "add_literals" (formula "31") (term "1,0,1,1,0,1,1,0"))
                  (rule "times_zero_1" (formula "31") (term "0,1,1,0,1,1,0"))
                  (rule "add_zero_left" (formula "31") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "30") (term "1"))
                  (rule "polySimp_elimSub" (formula "30") (term "1,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "1,1"))
                  (rule "add_literals" (formula "30") (term "1,1,1,1"))
                  (rule "times_zero_1" (formula "30") (term "1,1,1"))
                  (rule "add_zero_right" (formula "30") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "1,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "31") (term "0,1,1,1,0,0"))
                  (rule "add_literals" (formula "31") (term "1,0,1,1,1,0,0"))
                  (rule "times_zero_1" (formula "31") (term "0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "31") (term "1,1,1,0,0"))
                  (rule "lenOfSeqDef" (formula "30") (term "0"))
                  (rule "eqSymm" (formula "30"))
                  (rule "polySimp_elimSub" (formula "30") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1"))
                  (rule "polySimp_addComm1" (formula "30") (term "1,1"))
                  (rule "polySimp_pullOutFactor0" (formula "30") (term "0,1,1"))
                  (rule "add_literals" (formula "30") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "30") (term "0,1,1"))
                  (rule "add_zero_left" (formula "30") (term "1,1"))
                  (rule "getOfSeqDef" (formula "31") (term "0,1,0"))
                  (rule "castDel" (formula "31") (term "2,0,1,0"))
                  (rule "castDel" (formula "31") (term "1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "31") (term "1,1,0,0,1,0"))
                  (rule "add_literals" (formula "31") (term "1,1,1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "31") (term "1,1,1,0,0,1,0"))
                  (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0"))
                  (rule "eqSymm" (formula "31") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "31") (term "0,2,1,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,0,0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0,0,1,1,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,0,1,1,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0"))
                  (rule "eqSymm" (formula "30"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,1"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "30") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "31") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "31") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0"))
                  (rule "eqSymm" (formula "30"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1"))
                  (rule "eqSymm" (formula "30"))
                  (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "30") (term "0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "30") (term "0"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "cut_direct" (formula "35") (term "0,0,0,0"))
                  (branch "CUT: head_len >= 1 TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "replace_known_left" (formula "31") (term "0,1,1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
                     (rule "leq_literals" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                     (rule "arrayLengthIsAnInt" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "cut_direct" (formula "42") (term "0,0"))
                     (branch "CUT: head_len >= bucket * -256 TRUE"
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "ifthenelse_to_or_left" (formula "32") (term "0,0,0"))
                        (rule "eqSymm" (formula "32") (term "1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "eqSymm" (formula "32") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "32") (term "1,0,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0"))
                        (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0"))
                        (rule "commute_or" (formula "32") (term "0,0"))
                        (rule "commute_or_2" (formula "32") (term "0"))
                        (rule "commute_or" (formula "32") (term "1,1,0"))
                        (rule "commute_or_2" (formula "32") (term "0,1,0"))
                        (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                        (rule "commute_or" (formula "32") (term "0,0,1,0"))
                        (rule "commute_or" (formula "32") (term "0,0,1,1,0"))
                        (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                        (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,1,1,0"))
                        (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,1,0"))
                        (rule "qeq_literals" (formula "32") (term "1,0,0,1,1,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "shift_paren_or" (formula "32") (term "1,1,0"))
                        (rule "commute_or" (formula "32") (term "0,1,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "32") (term "1,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,1,1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,1,1,0"))
                        (rule "add_literals" (formula "32") (term "1,0,1,1,1,0"))
                        (rule "times_zero_1" (formula "32") (term "0,1,1,1,0"))
                        (rule "leq_literals" (formula "32") (term "1,1,1,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "shift_paren_or" (formula "32") (term "0"))
                        (rule "commute_or_2" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "shift_paren_or" (formula "32") (term "0,0"))
                        (rule "commute_or" (formula "32") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "commute_and_2" (formula "37"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "40") (term "1") (ifseqformula "3") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "inEqSimp_leqRight" (formula "44"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "1,0") (ifseqformula "5") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                        (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                        (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                        (rule "commute_or" (formula "35") (term "0,0"))
                        (rule "commute_or_2" (formula "35") (term "0"))
                        (rule "commute_or" (formula "35") (term "1,1,0"))
                        (rule "commute_or_2" (formula "35") (term "0,1,0"))
                        (rule "commute_or" (formula "35") (term "0,0,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "0"))
                        (rule "distr_forallAnd" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "commute_or" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0"))
                        (rule "commute_or_2" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "commute_or" (formula "36") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0"))
                        (rule "commute_or" (formula "35") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "cnf_rightDist" (formula "36") (term "0"))
                        (rule "distr_forallAnd" (formula "36"))
                        (rule "andLeft" (formula "36"))
                        (rule "commute_or_2" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "37") (term "0"))
                        (rule "commute_or_2" (formula "37") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0"))
                        (rule "add_literals" (formula "37") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "37") (term "0,1,0"))
                        (rule "leq_literals" (formula "37") (term "1,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "shift_paren_or" (formula "36") (term "0,0"))
                        (rule "commute_or" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                        (rule "add_zero_right" (formula "36") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "36") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "allLeft" (formula "25") (inst "t=bucket"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                        (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "25") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0"))
                        (rule "leq_literals" (formula "25") (term "0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "25"))
                        (rule "times_zero_1" (formula "17") (term "0,0"))
                        (rule "add_zero_left" (formula "17") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "26"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "12"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "greater_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "CUT: head_len >= bucket * -256 FALSE"
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "false_right" (formula "43"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "9"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch "CUT: head_len >= 1 FALSE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "false_right" (formula "36"))
                     (rule "replace_known_right" (formula "30") (term "0,1,1,0") (ifseqformula "35"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_geqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                     (rule "applyEq" (formula "42") (term "0,0,0") (ifseqformula "11"))
                     (rule "inEqSimp_commuteGeq" (formula "42") (term "0,0"))
                     (rule "applyEq" (formula "27") (term "1,0,0,0") (ifseqformula "11"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0"))
                     (rule "polySimp_homoEq" (formula "27") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "41") (term "0,1,1,1,0") (ifseqformula "10"))
                     (rule "times_zero_2" (formula "41") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "41") (term "1,1,0"))
                     (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "33") (term "1,0,0"))
                     (rule "bsum_lower_equals_upper" (formula "33") (term "0,0"))
                     (rule "eqSymm" (formula "33") (term "0"))
                     (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "10"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "applyEq" (formula "30") (term "1,1,1,0,0,0,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0,0,0,0,0"))
                     (rule "eqSymm" (formula "30") (term "0,0,0"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "30") (term "1,0"))
                     (rule "seqDef_lower_equals_upper" (formula "30") (term "0"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "24") (term "1,0,0,0"))
                     (rule "bsum_lower_equals_upper" (formula "24") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "times_zero_2" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "applyEq" (formula "28") (term "1,1,1,0,0,0,0,0") (ifseqformula "10"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,0,0,0"))
                     (rule "eqSymm" (formula "28") (term "0,0,0"))
                     (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "10"))
                     (rule "add_zero_left" (formula "30") (term "1,0,0"))
                     (rule "bsum_lower_equals_upper" (formula "30") (term "0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "applyEq" (formula "25") (term "1,0,2,1,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "25") (term "0,2,1,0"))
                     (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "10"))
                     (rule "add_zero_left" (formula "11") (term "1"))
                     (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "10"))
                     (rule "add_zero_left" (formula "22") (term "1"))
                     (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "10"))
                     (rule "add_zero_left" (formula "29") (term "1,0"))
                     (rule "seqDef_lower_equals_upper" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "inEqSimp_invertInEq0" (formula "36") (term "0,0"))
                     (rule "times_zero_2" (formula "36") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                     (rule "inEqSimp_subsumption6" (formula "36") (term "0,0") (ifseqformula "6"))
                     (rule "greater_literals" (formula "36") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "times_zero_1" (formula "36") (term "1,0,0,0"))
                     (rule "leq_literals" (formula "36") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "27") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0"))
                     (rule "qeq_literals" (formula "27") (term "1,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                     (rule "arrayLengthIsAnInt" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAnInt" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "1,0") (ifseqformula "1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "33") (term "1") (ifseqformula "1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "37") (term "0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "allLeft" (formula "22") (inst "t=bucket"))
                     (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                     (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "27"))
                     (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "allLeft" (formula "23") (inst "t=bucket"))
                     (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                     (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "23") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0,0"))
                     (rule "leq_literals" (formula "23") (term "0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "23"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "10"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Exceptional Post (copy_nonoverlapping)"
                (builtin "One Step Simplification" (formula "25"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaAddInt" (formula "18") (term "3,1,0,1,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,1,1,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "3,0,0,1,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,0,1,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,1,0,0"))
               (rule "translateJavaSubInt" (formula "18") (term "2,1,0,0"))
               (rule "andLeft" (formula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "21"))
               (rule "notLeft" (formula "19"))
               (rule "close" (formula "22") (ifseqformula "21"))
            )
            (branch "Pre (copy_nonoverlapping)"
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")) (ifInst ""  (formula "1")) (ifInst ""  (formula "21")) (ifInst ""  (formula "4")))
               (rule "translateJavaAddInt" (formula "23") (term "0,1,0,1,1,0"))
               (rule "translateJavaSubInt" (formula "23") (term "2,1,0,1,1,1,0"))
               (rule "translateJavaSubInt" (formula "23") (term "2,0,0,1,1,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,2,1,0,1,1,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,2,0,0,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "23") (term "2,1,0,1,1,1,0"))
               (rule "mul_literals" (formula "23") (term "1,2,1,0,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "23") (term "2,0,0,1,1,1,0"))
               (rule "mul_literals" (formula "23") (term "1,2,0,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,1,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,1,0,1,1,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "2,0,0,1,1,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "2,1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,0,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,1,0,1,1,1,0"))
               (rule "disjointDefinition" (formula "23") (term "0,1,1,1,0"))
               (rule "disjointArrayRanges" (formula "23") (term "0,1,1,1,0"))
               (rule "replace_known_right" (formula "23") (term "0,0,0,0,0,1,1,1,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_subsumption6" (formula "23") (term "0,0,1,0") (ifseqformula "6"))
               (rule "greater_literals" (formula "23") (term "0,0,0,0,1,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,0"))
               (rule "leq_literals" (formula "23") (term "0,0,0,1,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_or_tautInEq0" (formula "17") (term "1,0"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "1,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,1,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,1,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,1,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,1,1,0"))
               (rule "leq_literals" (formula "17") (term "1,1,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "11") (term "0,0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "translateJavaMulInt" (formula "11") (term "0,0,0"))
               (rule "translateJavaMulInt" (formula "11") (term "0,1,0,0"))
               (rule "translateJavaAddInt" (formula "11") (term "1,0,0"))
               (rule "lenOfSeqDef" (formula "11") (term "0"))
               (rule "polySimp_elimSub" (formula "11") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "11") (term "1,0"))
               (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
               (rule "add_literals" (formula "11") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0"))
               (rule "add_zero_left" (formula "11") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
               (rule "applyEq" (formula "11") (term "0,1,0,0,0") (ifseqformula "14"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
               (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "polySimp_homoEq" (formula "11") (term "1"))
               (rule "times_zero_2" (formula "11") (term "1,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,1"))
               (rule "polySimp_sepPosMonomial" (formula "11") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0"))
               (rule "Contract_axiom_for_countElementSplit_in_Functions" (formula "16") (term "0"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
               (rule "true_left" (formula "16"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "14") (inst "b=b"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "15"))
               (rule "notLeft" (formula "14"))
               (rule "eqSymm" (formula "25"))
               (rule "replace_known_right" (formula "31") (term "0,1,1,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "23")))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "14"))
               (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,1,0"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "17"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "replace_known_left" (formula "34") (term "1,1,1,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "replace_known_left" (formula "34") (term "1,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "Definition_axiom_for_countElementSplit_in_de_wiesler_Functions" (formula "25") (term "0") (inst "element=element"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "translateJavaAddInt" (formula "25") (term "1,0"))
               (rule "polySimp_homoEq" (formula "25") (term "0"))
               (rule "polySimp_addComm1" (formula "25") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "25") (term "0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
               (rule "commute_or" (formula "16"))
               (rule "inEqSimp_or_weaken1" (formula "16"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
               (rule "true_left" (formula "16"))
               (rule "commute_or" (formula "27") (term "1,0"))
               (rule "commute_or" (formula "27") (term "1,0,0"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "24") (term "0,0") (inst "i=i"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "24") (term "1,1,0") (inst "i=i"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "24") (term "0,0,1,0") (inst "i=i"))
               (rule "commute_and" (formula "33"))
               (rule "cnf_rightDist" (formula "20") (term "0"))
               (rule "distr_forallAnd" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "commute_or" (formula "21") (term "0"))
               (rule "cut_direct" (formula "28") (term "0,0,0,0"))
               (branch "CUT: head_len >= 1 TRUE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "commute_and_2" (formula "28"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthIsAnInt" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "allLeft" (formula "22") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "22") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "22") (term "0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "22"))
                  (rule "times_zero_1" (formula "13") (term "0,0"))
                  (rule "add_zero_left" (formula "13") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "allLeft" (formula "22") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "27"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1"))
                  (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "cut_direct" (formula "37") (term "1"))
                  (branch "CUT: head_len <= 65536 + bucket * -256 TRUE"
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "2") (ifseqformula "10"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0") (ifseqformula "3") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: head_len <= 65536 + bucket * -256 FALSE"
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "false_right" (formula "38"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "14"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "10"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "greater_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "CUT: head_len >= 1 FALSE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "false_right" (formula "29"))
                  (rule "inEqSimp_geqRight" (formula "28"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "10"))
                  (rule "times_zero_2" (formula "16") (term "1"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq0" (formula "32") (term "1"))
                  (rule "times_zero_2" (formula "32") (term "1,0,1"))
                  (rule "add_zero_right" (formula "32") (term "0,1"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "24") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0"))
                  (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "24") (term "1,0,0,0"))
                  (rule "bsum_lower_equals_upper" (formula "24") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "times_zero_2" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "10"))
                  (rule "add_zero_left" (formula "11") (term "1"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "10"))
                  (rule "add_zero_left" (formula "22") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "31") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
                  (rule "inEqSimp_subsumption4" (formula "31") (term "1") (ifseqformula "7"))
                  (rule "greater_literals" (formula "31") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "mul_literals" (formula "31") (term "0,0,1"))
                  (rule "leq_literals" (formula "31") (term "0,1"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthIsAnInt" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthIsAnInt" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "allLeft" (formula "21") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "21") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0"))
                  (rule "leq_literals" (formula "21") (term "0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "20") (inst "t=bucket"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                  (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "25"))
                  (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "29") (term "0") (ifseqformula "1") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
   )
)
)
}
