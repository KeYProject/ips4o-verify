\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 06 21:17:06 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src/de/wiesler";

\proofObligation "#Proof Obligation Settings
#Thu Jan 06 21:17:06 CET 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "666bcb0c95"))

(autoModeTime "2500")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "eqSymm" (formula "16") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "11"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "16") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "16") (term "1,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "16") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "16") (term "1,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "3,0"))
(rule "polySimp_addComm0" (formula "10") (term "3,0"))
(rule "polySimp_addComm0" (formula "12") (term "0"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "16") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "16") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "assignment" (formula "16") (term "1"))
 (builtin "One Step Simplification" (formula "16"))
(rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "16") (term "0,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1,0,0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "16") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_distribute,savedHeapBefore_distribute"))
 (builtin "One Step Simplification" (formula "16"))
 (builtin "Block Contract (Internal)" (formula "16") (newnames "exc#3,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
(branch "Validity"
    (builtin "One Step Simplification" (formula "17"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
   (rule "true_left" (formula "14"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,0,0,1"))
   (rule "eqSymm" (formula "16") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "16") (term "1,0,0,1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "exc#3_1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "emptyStatement" (formula "16") (term "1"))
   (rule "emptyStatement" (formula "16") (term "1"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "blockEmptyLabel" (formula "16") (term "1"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "emptyModality" (formula "16") (term "1"))
   (rule "andRight" (formula "16"))
   (branch "Case 1"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "16"))
         (rule "closeTrue" (formula "16"))
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "8") (term "0"))
         (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")))
         (rule "true_left" (formula "8"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_homoInEq0" (formula "11"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0"))
         (rule "add_zero_right" (formula "11") (term "0"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_homoInEq0" (formula "14"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "times_zero_1" (formula "14") (term "1,0"))
         (rule "add_zero_right" (formula "14") (term "0"))
         (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "15") (term "0,0"))
         (rule "replace_known_left" (formula "15") (term "1,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")) (ifInst ""  (formula "20")) (ifInst ""  (formula "18")))
         (rule "true_left" (formula "15"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "i=i") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "eqSymm" (formula "23"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "8") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "9"))
         (rule "notLeft" (formula "8"))
         (rule "eqSymm" (formula "21"))
         (rule "eqSymm" (formula "20"))
         (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "14") (term "0,0") (inst "i=i") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaAddInt" (formula "14") (term "1,0,0"))
         (rule "translateJavaMulInt" (formula "14") (term "0,0,0"))
         (rule "translateJavaMulInt" (formula "14") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "14") (term "0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "1,0"))
         (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,0"))
         (rule "add_literals" (formula "14") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "14") (term "0,1,0"))
         (rule "add_zero_left" (formula "14") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_homoInEq0" (formula "9"))
         (rule "times_zero_2" (formula "9") (term "1,0"))
         (rule "add_zero_right" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_homoInEq0" (formula "15"))
         (rule "mul_literals" (formula "15") (term "1,0"))
         (rule "add_zero_right" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "23"))
         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
         (rule "mul_literals" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "cnf_rightDist" (formula "25") (term "0"))
         (rule "distr_forallAnd" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "commute_or" (formula "26") (term "0"))
         (rule "ifthenelse_split" (formula "19") (term "0"))
         (branch "self.indices[bucket] >= 1 TRUE"
            (rule "close" (formula "35") (ifseqformula "20"))
         )
         (branch "self.indices[bucket] >= 1 FALSE"
            (rule "polySimp_homoEq" (formula "19"))
            (rule "times_zero_2" (formula "19") (term "1,0"))
            (rule "add_zero_right" (formula "19") (term "0"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "20"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
            (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "20"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1"))
            (rule "polySimp_elimOne" (formula "17") (term "1"))
            (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "20"))
            (rule "polySimp_pullOutFactor1" (formula "35") (term "1"))
            (rule "add_literals" (formula "35") (term "1,1"))
            (rule "times_zero_1" (formula "35") (term "1"))
            (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "20"))
            (rule "inEqSimp_invertInEq1" (formula "19"))
            (rule "times_zero_2" (formula "19") (term "1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0"))
            (rule "polySimp_elimOne" (formula "19") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "35"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "1"))
            (rule "times_zero_1" (formula "35") (term "1,0,0"))
            (rule "add_zero_right" (formula "35") (term "0,0"))
            (rule "qeq_literals" (formula "35") (term "0"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "false_right" (formula "35"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "19"))
            (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "14"))
            (rule "times_zero_2" (formula "12") (term "1"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "13"))
            (rule "leq_literals" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "13"))
            (rule "times_zero_2" (formula "17") (term "1"))
            (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "16") (term "0,1"))
            (rule "add_zero_left" (formula "16") (term "1"))
            (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "13"))
            (rule "add_zero_left" (formula "17") (term "1"))
            (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "13"))
            (rule "add_zero_left" (formula "12") (term "1"))
            (rule "arrayLengthIsAShort" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "arrayLengthNotNegative" (formula "18") (term "0"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
            (rule "qeq_literals" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "arrayLengthIsAShort" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthNotNegative" (formula "17") (term "0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
            (rule "qeq_literals" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "allLeft" (formula "21") (inst "t=bucket"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "21") (term "0,0,1"))
            (rule "leq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "21"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "20"))
            (rule "qeq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "16"))
      (rule "closeTrue" (formula "16"))
   )
)
(branch "Precondition"
   (rule "andRight" (formula "16"))
   (branch "Case 1"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "16"))
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "16"))
      )
   )
   (branch "Case 2"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
         (rule "andRight" (formula "16"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
            (rule "closeTrue" (formula "16"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "16"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
         (rule "closeTrue" (formula "16"))
      )
   )
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "17"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "eqSymm" (formula "15"))
   (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "true_left" (formula "16"))
   (rule "elim_double_block_2" (formula "18") (term "1"))
   (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "ifSplit" (formula "18"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "blockEmpty" (formula "18") (term "1"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "offset"))
      (rule "assignmentMultiplicationInt" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "translateJavaMulInt" (formula "18") (term "0,1,0"))
      (rule "methodCallUnfoldArguments" (formula "18") (term "1"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "var"))
      (rule "assignment_read_attribute_this" (formula "18"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_1"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_3"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_4"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
       (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_copy,exc_25,heapAfter_copy,anon_heap_copy") (contract "de.wiesler.Functions[de.wiesler.Functions::copy([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (copy)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,1,0,0"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "19"))
         (rule "polySimp_elimSub" (formula "17") (term "2,1,0"))
         (rule "mul_literals" (formula "17") (term "1,2,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,1,0"))
         (rule "polySimp_addComm1" (formula "17") (term "2,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "commute_and" (formula "19") (term "0,0"))
         (rule "methodCallUnfoldArguments" (formula "22") (term "1"))
         (rule "variableDeclarationAssign" (formula "22") (term "1"))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_5"))
         (rule "assignment_read_attribute_this" (formula "22"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=de_wiesler_Buffers_buffer_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "3")))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_6"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "assignmentAdditionInt" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "22") (term "1"))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_7"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "variableDeclarationAssign" (formula "22") (term "1"))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_8"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "variableDeclarationAssign" (formula "22") (term "1"))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_9"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "lenNonNegative" (formula "11") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
          (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_copy_0,exc_26,heapAfter_copy_0,anon_heap_copy_0") (contract "de.wiesler.Functions[de.wiesler.Functions::copy([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (copy)"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,0,1,0,0,1,1"))
            (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,1,0,0"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "24"))
            (rule "polySimp_elimSub" (formula "22") (term "2,1,0"))
            (rule "mul_literals" (formula "22") (term "1,2,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,2,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "2,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,2,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
            (rule "commute_and" (formula "24") (term "0,0"))
            (rule "methodCallEmpty" (formula "27") (term "1"))
            (rule "tryEmpty" (formula "27") (term "1"))
            (rule "emptyModality" (formula "27") (term "1"))
            (rule "andRight" (formula "27"))
            (branch "Case 1"
               (rule "andRight" (formula "27"))
               (branch "Case 1"
                  (rule "andRight" (formula "27"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "allRight" (formula "27") (inst "sk=i_0"))
                     (rule "impRight" (formula "27"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,0,1,1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "nnf_imp2or" (formula "28") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "29")))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,1,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0"))
                     (rule "add_zero_right" (formula "16") (term "0"))
                     (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "18") (term "0,0"))
                     (rule "replace_known_right" (formula "18") (term "0,1,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "21")))
                     (rule "true_left" (formula "18"))
                     (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")) (ifInst ""  (formula "32")) (ifInst ""  (formula "6")) (ifInst ""  (formula "33")) (ifInst ""  (formula "21")))
                     (rule "true_left" (formula "12"))
                     (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "31")))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "1,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "2"))
                     (rule "leq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "34") (term "0,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0") (ifseqformula "30"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                     (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "30"))
                     (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0,0,0") (ifseqformula "26"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "25")) (ifInst ""  (formula "29")) (ifInst ""  (formula "7")))
                     (rule "true_left" (formula "1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "21") (inst "i=i") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "translateJavaMulInt" (formula "21") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "21") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "eqSymm" (formula "37"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "19") (term "0,0") (inst "i=i") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaAddInt" (formula "19") (term "1,0,0"))
                     (rule "translateJavaMulInt" (formula "19") (term "0,0,0"))
                     (rule "translateJavaMulInt" (formula "19") (term "0,1,0,0"))
                     (rule "lenOfSeqDef" (formula "19") (term "0"))
                     (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "19") (term "0,1,0"))
                     (rule "add_literals" (formula "19") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "19") (term "0,1,0"))
                     (rule "add_zero_left" (formula "19") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                     (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "polySimp_homoEq" (formula "19") (term "1"))
                     (rule "mul_literals" (formula "19") (term "1,0,1"))
                     (rule "add_zero_right" (formula "19") (term "0,1"))
                     (rule "polySimp_sepPosMonomial" (formula "19") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                     (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "12") (term "0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "notLeft" (formula "13"))
                     (rule "notLeft" (formula "12"))
                     (rule "eqSymm" (formula "35"))
                     (rule "eqSymm" (formula "34"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "times_zero_2" (formula "15") (term "1,0"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "mul_literals" (formula "13") (term "1,0"))
                     (rule "add_zero_right" (formula "13") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "commute_or" (formula "37") (term "0,0"))
                     (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "45") (term "0,0") (inst "i=i") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "translateJavaAddInt" (formula "45") (term "1,0,0"))
                     (rule "translateJavaMulInt" (formula "45") (term "0,0,0"))
                     (rule "translateJavaMulInt" (formula "45") (term "0,1,0,0"))
                     (rule "getOfSeqDef" (formula "45") (term "0"))
                     (rule "castDel" (formula "45") (term "2,0"))
                     (rule "castDel" (formula "45") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "45") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "45") (term "0,2,1,0"))
                     (rule "polySimp_addComm1" (formula "45") (term "1,1,0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "45") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "45") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "45") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "45") (term "1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "45") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                     (rule "replace_known_left" (formula "45") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "45") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "45") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "45") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "45") (term "1,1,0") (inst "selectSK=de_wiesler_Buffers_buffer_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                     (rule "replaceKnownSelect_taclet012_0" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet012_1" (formula "1") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "46") (term "1,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "45") (term "0,0,0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "32"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "46") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "2") (term "0,0,0,1,0,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
                     (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "38"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "34"))
                     (rule "eqSymm" (formula "3") (term "0,0,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")) (ifInst ""  (formula "9")))
                     (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "0,0,0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,0,1,0,0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "41")))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=arr_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "35"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "33"))
                     (rule "commute_or" (formula "37") (term "0,0"))
                     (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "inEqSimp_commuteLeq" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "31"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0"))
                     (rule "commute_or" (formula "27"))
                     (rule "inEqSimp_or_weaken1" (formula "27"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "26")))
                     (rule "true_left" (formula "27"))
                     (rule "cnf_rightDist" (formula "32") (term "0"))
                     (rule "distr_forallAnd" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "ifthenelse_split" (formula "5") (term "0"))
                     (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 TRUE"
                        (rule "andLeft" (formula "5"))
                        (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "5"))
                        (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (ifseqformula "9"))
                        (rule "andLeft" (formula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_literals" (formula "28") (term "0"))
                        (rule "leq_literals" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                     (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 FALSE"
                        (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "commute_or" (formula "32") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.buffer.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "52") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "self.indices.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "51") (term "1,1,0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "polySimp_addAssoc" (formula "50") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "50") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "50") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "50") (term "0,0,1,0,0"))
                              (rule "allLeft" (formula "37") (inst "t=i_0"))
                              (rule "replaceKnownSelect_taclet0000012_3" (formula "37") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000012_4" (formula "37") (term "0,1"))
                              (rule "inEqSimp_contradInEq0" (formula "37") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0"))
                              (rule "add_literals" (formula "37") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "37") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "37") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "37") (term "0,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "applyEq" (formula "51") (term "1") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "orRight" (formula "51"))
                              (rule "inEqSimp_geqRight" (formula "51"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "1"))
                              (rule "polySimp_mulAssoc" (formula "25") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0"))
                              (rule "polySimp_pullOutFactor1" (formula "25") (term "0,0"))
                              (rule "add_literals" (formula "25") (term "1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "0,0"))
                              (rule "add_zero_left" (formula "25") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "1"))
                              (rule "mul_literals" (formula "24") (term "0,0"))
                              (rule "add_zero_left" (formula "24") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "24"))
                              (rule "andLeft" (formula "6"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0"))
                              (rule "add_literals" (formula "6") (term "0"))
                              (rule "leq_literals" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                           (branch "self.indices.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "47"))
                              (rule "close" (formula "43") (ifseqformula "7"))
                           )
                        )
                        (branch "self.buffer.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "49"))
                           (rule "close" (formula "44") (ifseqformula "8"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "27"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "allRight" (formula "27") (inst "sk=i_0"))
                        (rule "impRight" (formula "27"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                        (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "14") (term "0,0"))
                        (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")) (ifInst ""  (formula "4")) (ifInst ""  (formula "29")) (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "14"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "27")))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "inEqSimp_homoInEq0" (formula "13"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,1,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0"))
                        (rule "add_zero_right" (formula "13") (term "0"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "29")))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "16"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "10") (term "0"))
                        (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")) (ifInst ""  (formula "32")) (ifInst ""  (formula "4")) (ifInst ""  (formula "33")) (ifInst ""  (formula "21")))
                        (rule "true_left" (formula "10"))
                        (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "33") (term "0,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "25"))
                        (rule "wellFormedAnonEQ" (formula "1") (term "1,0,0,0") (ifseqformula "29"))
                        (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "24")) (ifInst ""  (formula "28")) (ifInst ""  (formula "33")))
                        (rule "true_left" (formula "1"))
                        (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "10") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "11"))
                        (rule "notLeft" (formula "10"))
                        (rule "eqSymm" (formula "31"))
                        (rule "eqSymm" (formula "30"))
                        (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "17") (term "0,0") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaAddInt" (formula "17") (term "1,0,0"))
                        (rule "translateJavaMulInt" (formula "17") (term "0,0,0"))
                        (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0"))
                        (rule "lenOfSeqDef" (formula "17") (term "0"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1,0"))
                        (rule "add_literals" (formula "17") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "17") (term "0,1,0"))
                        (rule "add_zero_left" (formula "17") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,0"))
                        (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_homoEq" (formula "17") (term "1"))
                        (rule "times_zero_2" (formula "17") (term "1,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,1"))
                        (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "21"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "19") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "translateJavaMulInt" (formula "19") (term "1,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "19") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "notLeft" (formula "20"))
                        (rule "andLeft" (formula "19"))
                        (rule "notLeft" (formula "19"))
                        (rule "notLeft" (formula "19"))
                        (rule "eqSymm" (formula "35"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "11"))
                        (rule "times_zero_2" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "16"))
                        (rule "times_zero_2" (formula "16") (term "1,0"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "commute_or" (formula "36") (term "0,0"))
                        (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "44") (term "0,0") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "translateJavaMulInt" (formula "44") (term "0,1,0,0"))
                        (rule "translateJavaMulInt" (formula "44") (term "0,0,0"))
                        (rule "translateJavaAddInt" (formula "44") (term "1,0,0"))
                        (rule "getOfSeqDef" (formula "44") (term "0"))
                        (rule "castDel" (formula "44") (term "2,0"))
                        (rule "castDel" (formula "44") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,2,1,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "44") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "44") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "44") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0,2,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "44") (term "0,0,0"))
                        (rule "mul_literals" (formula "44") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "44") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "44") (term "1,1,0") (inst "selectSK=de_wiesler_Buffers_buffer_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                        (rule "replaceKnownSelect_taclet012_0" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet012_1" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "45") (term "1,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "44") (term "0,1,0,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "31"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "45") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "45") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                        (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "2") (term "1,2,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
                        (rule "applyEq" (formula "3") (term "1,0,0,0,1,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "1,0,1,0,1,1,0,0") (ifseqformula "2"))
                        (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "46")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "33"))
                        (rule "eqSymm" (formula "3") (term "0,0,0,0,0"))
                        (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                        (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,1,0,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,1,0,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "0,0,0,0,0"))
                        (rule "replace_known_right" (formula "2") (term "0,0,1,0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                        (rule "ifthenelse_negated" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "45"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "32"))
                        (rule "commute_or" (formula "36") (term "0,0"))
                        (rule "commute_or" (formula "25"))
                        (rule "inEqSimp_or_weaken1" (formula "25"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")))
                        (rule "true_left" (formula "25"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "inEqSimp_commuteLeq" (formula "28"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "29"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "cnf_rightDist" (formula "31") (term "0"))
                        (rule "distr_forallAnd" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.buffer.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "51") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "self.indices.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "50") (term "1,0,1,1,0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "polySimp_addAssoc" (formula "49") (term "0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "49") (term "1,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "49") (term "1,1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "49") (term "1,0,1,1,0,0"))
                              (rule "add_literals" (formula "49") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "49") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "49") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                              (rule "replace_known_left" (formula "49") (term "1,0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "allLeft" (formula "41") (inst "t=i_0"))
                              (rule "replaceKnownSelect_taclet01000012_11" (formula "41") (term "1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet001000012_13" (formula "41") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "41") (term "0,2,0,1"))
                              (rule "replaceKnownSelect_taclet01000012_2" (formula "41") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01000012_3" (formula "41") (term "0,1"))
                              (rule "inEqSimp_commuteGeq" (formula "41") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "41") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "inEqSimp_contradInEq1" (formula "41") (term "0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0,0"))
                              (rule "leq_literals" (formula "41") (term "0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "applyEq" (formula "50") (term "1") (ifseqformula "41"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "orRight" (formula "50"))
                              (rule "inEqSimp_geqRight" (formula "50"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "4") (term "0,0"))
                              (rule "add_zero_left" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "self.indices.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                              (rule "close" (formula "43") (ifseqformula "6"))
                           )
                        )
                        (branch "self.buffer.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "46"))
                           (rule "close" (formula "44") (ifseqformula "7"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "24") (term "0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                        (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
                        (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "2")) (ifInst ""  (formula "27")) (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "12"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "25")))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "12"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0"))
                        (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "8") (term "0"))
                        (rule "replace_known_right" (formula "8") (term "0,1,0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "17")) (ifInst ""  (formula "28")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "8"))
                        (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "27")))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "11"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "16") (term "0,0") (inst "i=i") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "translateJavaMulInt" (formula "16") (term "0,0,0"))
                        (rule "translateJavaAddInt" (formula "16") (term "1,0,0"))
                        (rule "translateJavaMulInt" (formula "16") (term "0,1,0,0"))
                        (rule "lenOfSeqDef" (formula "16") (term "0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "16") (term "0,1,0"))
                        (rule "add_literals" (formula "16") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "16") (term "0,1,0"))
                        (rule "add_zero_left" (formula "16") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0"))
                        (rule "applyEq" (formula "16") (term "0,1,0,0,0") (ifseqformula "20"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_homoEq" (formula "16") (term "1"))
                        (rule "mul_literals" (formula "16") (term "1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "18") (inst "i=i") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaMulInt" (formula "18") (term "1,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "18") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "18"))
                        (rule "notLeft" (formula "18"))
                        (rule "eqSymm" (formula "34"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "21") (term "0"))
                        (rule "nnf_notAnd" (formula "21") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "37") (inst "i=i") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "translateJavaMulInt" (formula "37") (term "1,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "37") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "1,1,0,0,0"))
                        (rule "eqSymm" (formula "37") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1"))
                        (rule "pullOutSelect" (formula "37") (term "0,0,1,0,0,0,0,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
                        (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "38") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "38") (term "1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "38") (term "1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "38") (term "0,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "37") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "19")))
                        (rule "pullOutSelect" (formula "37") (term "0,0,0,0,0,0") (inst "selectSK=de_wiesler_Buffers_buffer_1"))
                        (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "38") (term "0,0,1,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                        (rule "replaceKnownSelect_taclet012_0" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet012_1" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "38") (term "0,1,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "38") (term "0,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "37") (term "0,1,0,0,0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "33")) (ifInst ""  (formula "18")))
                        (rule "pullOutSelect" (formula "37") (term "1,1,1,0,0,1") (inst "selectSK=de_wiesler_Buffers_buckets_0"))
                        (rule "applyEq" (formula "38") (term "1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "37") (term "0,1"))
                        (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                        (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "8") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "notLeft" (formula "9"))
                        (rule "notLeft" (formula "8"))
                        (rule "eqSymm" (formula "32"))
                        (rule "eqSymm" (formula "31"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1,0"))
                        (rule "add_zero_right" (formula "13") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "9"))
                        (rule "mul_literals" (formula "9") (term "1,0"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "commute_or" (formula "30") (term "0,0"))
                        (rule "commute_or" (formula "34") (term "0,0"))
                        (rule "commute_or" (formula "19"))
                        (rule "inEqSimp_or_weaken1" (formula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "19"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "23"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "cnf_rightDist" (formula "25") (term "0"))
                        (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "43") (term "0,0"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "24")))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "0"))
                        (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "allRight" (formula "43") (inst "sk=i_0"))
                        (rule "orRight" (formula "43"))
                        (rule "orRight" (formula "43"))
                        (rule "inEqSimp_geqRight" (formula "44"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "45") (term "0,1") (inst "selectSK=arr_0"))
                        (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.indices.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "49") (term "0,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "49") (term "0,1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "31") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "31") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0,0"))
                           (rule "leq_literals" (formula "31") (term "0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "50"))
                           (rule "inEqSimp_geqRight" (formula "50"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "32") (ifseqformula "1"))
                           (rule "leq_literals" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "allLeft" (formula "32") (inst "t=bucket"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "32") (term "1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "32") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "32") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0"))
                           (rule "leq_literals" (formula "32") (term "0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "32"))
                           (rule "mul_literals" (formula "24") (term "0,0"))
                           (rule "add_zero_left" (formula "24") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0"))
                           (rule "allLeft" (formula "32") (inst "t=bucket"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "37"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "allLeft" (formula "32") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "32") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "32") (term "0,1"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "5"))
                           (rule "andLeft" (formula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0"))
                           (rule "add_zero_right" (formula "32") (term "0"))
                           (rule "leq_literals" (formula "32"))
                           (rule "closeFalse" (formula "32"))
                        )
                        (branch "self.indices.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "45"))
                           (rule "close" (formula "42") (ifseqformula "6"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "closeTrue" (formula "27"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "27"))
               (rule "allRight" (formula "27") (inst "sk=f_0"))
               (rule "allRight" (formula "27") (inst "sk=o_0"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "eqSymm" (formula "30"))
               (rule "eqSymm" (formula "27") (term "0,0,0,1"))
               (rule "eqSymm" (formula "28") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
               (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "19"))
               (rule "eqSymm" (formula "31"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
               (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "nnf_imp2or" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "26")))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_homoInEq0" (formula "12"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0"))
               (rule "add_zero_right" (formula "12") (term "0"))
               (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "28")))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
               (rule "add_literals" (formula "15") (term "1,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0"))
               (rule "add_zero_right" (formula "15") (term "0"))
               (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "9") (term "0"))
               (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "20")) (ifInst ""  (formula "31")) (ifInst ""  (formula "3")) (ifInst ""  (formula "32")) (ifInst ""  (formula "20")))
               (rule "true_left" (formula "9"))
               (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "17") (term "0,0"))
               (rule "replace_known_right" (formula "17") (term "0,1,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "20")))
               (rule "true_left" (formula "17"))
               (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "17") (term "0,0") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0"))
               (rule "translateJavaMulInt" (formula "17") (term "0,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,0"))
               (rule "lenOfSeqDef" (formula "17") (term "0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "17") (term "1,0"))
               (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1,0"))
               (rule "add_literals" (formula "17") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "17") (term "0,1,0"))
               (rule "add_zero_left" (formula "17") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
               (rule "applyEq" (formula "17") (term "0,1,0,0,0") (ifseqformula "21"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
               (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "polySimp_homoEq" (formula "17") (term "1"))
               (rule "mul_literals" (formula "17") (term "1,0,1"))
               (rule "add_zero_right" (formula "17") (term "0,1"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "19") (inst "i=i") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaMulInt" (formula "19") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "19") (term "0,1,1,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "21"))
               (rule "notLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "eqSymm" (formula "35"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "22") (term "0"))
               (rule "nnf_notAnd" (formula "22") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
               (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "9") (term "0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "eqSymm" (formula "33"))
               (rule "eqSymm" (formula "32"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "times_zero_2" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1,0"))
               (rule "add_zero_right" (formula "16") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "commute_or" (formula "35") (term "0,0"))
               (rule "commute_or" (formula "31") (term "0,0"))
               (rule "commute_or" (formula "20"))
               (rule "inEqSimp_or_weaken1" (formula "20"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
               (rule "true_left" (formula "20"))
               (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "24"))
               (rule "polySimp_rightDist" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "add_literals" (formula "8") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "cnf_rightDist" (formula "26") (term "0"))
               (rule "distr_forallAnd" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "commute_or" (formula "27") (term "0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_copy<<anonHeapFunction>> = TRUE) TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "39"))
                  (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "50"))
                  (rule "replace_known_right" (formula "49") (term "0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "38")))
                  (rule "closeTrue" (formula "49"))
               )
               (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_copy<<anonHeapFunction>> = TRUE) FALSE"
                  (rule "close" (formula "49") (ifseqformula "1"))
               )
            )
         )
         (branch "Exceptional Post (copy)"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,1,0,0"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,0,1,0,0,1,1"))
            (rule "translateJavaSubInt" (formula "22") (term "2,1,0,0"))
            (rule "andLeft" (formula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0") (ifseqformula "18"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "23"))
            (rule "notLeft" (formula "23"))
            (rule "close" (formula "26") (ifseqformula "25"))
         )
         (branch "Pre (copy)"
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1") (ifseqformula "18"))
            (rule "wellFormedAnonEQ" (formula "23") (term "0,0,1") (ifseqformula "18"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0,1") (ifseqformula "18"))
            (rule "translateJavaAddInt" (formula "23") (term "0,1,0,1,0"))
            (rule "translateJavaAddInt" (formula "23") (term "0,1,0,1,1,0"))
            (rule "replace_known_left" (formula "23") (term "1,0,0,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
            (rule "polySimp_addComm0" (formula "23") (term "0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0,1,0"))
            (rule "times_zero_2" (formula "23") (term "1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
            (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "8") (term "0"))
            (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "15")) (ifInst ""  (formula "22")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "23")))
            (rule "true_left" (formula "8"))
            (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "12") (term "0,0"))
            (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "2")) (ifInst ""  (formula "23")) (ifInst ""  (formula "15")))
            (rule "true_left" (formula "12"))
            (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "21")))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_homoInEq0" (formula "12"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0"))
            (rule "add_zero_right" (formula "12") (term "0"))
            (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "23")))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_homoInEq0" (formula "11"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0"))
            (rule "add_zero_right" (formula "11") (term "0"))
            (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "8") (term "0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "25"))
            (rule "eqSymm" (formula "24"))
            (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "15") (term "0,0") (inst "i=i") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaMulInt" (formula "15") (term "0,1,0,0"))
            (rule "translateJavaMulInt" (formula "15") (term "0,0,0"))
            (rule "translateJavaAddInt" (formula "15") (term "1,0,0"))
            (rule "lenOfSeqDef" (formula "15") (term "0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "15") (term "1,0"))
            (rule "polySimp_pullOutFactor0" (formula "15") (term "0,1,0"))
            (rule "add_literals" (formula "15") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "15") (term "0,1,0"))
            (rule "add_zero_left" (formula "15") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
            (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,0"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
            (rule "applyEq" (formula "15") (term "0,1,0,0,0") (ifseqformula "19"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "polySimp_homoEq" (formula "15") (term "1"))
            (rule "times_zero_2" (formula "15") (term "1,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,1"))
            (rule "polySimp_sepPosMonomial" (formula "15") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "i=i") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,0"))
            (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "19"))
            (rule "notLeft" (formula "18"))
            (rule "notLeft" (formula "17"))
            (rule "eqSymm" (formula "29"))
            (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "27")))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
            (rule "applyEq" (formula "34") (term "0,1,0,0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0"))
            (rule "mul_literals" (formula "34") (term "1,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0"))
            (rule "polySimp_addComm1" (formula "34") (term "0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "34") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "replace_known_left" (formula "35") (term "0,1,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "times_zero_2" (formula "13") (term "1,0"))
            (rule "add_zero_right" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_homoInEq0" (formula "9"))
            (rule "times_zero_2" (formula "9") (term "1,0"))
            (rule "add_zero_right" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "commute_or" (formula "30") (term "0,0"))
            (rule "commute_or" (formula "19"))
            (rule "inEqSimp_or_weaken1" (formula "19"))
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
            (rule "true_left" (formula "19"))
            (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "inEqSimp_commuteLeq" (formula "22"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "23"))
            (rule "polySimp_rightDist" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "cnf_rightDist" (formula "25") (term "0"))
            (rule "distr_forallAnd" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "commute_or" (formula "26") (term "0"))
            (rule "arrayLengthIsAShort" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "arrayLengthNotNegative" (formula "22") (term "0"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
            (rule "qeq_literals" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "arrayLengthNotNegative" (formula "21") (term "0"))
            (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
            (rule "qeq_literals" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "arrayLengthIsAShort" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "allLeft" (formula "26") (inst "t=bucket"))
            (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
            (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "29"))
            (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "26") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0"))
            (rule "leq_literals" (formula "26") (term "0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "26"))
            (rule "times_zero_1" (formula "18") (term "0,0"))
            (rule "add_zero_left" (formula "18") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "polySimp_elimOne" (formula "18") (term "0"))
            (rule "allLeft" (formula "26") (inst "t=bucket"))
            (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
            (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "31"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
            (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "arrayLengthIsAShort" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "arrayLengthNotNegative" (formula "15") (term "0"))
            (rule "cut_direct" (formula "43") (term "0,0"))
            (branch "CUT: head_len >= bucket * -256 TRUE"
                (builtin "One Step Simplification" (formula "44"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "8"))
               (rule "greater_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "inEqSimp_leqRight" (formula "46"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "32"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "polySimp_addLiterals" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "12"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "greater_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "CUT: head_len >= bucket * -256 FALSE"
                (builtin "One Step Simplification" (formula "44"))
               (rule "false_right" (formula "44"))
               (rule "inEqSimp_geqRight" (formula "43"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "inEqSimp_contradInEq5" (formula "14") (ifseqformula "7"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1,0"))
               (rule "qeq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "closeFalse" (formula "14"))
            )
         )
      )
      (branch "Exceptional Post (copy)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,0,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,1,0,0"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "17") (term "2,1,0,0"))
         (rule "andLeft" (formula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "20"))
         (rule "notLeft" (formula "18"))
         (rule "close" (formula "21") (ifseqformula "20"))
      )
      (branch "Pre (copy)"
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")) (ifInst ""  (formula "1")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")))
         (rule "translateJavaAddInt" (formula "18") (term "0,1,0,1,1,0"))
         (rule "translateJavaAddInt" (formula "18") (term "0,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_subsumption6" (formula "18") (term "0,0,1,0") (ifseqformula "6"))
         (rule "times_zero_1" (formula "18") (term "1,1,0,0,0,1,0"))
         (rule "greater_literals" (formula "18") (term "0,0,0,0,1,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "leq_literals" (formula "18") (term "0,0,0,1,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "Contract_axiom_for_bufferAt_in_Buffers" (formula "11") (term "0,0"))
         (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
         (rule "true_left" (formula "11"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "16")))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "inEqSimp_homoInEq0" (formula "12"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0"))
         (rule "add_zero_right" (formula "12") (term "0"))
         (rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "8") (term "0"))
         (rule "replace_known_right" (formula "8") (term "0,1,0,0,0,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "16")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
         (rule "true_left" (formula "8"))
         (rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "18")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_homoInEq0" (formula "11"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0"))
         (rule "add_zero_right" (formula "11") (term "0"))
         (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "Definition_axiom_for_bufferAt_in_de_wiesler_Buffers" (formula "15") (term "0,0") (inst "i=i") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaMulInt" (formula "15") (term "0,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "1,0,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "15") (term "0"))
         (rule "polySimp_elimSub" (formula "15") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "15") (term "1,0"))
         (rule "polySimp_pullOutFactor0" (formula "15") (term "0,1,0"))
         (rule "add_literals" (formula "15") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "15") (term "0,1,0"))
         (rule "add_zero_left" (formula "15") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
         (rule "applyEq" (formula "15") (term "0,1,0,0,0") (ifseqformula "19"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
         (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "polySimp_homoEq" (formula "15") (term "1"))
         (rule "times_zero_2" (formula "15") (term "1,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,1"))
         (rule "polySimp_sepPosMonomial" (formula "15") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "i=i") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "eqSymm" (formula "25"))
         (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "24")))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
         (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "17"))
         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "28") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "8") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "9"))
         (rule "notLeft" (formula "8"))
         (rule "eqSymm" (formula "23"))
         (rule "eqSymm" (formula "22"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_homoInEq0" (formula "12"))
         (rule "times_zero_2" (formula "12") (term "1,0"))
         (rule "add_zero_right" (formula "12") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "replace_known_left" (formula "32") (term "1,1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_homoInEq0" (formula "9"))
         (rule "times_zero_2" (formula "9") (term "1,0"))
         (rule "add_zero_right" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "commute_or" (formula "18"))
         (rule "inEqSimp_or_weaken1" (formula "18"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "23"))
         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
         (rule "mul_literals" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "cnf_rightDist" (formula "25") (term "0"))
         (rule "distr_forallAnd" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "commute_or" (formula "26") (term "0"))
         (rule "commute_and" (formula "36"))
         (rule "arrayLengthNotNegative" (formula "22") (term "0"))
         (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
         (rule "qeq_literals" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "arrayLengthIsAShort" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "arrayLengthIsAShort" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "arrayLengthNotNegative" (formula "21") (term "0"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
         (rule "qeq_literals" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "allLeft" (formula "26") (inst "t=bucket"))
         (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
         (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "29"))
         (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
         (rule "polySimp_elimOne" (formula "26") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "26") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
         (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0"))
         (rule "leq_literals" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "26"))
         (rule "times_zero_1" (formula "18") (term "0,0"))
         (rule "add_zero_left" (formula "18") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "18"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0"))
         (rule "polySimp_elimOne" (formula "18") (term "0"))
         (rule "allLeft" (formula "26") (inst "t=bucket"))
         (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
         (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "31"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "arrayLengthNotNegative" (formula "17") (term "0"))
         (rule "arrayLengthIsAShort" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "35"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "cut_direct" (formula "40") (term "1"))
         (branch "CUT: head_len <= 65536 + bucket * -256 TRUE"
             (builtin "One Step Simplification" (formula "41"))
            (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "37"))
            (rule "close" (formula "41") (ifseqformula "2"))
         )
         (branch "CUT: head_len <= 65536 + bucket * -256 FALSE"
             (builtin "One Step Simplification" (formula "41"))
            (rule "false_right" (formula "41"))
            (rule "inEqSimp_leqRight" (formula "40"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "9"))
            (rule "greater_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
)
}
