\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jan 04 22:20:56 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src/de";

\proofObligation "#Proof Obligation Settings
#Tue Jan 04 22:20:56 CET 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:distribute(int,[I,int,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "666bcb0c95"))

(autoModeTime "1321")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,0,2,1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,2,1,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,2,1,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "eqSymm" (formula "16") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "10"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "16") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "16") (term "1,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "16") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "16") (term "1,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "3,0"))
(rule "polySimp_addComm0" (formula "9") (term "3,0"))
(rule "polySimp_addComm0" (formula "11") (term "0"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "16") (term "2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "16") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,2,1,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "assignment" (formula "16") (term "1"))
 (builtin "One Step Simplification" (formula "16"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "16") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "16") (term "0,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1,0,0,0,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "16") (term "0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "16") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "Contract_axiom_for_doesNotAlias_in_Buffers" (formula "12") (term "0"))
(rule "replace_known_left" (formula "12") (term "0,0,0,0,0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")))
(rule "true_left" (formula "12"))
(rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_homoInEq0" (formula "12"))
(rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
(rule "add_literals" (formula "12") (term "1,1,0"))
(rule "times_zero_1" (formula "12") (term "1,0"))
(rule "add_zero_right" (formula "12") (term "0"))
(rule "inEqSimp_homoInEq0" (formula "10"))
(rule "times_zero_2" (formula "10") (term "1,0"))
(rule "add_zero_right" (formula "10") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10"))
(rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "13") (term "0"))
 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "18")))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "inEqSimp_commuteLeq" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "inEqSimp_homoInEq0" (formula "17"))
(rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
(rule "add_literals" (formula "17") (term "1,1,0"))
(rule "times_zero_1" (formula "17") (term "1,0"))
(rule "add_zero_right" (formula "17") (term "0"))
(rule "inEqSimp_homoInEq0" (formula "15"))
(rule "times_zero_2" (formula "15") (term "1,0"))
(rule "add_zero_right" (formula "15") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15"))
(rule "Definition_axiom_for_doesNotAlias_in_de_wiesler_Buffers" (formula "20") (term "0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "eqSymm" (formula "22"))
(rule "eqSymm" (formula "21"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "20") (inst "i=i") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "20"))
(rule "translateJavaMulInt" (formula "20") (term "1,1,0,0,0"))
(rule "translateJavaMulInt" (formula "20") (term "0,1,1,0,0,0"))
(rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
(rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "notLeft" (formula "21"))
(rule "andLeft" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "eqSymm" (formula "26"))
(rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
(rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "23") (term "0"))
(rule "nnf_notAnd" (formula "23") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
(rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
(rule "mul_literals" (formula "23") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
(rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "22") (term "0"))
 (builtin "One Step Simplification" (formula "22"))
(rule "andLeft" (formula "22"))
(rule "inEqSimp_commuteLeq" (formula "22"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "23"))
(rule "polySimp_rightDist" (formula "7") (term "0,0"))
(rule "mul_literals" (formula "7") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "add_literals" (formula "7") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "methodBodyExpand" (formula "33") (term "1") (newnames "heapBefore_distribute,savedHeapBefore_distribute"))
 (builtin "One Step Simplification" (formula "33"))
(rule "cnf_rightDist" (formula "25") (term "0"))
(rule "distr_forallAnd" (formula "25"))
(rule "andLeft" (formula "25"))
(rule "commute_or" (formula "26") (term "0"))
(rule "assertSafe" (formula "34") (inst "oldHeap=oldHeap_0") (inst "#condition=x") (inst "o=o") (inst "f=f"))
(branch "Assertion ( ( _head_len+_tail_len==this.indices[_bucket])) Skip"
   (rule "variableDeclarationAssign" (formula "34") (term "1"))
   (rule "variableDeclaration" (formula "34") (term "1") (newnames "offset"))
   (rule "assignmentMultiplicationInt" (formula "34") (term "1"))
    (builtin "One Step Simplification" (formula "34"))
   (rule "translateJavaMulInt" (formula "34") (term "0,1,0"))
   (rule "arrayLengthIsAShort" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "12") (term "0"))
   (rule "methodCallUnfoldArguments" (formula "35") (term "1"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "var"))
   (rule "assignment_read_attribute_this" (formula "35"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "var_2"))
   (rule "assignment" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "var_3"))
   (rule "assignment" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "var_4"))
   (rule "assignment" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
    (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_copy,exc_25,heapAfter_copy,anon_heap_copy") (contract "de.wiesler.Functions[de.wiesler.Functions::copy([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
   (branch "Post (copy)"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,0,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,0"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "polySimp_elimSub" (formula "29") (term "2,1,0"))
      (rule "mul_literals" (formula "29") (term "1,2,1,0"))
      (rule "polySimp_addComm0" (formula "29") (term "0,2,1,0"))
      (rule "polySimp_addComm1" (formula "29") (term "2,1,0"))
      (rule "polySimp_addComm0" (formula "29") (term "0,2,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
      (rule "blockEmpty" (formula "39") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
      (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "31") (term "0"))
      (rule "nnf_notAnd" (formula "31") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
      (rule "mul_literals" (formula "31") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
      (rule "arrayLengthIsAShort" (formula "23") (term "0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "arrayLengthNotNegative" (formula "23") (term "0"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
      (rule "qeq_literals" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "arrayLengthIsAShort" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "methodCallUnfoldArguments" (formula "39") (term "1"))
      (rule "variableDeclarationAssign" (formula "39") (term "1"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "var_5"))
      (rule "assignment_read_attribute_this" (formula "39"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "pullOutSelect" (formula "39") (term "0,1,0") (inst "selectSK=de_wiesler_Buffers_buffer_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
      (rule "variableDeclarationAssign" (formula "40") (term "1"))
      (rule "variableDeclaration" (formula "40") (term "1") (newnames "var_6"))
      (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "assignmentAdditionInt" (formula "39") (term "1"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "translateJavaAddInt" (formula "39") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "39") (term "1"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "var_7"))
      (rule "assignment" (formula "39") (term "1"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "variableDeclarationAssign" (formula "39") (term "1"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "var_8"))
      (rule "assignment" (formula "39") (term "1"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "variableDeclarationAssign" (formula "39") (term "1"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "var_9"))
      (rule "assignment" (formula "39") (term "1"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "arrayLengthNotNegative" (formula "22") (term "0"))
      (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
      (rule "qeq_literals" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "allLeft" (formula "26") (inst "t=bucket"))
      (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
      (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "20"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "6"))
      (rule "qeq_literals" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
      (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0"))
      (rule "leq_literals" (formula "26") (term "0,0"))
       (builtin "One Step Simplification" (formula "26"))
       (builtin "Use Operation Contract" (formula "40") (newnames "heapBefore_copy_0,exc_26,heapAfter_copy_0,anon_heap_copy_0") (contract "de.wiesler.Functions[de.wiesler.Functions::copy([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (copy)"
          (builtin "One Step Simplification" (formula "34"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "34") (term "2,1,0,0"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,1,0,0"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "35"))
         (rule "andLeft" (formula "36"))
         (rule "polySimp_elimSub" (formula "34") (term "2,1,0"))
         (rule "mul_literals" (formula "34") (term "1,2,1,0"))
         (rule "polySimp_addComm0" (formula "34") (term "0,2,1,0"))
         (rule "polySimp_addComm1" (formula "34") (term "2,1,0"))
         (rule "polySimp_addComm0" (formula "34") (term "0,2,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "36") (term "0"))
         (rule "nnf_notAnd" (formula "36") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
         (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
         (rule "methodCallEmpty" (formula "44") (term "1"))
         (rule "tryEmpty" (formula "44") (term "1"))
         (rule "emptyModality" (formula "44") (term "1"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "eqSymm" (formula "44") (term "1,0,0,1"))
         (rule "pullOutSelect" (formula "44") (term "1,1,1,0,0,0") (inst "selectSK=de_wiesler_Buffers_buffer_1"))
         (rule "applyEq" (formula "45") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "replaceKnownSelect_taclet00_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_1" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
         (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "44") (term "1,1,0") (inst "i=i") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "replaceKnownSelect_taclet000_2" (formula "44") (term "0,0,1,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "44") (term "0,0,1,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "44") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "44") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "44") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "44") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "translateJavaMulInt" (formula "44") (term "1,1,0,0,0,1,1,0"))
         (rule "translateJavaMulInt" (formula "44") (term "0,1,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "44") (term "1,1,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "44") (term "0,1,0,0,0,0,1,1,0"))
         (rule "replace_known_left" (formula "44") (term "1,0,0,0,1,1,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "38")))
         (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,1,1,0"))
         (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "44") (term "0,1,0,1,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,1,1,0"))
         (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,1,1,0"))
         (rule "pullOutSelect" (formula "44") (term "0,0,1,0,0,1,1,0") (inst "selectSK=de_wiesler_Buffers_indices_0"))
         (rule "applyEq" (formula "45") (term "0,0,1,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "45") (term "0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "45") (term "1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "45") (term "1,0,1,1,0,1,1,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
         (rule "eqSymm" (formula "45") (term "0,1,0,0,0,1,1,0"))
         (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,0,1,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "0,0,1,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,0,1,1,0,1,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "eqSymm" (formula "44") (term "0,1,0,0,0,1,1,0"))
         (rule "replace_known_left" (formula "44") (term "1,0,0,1,1,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "37")) (ifInst ""  (formula "39")))
         (rule "pullOutSelect" (formula "44") (term "1,1,1,0,0,1,1,1,0") (inst "selectSK=de_wiesler_Buffers_buckets_0"))
         (rule "applyEq" (formula "45") (term "1,0,0,1,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
         (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,1,1,0,0,1,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "45") (term "1,0,0,1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "nnf_imp2or" (formula "44") (term "0,1,1,1,0"))
         (rule "nnf_notAnd" (formula "44") (term "0,0,1,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,1,1,1,0"))
         (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,1,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "44") (term "1,0,0,0,1,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,1,1,0"))
         (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,1,1,0"))
         (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,1,1,0"))
         (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,1,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,1,1,0"))
         (rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "44") (term "0,0,1,1,0"))
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "25")))
         (rule "inEqSimp_commuteLeq" (formula "44") (term "0,1,1,0"))
         (rule "replace_known_left" (formula "44") (term "0,1,1,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "38"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "allLeft" (formula "29") (inst "t=bucket"))
         (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
         (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "29") (term "1"))
         (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
         (rule "polySimp_elimOne" (formula "29") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
         (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
         (rule "leq_literals" (formula "29") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "29"))
         (rule "mul_literals" (formula "19") (term "0,0"))
         (rule "add_zero_left" (formula "19") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0"))
         (rule "polySimp_elimOne" (formula "19") (term "0"))
         (rule "andRight" (formula "47"))
         (branch "Case 1"
            (rule "andRight" (formula "47"))
            (branch "Case 1"
               (rule "allRight" (formula "47") (inst "sk=i_0"))
               (rule "orRight" (formula "47"))
               (rule "orRight" (formula "47"))
               (rule "eqSymm" (formula "49"))
               (rule "inEqSimp_geqRight" (formula "48"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "48"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "pullOutSelect" (formula "49") (term "1") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "36"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0,1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0,1,1,0,0"))
               (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "37"))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
               (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_3"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "4"))
               (rule "leq_literals" (formula "20") (term "0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 TRUE"
                  (rule "andLeft" (formula "2"))
                  (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "52"))
                  (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0"))
                  (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "28"))
                  (rule "andLeft" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_literals" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
               (branch " tail_start <= head_start + i_0 & tail_start >= 1 + head_start + i_0 + tail_len * -1 FALSE"
                  (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "51"))
                  (rule "allLeft" (formula "38") (inst "t=i_0"))
                  (rule "replaceKnownSelect_taclet00000_12" (formula "38") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00000_13" (formula "38") (term "0,1"))
                  (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "52"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "inEqSimp_contradInEq0" (formula "38") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "38") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "38") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1"))
                  (rule "add_literals" (formula "38") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "38") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "38") (term "0,0,1"))
                  (rule "leq_literals" (formula "38") (term "0,1"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "47"))
               (branch "Case 1"
                  (rule "allRight" (formula "47") (inst "sk=i_0"))
                  (rule "orRight" (formula "47"))
                  (rule "orRight" (formula "47"))
                  (rule "eqSymm" (formula "49"))
                  (rule "polySimp_addComm0" (formula "49") (term "0,2,1"))
                  (rule "inEqSimp_leqRight" (formula "47"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "48"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "36"))
                  (rule "eqSymm" (formula "50"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "37"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "48"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "34"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "add_zero_left" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "25") (ifseqformula "5"))
                  (rule "leq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "allLeft" (formula "43") (inst "t=i_0"))
                  (rule "replaceKnownSelect_taclet010000_13" (formula "43") (term "1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet010000_14" (formula "43") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "43") (term "0,2,0,1"))
                  (rule "replaceKnownSelect_taclet010000_11" (formula "43") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet010000_12" (formula "43") (term "0,1"))
                  (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "52"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "inEqSimp_commuteGeq" (formula "43") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "43") (term "0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "43") (term "0,0"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "43"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "Case 2"
                  (rule "allRight" (formula "47") (inst "sk=i_0"))
                  (rule "orRight" (formula "47"))
                  (rule "orRight" (formula "47"))
                  (rule "inEqSimp_leqRight" (formula "47"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "48"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "49") (term "0,0") (inst "selectSK=arr_0"))
                  (rule "applyEq" (formula "50") (term "0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "36"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "24")))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "50") (term "0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "50") (term "0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "29"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "35") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0"))
                  (rule "add_literals" (formula "35") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "35") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "replace_known_left" (formula "52") (term "1") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "52"))
                  (rule "inEqSimp_geqRight" (formula "52"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption0" (formula "36") (ifseqformula "1"))
                  (rule "leq_literals" (formula "36") (term "0"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "true_left" (formula "36"))
                  (rule "allLeft" (formula "34") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                  (rule "inEqSimp_contradInEq0" (formula "34") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "34") (term "0,1"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                  (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "34") (term "0,0,1"))
                  (rule "leq_literals" (formula "34") (term "0,1"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "34"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "33") (term "0"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "closeFalse" (formula "33"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "47") (inst "sk=f_0"))
            (rule "allRight" (formula "47") (inst "sk=o_0"))
            (rule "orRight" (formula "47"))
            (rule "orRight" (formula "47"))
            (rule "orRight" (formula "47"))
            (rule "eqSymm" (formula "47") (term "0,0,0,1"))
            (rule "eqSymm" (formula "48") (term "0,0,0,1"))
            (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "34"))
            (rule "eqSymm" (formula "51"))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_copy<<anonHeapFunction>> = TRUE) TRUE"
               (rule "andLeft" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "orRight" (formula "42"))
               (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "eqSymm" (formula "54"))
               (rule "replace_known_right" (formula "53") (term "0,1") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "43")))
               (rule "closeTrue" (formula "53"))
            )
            (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_copy<<anonHeapFunction>> = TRUE) FALSE"
               (rule "close" (formula "53") (ifseqformula "2"))
            )
         )
      )
      (branch "Exceptional Post (copy)"
          (builtin "One Step Simplification" (formula "42"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,0,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,1,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "34") (term "2,1,0,0"))
         (rule "translateJavaAddInt" (formula "34") (term "0,2,1,0,0"))
         (rule "andLeft" (formula "34"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1,0") (ifseqformula "34"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,0") (ifseqformula "30"))
         (rule "andLeft" (formula "35"))
         (rule "andLeft" (formula "36"))
         (rule "andLeft" (formula "35"))
         (rule "notLeft" (formula "35"))
         (rule "close" (formula "38") (ifseqformula "37"))
      )
      (branch "Pre (copy)"
          (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "34")) (ifInst ""  (formula "38")) (ifInst ""  (formula "34")) (ifInst ""  (formula "38")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,1") (ifseqformula "30"))
         (rule "wellFormedAnonEQ" (formula "40") (term "0,0,1") (ifseqformula "30"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,0,1") (ifseqformula "30"))
         (rule "translateJavaAddInt" (formula "40") (term "0,1,1,1,0"))
         (rule "translateJavaAddInt" (formula "40") (term "0,1,0,1,0"))
         (rule "replace_known_left" (formula "40") (term "0,0,0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "29")) (ifInst ""  (formula "4")))
         (rule "polySimp_addComm0" (formula "40") (term "0,1,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0"))
         (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0"))
         (rule "replace_known_left" (formula "40") (term "1,1,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0"))
         (rule "replace_known_left" (formula "40") (term "1,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
         (rule "times_zero_2" (formula "40") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "40") (term "0,0,0"))
         (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0"))
         (rule "mul_literals" (formula "40") (term "1,0,1,0"))
         (rule "polySimp_addComm1" (formula "40") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "40") (term "0,0,1,0"))
         (rule "polySimp_addComm0" (formula "40") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "40") (term "0,1,1,0"))
         (rule "mul_literals" (formula "40") (term "0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "allLeft" (formula "29") (inst "t=bucket"))
         (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
         (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "29") (term "1"))
         (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
         (rule "polySimp_elimOne" (formula "29") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
         (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,1,0"))
         (rule "leq_literals" (formula "29") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "29"))
         (rule "times_zero_1" (formula "19") (term "0,0"))
         (rule "add_zero_left" (formula "19") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0"))
         (rule "polySimp_elimOne" (formula "19") (term "0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "cut_direct" (formula "44") (term "0"))
         (branch "CUT: head_len >= bucket * -256 TRUE"
             (builtin "One Step Simplification" (formula "45"))
            (rule "inEqSimp_leqRight" (formula "45"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "22"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "10"))
            (rule "times_zero_1" (formula "2") (term "1,1,0"))
            (rule "greater_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "33"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "polySimp_addLiterals" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "11"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "greater_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "CUT: head_len >= bucket * -256 FALSE"
             (builtin "One Step Simplification" (formula "45"))
            (rule "false_right" (formula "45"))
            (rule "inEqSimp_geqRight" (formula "44"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "1"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "add_zero_left" (formula "16") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "inEqSimp_contradInEq5" (formula "16") (ifseqformula "8"))
            (rule "times_zero_1" (formula "16") (term "1,1,0"))
            (rule "greater_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "qeq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeFalse" (formula "16"))
         )
      )
   )
   (branch "Exceptional Post (copy)"
       (builtin "One Step Simplification" (formula "37"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,0"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,0,1,0,0,1,1"))
      (rule "translateJavaSubInt" (formula "29") (term "2,1,0,0"))
      (rule "andLeft" (formula "29"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0") (ifseqformula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "30"))
      (rule "close" (formula "33") (ifseqformula "32"))
   )
   (branch "Pre (copy)"
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "29")) (ifInst ""  (formula "33")) (ifInst ""  (formula "1")) (ifInst ""  (formula "29")) (ifInst ""  (formula "33")) (ifInst ""  (formula "4")))
      (rule "translateJavaAddInt" (formula "35") (term "0,1,1,1,0"))
      (rule "translateJavaAddInt" (formula "35") (term "0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "35") (term "0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,1,0"))
      (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0"))
      (rule "replace_known_left" (formula "35") (term "1,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0"))
      (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "22"))
      (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
      (rule "mul_literals" (formula "35") (term "1,0,1,0"))
      (rule "polySimp_addComm1" (formula "35") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "35") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,1,1,0"))
      (rule "inEqSimp_subsumption6" (formula "35") (term "0,0") (ifseqformula "6"))
      (rule "greater_literals" (formula "35") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
      (rule "leq_literals" (formula "35") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "commute_and" (formula "35"))
      (rule "arrayLengthNotNegative" (formula "23") (term "0"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
      (rule "qeq_literals" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "arrayLengthIsAShort" (formula "23") (term "0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "arrayLengthIsAShort" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "arrayLengthNotNegative" (formula "22") (term "0"))
      (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
      (rule "qeq_literals" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "allLeft" (formula "26") (inst "t=bucket"))
      (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
      (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "20"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "6"))
      (rule "qeq_literals" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
      (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0"))
      (rule "leq_literals" (formula "26") (term "0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "allLeft" (formula "28") (inst "t=bucket"))
      (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
      (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
      (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "1"))
      (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
      (rule "polySimp_elimOne" (formula "28") (term "0,1"))
      (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
      (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
      (rule "leq_literals" (formula "28") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "6"))
      (rule "qeq_literals" (formula "28") (term "0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "28"))
      (rule "times_zero_1" (formula "19") (term "0,0"))
      (rule "add_zero_left" (formula "19") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "19"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0"))
      (rule "polySimp_elimOne" (formula "19") (term "0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "cut_direct" (formula "39") (term "1"))
      (branch "CUT: head_len <= 65536 + bucket * -256 TRUE"
          (builtin "One Step Simplification" (formula "40"))
         (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "34"))
         (rule "close" (formula "40") (ifseqformula "2"))
      )
      (branch "CUT: head_len <= 65536 + bucket * -256 FALSE"
          (builtin "One Step Simplification" (formula "40"))
         (rule "false_right" (formula "40"))
         (rule "inEqSimp_leqRight" (formula "39"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "9"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "greater_literals" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Assertion ( ( _head_len+_tail_len==this.indices[_bucket])) Terminates And OK"
    (builtin "One Step Simplification" (formula "34"))
   (rule "remove_parentheses_right" (formula "34") (term "1"))
   (rule "compound_equality_comparison_2" (formula "34") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
   (rule "variableDeclarationAssign" (formula "34") (term "1"))
   (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_1"))
   (rule "assignmentAdditionInt" (formula "34") (term "1"))
    (builtin "One Step Simplification" (formula "34"))
   (rule "translateJavaAddInt" (formula "34") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "34") (term "1"))
   (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_2"))
   (rule "eval_order_array_access4" (formula "34") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "34") (term "1"))
   (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "34"))
    (builtin "One Step Simplification" (formula "34"))
   (rule "assignment_array2" (formula "34"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "34"))
      (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "19"))
      (rule "equality_comparison_simple" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "methodCallEmpty" (formula "34") (term "1"))
      (rule "emptyModality" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "closeTrue" (formula "34"))
   )
   (branch "Null Reference (x_arr = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (x_arr != null, but _bucket Out of Bounds!)"
      (rule "false_right" (formula "35"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "23"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Assertion ( ( _head_len+_tail_len==this.indices[_bucket])) No Effects"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "x"))
   (rule "remove_parentheses_right" (formula "35") (term "1"))
   (rule "compound_equality_comparison_2" (formula "35") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_1"))
   (rule "assignmentAdditionInt" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "translateJavaAddInt" (formula "35") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_2"))
   (rule "eval_order_array_access4" (formula "35") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "35") (term "1"))
   (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "35"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "assignment_array2" (formula "35"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "35"))
      (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "20"))
      (rule "equality_comparison_simple" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "methodCallEmpty" (formula "35"))
      (rule "emptyModality" (formula "35"))
      (rule "allRight" (formula "35") (inst "sk=f_0"))
      (rule "allRight" (formula "35") (inst "sk=o_0"))
      (rule "orRight" (formula "35"))
      (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "closeTrue" (formula "36"))
   )
   (branch "Null Reference (x_arr = null)"
       (builtin "One Step Simplification" (formula "36"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (x_arr != null, but _bucket Out of Bounds!)"
      (rule "false_right" (formula "36"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "24"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
      (rule "qeq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "closeFalse" (formula "9"))
   )
)
)
}
