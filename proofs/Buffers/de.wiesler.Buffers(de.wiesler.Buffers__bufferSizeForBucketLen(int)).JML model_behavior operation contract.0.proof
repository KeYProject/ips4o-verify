\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 05 14:15:21 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 05 14:15:21 CEST 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:bufferSizeForBucketLen(int)].JML model_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:bufferSizeForBucketLen(int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "128")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "Definition_axiom_for_bufferSizeForBucketLen_in_de_wiesler_Buffers" (formula "3") (term "0,1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "translateJavaMod" (formula "3") (term "2,0,1"))
(rule "translateJavaMod" (formula "3") (term "0,1,0,0,1"))
(rule "jmod_axiom" (formula "3") (term "2,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,2,0,1"))
(rule "jmod_axiom" (formula "3") (term "0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "3") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1"))
(rule "Definition_axiom_for_bufferSizeForBucketLen_in_de_wiesler_Buffers" (formula "3") (term "0,0"))
 (builtin "One Step Simplification" (formula "3"))
(rule "translateJavaMod" (formula "3") (term "0,1,0,0,0"))
(rule "translateJavaMod" (formula "3") (term "2,0,0"))
(rule "jmod_axiom" (formula "3") (term "0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,0"))
(rule "jmod_axiom" (formula "3") (term "2,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,2,0,0"))
(rule "polySimp_sepNegMonomial" (formula "3") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,0"))
(rule "jdiv_axiom" (formula "3") (term "0,1,2,0,1"))
(rule "eqSymm" (formula "1"))
(rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSymm" (formula "1"))
(rule "applyEq" (formula "4") (term "0,1,2,0,1") (ifseqformula "1"))
(rule "applyEq" (formula "4") (term "0,0,1,0,0,1") (ifseqformula "1"))
(rule "applyEq" (formula "4") (term "0,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "4") (term "0,1,2,0,0") (ifseqformula "1"))
(rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
(rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
(rule "qeq_literals" (formula "1") (term "0,1,1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "equal_literals" (formula "1") (term "0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm1" (formula "3") (term "1"))
(rule "add_literals" (formula "3") (term "0,1"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "inEqSimp_homoInEq1" (formula "3"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
(rule "polySimp_addComm1" (formula "3") (term "0"))
(rule "applyEq" (formula "7") (term "0,0,1,0,0,0") (ifseqformula "1"))
(rule "eqSymm" (formula "7") (term "1,0,0,0"))
(rule "applyEq" (formula "7") (term "0,1,2,0,1") (ifseqformula "1"))
(rule "polySimp_addComm0" (formula "7") (term "2,0,1"))
(rule "applyEq" (formula "7") (term "0,1,2,0,0") (ifseqformula "1"))
(rule "polySimp_addComm0" (formula "7") (term "2,0,0"))
(rule "applyEq" (formula "7") (term "0,0,1,0,0,1") (ifseqformula "1"))
(rule "eqSymm" (formula "7") (term "1,0,0,1"))
(rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1"))
(rule "polySimp_rightDist" (formula "3") (term "1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
(rule "mul_literals" (formula "3") (term "0,1"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
(rule "times_zero_1" (formula "6") (term "0,0"))
(rule "add_zero_left" (formula "6") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
(rule "leq_literals" (formula "6") (term "0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
(rule "add_literals" (formula "6") (term "1,1,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0"))
(rule "leq_literals" (formula "6") (term "0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "applyEq_and_int0" (formula "8") (term "0,0,0"))
(rule "elimGcdGeq" (formula "8") (term "0,0,0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "sub_literals" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,0,0,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
(rule "polySimp_pullOutFactor0" (formula "8") (term "0,1,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "1,0,1,0,0,0,0,0"))
(rule "times_zero_1" (formula "8") (term "0,1,0,0,0,0,0"))
(rule "leq_literals" (formula "8") (term "1,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
(rule "qeq_literals" (formula "8") (term "0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "commute_and" (formula "8"))
(rule "commute_and" (formula "8") (term "0,0,1"))
(rule "applyEq_and_int0" (formula "8") (term "0,0,0"))
(rule "elimGcdGeq" (formula "8") (term "0,0,0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "sub_literals" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,0,0,0,1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0"))
(rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "8") (term "0,0,0,0,0,0"))
(rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "commute_and" (formula "8"))
(rule "commute_and" (formula "8") (term "0,0,1"))
(rule "ifthenelse_split" (formula "8") (term "0,1"))
(branch "len = quotient_0 * 256 & quotient_0 >= 1 TRUE"
   (rule "leq_literals" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
   (rule "qeq_literals" (formula "9"))
   (rule "closeTrue" (formula "9"))
)
(branch "len = quotient_0 * 256 & quotient_0 >= 1 FALSE"
   (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_homoInEq0" (formula "9") (term "1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_geqRight" (formula "9"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "1"))
   (rule "polySimp_mulAssoc" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "false_right" (formula "9"))
   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
   (rule "andLeft" (formula "4"))
   (rule "inEqSimp_homoInEq1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "1,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "leq_literals" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
)
}
