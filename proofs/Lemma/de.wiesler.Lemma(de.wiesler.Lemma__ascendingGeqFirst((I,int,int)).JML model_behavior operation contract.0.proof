\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Jan 09 00:40:25 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src/de";

\proofObligation "#Proof Obligation Settings
#Sun Jan 09 00:40:25 CET 2022
contract=de.wiesler.Lemma[de.wiesler.Lemma\\:\\:ascendingGeqFirst([I,int,int)].JML model_behavior operation contract.0
name=de.wiesler.Lemma[de.wiesler.Lemma\\:\\:ascendingGeqFirst([I,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "666bcb0c95"))

(autoModeTime "2938")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,heapBefore,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "allRight" (formula "6") (inst "sk=i_0"))
(rule "impRight" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_leqRight" (formula "8"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "inEqSimp_sepNegMonomial1" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1"))
(rule "polySimp_rightDist" (formula "3") (term "1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
(rule "mul_literals" (formula "3") (term "0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1"))
(rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
(rule "polySimp_mulComm0" (formula "2") (term "0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0"))
(rule "polySimp_addComm0" (formula "2") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1"))
(rule "polySimp_rightDist" (formula "2") (term "1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
(rule "mul_literals" (formula "2") (term "0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1"))
(rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
 (builtin "One Step Simplification" (formula "8"))
(rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0,1"))
(rule "translateJavaSubInt" (formula "8") (term "1,1,0,0,1"))
(rule "andLeft" (formula "8"))
(rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,1,1,0"))
(rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
(rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
(rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
(rule "add_literals" (formula "10") (term "1,1,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0"))
(rule "qeq_literals" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "arrayLengthIsAShort" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "arrayLengthNotNegative" (formula "11") (term "0"))
(rule "allLeft" (formula "13") (inst "t=begin<<origin(\"ensures @ file Lemma.java @ line 45\",\"[]\")>>"))
(rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
(rule "polySimp_addComm1" (formula "13") (term "0,1,0"))
(rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
(rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
(rule "add_literals" (formula "13") (term "1,1,0,0,0"))
(rule "times_zero_1" (formula "13") (term "1,0,0,0"))
(rule "add_zero_right" (formula "13") (term "0,0,0"))
(rule "qeq_literals" (formula "13") (term "0,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
(rule "mul_literals" (formula "13") (term "0,1,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
(rule "int_induction" (inst "b=(   lt(nv, sub(end, begin))<<origin(\"User_Interaction @ node 124 (int_induction)\",\"[]\")>>
 -> leq(int::select(heap, values, arr(begin)),
        int::select(heap, values, arr(add(begin, nv))))<<origin(\"User_Interaction @ node 124 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 124 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
(branch "Base Case"
   (rule "add_zero_right" (formula "15") (term "0,2,1,1"))
   (rule "impRight" (formula "15"))
   (rule "polySimp_elimSub" (formula "1") (term "1"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "inEqSimp_leqRight" (formula "16"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Step Case"
   (rule "allRight" (formula "15") (inst "sk=nv_0"))
   (rule "impRight" (formula "15"))
   (rule "impRight" (formula "16"))
   (rule "andLeft" (formula "2"))
   (rule "polySimp_elimSub" (formula "1") (term "1"))
   (rule "polySimp_elimSub" (formula "3") (term "1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "1,0,2,1"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "polySimp_addComm0" (formula "3") (term "1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,2,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,2,1"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
   (rule "mul_literals" (formula "4") (term "0,0,1,0"))
   (rule "inEqSimp_subsumption0" (formula "4") (term "0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0"))
   (rule "qeq_literals" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
   (rule "times_zero_1" (formula "3") (term "0,0"))
   (rule "add_zero_left" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
   (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,0"))
   (rule "leq_literals" (formula "17") (term "0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "allLeft" (formula "18") (inst "t=add(begin, nv_0)"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,2,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
   (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
   (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,1,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
   (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "4"))
   (rule "qeq_literals" (formula "18") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_contradInEq0" (formula "18") (term "0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
   (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0"))
   (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0"))
   (rule "leq_literals" (formula "18") (term "0,0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "18"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0"))
   (rule "polySimp_elimOne" (formula "18") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "5"))
   (rule "andLeft" (formula "18"))
   (rule "inEqSimp_homoInEq1" (formula "18"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
   (rule "add_literals" (formula "18") (term "1,1,0"))
   (rule "times_zero_1" (formula "18") (term "1,0"))
   (rule "add_zero_right" (formula "18") (term "0"))
   (rule "leq_literals" (formula "18"))
   (rule "closeFalse" (formula "18"))
)
(branch "Use Case"
   (rule "allLeft" (formula "1") (inst "t=sub(i_0, begin)") (userinteraction))
   (rule "polySimp_elimSub" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "0,0"))
   (rule "polySimp_elimSub" (formula "1") (term "1,0,2,1,1,1"))
   (rule "polySimp_elimSub" (formula "1") (term "0,0,1"))
   (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
   (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "1,0,2,1,1,1"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,1,1"))
   (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,2,1,1,1"))
   (rule "add_literals" (formula "1") (term "1,0,0,2,1,1,1"))
   (rule "times_zero_1" (formula "1") (term "0,0,2,1,1,1"))
   (rule "add_zero_left" (formula "1") (term "0,2,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,1"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)
}
