\withOptions moreSeqRules:on;

\javaSource "../../src";

\chooseContract "de.wiesler.Sorter[de.wiesler.Sorter::sample([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0";

\proofScript "

macro autopilot-prep;

select succedent formula='
    {heapAtPre:=heap || exc:=null || heap:=heapAfter_sort || result:=result_0}
        seqPerm(
            seqDef{int u;}(0, values.length, any::select(heap, values, arr(u))),
            seqDef{int u;}(0, values.length, any::select(heapAtPre, values, arr(u)))
        )';

rule seqPermTrans formula='
    seqPerm(
        seqDef{int u;}(0, values.length, any::select(heapAfter_sort, values, arr(u))),
        seqDef{int u;}(0, values.length, any::select(heapAfter_select_n, values, arr(u)))
    )';

select succedent formula='{heapAtPre:=heap || exc:=null || heap:=heapAfter_sort || result:=result_0}
   \forall Field f;
     \forall java.lang.Object o;
       (  elementOf(o, f, de.wiesler.Storage::$allArrays(heapAtPre, storage))
        | o = values
        & \exists int iv; (f = arr(iv) & geq(iv, begin) & leq(iv, add(Z(neglit(1(#))), end)))
        | !o = null
        & !boolean::select(heapAtPre, o, java.lang.Object::<created>) = TRUE
        | any::select(heapAtPre, o, f) = any::select(heap, o, f))';

rule Partial_inv_axiom_for_JML_class_invariant_nr_40_in_Storage
	     on='java.lang.Object::<inv>(heap,storage)'
	formula='java.lang.Object::<inv>(heap,storage)'
     inst_h0='heap'
     inst_self='storage'
;

tryclose;

"