\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 14 13:58:14 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Apr 14 13:58:14 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:smallBucketsInRangeSorted([I,int,int,[I,int,int,int)].JML accessible clause.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:smallBucketsInRangeSorted([I,int,int,[I,int,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "50215")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "17"))
(rule "notLeft" (formula "16"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "9"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "One Step Simplification" (formula "17"))
(rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "17") (term "0") (inst "b=b") (userinteraction))
(rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "17") (term "1") (inst "b=b") (userinteraction))
 (builtin "One Step Simplification" (formula "17") (userinteraction))
(rule "equivAllRight" (formula "17") (userinteraction))
(rule "allRight" (formula "17") (inst "sk=b_0") (userinteraction))
(rule "cut_direct" (formula "17") (term "0,1") (userinteraction))
(branch "CUT: lower <= b_0 & b_0 < upper TRUE"
   (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "1") (userinteraction))
    (builtin "One Step Simplification" (formula "18") (userinteraction))
   (rule "eqTermCut" (formula "18") (term "4,1") (inst "s=int::select(heap, bucket_starts, arr(b_0))") (userinteraction))
   (branch "Assume bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, lower, upper))] = bucket_starts[b_0]"
      (rule "eqTermCut" (formula "19") (term "5,1") (inst "s=int::select(heap,
            bucket_starts,
            arr(javaAddInt(b_0, Z(1(#)))))") (userinteraction))
      (branch "Assume bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, lower, upper))] = bucket_starts[javaAddInt(b_0, 1)]"
         (rule "applyEq" (formula "20") (term "4,1") (ifseqformula "2") (userinteraction))
         (rule "applyEq" (formula "20") (term "5,1") (ifseqformula "1") (userinteraction))
         (rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "20") (term "1") (userinteraction))
         (rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "20") (term "0") (userinteraction))
          (builtin "One Step Simplification" (formula "20") (userinteraction))
          (builtin "Use Dependency Contract" (formula "20") (term "0,1,1") (ifInst ""  (formula "20") (term "0,1,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::isSortedSlice([I,int,int)].JML accessible clause.0") (userinteraction))
         (rule "impLeft" (formula "18") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "18"))
            (branch
               (rule "andRight" (formula "18"))
               (branch
                  (rule "andRight" (formula "18"))
                  (branch
                     (rule "andRight" (formula "18"))
                     (branch
                        (rule "andRight" (formula "18"))
                        (branch
                           (rule "andRight" (formula "18"))
                           (branch
                              (rule "close" (formula "18") (ifseqformula "4"))
                           )
                           (branch
                              (rule "true_left" (formula "8"))
                              (rule "wellFormedAnon" (formula "17"))
                              (rule "translateJavaSubInt" (formula "20") (term "0,0,0,0"))
                              (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,0"))
                              (rule "translateJavaSubInt" (formula "20") (term "0,1,0,0"))
                              (rule "translateJavaAddInt" (formula "20") (term "2,0,1,0"))
                              (rule "translateJavaAddInt" (formula "20") (term "3,0,1,1"))
                              (rule "translateJavaSubInt" (formula "20") (term "0,0,0,1"))
                              (rule "translateJavaSubInt" (formula "20") (term "0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "20") (term "2,0,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "20") (term "2,0,1,1"))
                              (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                              (rule "translateJavaSubInt" (formula "16") (term "0"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,0"))
                              (rule "translateJavaAddInt" (formula "20") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,1"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,1"))
                              (rule "andLeft" (formula "3"))
                              (rule "eqSymm" (formula "17"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                              (rule "closeTrue" (formula "18"))
                           )
                        )
                        (branch
                           (rule "orRight" (formula "18"))
                           (rule "true_left" (formula "8"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0,0,1"))
                           (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,0"))
                           (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,1,0,0"))
                           (rule "translateJavaAddInt" (formula "20") (term "2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "16") (term "0"))
                           (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0,0,0"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,1,0,1"))
                           (rule "translateJavaSubInt" (formula "20") (term "2,0,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "20") (term "2,0,1,1"))
                           (rule "translateJavaAddInt" (formula "20") (term "3,0,1,1"))
                           (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,1"))
                           (rule "translateJavaAddInt" (formula "20") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,1"))
                           (rule "andLeft" (formula "3"))
                           (rule "eqSymm" (formula "17"))
                           (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "18")))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                     (branch
                        (rule "true_left" (formula "8"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "closeTrue" (formula "17"))
                     )
                  )
                  (branch
                     (rule "true_left" (formula "8"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "closeTrue" (formula "17"))
                  )
               )
               (branch
                  (rule "true_left" (formula "8"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,0"))
                  (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,1,0,1"))
                  (rule "translateJavaSubInt" (formula "20") (term "2,0,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "2,0,1,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "3,0,1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,0,0,0"))
                  (rule "translateJavaSubInt" (formula "16") (term "0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,1,0,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,1"))
                  (rule "notRight" (formula "17"))
                  (rule "close" (formula "18") (ifseqformula "1"))
               )
            )
            (branch "Case 2"
               (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "16") (term "0") (userinteraction))
                (builtin "One Step Simplification" (formula "16") (userinteraction))
               (rule "true_left" (formula "8"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "18") (term "0") (inst "i=i") (inst "j=j") (userinteraction))
                (builtin "One Step Simplification" (formula "18") (userinteraction))
               (rule "instAll" (formula "19") (term "0,2,0") (ifseqformula "18") (userinteraction))
               (rule "impLeft" (formula "19") (userinteraction))
               (branch "Case 1"
                  (rule "translateJavaSubInt" (formula "20") (term "0"))
                  (rule "translateJavaSubInt" (formula "25") (term "0,0,0,0"))
                  (rule "translateJavaSubInt" (formula "25") (term "0,1,0,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
                  (rule "translateJavaSubInt" (formula "22") (term "2,0,1,0"))
                  (rule "translateJavaAddInt" (formula "22") (term "1,1"))
                  (rule "translateJavaSubInt" (formula "22") (term "2,1"))
                  (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "25") (term "2,0,1,0"))
                  (rule "translateJavaAddInt" (formula "21") (term "1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                  (rule "translateJavaAddInt" (formula "25") (term "3,0,1,0"))
                  (rule "translateJavaSubInt" (formula "25") (term "0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "17") (term "0"))
                  (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "25") (term "0,1,0,1"))
                  (rule "translateJavaSubInt" (formula "25") (term "2,0,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "25") (term "2,0,1,1"))
                  (rule "translateJavaAddInt" (formula "25") (term "3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "25") (term "0,2,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "22") (term "0,2,1"))
                  (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "25") (term "0,2,0,0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "22") (term "0,2,1,0,2,1"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "eqSymm" (formula "20"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_elimSub" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_elimSub" (formula "22") (term "2,0,1,0"))
                  (rule "mul_literals" (formula "22") (term "1,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "25") (term "0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "25") (term "2,0,1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "25") (term "1,2,0,1,1,0,0,1,1"))
                  (rule "polySimp_elimSub" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_elimSub" (formula "25") (term "0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "22") (term "2,1"))
                  (rule "mul_literals" (formula "22") (term "1,2,1"))
                  (rule "polySimp_elimSub" (formula "20") (term "1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,1"))
                  (rule "polySimp_addComm0" (formula "21") (term "1"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "25") (term "2,0,1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,2,1,0,2,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "1"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "22") (term "2,1"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,2,1"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0"))
                  (rule "inEqSimp_ltRight" (formula "21"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "disjointDefinition" (formula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,1"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1"))
                  (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
               (branch "Case 2"
                  (rule "instAll" (formula "22") (term "0,2,1,1,1") (ifseqformula "19") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch "Case 1"
                     (rule "translateJavaSubInt" (formula "21") (term "0"))
                     (rule "translateJavaSubInt" (formula "26") (term "0,0,0,0"))
                     (rule "translateJavaSubInt" (formula "26") (term "0,1,0,0"))
                     (rule "translateJavaAddInt" (formula "22") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "26") (term "2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "26") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                     (rule "translateJavaAddInt" (formula "17") (term "0"))
                     (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "26") (term "0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "26") (term "0,1,0,1"))
                     (rule "translateJavaSubInt" (formula "26") (term "2,0,1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "26") (term "2,0,1,1"))
                     (rule "translateJavaSubInt" (formula "23") (term "2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "23") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "23") (term "2,1"))
                     (rule "translateJavaAddInt" (formula "26") (term "3,0,1,1"))
                     (rule "translateJavaAddInt" (formula "26") (term "0,2,0,0,0,0,0"))
                     (rule "translateJavaAddInt" (formula "26") (term "0,2,1,3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "26") (term "0,2,0,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "23") (term "0,2,1"))
                     (rule "translateJavaAddInt" (formula "26") (term "0,2,1,3,0,1,1"))
                     (rule "translateJavaAddInt" (formula "23") (term "0,2,1,0,2,1"))
                     (rule "eqSymm" (formula "21"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "2,0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "1,2,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimSub" (formula "23") (term "2,0,1,0"))
                     (rule "mul_literals" (formula "23") (term "1,2,0,1,0"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,0,0,1"))
                     (rule "polySimp_elimSub" (formula "23") (term "2,1"))
                     (rule "mul_literals" (formula "23") (term "1,2,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "0"))
                     (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,2,1,3,0,1,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,2,1,3,0,1,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "2,0,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "23") (term "2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,2,1,0,2,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "2,1"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,2,1"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                     (rule "disjointDefinition" (formula "23"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "22") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0,1"))
                     (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1"))
                     (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "20"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "9")))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnon" (formula "2"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")) (ifInst ""  (formula "9")))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfUnion" (formula "1") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1,0"))
                     (rule "replace_known_left" (formula "1") (term "1,1,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "11") (term "0,0"))
                     (rule "add_zero_left" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_geqRight" (formula "22"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "instAll" (formula "23") (term "0,2,1,0,2,1") (ifseqformula "19") (userinteraction))
                     (rule "impLeft" (formula "1") (userinteraction))
                     (branch "Case 1"
                        (rule "translateJavaAddInt" (formula "2") (term "0,2,1"))
                        (rule "translateJavaSubInt" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "23") (term "0,1"))
                        (rule "translateJavaSubInt" (formula "27") (term "2,0,1,1,0,0,1,1"))
                        (rule "translateJavaAddInt" (formula "27") (term "2,0,1,1"))
                        (rule "translateJavaSubInt" (formula "27") (term "0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "3,0,1,1"))
                        (rule "translateJavaAddInt" (formula "23") (term "1,0"))
                        (rule "translateJavaSubInt" (formula "22") (term "0"))
                        (rule "translateJavaAddInt" (formula "23") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "2") (term "0,2,0"))
                        (rule "translateJavaAddInt" (formula "18") (term "0"))
                        (rule "translateJavaAddInt" (formula "24") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "24") (term "2,1"))
                        (rule "translateJavaSubInt" (formula "27") (term "0,1,0,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "20") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "27") (term "0,0,0,1"))
                        (rule "translateJavaSubInt" (formula "27") (term "0,1,0,1"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,2,1,3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,2,0,0,0,0,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,2,1,3,0,1,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,2,1"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,2,0,0,0,0,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,2,1"))
                        (rule "eqSymm" (formula "22"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_elimSub" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,2,0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "2,0,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "27") (term "1,2,0,1,1,0,0,1,1"))
                        (rule "polySimp_elimSub" (formula "24") (term "2,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "1,2,0,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "0,1,0,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "27") (term "0,0,0,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "0,0,0,1"))
                        (rule "polySimp_elimSub" (formula "24") (term "2,1"))
                        (rule "mul_literals" (formula "24") (term "1,2,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0"))
                        (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,2,1,3,0,1,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,2,1,3,0,1,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "2,0,1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,1,0,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,2,0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,2,1,0,2,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "24") (term "2,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
                        (rule "disjointDefinition" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "23") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                        (rule "times_zero_2" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0,1"))
                        (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,1,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1"))
                        (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "1") (term "1") (ifseqformula "21"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                        (rule "mul_literals" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,0,1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "27")) (ifInst ""  (formula "10")))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "2"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "27")) (ifInst ""  (formula "10")))
                        (rule "eqSymm" (formula "3"))
                        (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfUnion" (formula "3") (term "0"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                        (rule "eqSymm" (formula "3") (term "0,0,0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "1,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "3") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "elementOfUnion" (formula "2") (term "0"))
                        (rule "elementOfArrayRangeConcrete" (formula "2") (term "1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
                        (rule "eqSymm" (formula "2") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,0"))
                        (rule "replace_known_left" (formula "2") (term "1,1,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "2") (term "1,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "2") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "2") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "2") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "14"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "12") (term "0,0"))
                        (rule "add_zero_left" (formula "12") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "23") (term "0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "23") (term "0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "Case 2"
                        (rule "instAll" (formula "17") (term "1") (ifseqformula "1") (userinteraction))
                        (rule "translateJavaAddInt" (formula "3") (term "0,2,1"))
                        (rule "translateJavaSubInt" (formula "4") (term "2,0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "28") (term "0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "25") (term "2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "25") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "25") (term "2,1"))
                        (rule "translateJavaSubInt" (formula "28") (term "0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "3") (term "0,2,0"))
                        (rule "translateJavaAddInt" (formula "20") (term "0"))
                        (rule "translateJavaAddInt" (formula "28") (term "2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "21") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "28") (term "0,0,0,1"))
                        (rule "translateJavaSubInt" (formula "28") (term "0,1,0,1"))
                        (rule "translateJavaSubInt" (formula "28") (term "2,0,1,1,0,0,1,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "2,0,1,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "3,0,1,1"))
                        (rule "translateJavaAddInt" (formula "21") (term "1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "22") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,0,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "0"))
                        (rule "translateJavaAddInt" (formula "17") (term "1,1,0"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,2,0,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,2,0,0,0,0,0"))
                        (rule "translateJavaAddInt" (formula "25") (term "0,2,1,0,2,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,2,1,3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,2,0,0,0,0,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,2,1,3,0,1,1"))
                        (rule "translateJavaAddInt" (formula "25") (term "0,2,1"))
                        (rule "eqSymm" (formula "24"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_elimSub" (formula "4") (term "2,0,1,1,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,2,0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "2,0,1,0"))
                        (rule "mul_literals" (formula "25") (term "1,2,0,1,0"))
                        (rule "polySimp_elimSub" (formula "28") (term "0,1,0,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,2,0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "28") (term "0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "28") (term "2,0,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "28") (term "1,2,0,1,1,0,0,1,1"))
                        (rule "polySimp_elimSub" (formula "28") (term "0,0,0,0"))
                        (rule "polySimp_elimSub" (formula "28") (term "0,0,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "2,1"))
                        (rule "mul_literals" (formula "25") (term "1,2,1"))
                        (rule "polySimp_elimSub" (formula "24") (term "1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,2,1,3,0,1,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,2,1,3,0,1,1"))
                        (rule "polySimp_addComm0" (formula "4") (term "2,0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "2,0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,1,0,1"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,0,1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,2,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "1"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,2,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,2,1,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,2,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "disjointDefinition" (formula "25"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0,1,0"))
                        (rule "polySimp_pullOutFactor2" (formula "17") (term "0,1,0"))
                        (rule "add_literals" (formula "17") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "17") (term "0,1,0"))
                        (rule "leq_literals" (formula "17") (term "1,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0,1"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,1,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0"))
                        (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                        (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "23"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "28")) (ifInst ""  (formula "11")))
                        (rule "eqSymm" (formula "5"))
                        (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "11")))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfUnion" (formula "4") (term "0"))
                        (rule "elementOfArrayRangeConcrete" (formula "4") (term "1,0"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "5")))
                        (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
                        (rule "eqSymm" (formula "4") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "4") (term "1,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "elementOfUnion" (formula "3") (term "0"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                        (rule "eqSymm" (formula "3") (term "0,0,0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,0"))
                        (rule "replace_known_left" (formula "3") (term "1,1,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "3") (term "1,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "3") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "13") (term "0,0"))
                        (rule "add_zero_left" (formula "13") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "18"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "commuteUnion" (formula "29") (term "1,1,0,0,1,1"))
                        (rule "commuteUnion" (formula "26") (term "1,0,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_imp2or" (formula "23") (term "0"))
                        (rule "nnf_imp2or" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "29") (term "0,1,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "30") (term "0,1,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "translateJavaSubInt" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,2,1,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,2,1,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
                        (rule "nnf_imp2or" (formula "30") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "1") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
                        (rule "nnf_imp2or" (formula "1") (term "0,1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "1") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1,0,1"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1,0,1"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "30") (term "0,1,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,2,1,1,0,1,1"))
                        (rule "translateJavaSubInt" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,2,1,1,0,1,1"))
                        (rule "polySimp_addComm1" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,1,1,0,0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,1"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,1"))
                        (rule "nnf_imp2or" (formula "30") (term "0,1,1"))
                        (rule "nnf_notAnd" (formula "30") (term "0,0,1,1"))
                        (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,0,1,1"))
                        (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,1"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,1"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,0"))
                        (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "2") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "translateJavaAddInt" (formula "2") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "2") (term "0,0"))
                        (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,0,0"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "allRight" (formula "29") (inst "sk=ov_0"))
                        (rule "allRight" (formula "29") (inst "sk=fv_0"))
                        (rule "notRight" (formula "29"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                        (rule "andLeft" (formula "2"))
                        (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                        (rule "mul_literals" (formula "5") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "elementOfArrayRangeConcrete" (formula "33"))
                        (rule "elementOfArrayRangeConcrete" (formula "34"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1"))
                        (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "27"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "true_left" (formula "8"))
            (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
            (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0,0,0"))
            (rule "translateJavaSubInt" (formula "20") (term "0,1,0,0"))
            (rule "translateJavaAddInt" (formula "20") (term "2,0,1,0"))
            (rule "translateJavaAddInt" (formula "20") (term "3,0,1,0"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0,0,1"))
            (rule "translateJavaSubInt" (formula "20") (term "0,1,0,1"))
            (rule "translateJavaSubInt" (formula "20") (term "2,0,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "20") (term "2,0,1,1"))
            (rule "translateJavaAddInt" (formula "20") (term "3,0,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
            (rule "translateJavaSubInt" (formula "16") (term "0"))
            (rule "translateJavaSubInt" (formula "17") (term "2,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "17") (term "2,0"))
            (rule "translateJavaAddInt" (formula "17") (term "3,0"))
            (rule "translateJavaAddInt" (formula "17") (term "2,1"))
            (rule "translateJavaAddInt" (formula "17") (term "3,1"))
            (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,0"))
            (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,0"))
            (rule "translateJavaAddInt" (formula "20") (term "0,2,0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "20") (term "0,2,1,3,0,1,1"))
            (rule "translateJavaAddInt" (formula "17") (term "0,2,1,3,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,2,1,3,1"))
            (rule "andLeft" (formula "3"))
            (rule "eqSymm" (formula "17"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,0"))
            (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "0,1,0,1"))
            (rule "polySimp_elimSub" (formula "21") (term "2,0,1,1,0,0,1,1"))
            (rule "mul_literals" (formula "21") (term "1,2,0,1,1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "2,0,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,2,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "0,0,0,1"))
            (rule "polySimp_elimSub" (formula "17") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,1,3,0,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,1,3,0,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,1,3,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,1,3,1"))
            (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,0,1"))
            (rule "polySimp_addComm0" (formula "21") (term "2,0,1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "2,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "1,0,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,1"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1"))
            (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "closeTrue" (formula "21"))
         )
      )
      (branch "Assume bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, lower, upper))] != bucket_starts[javaAddInt(b_0, 1)]"
         (rule "true_left" (formula "8"))
         (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,4,1"))
         (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,5,1"))
         (rule "translateJavaAddInt" (formula "19") (term "0,2,5,1"))
         (rule "translateJavaAddInt" (formula "19") (term "0,2,5,0"))
         (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "16") (term "0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,2,0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
         (rule "andLeft" (formula "3"))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "20"))
         (rule "eqSymm" (formula "16"))
         (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,2,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,0,1,1,0,5,0"))
         (rule "mul_literals" (formula "20") (term "1,2,0,1,1,0,5,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,0,1,1,0,4,0"))
         (rule "mul_literals" (formula "20") (term "1,2,0,1,1,0,4,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,0,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "1,2,0,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,1"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,2,5,1"))
         (rule "polySimp_addComm0" (formula "20") (term "0,2,5,0"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "2,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,0,1,1,0,5,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,0,1,1,0,4,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
         (rule "applyEq" (formula "21") (term "4,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "8")))
         (rule "eqSymm" (formula "2"))
         (rule "applyEqReverse" (formula "21") (term "4,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0"))
         (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "1") (term "1,0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
         (rule "qeq_literals" (formula "1") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_1"))
         (rule "applyEq" (formula "20") (term "5,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "7")))
         (rule "eqSymm" (formula "17"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1,0,0"))
         (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_subsumption0" (formula "1") (term "1,0,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Assume bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, lower, upper))] != bucket_starts[b_0]"
      (rule "true_left" (formula "7"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,4,1"))
      (rule "translateJavaAddInt" (formula "18") (term "0,2,5,0"))
      (rule "translateJavaSubInt" (formula "15") (term "0"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,5,1"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "18") (term "0,2,5,1"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "15"))
      (rule "eqSymm" (formula "19"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_elimSub" (formula "16") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "15") (term "1"))
      (rule "polySimp_elimSub" (formula "19") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "19") (term "2,0,1,1,0,4,0"))
      (rule "mul_literals" (formula "19") (term "1,2,0,1,1,0,4,0"))
      (rule "polySimp_elimSub" (formula "19") (term "2,0,1,1,0,5,0"))
      (rule "mul_literals" (formula "19") (term "1,2,0,1,1,0,5,0"))
      (rule "polySimp_addComm0" (formula "19") (term "0,2,5,0"))
      (rule "polySimp_addComm0" (formula "19") (term "0,2,5,1"))
      (rule "polySimp_addComm0" (formula "16") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "15") (term "1"))
      (rule "polySimp_addComm0" (formula "19") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "19") (term "2,0,1,1,0,4,0"))
      (rule "polySimp_addComm0" (formula "19") (term "2,0,1,1,0,5,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "20") (term "4,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "17"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
      (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "CUT: lower <= b_0 & b_0 < upper FALSE"
   (rule "true_left" (formula "5"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
   (rule "closeTrue" (formula "17"))
)
)
}
