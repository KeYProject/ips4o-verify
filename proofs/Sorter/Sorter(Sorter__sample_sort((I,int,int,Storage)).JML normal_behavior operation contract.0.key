\withOptions moreSeqRules:on;

\javaSource "../../src";

\chooseContract "de.wiesler.Sorter[de.wiesler.Sorter::sample_sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0";

\proofScript "

macro autopilot-prep;

select succedent formula='{_values:=values
  || heapBefore_sample_sort:=heap
  || heap:=store(memset(store(store(store(create(heap, x_arr_2),
                                          x_arr_2,
                                          java.lang.Object::<transient>,
                                          Z(0(#))),
                                    x_arr_2,
                                    java.lang.Object::<transactionConditionallyUpdated>,
                                    FALSE),
                              x_arr_2,
                              java.lang.Object::<initialized>,
                              FALSE),
                        arrayRange(x_arr_2, Z(0(#)), Z(8(2(1(#))))),
                        Z(0(#))),
                 x_arr_2,
                 java.lang.Object::<initialized>,
                 TRUE)
  || heap_Before_BLOCK:=store(memset(store(store(store(create(heap, x_arr_2),
                                                       x_arr_2,
                                                       java.lang.Object::<transient>,
                                                       Z(0(#))),
                                                 x_arr_2,
                                                 java.lang.Object::<transactionConditionallyUpdated>,
                                                 FALSE),
                                           x_arr_2,
                                           java.lang.Object::<initialized>,
                                           FALSE),
                                     arrayRange(x_arr_2, Z(0(#)), Z(8(2(1(#))))),
                                     Z(0(#))),
                              x_arr_2,
                              java.lang.Object::<initialized>,
                              TRUE)
  || exc#78_1:=null}
   seqPerm(seqDef{int u;}(Z(0(#)), length(_values), any::select(heap, _values, arr(u))),
           seqDef{int u;}(Z(0(#)), length(_values), any::select(heapBefore_sample_sort, _values, arr(u))))';

macro onestep;

let @seqAfterCreate='seqDef{int u;}(0,
                        values.length,
                        any::select(heap[create(x_arr_2)]
                                        [x_arr_2.<transient> := 0]
                                        [x_arr_2.<transactionConditionallyUpdated> := FALSE]
                                        [x_arr_2.<initialized> := FALSE]
                                        [memset(arrayRange(x_arr_2, 0, 128), 0)]
                                        [x_arr_2.<initialized> := TRUE],
                                    values,
                                    arr(u)))'
    @seqPre='seqDef{int u;}(0, values.length, any::select(heap, values, arr(u)))';

cut '@seqAfterCreate = @seqPre';
rule applyEq formula='seqPerm(@seqAfterCreate, @seqPre)' on='@seqAfterCreate';
auto;
auto;

select succedent formula='{heapAtPre:=heap || exc:=null || heap:=heapAfter_fallback_sort}
   seqPerm(seqDef{int u;}(Z(0(#)), length(values), any::select(heap, values, arr(u))),
           seqDef{int u;}(Z(0(#)), length(values), any::select(heapAtPre, values, arr(u))))';

rule seqPermTrans formula='seqPerm(seqDef{int u;}(0, values.length, any::select(heapAfter_fallback_sort, values, arr(u))),
         seqDef{int u;}(0, values.length, any::select(heapAfter_partition, values, arr(u))))';

rule seqPermTrans formula='seqPerm(seqDef{int u;}(0, values.length, any::select(heapAfter_fallback_sort, values, arr(u))),
         seqDef{int u;}(0,
                        values.length,
                        any::select(heap[create(x_arr_2)]
                                        [x_arr_2.<transient> := 0]
                                        [x_arr_2.<transactionConditionallyUpdated> := FALSE]
                                        [x_arr_2.<initialized> := FALSE]
                                        [memset(arrayRange(x_arr_2, 0, 128), 0)],
                                    values,
                                    arr(u))))';
auto;

select succedent formula='{_values:=values
  || _begin:=begin
  || _end:=end
  || _storage:=storage
  || (heapBefore_sample_sort:=heap
  || _valuesBefore_sample_sort:=values)
  || bucket_starts:=x_arr_2
  || heap:=heapAfter_partition
  || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
  || heap_Before_BLOCK_0:=heapAfter_partition
  || exc#69_1:=null}
   seqPerm(seqDef{int u;}(0, _values.length, any::select(heap, _values, arr(u))),
           seqDef{int u;}(0,
                          _valuesBefore_sample_sort.length,
                          any::select(heapBefore_sample_sort, _valuesBefore_sample_sort, arr(u))))';

rule seqPermTrans formula='seqPerm(seqDef{int u;}(0, values.length, values[u]@heapAfter_partition),
         seqDef{int u;}(0,
                        values.length,
                        any::select(heap[create(x_arr_2)]
                                        [x_arr_2.<transient> := 0]
                                        [x_arr_2.<transactionConditionallyUpdated> := FALSE]
                                        [x_arr_2.<initialized> := FALSE]
                                        [memset(arrayRange(x_arr_2, 0, 128), 0)],
                                    values,
                                    arr(u))))';
auto;

select succedent formula='{_values:=values
  || _begin:=begin
  || _end:=end
  || bucket_starts:=x_arr_2
  || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
  || heap:=anon(heapAfter_partition,
                union(allFields(storage), arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                anonOut_heap<<anonHeapFunction>>)
  || heap_Before_BLOCK_1:=anon(heapAfter_partition,
                               union(allFields(storage),
                                     arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                               anonOut_heap<<anonHeapFunction>>)
  || exc#67_1:=null}
   (  de.wiesler.Lemma::sortednessFromPartitionSorted(heap,
                                                      _values,
                                                      _begin,
                                                      _end,
                                                      bucket_starts,
                                                      num_buckets)
    = TRUE)';
macro onestep;
rule Contract_axiom_for_sortednessFromPartitionSorted_in_Lemma on='de.wiesler.Lemma::sortednessFromPartitionSorted(anon(heapAfter_partition,
                                                        union(allFields(storage),
                                                              arrayRange(values,
                                                                         begin,
                                                                         add(Z(neglit(1(#))), end))),
                                                        anonOut_heap<<anonHeapFunction>>),
                                                   values,
                                                   begin,
                                                   end,
                                                   x_arr_2,
                                                   de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
rule impLeft occ='0';
macro autopilot-prep;

select succedent
    formula='de.wiesler.Functions::isValidSlice(anon(heapAfter_partition,
                                                       union(allFields(storage),
                                                             arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                       anonOut_heap<<anonHeapFunction>>),
                                                  values,
                                                  begin,
                                                  end)
             = TRUE';

rule observerDependency
    inst_termWithLargeHeap='de.wiesler.Functions::isValidSlice(anon(heapAfter_partition,
                                                                    union(allFields(storage),
                                                                          arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                                    anonOut_heap<<anonHeapFunction>>),
                                                               values,
                                                               begin,
                                                               end)'
    inst_termWithSmallHeap='de.wiesler.Functions::isValidSlice(heap, values, begin, end)'
                   formula='de.wiesler.Functions::isValidSlice(anon(heapAfter_partition,
                                                                      union(allFields(storage),
                                                                            arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                                      anonOut_heap<<anonHeapFunction>>),
                                                                 values,
                                                                 begin,
                                                                 end)
                            = TRUE'
                        on='de.wiesler.Functions::isValidSlice(anon(heapAfter_partition,
                                                                    union(allFields(storage),
                                                                          arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                                    anonOut_heap<<anonHeapFunction>>),
                                                               values,
                                                               begin,
                                                               end)';

select succedent formula='  de.wiesler.Lemma::bucketIndexFromOffset(anon(heapAfter_partition,
                                                union(allFields(storage),
                                                      arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                anonOut_heap<<anonHeapFunction>>),
                                           x_arr_2,
                                           de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                           javaSubInt(end, begin))
 = TRUE';

rule Contract_axiom_for_isValidBucketStarts_in_Functions
         formula='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                              x_arr_2,
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                  = TRUE'
      inst_sv_p0='x_arr_2'
    inst_sv_heap='heapAfter_partition'
      inst_sv_p1='de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>'
              on='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';

rule eqTermCut
    formula='!x_arr_2 = null & wellFormed(heapAfter_partition)
             ->   de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                = TRUE
             ->   de.wiesler.Lemma::bucketIndexFromOffset(heapAfter_partition,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          int::select(heapAfter_partition,
                                                                      x_arr_2,
                                                                      arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)))
                = TRUE'
     inst_s='javaSubInt(end, begin)'
     inst_t='int::select(heapAfter_partition,
                         x_arr_2,
                         arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))'
         on='int::select(heapAfter_partition,
                         x_arr_2,
                         arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';

rule observerDependency
    inst_termWithLargeHeap='de.wiesler.Lemma::bucketIndexFromOffset(anon(heapAfter_partition,
                                                                         union(allFields(storage),
                                                                               arrayRange(values,
                                                                                          begin,
                                                                                          add(Z(neglit(1(#))), end))),
                                                                         anonOut_heap<<anonHeapFunction>>),
                                                                    x_arr_2,
                                                                    de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                                    javaSubInt(end, begin))'
    inst_termWithSmallHeap='de.wiesler.Lemma::bucketIndexFromOffset(heapAfter_partition,
                                                                    x_arr_2,
                                                                    de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                                    javaSubInt(end, begin))'
                   formula='de.wiesler.Lemma::bucketIndexFromOffset(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anonOut_heap<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                                      javaSubInt(end, begin))
                            = TRUE'
                        on='de.wiesler.Lemma::bucketIndexFromOffset(anon(heapAfter_partition,
                                                                         union(allFields(storage),
                                                                               arrayRange(values,
                                                                                          begin,
                                                                                          add(Z(neglit(1(#))), end))),
                                                                         anonOut_heap<<anonHeapFunction>>),
                                                                    x_arr_2,
                                                                    de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                                    javaSubInt(end, begin))';
auto;
macro onestep;
rule andRight;

select succedent formula='  de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                  union(allFields(storage),
                                                        arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                  anonOut_heap<<anonHeapFunction>>),
                                             x_arr_2,
                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
 = TRUE';
rule Contract_axiom_for_isValidBucketStarts_in_Functions
         formula='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                              x_arr_2,
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                  = TRUE'
      inst_sv_p0='x_arr_2'
    inst_sv_heap='heapAfter_partition'
      inst_sv_p1='de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>'
              on='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';

rule eqTermCut
    formula='!x_arr_2 = null & wellFormed(heapAfter_partition)
             ->   de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                = TRUE
             ->   de.wiesler.Lemma::bucketIndexFromOffset(heapAfter_partition,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          int::select(heapAfter_partition,
                                                                      x_arr_2,
                                                                      arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)))
                = TRUE'
     inst_s='javaSubInt(end, begin)'
     inst_t='int::select(heapAfter_partition,
                         x_arr_2,
                         arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))'
         on='int::select(heapAfter_partition,
                         x_arr_2,
                         arr(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';

rule observerDependency
    inst_termWithLargeHeap='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anonOut_heap<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)'
    inst_termWithSmallHeap='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)'
                   formula='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                             union(allFields(storage),
                                                                                   arrayRange(values,
                                                                                              begin,
                                                                                              add(Z(neglit(1(#))), end))),
                                                                             anonOut_heap<<anonHeapFunction>>),
                                                                        x_arr_2,
                                                                        de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                            = TRUE'
                        on='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anonOut_heap<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
auto;
macro onestep;
rule andRight;

# invariant initially

select succedent
    formula='{_values:=values
 || _begin:=begin
 || _end:=end
 || _storage:=storage
 || (heapBefore_sample_sort:=heap
 || _valuesBefore_sample_sort:=values)
 || bucket_starts:=x_arr_2
 || heap:=heapAfter_partition
 || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
 || equal_buckets:=de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
 || heap_Before_BLOCK_0:=heapAfter_partition
 || exc#69_1:=null
 || bucket:=Z(0(#))}
  seqPerm(array2seq(heap, _values), array2seq(heapBefore_sample_sort, _valuesBefore_sample_sort))';

rule seqPermTrans
    formula='seqPerm(seqDef{int u;}(Z(0(#)), length(values), int::select(heapAfter_partition, values, arr(u))),
                     seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(memset(store(store(store(create(heap, x_arr_2),
                                                                         x_arr_2,
                                                                         java.lang.Object::<transient>,
                                                                         Z(0(#))),
                                                                   x_arr_2,
                                                                   java.lang.Object::<transactionConditionallyUpdated>,
                                                                   FALSE),
                                                             x_arr_2,
                                                             java.lang.Object::<initialized>,
                                                             FALSE),
                                                       arrayRange(x_arr_2, Z(0(#)), Z(8(2(1(#))))),
                                                       Z(0(#))),
                                                values,
                                                arr(u))))';
auto;

# end invariant initially

# use case equal_buckets true

select succedent formula='{_values:=values
 || _begin:=begin
 || _end:=end
 || _storage:=storage
 || (heapBefore_sample_sort:=heap
 || _valuesBefore_sample_sort:=values)
 || bucket_starts:=x_arr_2
 || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
 || heap_Before_BLOCK_0:=heapAfter_partition
 || exc#69_1:=null
 || heap:=heapAfter_sample_sort_recurse_on}
  seqPerm(seqDef{int u;}(Z(0(#)), length(_values), any::select(heap, _values, arr(u))),
          seqDef{int u;}(Z(0(#)),
                         length(_valuesBefore_sample_sort),
                         any::select(heapBefore_sample_sort, _valuesBefore_sample_sort, arr(u))))';
rule seqPermTrans
    formula='seqPerm(seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(heapAfter_sample_sort_recurse_on, values, arr(u))),
                     seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(anon(heapAfter_partition,
                                                     union(allFields(storage),
                                                           arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                     anon_heap_LOOP<<anonHeapFunction>>),
                                                values,
                                                arr(u))))';

select branch='Pre (sample_sort_recurse_on)';
macro onestep;

macro autopilot-prep formula='leq(Z(0(#)), add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
& lt(add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>),
     de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
& (    de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                      union(allFields(storage),
                                                            arrayRange(values,
                                                                       begin,
                                                                       add(Z(neglit(1(#))), end))),
                                                      anon_heap_LOOP<<anonHeapFunction>>),
                                                 x_arr_2,
                                                 de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
     = TRUE
   & (  (    javaMod(add(Z(neglit(1(#))),
                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>),
                     Z(2(#)))
           = Z(0(#))
         |   add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
           = javaSubInt(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>, Z(1(#))))
      &   de.wiesler.Sorter::equalityBucketsInRange(anon(heapAfter_partition,
                                                         union(allFields(storage),
                                                               arrayRange(values,
                                                                          begin,
                                                                          add(Z(neglit(1(#))), end))),
                                                         anon_heap_LOOP<<anonHeapFunction>>),
                                                    values,
                                                    begin,
                                                    end,
                                                    x_arr_2,
                                                    de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                    javaAddInt(add(Z(neglit(1(#))),
                                                                   de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>),
                                                               Z(1(#))),
                                                    javaSubInt(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                               Z(1(#))))
        = TRUE
      &   de.wiesler.Sorter::notAllValuesInOneBucket(anon(heapAfter_partition,
                                                          union(allFields(storage),
                                                                arrayRange(values,
                                                                           begin,
                                                                           add(Z(neglit(1(#))), end))),
                                                          anon_heap_LOOP<<anonHeapFunction>>),
                                                     x_arr_2,
                                                     de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                     javaSubInt(end, begin))
        = TRUE))
& (  wellFormed(anon(heapAfter_partition,
                     union(allFields(storage), arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                     anon_heap_LOOP<<anonHeapFunction>>))
   & (  boolean::select(heapAfter_partition, values, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, values, java.lang.Object::<created>)
        = TRUE)
   & (  boolean::select(heapAfter_partition, storage, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, storage, java.lang.Object::<created>)
        = TRUE)
   & (  boolean::select(heapAfter_partition, x_arr_2, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, x_arr_2, java.lang.Object::<created>)
        = TRUE))
& measuredByCheck(pair(javaSubInt(end, begin), Z(1(#))))';

select succedent
    formula='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                              union(allFields(storage),
                                                                    arrayRange(values,
                                                                               begin,
                                                                               add(Z(neglit(1(#))), end))),
                                                              anon_heap_LOOP<<anonHeapFunction>>),
                                                         x_arr_2,
                                                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
             = TRUE';
rule observerDependency
    inst_termWithLargeHeap='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anon_heap_LOOP<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)'
    inst_termWithSmallHeap='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
auto;
auto;

# end use case equal_buckets true

# body preserves invariant

select succedent formula='geq(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
    add(add(Z(1(#)), bucket_0),
        \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
            \then (Z(1(#)))
            \else (Z(0(#)))))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='geq(add(add(Z(1(#)), bucket_0),
        \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
            \then (Z(1(#)))
            \else (Z(0(#)))),
    Z(0(#)))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='jmod(add(add(Z(1(#)), bucket_0),
           \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
               \then (Z(1(#)))
               \else (Z(0(#)))),
       Z(2(#)))
= Z(0(#))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='!  add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
 = add(add(Z(1(#)), bucket_0),
       \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
           \then (Z(1(#)))
           \else (Z(0(#))))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                             values,
                                             begin,
                                             end,
                                             x_arr_2,
                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                             Z(0(#)),
                                             \if (  lt(add(add(Z(1(#)), bucket_0),
                                                           \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                = TRUE)
                                                               \then (Z(1(#)))
                                                               \else (Z(0(#)))),
                                                       de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                                                  | !  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                     = TRUE)
                                                 \then (add(add(Z(1(#)), bucket_0),
                                                            \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                 = TRUE)
                                                                \then (Z(1(#)))
                                                                \else (Z(0(#)))))
                                                 \else (add(Z(neglit(1(#))),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)))
= TRUE';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';
cut 'lt(add(add(Z(1(#)), bucket_0), Z(1(#))),
   de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
macro onestep;
macro onestep;

rule Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            Z(0(#)),
                                                            add(add(Z(1(#)), bucket_0), Z(1(#))))
               = TRUE'
           on='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                          values,
                                                          begin,
                                                          end,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          Z(0(#)),
                                                          add(add(Z(1(#)), bucket_0), Z(1(#))))';
macro onestep;
rule allRight;

cut 'b_0 < bucket_0 + 1';
rule Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            Z(0(#)),
                                                            add(Z(1(#)), bucket_0))
               = TRUE'
           on='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                          values,
                                                          begin,
                                                          end,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          Z(0(#)),
                                                          add(Z(1(#)), bucket_0))';
macro onestep;
instantiate hide
    formula='\forall int b_3;
               (   leq(Z(0(#)), b_3) & lt(b_3, add(Z(1(#)), bucket_0))
                ->   de.wiesler.Functions::isSortedSlice(heapAfter_sample_sort_recurse_on,
                                                         values,
                                                         javaAddInt(begin,
                                                                    int::select(heapAfter_sample_sort_recurse_on,
                                                                                x_arr_2,
                                                                                arr(b_3))),
                                                         javaAddInt(begin,
                                                                    int::select(heapAfter_sample_sort_recurse_on,
                                                                                x_arr_2,
                                                                                arr(javaAddInt(b_3, Z(1(#)))))))
                   = TRUE)'
       with='b_0';
auto;

rule impRight;
rule impLeft
    formula='de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE
             ->   de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            add(Z(1(#)), bucket_0),
                                                            add(Z(neglit(1(#))),
                                                                de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
                = TRUE';
auto;

rule Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                           values,
                                                           begin,
                                                           end,
                                                           x_arr_2,
                                                           de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                           add(Z(1(#)), bucket_0),
                                                           add(Z(neglit(1(#))),
                                                               de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
               = TRUE'
           on='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                         values,
                                                         begin,
                                                         end,
                                                         x_arr_2,
                                                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                         add(Z(1(#)), bucket_0),
                                                         add(Z(neglit(1(#))),
                                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';

macro onestep;

instantiate hide
    formula='\forall int b;
  (     leq(add(Z(1(#)), bucket_0), b)
      & lt(b, add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
      & javaMod(b, Z(2(#))) = Z(1(#))
   -> \forall int i;
        (     leq(javaAddInt(begin, int::select(heapAfter_sample_sort_recurse_on, x_arr_2, arr(b))),
                  i)
            & lt(i,
                 javaSubInt(javaAddInt(begin,
                                       int::select(heapAfter_sample_sort_recurse_on,
                                                   x_arr_2,
                                                   arr(javaAddInt(b, Z(1(#)))))),
                            Z(1(#))))
         ->   int::select(heapAfter_sample_sort_recurse_on, values, arr(i))
            = int::select(heapAfter_sample_sort_recurse_on, values, arr(javaAddInt(i, Z(1(#)))))))'
       with='b_0';
rule impLeft
    formula='leq(add(Z(1(#)), bucket_0), b_0)
   & lt(b_0, add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
   & javaMod(b_0, Z(2(#))) = Z(1(#))
-> \forall int i;
     (     leq(javaAddInt(begin, int::select(heapAfter_sample_sort_recurse_on, x_arr_2, arr(b_0))),
               i)
         & lt(i,
              javaSubInt(javaAddInt(begin,
                                    int::select(heapAfter_sample_sort_recurse_on,
                                                x_arr_2,
                                                arr(javaAddInt(b_0, Z(1(#)))))),
                         Z(1(#))))
      ->   int::select(heapAfter_sample_sort_recurse_on, values, arr(i))
         = int::select(heapAfter_sample_sort_recurse_on, values, arr(javaAddInt(i, Z(1(#))))))';
auto;

rule Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions
      formula='de.wiesler.Functions::isSortedSlice(heapAfter_sample_sort_recurse_on,
                                                     values,
                                                     javaAddInt(begin,
                                                                int::select(heapAfter_sample_sort_recurse_on,
                                                                            x_arr_2,
                                                                            arr(b_0))),
                                                     javaAddInt(begin,
                                                                int::select(heapAfter_sample_sort_recurse_on,
                                                                            x_arr_2,
                                                                            arr(javaAddInt(b_0, Z(1(#)))))))
               = TRUE'
           on='de.wiesler.Functions::isSortedSlice(heapAfter_sample_sort_recurse_on,
                                                   values,
                                                   javaAddInt(begin,
                                                              int::select(heapAfter_sample_sort_recurse_on,
                                                                          x_arr_2,
                                                                          arr(b_0))),
                                                   javaAddInt(begin,
                                                              int::select(heapAfter_sample_sort_recurse_on,
                                                                          x_arr_2,
                                                                          arr(javaAddInt(b_0, Z(1(#)))))))';
macro onestep;

rule allRight;
instantiate hide
    formula='\forall int i;
               (     leq(javaAddInt(begin, int::select(heapAfter_sample_sort_recurse_on, x_arr_2, arr(b_0))), i)
                   & lt(i,
                        javaSubInt(javaAddInt(begin,
                                              int::select(heapAfter_sample_sort_recurse_on,
                                                          x_arr_2,
                                                          arr(javaAddInt(b_0, Z(1(#)))))),
                                   Z(1(#))))
                ->   int::select(heapAfter_sample_sort_recurse_on, values, arr(i))
                   = int::select(heapAfter_sample_sort_recurse_on, values, arr(javaAddInt(i, Z(1(#))))))'
       with='i_0';

select succedent formula='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                               values,
                                               begin,
                                               end,
                                               x_arr_2,
                                               de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                               \if (  lt(add(add(Z(1(#)), bucket_0),
                                                             \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                  = TRUE)
                                                                 \then (Z(1(#)))
                                                                 \else (Z(0(#)))),
                                                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                                                    | !  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                       = TRUE)
                                                   \then (add(add(Z(1(#)), bucket_0),
                                                              \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                   = TRUE)
                                                                  \then (Z(1(#)))
                                                                  \else (Z(0(#)))))
                                                   \else (add(Z(neglit(1(#))),
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)),
                                               de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
= TRUE';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';
macro onestep;
cut 'lt(add(add(Z(1(#)), bucket_0), Z(1(#))),
   de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
macro onestep;

rule Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                              values,
                                                              begin,
                                                              end,
                                                              x_arr_2,
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                              add(add(Z(1(#)), bucket_0), Z(1(#))),
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
               = TRUE'
           on='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            add(add(Z(1(#)), bucket_0), Z(1(#))),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';

rule Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                              values,
                                                              begin,
                                                              end,
                                                              x_arr_2,
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                              add(Z(1(#)), bucket_0),
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
               = TRUE'
           on='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            add(Z(1(#)), bucket_0),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
macro onestep;
macro onestep;

rule allRight;
instantiate hide
    formula='\forall int b_3;
               (     leq(add(Z(1(#)), bucket_0), b_3)
                   & lt(b_3, de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                ->   de.wiesler.Sorter::smallBucketIsSorted(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            int::select(heapAfter_sample_sort_recurse_on,
                                                                        x_arr_2,
                                                                        arr(b_3)),
                                                            int::select(heapAfter_sample_sort_recurse_on,
                                                                        x_arr_2,
                                                                        arr(javaAddInt(b_3, Z(1(#))))))
                   = TRUE)'
       with='b_0';

select succedent formula='jmod(add(add(Z(1(#)), bucket_0),
           \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
               \then (Z(1(#)))
               \else (Z(0(#)))),
       Z(2(#)))
= Z(0(#))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                            values,
                                            begin,
                                            end,
                                            x_arr_2,
                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                            add(Z(1(#)),
                                                add(add(Z(1(#)), bucket_0),
                                                    \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                         = TRUE)
                                                        \then (Z(1(#)))
                                                        \else (Z(0(#))))),
                                            add(Z(neglit(1(#))),
                                                de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
= TRUE';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';
macro onestep;
macro onestep;

rule Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                           values,
                                                           begin,
                                                           end,
                                                           x_arr_2,
                                                           de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                           add(Z(1(#)), add(add(Z(1(#)), bucket_0), Z(1(#)))),
                                                           add(Z(neglit(1(#))),
                                                               de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
               = TRUE'
           on='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                         values,
                                                         begin,
                                                         end,
                                                         x_arr_2,
                                                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                         add(Z(1(#)), add(add(Z(1(#)), bucket_0), Z(1(#)))),
                                                         add(Z(neglit(1(#))),
                                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';
macro onestep;
rule impLeft
    formula='de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE
             ->   de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            add(Z(1(#)), bucket_0),
                                                            add(Z(neglit(1(#))),
                                                                de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
                = TRUE';
auto;
rule Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                           values,
                                                           begin,
                                                           end,
                                                           x_arr_2,
                                                           de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                           add(Z(1(#)), bucket_0),
                                                           add(Z(neglit(1(#))),
                                                               de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
               = TRUE'
           on='de.wiesler.Sorter::equalityBucketsInRange(heapAfter_sample_sort_recurse_on,
                                                         values,
                                                         begin,
                                                         end,
                                                         x_arr_2,
                                                         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                         add(Z(1(#)), bucket_0),
                                                         add(Z(neglit(1(#))),
                                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';
macro onestep;

rule allRight;
instantiate hide
    formula='\forall int b;
  (     leq(add(Z(1(#)), bucket_0), b)
      & lt(b, add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
      & javaMod(b, Z(2(#))) = Z(1(#))
   -> \forall int i;
        (     leq(javaAddInt(begin, int::select(heapAfter_sample_sort_recurse_on, x_arr_2, arr(b))),
                  i)
            & lt(i,
                 javaSubInt(javaAddInt(begin,
                                       int::select(heapAfter_sample_sort_recurse_on,
                                                   x_arr_2,
                                                   arr(javaAddInt(b, Z(1(#)))))),
                            Z(1(#))))
         ->   int::select(heapAfter_sample_sort_recurse_on, values, arr(i))
            = int::select(heapAfter_sample_sort_recurse_on, values, arr(javaAddInt(i, Z(1(#)))))))'
       with='b_0';

rule impLeft
    formula='leq(add(Z(1(#)), bucket_0), b_0)
   & lt(b_0, add(Z(neglit(1(#))), de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))
   & javaMod(b_0, Z(2(#))) = Z(1(#))
-> \forall int i;
     (     leq(javaAddInt(begin, int::select(heapAfter_sample_sort_recurse_on, x_arr_2, arr(b_0))),
               i)
         & lt(i,
              javaSubInt(javaAddInt(begin,
                                    int::select(heapAfter_sample_sort_recurse_on,
                                                x_arr_2,
                                                arr(javaAddInt(b_0, Z(1(#)))))),
                         Z(1(#))))
      ->   int::select(heapAfter_sample_sort_recurse_on, values, arr(i))
         = int::select(heapAfter_sample_sort_recurse_on, values, arr(javaAddInt(i, Z(1(#))))))';
rule impRight;

select succedent formula='seqPerm(seqDef{int u;}(Z(0(#)),
                       length(values),
                       any::select(heapAfter_sample_sort_recurse_on, values, arr(u))),
        seqDef{int u;}(Z(0(#)), length(values), any::select(heap, values, arr(u))))';
rule seqPermTrans
    formula='seqPerm(seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(heapAfter_sample_sort_recurse_on, values, arr(u))),
                     seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(anon(heapAfter_partition,
                                                     union(allFields(storage),
                                                           arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                                                     anon_heap_LOOP<<anonHeapFunction>>),
                                                values,
                                                arr(u))))';
auto;

select succedent formula='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_sample_sort_recurse_on,
                                             values,
                                             begin,
                                             end,
                                             x_arr_2,
                                             de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                             Z(0(#)),
                                             \if (  lt(add(add(Z(1(#)), bucket_0),
                                                           \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                = TRUE)
                                                               \then (Z(1(#)))
                                                               \else (Z(0(#)))),
                                                       de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                                                  | !  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                     = TRUE)
                                                 \then (add(add(Z(1(#)), bucket_0),
                                                            \if (  de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
                                                                 = TRUE)
                                                                \then (Z(1(#)))
                                                                \else (Z(0(#)))))
                                                 \else (add(Z(neglit(1(#))),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)))
= TRUE';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='geq(add(add(Z(1(#)), bucket_0),
        \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
            \then (Z(1(#)))
            \else (Z(0(#)))),
    Z(0(#)))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='prec(add(mul(add(add(Z(1(#)), bucket_0),
                 \if (de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE)
                     \then (Z(1(#)))
                     \else (Z(0(#)))),
             Z(neglit(1(#)))),
         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>),
     add(mul(bucket_0, Z(neglit(1(#)))),
         de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>))';
cut 'de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE';

select succedent formula='{_values:=values
 || _begin:=begin
 || _end:=end
 || _storage:=storage
 || (heapBefore_sample_sort:=heap
 || _valuesBefore_sample_sort:=values)
 || bucket_starts:=x_arr_2
 || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
 || equal_buckets:=de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>>
 || heap_Before_BLOCK_0:=heapAfter_partition
 || exc#69_1:=null
 || (heapBefore_LOOP:=heapAfter_partition
 || (bucket:=bucket_0
 || heap:=anon(heapAfter_partition,
               union(allFields(storage), arrayRange(values, begin, add(Z(neglit(1(#))), end))),
               anon_heap_LOOP<<anonHeapFunction>>)
 || variant:=add(mul(bucket_0, Z(neglit(1(#)))),
                 de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)))
 || exc_1:=FALSE}
  {heapBefore_sample_sort_recurse_on:=heap}
    (  ((leq(Z(0(#)), bucket)
     & lt(bucket, num_buckets))<<SC>>
     & ((  de.wiesler.Functions::isValidBucketStarts(heap, bucket_starts, num_buckets) = TRUE
         & ((    de.wiesler.Sorter::allBucketsInRangeSorted(heap,
                                                            _values,
                                                            _begin,
                                                            _end,
                                                            bucket_starts,
                                                            num_buckets,
                                                            Z(0(#)),
                                                            bucket)
               = TRUE
             & ((    de.wiesler.Sorter::allBucketsPartitioned(heap,
                                                              _values,
                                                              _begin,
                                                              _end,
                                                              bucket_starts,
                                                              num_buckets)
                   = TRUE
                 & ((    de.wiesler.Sorter::smallBucketsInRangeSorted(heap,
                                                                      _values,
                                                                      _begin,
                                                                      _end,
                                                                      bucket_starts,
                                                                      num_buckets,
                                                                      bucket,
                                                                      num_buckets)
                       = TRUE
                     & ((  (   equal_buckets = TRUE
                            -> (  ((  javaMod(bucket, Z(2(#))) = Z(0(#))
                                    | bucket = javaSubInt(num_buckets, Z(1(#))))<<SC>>)
                                &   de.wiesler.Sorter::equalityBucketsInRange(heap,
                                                                              _values,
                                                                              _begin,
                                                                              _end,
                                                                              bucket_starts,
                                                                              num_buckets,
                                                                              javaAddInt(bucket,
                                                                                         Z(1(#))),
                                                                              javaSubInt(num_buckets,
                                                                                         Z(1(#))))
                                  = TRUE)<<SC>>)
                         & ((    de.wiesler.Sorter::notAllValuesInOneBucket(heap,
                                                                            bucket_starts,
                                                                            num_buckets,
                                                                            javaSubInt(_end, _begin))
                               = TRUE
                             & ((  !_values = null
                                 & ((!_storage = null & !bucket_starts = null)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>
     & (  wellFormed(heap)
        & ((_values = null | boolean::select(heap, _values, java.lang.Object::<created>) = TRUE)<<SC>>)
        & inInt(_begin)
        & inInt(_end)
        & ((_storage = null | boolean::select(heap, _storage, java.lang.Object::<created>) = TRUE)<<SC>>)
        & ((  bucket_starts = null
            | boolean::select(heap, bucket_starts, java.lang.Object::<created>) = TRUE)<<SC>>)
        & inInt(num_buckets)
        & inInt(bucket))
     & measuredByCheck(pair(javaSubInt(_end, _begin), Z(1(#)))))';
macro onestep;
macro autopilot-prep formula='leq(Z(0(#)), bucket_0)
& (    de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                      union(allFields(storage),
                                                            arrayRange(values,
                                                                       begin,
                                                                       add(Z(neglit(1(#))), end))),
                                                      anon_heap_LOOP<<anonHeapFunction>>),
                                                 x_arr_2,
                                                 de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
     = TRUE
   & (  (   de_wiesler_Sorter_PartitionResult_equal_buckets_0<<selectSK>> = TRUE
         ->   (  javaMod(bucket_0, Z(2(#))) = Z(0(#))
               |   bucket_0
                 = javaSubInt(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>, Z(1(#))))
            &   de.wiesler.Sorter::equalityBucketsInRange(anon(heapAfter_partition,
                                                               union(allFields(storage),
                                                                     arrayRange(values,
                                                                                begin,
                                                                                add(Z(neglit(1(#))),
                                                                                    end))),
                                                               anon_heap_LOOP<<anonHeapFunction>>),
                                                          values,
                                                          begin,
                                                          end,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          javaAddInt(bucket_0, Z(1(#))),
                                                          javaSubInt(de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                                     Z(1(#))))
              = TRUE)
      &   de.wiesler.Sorter::notAllValuesInOneBucket(anon(heapAfter_partition,
                                                          union(allFields(storage),
                                                                arrayRange(values,
                                                                           begin,
                                                                           add(Z(neglit(1(#))), end))),
                                                          anon_heap_LOOP<<anonHeapFunction>>),
                                                     x_arr_2,
                                                     de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                     javaSubInt(end, begin))
        = TRUE))
& (  wellFormed(anon(heapAfter_partition,
                     union(allFields(storage), arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                     anon_heap_LOOP<<anonHeapFunction>>))
   & (  boolean::select(heapAfter_partition, values, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, values, java.lang.Object::<created>)
        = TRUE)
   & (  boolean::select(heapAfter_partition, storage, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, storage, java.lang.Object::<created>)
        = TRUE)
   & (  boolean::select(heapAfter_partition, x_arr_2, java.lang.Object::<created>) = TRUE
      |   boolean::select(anon_heap_LOOP<<anonHeapFunction>>, x_arr_2, java.lang.Object::<created>)
        = TRUE))
& measuredByCheck(pair(javaSubInt(end, begin), Z(1(#))))';

select succedent formula='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                 union(allFields(storage),
                                                       arrayRange(values,
                                                                  begin,
                                                                  add(Z(neglit(1(#))), end))),
                                                 anon_heap_LOOP<<anonHeapFunction>>),
                                            x_arr_2,
                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
= TRUE';

rule observerDependency
    inst_termWithLargeHeap='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anon_heap_LOOP<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)'
    inst_termWithSmallHeap='de.wiesler.Functions::isValidBucketStarts(heapAfter_partition,
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)'
                   formula='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                             union(allFields(storage),
                                                                                   arrayRange(values,
                                                                                              begin,
                                                                                              add(Z(neglit(1(#))), end))),
                                                                             anon_heap_LOOP<<anonHeapFunction>>),
                                                                        x_arr_2,
                                                                        de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                            = TRUE'
                        on='de.wiesler.Functions::isValidBucketStarts(anon(heapAfter_partition,
                                                                           union(allFields(storage),
                                                                                 arrayRange(values,
                                                                                            begin,
                                                                                            add(Z(neglit(1(#))), end))),
                                                                           anon_heap_LOOP<<anonHeapFunction>>),
                                                                      x_arr_2,
                                                                      de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';

# use case

select succedent
    formula='{_values:=values
              || _begin:=begin
              || _end:=end
              || _storage:=storage
              || (heapBefore_sample_sort:=heap
              || _valuesBefore_sample_sort:=values)
              || bucket_starts:=x_arr_2
              || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
              || heap_Before_BLOCK_0:=heapAfter_partition
              || exc#69_1:=null
              || heap:=anon(heapAfter_partition,
                            union(allFields(storage), arrayRange(values, begin, add(Z(neglit(1(#))), end))),
                            anon_heap_LOOP<<anonHeapFunction>>)}
               seqPerm(seqDef{int u;}(Z(0(#)), length(_values), any::select(heap, _values, arr(u))),
                       seqDef{int u;}(Z(0(#)),
                                      length(_valuesBefore_sample_sort),
                                      any::select(heapBefore_sample_sort, _valuesBefore_sample_sort, arr(u))))';
rule seqPermTrans
    formula='seqPerm(seqDef{int u;}(Z(0(#)), length(values), int::select(heapAfter_partition, values, arr(u))),
                     seqDef{int u;}(Z(0(#)),
                                    length(values),
                                    any::select(memset(store(store(store(create(heap, x_arr_2),
                                                                         x_arr_2,
                                                                         java.lang.Object::<transient>,
                                                                         Z(0(#))),
                                                                   x_arr_2,
                                                                   java.lang.Object::<transactionConditionallyUpdated>,
                                                                   FALSE),
                                                             x_arr_2,
                                                             java.lang.Object::<initialized>,
                                                             FALSE),
                                                       arrayRange(x_arr_2, Z(0(#)), Z(8(2(1(#))))),
                                                       Z(0(#))),
                                                values,
                                                arr(u))))';
auto;

# end use case

# end equal_buckets false

select succedent formula='{_values:=values
 || _begin:=begin
 || _end:=end
 || _storage:=storage
 || (heapBefore_sample_sort:=heap
 || _valuesBefore_sample_sort:=values)
 || bucket_starts:=x_arr_2
 || heap:=heapAfter_partition
 || num_buckets:=de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>
 || heap_Before_BLOCK_0:=heapAfter_partition
 || exc#69_1:=null}
  (  de.wiesler.Sorter::allBucketsInRangeSorted(heap,
                                                _values,
                                                _begin,
                                                _end,
                                                bucket_starts,
                                                num_buckets,
                                                Z(0(#)),
                                                num_buckets)
   = TRUE)';
macro onestep;

rule Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_partition,
                                                              values,
                                                              begin,
                                                              end,
                                                              x_arr_2,
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                              Z(0(#)),
                                                              de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
               = TRUE'
           on='de.wiesler.Sorter::smallBucketsInRangeSorted(heapAfter_partition,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            Z(0(#)),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
macro onestep;
rule Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter
      formula='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_partition,
                                                            values,
                                                            begin,
                                                            end,
                                                            x_arr_2,
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                            Z(0(#)),
                                                            de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
               = TRUE'
           on='de.wiesler.Sorter::allBucketsInRangeSorted(heapAfter_partition,
                                                          values,
                                                          begin,
                                                          end,
                                                          x_arr_2,
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>,
                                                          Z(0(#)),
                                                          de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)';
macro onestep;
rule allRight;
instantiate hide
    formula='\forall int b;
               (   leq(Z(0(#)), b) & lt(b, de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
                ->   de.wiesler.Sorter::smallBucketIsSorted(heapAfter_partition,
                                                            values,
                                                            begin,
                                                            end,
                                                            int::select(heapAfter_partition, x_arr_2, arr(b)),
                                                            int::select(heapAfter_partition,
                                                                        x_arr_2,
                                                                        arr(javaAddInt(b, Z(1(#))))))
                   = TRUE)'
       with='b_0';

rule impLeft
    formula='leq(Z(0(#)), b_0) & lt(b_0, de_wiesler_Sorter_PartitionResult_num_buckets_0<<selectSK>>)
             ->   de.wiesler.Sorter::smallBucketIsSorted(heapAfter_partition,
                                                         values,
                                                         begin,
                                                         end,
                                                         int::select(heapAfter_partition, x_arr_2, arr(b_0)),
                                                         int::select(heapAfter_partition,
                                                                     x_arr_2,
                                                                     arr(javaAddInt(b_0, Z(1(#))))))
                = TRUE';
auto;

rule Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter
     formula='de.wiesler.Sorter::smallBucketIsSorted(heapAfter_partition,
                                                       values,
                                                       begin,
                                                       end,
                                                       int::select(heapAfter_partition, x_arr_2, arr(b_0)),
                                                       int::select(heapAfter_partition,
                                                                   x_arr_2,
                                                                   arr(javaAddInt(b_0, Z(1(#))))))
              = TRUE'
          on='de.wiesler.Sorter::smallBucketIsSorted(heapAfter_partition,
                                                     values,
                                                     begin,
                                                     end,
                                                     int::select(heapAfter_partition, x_arr_2, arr(b_0)),
                                                     int::select(heapAfter_partition,
                                                                 x_arr_2,
                                                                 arr(javaAddInt(b_0, Z(1(#))))))';
macro onestep;
rule impLeft
    formula='leq(javaSubInt(int::select(heapAfter_partition, x_arr_2, arr(javaAddInt(b_0, Z(1(#))))),
                               int::select(heapAfter_partition, x_arr_2, arr(b_0))),
                    javaMulInt(Z(2(#)), Z(2(3(#)))))
              | leq(javaSubInt(end, begin), Z(8(4(0(2(#))))))
             ->   de.wiesler.Functions::isSortedSlice(heapAfter_partition,
                                                      values,
                                                      javaAddInt(begin,
                                                                 int::select(heapAfter_partition,
                                                                             x_arr_2,
                                                                             arr(b_0))),
                                                      javaAddInt(begin,
                                                                 int::select(heapAfter_partition,
                                                                             x_arr_2,
                                                                             arr(javaAddInt(b_0, Z(1(#)))))))
                = TRUE';
auto;

tryclose;

"