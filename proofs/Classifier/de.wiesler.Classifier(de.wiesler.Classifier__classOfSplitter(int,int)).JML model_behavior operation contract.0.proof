\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 31 00:41:11 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Mar 31 00:41:11 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classOfSplitter(int,int)].JML model_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classOfSplitter(int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "23927")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre_0,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "Definition_axiom_for_classOfSplitter_in_de_wiesler_Tree" (formula "7") (term "0") (userinteraction))
 (builtin "One Step Simplification" (formula "7") (userinteraction))
(rule "translateJavaAddInt" (formula "7") (term "0") (userinteraction))
 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")) (userinteraction))
(rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "10") (term "1") (userinteraction))
(rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "10") (term "1") (inst "classify_sk=classify_sk_0") (inst "#p0=x_1") (inst "#self=c") (inst "#res=x") (ifseqformula "3") (userinteraction))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "1"))
(rule "true_left" (formula "5"))
(rule "translateJavaAddInt" (formula "9") (term "1,0"))
(rule "translateJavaMulInt" (formula "9") (term "0,1,0"))
(rule "eqSymm" (formula "6"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "9") (term "1,0"))
(rule "boxToDiamond" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_classify,savedHeapBefore_classify"))
 (builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "index_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "7") (term "1") (inst "#v0=t"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "t"))
(rule "assignment_read_attribute_this_final" (formula "7"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_classify_0,result_21,exc_25") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
(branch "Post (classify)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimSub" (formula "10") (term "3,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "bucket"))
   (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "assignment_read_attribute_this_final" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "ifElseSplit" (formula "13"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "bucket_index"))
      (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "compound_division_1" (formula "14") (term "1") (inst "#v=x_5"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "assignmentDivisionInt" (formula "14"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaDivInt" (formula "14") (term "0,1,0"))
         (rule "assignmentSubtractionInt" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "equal_to_splitter"))
         (rule "compound_assignment_2" (formula "14") (term "1") (inst "#v=x_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_6"))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "14") (term "1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
         (rule "eval_order_array_access4" (formula "14") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
         (rule "assignment_read_attribute_this_final" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "assignment_array2" (formula "14"))
         (branch "Normal Execution (x_arr != null)"
             (builtin "One Step Simplification" (formula "14"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1,2,0") (ifseqformula "2") (ifseqformula "3"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,0") (ifseqformula "2") (ifseqformula "3"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_7"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "a"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "b"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_8"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_8"))
            (rule "less_than_comparison_simple" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "compound_assignment_1_new" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "compound_subtraction_2" (formula "16") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
            (rule "compound_addition_2" (formula "16") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
            (rule "assignmentMultiplicationInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaMulInt" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_11"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_12"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_12"))
            (rule "condition_simple" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "ifthenelse_negated" (formula "16") (term "0,1,0"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "assignmentAdditionInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
            (rule "assignment_read_attribute_this_final" (formula "16"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "assignmentSubtractionInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "emptyModality" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "notRight" (formula "16"))
            (rule "polySimp_homoEq" (formula "18"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
            (rule "greater_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "hide_left" (formula "16") (userinteraction))
            (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "15") (term "0"))
            (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,1,0,0,0,0"))
            (rule "add_literals" (formula "15") (term "1,1,0,1,0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,0,0"))
            (rule "times_zero_2" (formula "15") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0"))
            (rule "replace_known_left" (formula "15") (term "1,0,0,0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0"))
            (rule "replace_known_left" (formula "15") (term "0,0,0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0"))
            (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0,0"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "13"))
            (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "24")))
            (rule "true_left" (formula "21"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "eqSymm" (formula "10"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "11"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
            (rule "polySimp_homoEq" (formula "7"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_sepPosMonomial" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq0" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,0,0"))
            (rule "times_zero_1" (formula "17") (term "0,0"))
            (rule "add_zero_left" (formula "17") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1,3,0") (ifseqformula "7"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,3,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,3,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,3,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "3,0"))
            (rule "polySimp_pullOutFactor1" (formula "21") (term "0,3,0"))
            (rule "add_literals" (formula "21") (term "1,0,3,0"))
            (rule "times_zero_1" (formula "21") (term "0,3,0"))
            (rule "add_zero_left" (formula "21") (term "3,0"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "7"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "polySimp_sepPosMonomial" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0"))
            (rule "applyEq" (formula "1") (term "0,0,1,0,2,0,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "10"))
            (rule "polySimp_addAssoc" (formula "1") (term "1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1"))
            (rule "polySimp_rightDist" (formula "19") (term "1"))
            (rule "mul_literals" (formula "19") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1"))
            (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=add(Z(neglit(4(6(#)))), result_21)") (inst "elimGcdLeftDiv=splitter") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), result_21)") (inst "elimGcdLeftDiv=splitter") (inst "elimGcd=Z(2(#))"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "neg_literal" (formula "8") (term "0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "19"))
            (rule "greater_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "polySimp_elimOne" (formula "9") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
            (rule "mul_literals" (formula "18") (term "0,0"))
            (rule "add_zero_left" (formula "18") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
            (rule "mul_literals" (formula "18") (term "1"))
            (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "20"))
            (rule "greater_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "mul_literals" (formula "18") (term "1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,0"))
            (rule "add_zero_left" (formula "18") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
            (rule "mul_literals" (formula "18") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "applyEq" (formula "20") (term "1") (ifseqformula "7"))
            (rule "applyEq" (formula "21") (term "3,0") (ifseqformula "17"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "12"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "7"))
            (rule "eqSymm" (formula "17"))
            (rule "applyEq" (formula "19") (term "1") (ifseqformula "7"))
            (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "12"))
            (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "21") (term "3,0") (ifseqformula "17"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1"))
            (rule "polySimp_rightDist" (formula "18") (term "1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
            (rule "mul_literals" (formula "18") (term "0,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1"))
            (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "18"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "17"))
            (rule "times_zero_1" (formula "23") (term "0,0"))
            (rule "add_zero_left" (formula "23") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23"))
            (rule "mul_literals" (formula "23") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "23"))
            (rule "leq_literals" (formula "25") (term "0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "27") (term "0"))
            (rule "replace_known_left" (formula "27") (term "1,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")) (ifInst ""  (formula "31")))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
            (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "0,1,0,0,0") (ifseqformula "7"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
            (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "27") (term "0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "translateJavaSubInt" (formula "27") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "27") (term "1,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "polySimp_elimSub" (formula "28") (term "1,0"))
            (rule "mul_literals" (formula "28") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "28") (term "1,0"))
            (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
            (rule "add_zero_right" (formula "27") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "28") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
            (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "7"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
            (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "28") (term "0,0"))
            (rule "applyEq" (formula "27") (term "1,1,0,1") (ifseqformula "11"))
            (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "28") (term "1"))
            (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1"))
            (rule "add_literals" (formula "28") (term "1,0,1"))
            (rule "times_zero_1" (formula "28") (term "0,1"))
            (rule "leq_literals" (formula "28") (term "1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
            (rule "mul_literals" (formula "27") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "20") (term "0"))
            (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "3")) (ifInst ""  (formula "21")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "21") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "translateJavaAddInt" (formula "21") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "jdiv_axiom" (formula "1") (term "0,1,0,2,0,0,0"))
            (rule "eqSymm" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,2,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_subsumption4" (formula "1") (term "0,0") (ifseqformula "18"))
            (rule "greater_literals" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "2") (term "0,1,0,2,0,0,0") (ifseqformula "1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,1,0,2,0,0,0") (inst "polyDivCoeff=mul(splitter, Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1,0,2,0,0,0"))
            (rule "equal_literals" (formula "2") (term "0,0,1,0,2,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,1,0,2,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,1,0,2,0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,0,2,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,1,0,2,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,0,2,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,2,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,2,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,2,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,2,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,2,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,2,0,0,0"))
            (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(splitter, Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
            (rule "equal_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=result_21"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,1"))
            (rule "equal_literals" (formula "1") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
            (rule "div_literals" (formula "1") (term "0,0,1"))
            (rule "add_zero_left" (formula "1") (term "0,1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,1,0,0,2,0,0,0") (inst "polyDivCoeff=result_21"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1,0,0,2,0,0,0"))
            (rule "equal_literals" (formula "2") (term "0,0,1,0,0,2,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0,0,2,0,0,0"))
            (rule "add_literals" (formula "2") (term "1,0,0,0,1,0,0,2,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,0,2,0,0,0"))
            (rule "div_literals" (formula "2") (term "0,0,1,0,0,2,0,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,1,0,0,2,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,2,0,0,0"))
            (rule "add_literals" (formula "2") (term "1,0,0,2,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "0,0,2,0,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,2,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_homoEq" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "close" (formula "35") (ifseqformula "2"))
         )
         (branch "Null Reference (x_arr = null)"
            (rule "false_right" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_homoEq" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "applyEq" (formula "12") (term "1,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "9") (term "1,2,0") (ifseqformula "1"))
            (rule "polySimp_sepNegMonomial" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "16"))
            (rule "notLeft" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "applyEq" (formula "13") (term "0,1,3,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "20") (term "3,0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "16"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
            (rule "mul_literals" (formula "17") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
            (rule "closeFalse" (formula "8"))
         )
         (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
            (rule "false_right" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "polySimp_homoEq" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
            (rule "polySimp_sepNegMonomial" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "notLeft" (formula "15"))
            (rule "notLeft" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "applyEq" (formula "20") (term "3,0") (ifseqformula "16"))
            (rule "applyEq" (formula "13") (term "0,1,3,0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "16"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
            (rule "mul_literals" (formula "17") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0"))
            (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0,0"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
            (rule "mul_literals" (formula "13") (term "1,0,2,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "eqSymm" (formula "10"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "21"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "11"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "11"))
            (rule "inEqSimp_commuteGeq" (formula "25"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
            (rule "polySimp_homoEq" (formula "7"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
            (rule "polySimp_sepPosMonomial" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_commuteLeq" (formula "25"))
            (rule "applyEq" (formula "18") (term "0,1,3,0") (ifseqformula "7"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,3,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,3,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,3,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "3,0"))
            (rule "polySimp_pullOutFactor1" (formula "18") (term "0,3,0"))
            (rule "add_literals" (formula "18") (term "1,0,3,0"))
            (rule "times_zero_1" (formula "18") (term "0,3,0"))
            (rule "add_zero_left" (formula "18") (term "3,0"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq0" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,0,0"))
            (rule "times_zero_1" (formula "16") (term "0,0"))
            (rule "add_zero_left" (formula "16") (term "0"))
            (rule "applyEq" (formula "26") (term "3,0") (ifseqformula "7"))
            (rule "applyEq" (formula "24") (term "1") (ifseqformula "7"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "7"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "23"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0"))
            (rule "applyEq" (formula "21") (term "1") (ifseqformula "7"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "polySimp_sepPosMonomial" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "10"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23"))
            (rule "polySimp_mulComm0" (formula "23") (term "1"))
            (rule "polySimp_rightDist" (formula "23") (term "1"))
            (rule "mul_literals" (formula "23") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "23"))
            (rule "greater_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(6(#)))), result_21)") (inst "elimGcdLeftDiv=splitter") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_exactShadow2" (formula "15") (ifseqformula "16"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "greater_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "times_zero_1" (formula "15") (term "0,0"))
            (rule "add_zero_left" (formula "15") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "22"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "16"))
            (rule "greater_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "23"))
            (rule "times_zero_1" (formula "16") (term "0,0"))
            (rule "add_zero_left" (formula "16") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "29")) (ifInst ""  (formula "20")))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "25"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "25"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "14"))
            (rule "applyEq" (formula "17") (term "3,0") (ifseqformula "14"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "7"))
            (rule "applyEq" (formula "16") (term "3,0") (ifseqformula "7"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1"))
            (rule "polySimp_rightDist" (formula "15") (term "1"))
            (rule "mul_literals" (formula "15") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "1,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1,0"))
            (rule "andLeft" (formula "18"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
            (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1"))
            (rule "add_literals" (formula "19") (term "1,0,1"))
            (rule "times_zero_1" (formula "19") (term "0,1"))
            (rule "leq_literals" (formula "19") (term "1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "11"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
            (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "12") (term "0"))
            (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "26") (term "0"))
            (rule "commute_or" (formula "1"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
            (rule "arrayLengthIsAShort" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "arrayLengthNotNegative" (formula "24") (term "0"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
            (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "arrayLengthIsAShort" (formula "25") (term "0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "arrayLengthNotNegative" (formula "25") (term "0"))
            (rule "commute_or" (formula "12") (term "0,0,1,0"))
            (rule "jdiv_axiom" (formula "1") (term "0,1,1,1"))
            (rule "eqSymm" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,2,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_subsumption4" (formula "1") (term "0,0") (ifseqformula "23"))
            (rule "greater_literals" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0,1,1,1") (ifseqformula "1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,1,1,1") (inst "polyDivCoeff=mul(splitter, Z(neglit(1(#))))"))
            (rule "equal_literals" (formula "2") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "1,1"))
            (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(splitter, Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
            (rule "equal_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=result_21"))
            (rule "equal_literals" (formula "1") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1"))
            (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
            (rule "div_literals" (formula "1") (term "0,0,1"))
            (rule "add_zero_left" (formula "1") (term "0,1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,1,0,1,1") (inst "polyDivCoeff=result_21"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1,0,1,1"))
            (rule "equal_literals" (formula "2") (term "0,0,1,0,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0,1,1"))
            (rule "add_literals" (formula "2") (term "1,0,0,0,1,0,1,1"))
            (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,1,1"))
            (rule "div_literals" (formula "2") (term "0,0,1,0,1,1"))
            (rule "add_zero_left" (formula "2") (term "0,1,0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1,1"))
            (rule "add_literals" (formula "2") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "2") (term "0,1,1"))
            (rule "add_zero_left" (formula "2") (term "1,1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,0") (inst "polyDivCoeff=mul(splitter, Z(neglit(1(#))))"))
            (rule "equal_literals" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0"))
            (rule "polyDiv_pullOut" (formula "2") (term "1,1,0") (inst "polyDivCoeff=result_21"))
            (rule "equal_literals" (formula "2") (term "0,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1,0"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1,1,0"))
            (rule "add_literals" (formula "2") (term "1,0,0,1,1,0"))
            (rule "times_zero_1" (formula "2") (term "0,0,1,1,0"))
            (rule "div_literals" (formula "2") (term "0,1,1,0"))
            (rule "add_zero_left" (formula "2") (term "1,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "2") (term "1,0"))
            (rule "add_literals" (formula "2") (term "1,1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,1,0"))
            (rule "add_zero_right" (formula "2") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "2"))
            (rule "polySimp_rightDist" (formula "27") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1"))
            (rule "polySimp_elimOne" (formula "27") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "27"))
            (rule "andLeft" (formula "18"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
            (rule "add_literals" (formula "18") (term "1,1,0"))
            (rule "times_zero_1" (formula "18") (term "1,0"))
            (rule "add_zero_right" (formula "18") (term "0"))
            (rule "leq_literals" (formula "18"))
            (rule "closeFalse" (formula "18"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "14"))
         (rule "equal_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "assignmentSubtractionInt" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
      (rule "blockEmpty" (formula "14") (term "1"))
      (rule "methodCallReturn" (formula "14") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "emptyModality" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "polySimp_homoEq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "polySimp_sepPosMonomial" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "inEqSimp_exactShadow1" (formula "10") (ifseqformula "9"))
      (rule "greater_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0"))
      (rule "mul_literals" (formula "10") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "mul_literals" (formula "10") (term "1"))
      (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1,0"))
      (rule "andLeft" (formula "12"))
      (rule "polySimp_elimSub" (formula "13") (term "1,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "12") (term "0,2,0,1"))
      (rule "mul_literals" (formula "12") (term "1,0,2,0,1"))
      (rule "polySimp_addComm0" (formula "13") (term "1,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,2,0,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0,2,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
      (rule "add_zero_right" (formula "12") (term "0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
      (rule "polySimp_pullOutFactor3b" (formula "13") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
      (rule "mul_literals" (formula "12") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
      (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "15"))
      (rule "notLeft" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
      (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
      (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "12") (term "0,1,0,2,0,1") (ifseqformula "16"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
      (rule "applyEq" (formula "13") (term "0,1,0,2,0,1") (ifseqformula "16"))
      (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "20") (term "3,0") (ifseqformula "16"))
      (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "16"))
      (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "9"))
      (rule "mul_literals" (formula "17") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "mul_literals" (formula "17") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "17"))
      (rule "leq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "inEqSimp_exactShadow1" (formula "10") (ifseqformula "9"))
      (rule "greater_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0"))
      (rule "mul_literals" (formula "10") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "mul_literals" (formula "10") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "17"))
      (rule "leq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "24")))
      (rule "translateJavaSubInt" (formula "7") (term "0,2,0,1,0"))
      (rule "translateJavaSubInt" (formula "7") (term "0,2,1,1,0"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "8"))
      (rule "notLeft" (formula "7"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "9"))
      (rule "polySimp_elimSub" (formula "12") (term "0,2,1"))
      (rule "mul_literals" (formula "12") (term "1,0,2,1"))
      (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
      (rule "mul_literals" (formula "12") (term "1,0,2,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "21"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0"))
      (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "18") (term "1,0,1") (ifseqformula "10"))
      (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "10"))
      (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "10"))
      (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "21"))
      (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "21"))
      (rule "eqSymm" (formula "12"))
      (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "10"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0"))
      (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "10"))
      (rule "inEqSimp_commuteGeq" (formula "25"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "24") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "17") (term "0,1,0,2,0,1") (ifseqformula "9"))
      (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "18") (term "0,1,0,2,0,1") (ifseqformula "9"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "26") (term "3,0") (ifseqformula "9"))
      (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "6"))
      (rule "polySimp_homoEq" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0"))
      (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "21"))
      (rule "eqSymm" (formula "12"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "0"))
      (rule "polySimp_rightDist" (formula "16") (term "0"))
      (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
      (rule "add_literals" (formula "16") (term "1,1,0"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "9"))
      (rule "applyEq" (formula "26") (term "3,0") (ifseqformula "1"))
      (rule "applyEq" (formula "17") (term "0,1,0,2,0,1") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,2,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,2,0,1"))
      (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,2,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,2,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,2,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,1,0,2,0,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,2,0,1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0,2,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,2,0,1"))
      (rule "add_literals" (formula "17") (term "1,1,0,2,0,1"))
      (rule "times_zero_1" (formula "17") (term "1,0,2,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,2,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,1"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
      (rule "add_literals" (formula "15") (term "1,1,0"))
      (rule "times_zero_1" (formula "15") (term "1,0"))
      (rule "add_zero_right" (formula "15") (term "0"))
      (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "18") (term "0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,0"))
      (rule "applyEq" (formula "18") (term "0,1,0,2,0,1") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,2,0,1"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,2,0,1"))
      (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,2,0,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,2,0,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,2,0,1"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1,0,2,0,1"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,2,0,1"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0,2,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,2,0,1"))
      (rule "add_literals" (formula "18") (term "1,1,0,2,0,1"))
      (rule "times_zero_1" (formula "18") (term "1,0,2,0,1"))
      (rule "add_zero_right" (formula "18") (term "0,2,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
      (rule "add_literals" (formula "17") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0"))
      (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "9"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
      (rule "add_literals" (formula "14") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0"))
      (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "9"))
      (rule "polySimp_addComm0" (formula "6") (term "1"))
      (rule "applyEq" (formula "21") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
      (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "polySimp_elimOne" (formula "8") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "close" (formula "33") (ifseqformula "14"))
   )
)
(branch "Exceptional Post (classify)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (classify)"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "6"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0"))
   (rule "translateJavaMulInt" (formula "6") (term "1,1,1,0,0,0,0"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "8"))
   (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,1"))
   (rule "mul_literals" (formula "11") (term "1,0,2,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
   (rule "mul_literals" (formula "11") (term "1,0,2,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "9"))
   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "12"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "17"))
   (rule "inEqSimp_commuteLeq" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "15"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "applyEq" (formula "18") (term "3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
   (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "14"))
   (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
   (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
   (rule "inEqSimp_commuteGeq" (formula "17"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
   (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "17") (term "0") (ifseqformula "14"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
   (rule "mul_literals" (formula "15") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "19") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,2,1,1,0"))
   (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
   (rule "commute_or" (formula "10") (term "0,0,1,0"))
   (rule "ifthenelse_split" (formula "25") (term "0"))
   (branch "self.equal_buckets = TRUE TRUE"
      (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "polySimp_homoEq" (formula "26"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,0"))
      (rule "polySimp_sepNegMonomial" (formula "26"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0"))
      (rule "newSym_eq" (formula "9") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
      (rule "times_zero_1" (formula "9") (term "1,1"))
      (rule "add_zero_right" (formula "9") (term "1"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "10"))
      (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "12") (term "1,0,0,0,1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "applyEq" (formula "19") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "9"))
      (rule "polySimp_addComm0" (formula "6") (term "1"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "9"))
      (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "18"))
      (rule "mul_literals" (formula "7") (term "1,1,0"))
      (rule "greater_literals" (formula "7") (term "0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "leq_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
      (rule "neg_literal" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "7") (term "0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "qeq_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "arrayLengthIsAShort" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "arrayLengthNotNegative" (formula "18") (term "0"))
      (rule "all_pull_out3" (formula "11") (term "0"))
      (rule "shift_paren_or" (formula "11") (term "0,0"))
      (rule "shift_paren_or" (formula "11") (term "0,0,0"))
      (rule "arrayLengthNotNegative" (formula "16") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthIsAShort" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
      (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,1,0,0,0,0"))
      (rule "leq_literals" (formula "11") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
      (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "13"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "18"))
      (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "commute_or" (formula "11") (term "0,0"))
      (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(2(#))), l_0)"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,1"))
      (rule "add_literals" (formula "22") (term "0,0,2,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
      (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "22") (term "0,0,1,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1,0"))
      (rule "add_literals" (formula "22") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "22") (term "0,1,0"))
      (rule "leq_literals" (formula "22") (term "1,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
      (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1"))
      (rule "add_literals" (formula "22") (term "1,0,1"))
      (rule "times_zero_1" (formula "22") (term "0,1"))
      (rule "qeq_literals" (formula "22") (term "1"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,1,0"))
      (rule "leq_literals" (formula "11") (term "1,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0"))
      (rule "qeq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,0"))
      (rule "times_zero_1" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "0") (ifseqformula "2") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "self.equal_buckets = TRUE FALSE"
      (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "applyEq" (formula "17") (term "1") (ifseqformula "8"))
      (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "1,0,0,0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "8"))
      (rule "applyEq" (formula "14") (term "1") (ifseqformula "8"))
      (rule "arrayLengthIsAShort" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "0"))
      (rule "all_pull_out3" (formula "10") (term "0"))
      (rule "shift_paren_or" (formula "10") (term "0,0"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
      (rule "arrayLengthNotNegative" (formula "15") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "arrayLengthIsAShort" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
      (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0,0,0,0"))
      (rule "leq_literals" (formula "10") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "12"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "6"))
      (rule "qeq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "10") (term "0,0"))
      (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,2,0,1"))
      (rule "add_literals" (formula "20") (term "0,0,2,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
      (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0"))
      (rule "add_literals" (formula "20") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "20") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "20") (term "0,1,0"))
      (rule "leq_literals" (formula "20") (term "1,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "12"))
      (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
      (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1"))
      (rule "add_literals" (formula "20") (term "1,0,1"))
      (rule "times_zero_1" (formula "20") (term "0,1"))
      (rule "qeq_literals" (formula "20") (term "1"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "true_left" (formula "20"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0"))
      (rule "leq_literals" (formula "10") (term "1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "qeq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq1" (formula "10"))
      (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,0"))
      (rule "times_zero_1" (formula "10") (term "0"))
      (rule "leq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0,0") (ifseqformula "1") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null reference (t = null)"
    (builtin "One Step Simplification" (formula "7"))
   (rule "notRight" (formula "7"))
   (rule "applyEq" (formula "6") (term "0,1,2,0") (ifseqformula "1"))
   (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "1"))
   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "7"))
)
)
}
