\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 08 13:50:50 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Tue Mar 08 13:50:50 CET 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasCount([I,int,int)].JML model_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasCount([I,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "88988")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")) (userinteraction))
(rule "allRight" (formula "16") (inst "sk=element_0") (userinteraction))
(rule "auto_int_induction_geqZero" (formula "16") (inst "sk=bucket_0") (userinteraction))
(branch "Base Case"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "bsum_lower_equals_upper" (formula "14") (term "0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,0"))
   (rule "translateJavaCastInt" (formula "14") (term "1,1"))
   (rule "leq_literals" (formula "14") (term "0,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "impRight" (formula "14"))
   (rule "eqSymm" (formula "10"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "polySimp_elimSub" (formula "10") (term "0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,3,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "12") (inst "b=b"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaCastInt" (formula "12") (term "0,0,1,0"))
   (rule "translateJavaAddInt" (formula "12") (term "1,1,0,0"))
   (rule "translateJavaMulInt" (formula "12") (term "0,1,1,0,0,0,0"))
   (rule "translateJavaMulInt" (formula "12") (term "1,0,1,0,0,0,0"))
   (rule "translateJavaCastInt" (formula "12") (term "1,1,0,1,0,0,0"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1"))
   (rule "polySimp_mulComm0" (formula "13") (term "0"))
   (rule "polySimp_addComm0" (formula "17") (term "1"))
   (rule "castedGetAny" (formula "18") (term "0"))
   (rule "castedGetAny" (formula "15") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "15"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "inEqSimp_subsumption6" (formula "12") (ifseqformula "1"))
   (rule "mul_literals" (formula "12") (term "1,1,0"))
   (rule "greater_literals" (formula "12") (term "0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "leq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "12"))
   (rule "mul_literals" (formula "1") (term "1,0,0,1"))
   (rule "greater_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "24") (term "1,1,3,0"))
   (rule "translateJavaSubInt" (formula "1") (term "2,0,1,0,1,1,1,1"))
   (rule "translateJavaAddInt" (formula "1") (term "2,1,1,0,1,1,1"))
   (rule "less_literals" (formula "1") (term "0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "23")))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_zero_left" (formula "1") (term "2,1,1,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
   (rule "replace_known_left" (formula "1") (term "0,0,1,1,1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "3"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "25") (term "1,1,3,0"))
   (rule "translateJavaCastInt" (formula "25") (term "0,1,1,3,0"))
   (rule "castedGetAny" (formula "25") (term "0,1,1,3,0"))
   (rule "applyEq" (formula "25") (term "0,1,1,3,0") (ifseqformula "19"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
   (rule "translateJavaCastInt" (formula "12") (term "0,0"))
   (rule "castedGetAny" (formula "12") (term "0,0"))
   (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1"))
   (rule "translateJavaMod" (formula "12") (term "0,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1,1"))
   (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1,1"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,1,1"))
   (rule "add_literals" (formula "12") (term "0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1,1"))
   (rule "jmod_axiom" (formula "12") (term "0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "12") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,0"))
   (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1"))
   (rule "polySimp_rightDist" (formula "14") (term "1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "0,1"))
   (rule "mul_literals" (formula "14") (term "0,0,1"))
   (rule "newSym_eq" (formula "12") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(add(mul(begin,
                                             Z(neglit(1(#)))),
                                         end)),
    Z(0(#)))") (inst "l=l_0"))
   (rule "times_zero_1" (formula "12") (term "1,1"))
   (rule "add_zero_right" (formula "12") (term "1"))
   (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
   (rule "eqSymm" (formula "13"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
   (rule "inEqSimp_homoInEq0" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0"))
   (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
   (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
   (rule "inEqSimp_homoInEq1" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,0"))
   (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "polySimp_mulComm0" (formula "15") (term "1"))
   (rule "polySimp_rightDist" (formula "15") (term "1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1"))
   (rule "polySimp_rightDist" (formula "14") (term "1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "14"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "10") (term "0"))
   (rule "add_literals" (formula "10") (term "1,1,0"))
   (rule "times_zero_1" (formula "10") (term "1,0"))
   (rule "add_zero_right" (formula "10") (term "0"))
   (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
   (rule "leq_literals" (formula "10") (term "0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "30") (term "1,0,1,3,0"))
   (rule "translateJavaCastInt" (formula "30") (term "0,1,0,1,3,0"))
   (rule "castedGetAny" (formula "30") (term "0,1,0,1,3,0"))
   (rule "inEqSimp_commuteGeq" (formula "30") (term "0,1,3,0"))
   (rule "applyEq" (formula "30") (term "0,0,0,1,3,0") (ifseqformula "24"))
   (rule "inEqSimp_commuteLeq" (formula "30") (term "0,1,3,0"))
   (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "18") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "translateJavaAddInt" (formula "18") (term "2,2,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "2,2,0,1,1,0"))
   (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "j=j") (inst "i=i"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "translateJavaCastInt" (formula "25") (term "1,1,0,1,0"))
   (rule "translateJavaCastInt" (formula "25") (term "0,1,0,1,0"))
   (rule "castedGetAny" (formula "25") (term "1,1,0,1,0"))
   (rule "castedGetAny" (formula "25") (term "0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "23"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "25") (term "0"))
   (rule "nnf_notAnd" (formula "25") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "22") (term "0"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "translateJavaMod" (formula "22") (term "0"))
   (rule "jmod_axiom" (formula "22") (term "0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
   (rule "polySimp_sepNegMonomial" (formula "22"))
   (rule "polySimp_mulLiterals" (formula "22") (term "0"))
   (rule "newSym_eq" (formula "22") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_1"))
   (rule "times_zero_1" (formula "22") (term "1,1"))
   (rule "add_zero_right" (formula "22") (term "1"))
   (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "22"))
   (rule "eqSymm" (formula "23"))
   (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "23"))
   (rule "applyEq" (formula "18") (term "3,0,1,1,0") (ifseqformula "23"))
   (rule "applyEq" (formula "31") (term "2,1,3,0") (ifseqformula "23"))
   (rule "applyEq" (formula "21") (term "1") (ifseqformula "23"))
   (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
   (rule "applyEq" (formula "31") (term "0,0,1,3,0") (ifseqformula "23"))
   (rule "inEqSimp_commuteGeq" (formula "31") (term "0,1,3,0"))
   (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
   (rule "leq_literals" (formula "20") (term "0,0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
   (rule "add_literals" (formula "20") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0"))
   (rule "leq_literals" (formula "20") (term "0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0"))
   (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
   (rule "Definition_axiom_for_isValidBucketPointer_in_de_wiesler_BucketPointers" (formula "27") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,0,0,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,2,0,1,0,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "27") (term "2,1,1,1,0,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,2,0,1,1,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,2,0,0,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "27") (term "2,1,1,0,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "27") (term "0,2,0,0,1,1,0"))
   (rule "translateJavaAddInt" (formula "27") (term "0,2,1,0,1,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "27") (term "0,2,0,1,1,0,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,2,1,0,1,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,0,2,0,0,1,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,0,2,1,0,1,0,0,0,1,0"))
   (rule "translateJavaMulInt" (formula "27") (term "0,0,2,0,1,1,0,0,0,1,0"))
   (rule "eqSymm" (formula "27") (term "0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,2,1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,2,0,1,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,2,0,1,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,2,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,0,2,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,0,2,1,0,1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,0,2,0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "0,2,0,0,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "27") (term "2,1,1,1,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "27") (term "2,1,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "27") (term "0,2,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,1,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,0,0,1,0"))
   (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "1") (term "1,1,1,1") (inst "b=b"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
   (rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,1,1,1,1"))
   (rule "translateJavaCastInt" (formula "1") (term "1,1,0,1,0,0,0,1,1,1,1"))
   (rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,1,1,1,1"))
   (rule "translateJavaMulInt" (formula "1") (term "1,0,0,0,0,0,1,1,1,1"))
   (rule "translateJavaMulInt" (formula "1") (term "0,1,0,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,1,1,1,1"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,1,1,1,1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,1,1,1,1"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,1,1,1,1") (ifseqformula "24"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "castedGetAny" (formula "1") (term "1,1,0,1,0,0,1,1,1,1"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,0,1,1,1,1"))
   (rule "replace_known_left" (formula "1") (term "0,1,0,1,1,1,1") (ifseqformula "25"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,0,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0,0,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1,1"))
   (rule "applyEq" (formula "1") (term "0,0,0,1,0,0,1,1,1,1") (ifseqformula "23"))
   (rule "applyEq" (formula "1") (term "1,1,0,1,0,0,1,1,1,1") (ifseqformula "23"))
   (rule "replace_known_left" (formula "1") (term "1,0,1,0,0,1,1,1,1") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,0,1,1,0,0,1,1,1,1") (ifseqformula "23"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1,1,1,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,1,1,1,1"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,1,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,1,1,1,1"))
   (rule "inEqSimp_subsumption6" (formula "1") (term "0,1,0,0,1,1,1,1") (ifseqformula "20"))
   (rule "greater_literals" (formula "1") (term "0,0,0,1,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,1,1,1,1"))
   (rule "leq_literals" (formula "1") (term "0,0,1,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption6" (formula "1") (term "0,0,0,1,1,1,1") (ifseqformula "3"))
   (rule "greater_literals" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,1,1,1,1"))
   (rule "leq_literals" (formula "1") (term "0,0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "31") (term "1,1,3,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
   (rule "translateJavaMod" (formula "1") (term "0,0,1"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "polySimp_elimSub" (formula "3") (term "0"))
   (rule "times_zero_2" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1,0,0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "jmod_axiom" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
   (rule "polySimp_sepNegMonomial" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1"))
   (rule "newSym_eq" (formula "1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(Z(0(#))), Z(0(#)))") (inst "l=l_2"))
   (rule "times_zero_1" (formula "1") (term "1,1"))
   (rule "add_zero_right" (formula "1") (term "1"))
   (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
   (rule "eqSymm" (formula "2"))
   (rule "applyEqRigid" (formula "35") (term "1,1,3,0") (ifseqformula "2"))
   (rule "applyEq" (formula "35") (term "0,0,1,3,0") (ifseqformula "2"))
   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,3,0"))
   (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
   (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
   (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "leq_literals" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
   (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "qeq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "leq_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0"))
   (rule "leq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elimGcdGeq" (formula "35") (term "0,1,3,0") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcdRightDiv=l_2"))
   (rule "mul_literals" (formula "35") (term "0,0,0,0,0,1,0,0,1,3,0"))
   (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,0,0,1,3,0"))
   (rule "sub_literals" (formula "35") (term "0,0,0,0,0,0,0,0,1,3,0"))
   (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,1,3,0"))
   (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,1,3,0"))
   (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,0,0,1,3,0"))
   (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,1,3,0"))
   (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,3,0"))
   (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,3,0"))
   (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1,0,0,1,3,0"))
   (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,1,3,0"))
   (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,1,3,0"))
   (rule "add_zero_right" (formula "35") (term "0,1,0,0,1,3,0"))
   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,3,0"))
   (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,0,0,1,3,0"))
   (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,1,3,0"))
   (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,3,0"))
   (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,3,0"))
   (rule "qeq_literals" (formula "35") (term "0,0,0,1,3,0"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "polySimp_mulComm0" (formula "35") (term "0,0,0,0,1,3,0"))
   (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,0,1,3,0"))
   (rule "add_literals" (formula "35") (term "1,0,0,0,1,3,0"))
   (rule "times_zero_1" (formula "35") (term "0,0,0,1,3,0"))
   (rule "leq_literals" (formula "35") (term "0,0,1,3,0"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
   (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "3"))
   (rule "times_zero_2" (formula "1") (term "0,0"))
   (rule "jdiv_axiom_inline" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "div_literals" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
   (rule "leq_literals" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEqRigid" (formula "33") (term "0,1,1,3,0") (ifseqformula "2"))
   (rule "times_zero_2" (formula "33") (term "1,1,3,0"))
   (rule "applyEqRigid" (formula "33") (term "1,0,1,3,0") (ifseqformula "2"))
   (rule "replace_known_left" (formula "33") (term "0,1,3,0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "add_zero_right" (formula "33") (term "3,0"))
   (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "2"))
   (rule "times_zero_2" (formula "1") (term "1"))
   (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "19") (term "0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaSubInt" (formula "19") (term "0,1,1,1"))
   (rule "translateJavaMod" (formula "19") (term "0,0,1"))
   (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1"))
   (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1,1"))
   (rule "mul_literals" (formula "19") (term "1,0,0,1,1,1"))
   (rule "add_literals" (formula "19") (term "0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,1,1,1"))
   (rule "applyEq" (formula "19") (term "0,0,1,1") (ifseqformula "20"))
   (rule "inEqSimp_commuteGeq" (formula "19") (term "0,1,1"))
   (rule "applyEq" (formula "19") (term "1,0,1,1,1") (ifseqformula "20"))
   (rule "polySimp_addComm1" (formula "19") (term "0,1,1,1"))
   (rule "applyEq" (formula "19") (term "0,0,0,1") (ifseqformula "20"))
   (rule "jmod_axiom" (formula "19") (term "0,0,1"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,1"))
   (rule "applyEq" (formula "19") (term "0,1,0,0,1") (ifseqformula "15"))
   (rule "polySimp_pullOutFactor0" (formula "19") (term "0,0,1"))
   (rule "add_literals" (formula "19") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "19") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,1"))
   (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
   (rule "translateJavaSubInt" (formula "20") (term "0,0"))
   (rule "translateJavaAddInt" (formula "20") (term "0,0,0"))
   (rule "neg_literal" (formula "20") (term "1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0"))
   (rule "polySimp_addLiterals" (formula "20") (term "0,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,0"))
   (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "translateJavaSubInt" (formula "16") (term "0,0"))
   (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
   (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
   (rule "neg_literal" (formula "16") (term "1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0"))
   (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "0,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "0,1,1,1,1,1"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "21") (term "0,0,1,1,0"))
   (rule "translateJavaCastInt" (formula "21") (term "0,0,0,1,1,0"))
   (rule "castedGetAny" (formula "21") (term "0,0,0,1,1,0"))
   (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "21") (term "0,0,1,0"))
   (rule "translateJavaSubInt" (formula "21") (term "0,0,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
   (rule "polySimp_sepPosMonomial" (formula "21") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,0,1,0"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "21") (term "1,0,1,1,0"))
   (rule "translateJavaMulInt" (formula "21") (term "0,2,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "0,2,1,0,1,1,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "21") (term "2,0,1,1,0"))
   (rule "translateJavaCastInt" (formula "21") (term "0,2,0,1,1,0"))
   (rule "castedGetAny" (formula "21") (term "0,2,0,1,1,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "30") (term "1,0,1,0,0,1,0"))
   (rule "translateJavaCastInt" (formula "30") (term "0,1,0,1,0,0,1,0"))
   (rule "eqSymm" (formula "30") (term "0,1,0,0,1,0"))
   (rule "castedGetAny" (formula "30") (term "0,0,0,1,0,0,1,0"))
   (rule "eqSymm" (formula "30") (term "0,1,0,0,1,0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "30") (term "0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "translateJavaMod" (formula "30") (term "0,1,0,1,0"))
   (rule "jmod_axiom" (formula "30") (term "0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,1,0"))
   (rule "polySimp_sepNegMonomial" (formula "30") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,1,0"))
   (rule "arrayLengthNotNegative" (formula "14") (term "0"))
   (rule "arrayLengthIsAShort" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,1,1,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,1,1,1,1"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,1,1,1,1"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,1,1,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,1,1,1,1"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1,1,1,1,1"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,1,1,1,1"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,1,1,1,1"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,1,1,1,1"))
   (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,1,1,1,1"))
   (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,1,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,1,1,1,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,1,1,1,1"))
   (rule "lenNonNegative" (formula "28") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "28"))
   (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
   (rule "inEqSimp_sepPosMonomial1" (formula "28"))
   (rule "mul_literals" (formula "28") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "5"))
   (rule "leq_literals" (formula "28") (term "0"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "true_left" (formula "28"))
   (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "3") (term "2,1,1,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "3") (term "2,0,1,0,1,1,1,1"))
   (rule "less_literals" (formula "3") (term "0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "34")))
   (rule "leq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "add_zero_left" (formula "3") (term "2,1,1,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
   (rule "replace_known_left" (formula "3") (term "0,0,1,1,1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "6"))
   (rule "leq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "arrayLengthNotNegative" (formula "24") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "5"))
   (rule "leq_literals" (formula "24") (term "0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "true_left" (formula "24"))
   (rule "arrayLengthIsAShort" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "true_left" (formula "24"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "translateJavaMod" (formula "4") (term "0,0,0,1,1,1,1"))
   (rule "jmod_axiom" (formula "4") (term "0,0,0,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,1,1,1,1"))
   (rule "applyEqRigid" (formula "4") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "27"))
   (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0,1,1,1,1"))
   (rule "add_literals" (formula "4") (term "1,0,0,0,1,1,1,1"))
   (rule "times_zero_1" (formula "4") (term "0,0,0,1,1,1,1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "commute_or" (formula "31") (term "0,0,1,0"))
   (rule "seqGetAlphaCast" (formula "30") (term "0"))
   (rule "castedGetAny" (formula "30") (term "0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "true_left" (formula "30"))
   (rule "seqGetAlphaCast" (formula "26") (term "0"))
   (rule "castedGetAny" (formula "26") (term "0"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "true_left" (formula "26"))
   (rule "jdiv_axiom" (formula "17") (term "0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,2,1"))
   (rule "eqSymm" (formula "17"))
   (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "18"))
   (rule "inEqSimp_subsumption6" (formula "17") (term "0,0") (ifseqformula "13"))
   (rule "times_zero_1" (formula "17") (term "1,1,0,0,0"))
   (rule "greater_literals" (formula "17") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "leq_literals" (formula "17") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "polyDiv_pullOut" (formula "17") (term "0") (inst "polyDivCoeff=l_0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,2,0"))
   (rule "equal_literals" (formula "17") (term "0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "polySimp_pullOutFactor0" (formula "17") (term "0,0,0"))
   (rule "add_literals" (formula "17") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "17") (term "0,0,0"))
   (rule "div_literals" (formula "17") (term "0,0"))
   (rule "add_zero_left" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0"))
   (rule "translateJavaSubInt" (formula "1") (term "0,0"))
   (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
   (rule "neg_literal" (formula "1") (term "1,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,0"))
   (rule "sub_literals" (formula "1") (term "0,0"))
   (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "36") (term "0") (inst "i=i"))
   (rule "bsum_lower_equals_upper" (formula "36") (term "0"))
    (builtin "One Step Simplification" (formula "36"))
   (rule "closeTrue" (formula "36"))
)
(branch "Step Case (positive)"
   (rule "impRight" (formula "16") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "impRight" (formula "18") (userinteraction))
   (rule "impLeft" (formula "3") (userinteraction))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "translateJavaSubInt" (formula "11") (term "0,0"))
      (rule "translateJavaAddInt" (formula "17") (term "3,0"))
      (rule "translateJavaCastInt" (formula "17") (term "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "18"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_elimSub" (formula "12") (term "0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "1"))
      (rule "polySimp_addComm0" (formula "2") (term "0"))
      (rule "polySimp_addComm0" (formula "18") (term "1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "2,1,1,3,1"))
      (rule "polySimp_addComm0" (formula "18") (term "2,0,0,1,3,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,1"))
      (rule "bsum_induction_upper_concrete" (formula "18") (term "0"))
      (rule "polySimp_homoEq" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_leqRight" (formula "15"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0"))
      (rule "replace_known_left" (formula "18") (term "0,0,0,0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,3,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "times_zero_2" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "polySimp_elimOne" (formula "18") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_literals" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "Case 2"
      (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "3") (term "0") (inst "i=i") (userinteraction))
      (rule "translateJavaAddInt" (formula "3") (term "1,0"))
      (rule "translateJavaCastInt" (formula "3") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "18") (term "0") (inst "i=i") (userinteraction))
      (rule "translateJavaAddInt" (formula "18") (term "1,0"))
      (rule "translateJavaCastInt" (formula "18") (term "1"))
      (rule "ifthenelse_split" (formula "3") (term "1,1,0") (userinteraction))
      (branch "self.bucketStart(bucket_0) <= self.first_empty_position TRUE"
         (rule "ifthenelse_split" (formula "19") (term "1,1,0") (userinteraction))
         (branch " self.bucketStart(bucket_0 + 1) <= self.first_empty_position TRUE"
            (rule "bsum_induction_upper" (formula "20") (term "1") (userinteraction))
            (rule "polySimp_elimSub" (formula "20") (term "5,1,1,1"))
            (rule "mul_literals" (formula "20") (term "1,5,1,1,1"))
            (rule "polySimp_addLiterals" (formula "20") (term "5,1,1,1"))
            (rule "add_zero_right" (formula "20") (term "5,1,1,1"))
            (rule "polySimp_addComm0" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,1"))
            (rule "polySimp_elimOneLeft0" (formula "20") (term "1,1,0,1"))
            (rule "polySimp_addComm1" (formula "20") (term "1,0,1"))
            (rule "add_literals" (formula "20") (term "0,1,0,1"))
            (rule "add_zero_left" (formula "20") (term "1,0,1"))
            (rule "pullOut" (formula "5") (term "1,0") (inst "sk=add_0") (userinteraction))
            (rule "bsum_split" (formula "21") (term "0") (inst "middle=add_0") (userinteraction))
            (rule "ifthenelse_split" (formula "21") (term "0") (userinteraction))
            (branch " begin <= add_0 & add_0 <= begin + self.bucketStart(bucket_0 + 1) TRUE"
               (rule "eqTermCut" (formula "22") (term "1,1") (inst "s=bsum{int i;}(add_0,
             add(begin,
                 de.wiesler.BucketPointers::bucketStart(heap,
                                                        self,
                                                        add(bucket_0,
                                                            Z(1(#))))),
             \\if (  int::select(heap, values, arr(i))
                  = element_0)
                 \\then (Z(1(#)))
                 \\else (Z(0(#))))") (userinteraction))
               (branch "Assume if (0 < bucket_0 + 1) then (self.elementsToReadOfBucketCountElement(values, begin, end, bucket_0, element_0)) else (0) = bsum{int i;}(add_0, begin + self.bucketStart(bucket_0 + 1), if (values[i] = element_0) then (1) else (0))"
                  (rule "true_left" (formula "13"))
                  (rule "translateJavaSubInt" (formula "17") (term "0,0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "5"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "19"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "polySimp_homoEq" (formula "9"))
                  (rule "polySimp_homoEq" (formula "24"))
                  (rule "polySimp_elimSub" (formula "19") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "2,1,1"))
                  (rule "polySimp_addComm0" (formula "5") (term "1"))
                  (rule "polySimp_addComm0" (formula "6") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "2,1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "times_zero_2" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "10"))
                  (rule "polySimp_addComm1" (formula "24") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0"))
                  (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "1,0"))
                  (rule "times_zero_1" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "closeTrue" (formula "24"))
               )
               (branch "Assume if (0 < bucket_0 + 1) then (self.elementsToReadOfBucketCountElement(values, begin, end, bucket_0, element_0)) else (0) != bsum{int i;}(add_0, begin + self.bucketStart(bucket_0 + 1), if (values[i] = element_0) then (1) else (0))"
                  (rule "notLeft" (formula "1") (userinteraction))
                  (rule "ifthenelse_split" (formula "20") (term "0") (userinteraction))
                  (branch "0 < bucket_0 + 1 TRUE"
                     (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "21") (term "0") (userinteraction))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "21") (term "0") (inst "i=i") (userinteraction))
                     (rule "translateJavaAddInt" (formula "21") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "21") (term "1,0"))
                     (rule "instAll" (formula "21") (term "2,1,0,0") (ifseqformula "19") (userinteraction))
                     (rule "impLeft" (formula "1") (userinteraction))
                     (branch "Case 1"
                        (rule "true_left" (formula "13"))
                        (rule "translateJavaSubInt" (formula "17") (term "0,0"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "2"))
                        (rule "eqSymm" (formula "19"))
                        (rule "replace_known_left" (formula "26") (term "0,1,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_elimSub" (formula "19") (term "0,1"))
                        (rule "polySimp_homoEq" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "2,1,1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "2,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "1"))
                        (rule "polySimp_addComm0" (formula "6") (term "0"))
                        (rule "polySimp_addComm0" (formula "3") (term "2,1,1"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "2,1,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "times_zero_2" (formula "6") (term "1,0"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "11"))
                        (rule "polySimp_addComm1" (formula "26") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                        (rule "polySimp_sepNegMonomial" (formula "26"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                        (rule "polySimp_elimOne" (formula "26") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "2"))
                        (rule "times_zero_2" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                        (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                        (rule "leq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                        (rule "andLeft" (formula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "5"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "1,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "leq_literals" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch "Case 2"
                        (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "1") (term "0") (userinteraction))
                         (builtin "One Step Simplification" (formula "1") (userinteraction))
                        (rule "andLeft" (formula "1") (userinteraction))
                        (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "1") (term "0") (userinteraction))
                        (rule "Definition_axiom_for_readIsMaximal_in_de_wiesler_BucketPointers" (formula "2") (term "0") (userinteraction))
                         (builtin "One Step Simplification" (formula "2") (userinteraction))
                        (rule "ifthenelse_split" (formula "2") (term "1") (userinteraction))
                        (branch "self.first_empty_position <= self.bucketStart(bucket_0) TRUE"
                           (rule "true_left" (formula "16"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "translateJavaSubInt" (formula "1") (term "0"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "5"))
                           (rule "eqSymm" (formula "22"))
                           (rule "replace_known_left" (formula "28") (term "0,1,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "polySimp_homoEq" (formula "12"))
                           (rule "polySimp_elimSub" (formula "1") (term "0"))
                           (rule "polySimp_elimSub" (formula "22") (term "0,1"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "7") (term "2,0"))
                           (rule "polySimp_addComm0" (formula "25") (term "2,1,1,1"))
                           (rule "polySimp_addComm0" (formula "8") (term "1"))
                           (rule "polySimp_addComm0" (formula "9") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "2,1,1"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "2,1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "8"))
                           (rule "times_zero_2" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "13"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "1"))
                           (rule "bsum_lower_equals_upper" (formula "25") (term "0"))
                           (rule "eqSymm" (formula "25"))
                           (rule "polySimp_sepNegMonomial" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "12"))
                           (rule "polySimp_sepNegMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "times_zero_2" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "5") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                           (rule "leq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "2"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,0"))
                           (rule "times_zero_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,0"))
                           (rule "times_zero_1" (formula "2") (term "0"))
                           (rule "qeq_literals" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_commuteGeq" (formula "5"))
                           (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,0"))
                           (rule "times_zero_1" (formula "6") (term "0"))
                           (rule "qeq_literals" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,0"))
                           (rule "times_zero_1" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "4"))
                           (rule "polySimp_addAssoc" (formula "24") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0"))
                           (rule "add_literals" (formula "24") (term "1,1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,1,0"))
                           (rule "add_zero_right" (formula "24") (term "1,0"))
                           (rule "bsum_lower_equals_upper" (formula "24") (term "0"))
                           (rule "eqSymm" (formula "24"))
                           (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "4"))
                           (rule "polySimp_addAssoc" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "1,0"))
                           (rule "add_literals" (formula "21") (term "1,1,1,0"))
                           (rule "times_zero_1" (formula "21") (term "1,1,0"))
                           (rule "add_zero_right" (formula "21") (term "1,0"))
                           (rule "bsum_lower_equals_upper" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                        (branch "self.first_empty_position <= self.bucketStart(bucket_0) FALSE"
                           (rule "true_left" (formula "15"))
                           (rule "translateJavaSubInt" (formula "1") (term "0"))
                           (rule "translateJavaSubInt" (formula "19") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "2") (term "2,0,0,1"))
                           (rule "translateJavaAddInt" (formula "2") (term "2,1,1"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "7"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2"))
                           (rule "replace_known_left" (formula "28") (term "0,1,1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "polySimp_homoEq" (formula "11"))
                           (rule "polySimp_elimSub" (formula "1") (term "0"))
                           (rule "polySimp_elimSub" (formula "21") (term "0,1"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "25") (term "2,1,1,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "2,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "2,1,1"))
                           (rule "polySimp_addComm0" (formula "7") (term "1"))
                           (rule "polySimp_addComm0" (formula "8") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "2,1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_leqRight" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "8"))
                           (rule "times_zero_2" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "13"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "2"))
                           (rule "polySimp_sepNegMonomial" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "12"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "25") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeTrue" (formula "25"))
                        )
                     )
                  )
                  (branch "0 < bucket_0 + 1 FALSE"
                     (rule "true_left" (formula "12"))
                     (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "eqSymm" (formula "22"))
                     (rule "eqSymm" (formula "18"))
                     (rule "replace_known_right" (formula "25") (term "0,1,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "add_zero_right" (formula "25") (term "1"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "polySimp_homoEq" (formula "8"))
                     (rule "polySimp_elimSub" (formula "18") (term "0,1"))
                     (rule "polySimp_homoEq" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "2,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1"))
                     (rule "polySimp_addComm0" (formula "5") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "2,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "2,1,1,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "2,1,1,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltRight" (formula "21"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "times_zero_2" (formula "5") (term "1,0"))
                     (rule "add_zero_right" (formula "5") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "applyEq" (formula "25") (term "0,1,0") (ifseqformula "10"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "0,0"))
                     (rule "add_zero_left" (formula "25") (term "0"))
                     (rule "polySimp_sepNegMonomial" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
                     (rule "polySimp_invertEq" (formula "25"))
                     (rule "times_zero_2" (formula "25") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "mul_literals" (formula "5") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                     (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "closeFalse" (formula "7"))
                  )
               )
            )
            (branch " begin <= add_0 & add_0 <= begin + self.bucketStart(bucket_0 + 1) FALSE"
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "1,0") (userinteraction))
               (rule "true_left" (formula "12"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaAddInt" (formula "5") (term "2,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "5") (term "2,0,1,0,1,1,1,1"))
               (rule "andLeft" (formula "2"))
               (rule "eqSymm" (formula "17"))
               (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "19")) (ifInst ""  (formula "10")) (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
               (rule "polySimp_homoEq" (formula "7"))
               (rule "polySimp_elimSub" (formula "17") (term "0,1"))
               (rule "polySimp_elimSub" (formula "6") (term "2,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,2,0,1,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "2,1,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "2,1,1,1"))
               (rule "polySimp_addComm0" (formula "23") (term "1,0,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "1"))
               (rule "polySimp_addComm0" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "6") (term "2,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,1"))
               (rule "polySimp_addComm0" (formula "6") (term "2,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "23") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
               (rule "add_zero_left" (formula "23") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,1"))
               (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "times_zero_2" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "applyEq" (formula "6") (term "1,1,1,1,1,1") (ifseqformula "7"))
               (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "7"))
               (rule "applyEq" (formula "6") (term "1,1,0,1,1,1") (ifseqformula "7"))
               (rule "applyEq" (formula "6") (term "0,0,0,1,1") (ifseqformula "7"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "7"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_invertInEq0" (formula "23") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1"))
               (rule "times_zero_2" (formula "23") (term "1,0,0,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "23") (term "0,0,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "22") (term "0,1,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "0,0,1"))
               (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,1,1,1,1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_subsumption1" (formula "5") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0"))
               (rule "qeq_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "7"))
               (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "inEqSimp_geqRight" (formula "24"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "22"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
               (rule "andLeft" (formula "4"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_literals" (formula "4") (term "0"))
               (rule "leq_literals" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
         )
         (branch " self.bucketStart(bucket_0 + 1) <= self.first_empty_position FALSE"
            (rule "instAll" (formula "19") (term "0,2,0") (ifseqformula "15") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (rule "true_left" (formula "9"))
               (rule "translateJavaSubInt" (formula "13") (term "0,0"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "14"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_elimSub" (formula "14") (term "0,1"))
               (rule "polySimp_addComm0" (formula "21") (term "1,1"))
               (rule "polySimp_addComm0" (formula "20") (term "2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "1"))
               (rule "polySimp_addComm0" (formula "14") (term "0,1"))
               (rule "bsum_induction_upper_concrete" (formula "21") (term "1"))
               (rule "polySimp_addComm0" (formula "21") (term "1"))
               (rule "inEqSimp_leqRight" (formula "20"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "18") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1"))
               (rule "replace_known_left" (formula "21") (term "0,0,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "times_zero_2" (formula "3") (term "1,0"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
               (rule "andLeft" (formula "4"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_literals" (formula "4") (term "0"))
               (rule "leq_literals" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch "Case 2"
               (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "1") (term "0") (userinteraction))
                (builtin "One Step Simplification" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "Definition_axiom_for_readIsMaximal_in_de_wiesler_BucketPointers" (formula "2") (term "0") (userinteraction))
                (builtin "One Step Simplification" (formula "2") (userinteraction))
               (rule "bsum_induction_upper" (formula "22") (term "1") (userinteraction))
               (rule "polySimp_elimSub" (formula "22") (term "1,0,1"))
               (rule "mul_literals" (formula "22") (term "1,1,0,1"))
               (rule "polySimp_addLiterals" (formula "22") (term "1,0,1"))
               (rule "add_zero_right" (formula "22") (term "1,0,1"))
               (rule "pullOut" (formula "6") (term "1,0") (inst "sk=add_0") (userinteraction))
               (rule "bsum_split" (formula "23") (term "0") (inst "middle=add_0") (userinteraction))
               (rule "ifthenelse_split" (formula "23") (term "0") (userinteraction))
               (branch " begin <= add_0 & add_0 <= begin + self.first_empty_position TRUE"
                  (rule "eqTermCut" (formula "24") (term "1,1") (inst "s=bsum{int i;}(add_0,
             add(begin,
                 int::final(self,
                            de.wiesler.BucketPointers::$first_empty_position)),
             \\if (  int::select(heap, values, arr(i))
                  = element_0)
                 \\then (Z(1(#)))
                 \\else (Z(0(#))))") (userinteraction))
                  (branch "Assume if (0 < bucket_0 + 1) then (self.elementsToReadOfBucketCountElement(values, begin, end, bucket_0 + 1 - 1, element_0)) else (0) = bsum{int i;}(add_0, begin + self.first_empty_position, if (values[i] = element_0) then (1) else (0))"
                     (rule "true_left" (formula "14"))
                     (rule "translateJavaSubInt" (formula "18") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "2,0,0,2,1"))
                     (rule "translateJavaAddInt" (formula "4") (term "2,1,2,1"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "6"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "5"))
                     (rule "replace_known_right" (formula "5") (term "0,2,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "polySimp_homoEq" (formula "26"))
                     (rule "polySimp_homoEq" (formula "10"))
                     (rule "polySimp_elimSub" (formula "1") (term "5,1,1"))
                     (rule "mul_literals" (formula "1") (term "1,5,1,1"))
                     (rule "polySimp_addLiterals" (formula "1") (term "5,1,1"))
                     (rule "add_zero_right" (formula "1") (term "5,1,1"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "5,1,1,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,5,1,1,0,0"))
                     (rule "polySimp_addLiterals" (formula "26") (term "5,1,1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "5,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "2,0"))
                     (rule "polySimp_addComm0" (formula "6") (term "1"))
                     (rule "polySimp_addComm0" (formula "7") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "1,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "2") (term "0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "20"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "7"))
                     (rule "times_zero_2" (formula "7") (term "1,0"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "12"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0"))
                     (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "1,0"))
                     (rule "times_zero_1" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "closeTrue" (formula "26"))
                  )
                  (branch "Assume if (0 < bucket_0 + 1) then (self.elementsToReadOfBucketCountElement(values, begin, end, bucket_0 + 1 - 1, element_0)) else (0) != bsum{int i;}(add_0, begin + self.first_empty_position, if (values[i] = element_0) then (1) else (0))"
                     (rule "notLeft" (formula "1") (userinteraction))
                     (rule "ifthenelse_split" (formula "21") (term "0") (userinteraction))
                     (branch "0 < bucket_0 + 1 TRUE"
                        (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "22") (term "0") (userinteraction))
                        (rule "eqTermCut" (formula "22") (term "1,3,0") (inst "s=int::final(self,
           de.wiesler.BucketPointers::$first_empty_position)") (userinteraction))
                        (branch "Assume self.lastReadOf(bucket_0 + 1 - 1) = self.first_empty_position"
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "23") (term "1,3,0") (userinteraction))
                           (rule "true_left" (formula "16"))
                           (rule "translateJavaAddInt" (formula "23") (term "2,0"))
                           (rule "translateJavaAddInt" (formula "23") (term "3,0"))
                           (rule "translateJavaAddInt" (formula "6") (term "2,0,0,2,1"))
                           (rule "translateJavaAddInt" (formula "6") (term "2,1,2,1"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "4"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "25"))
                           (rule "eqSymm" (formula "7"))
                           (rule "eqSymm" (formula "22"))
                           (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_left" (formula "29") (term "0,1,1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "15")) (ifInst ""  (formula "26")) (ifInst ""  (formula "24")))
                           (rule "polySimp_homoEq" (formula "12"))
                           (rule "polySimp_elimSub" (formula "2") (term "2,1"))
                           (rule "mul_literals" (formula "2") (term "1,2,1"))
                           (rule "polySimp_addLiterals" (formula "2") (term "2,1"))
                           (rule "add_zero_right" (formula "2") (term "2,1"))
                           (rule "polySimp_elimSub" (formula "25") (term "2,1,2,1"))
                           (rule "mul_literals" (formula "25") (term "1,2,1,2,1"))
                           (rule "polySimp_addLiterals" (formula "25") (term "2,1,2,1"))
                           (rule "add_zero_right" (formula "25") (term "2,1,2,1"))
                           (rule "polySimp_elimSub" (formula "25") (term "2,1,3,1"))
                           (rule "mul_literals" (formula "25") (term "1,2,1,3,1"))
                           (rule "polySimp_addLiterals" (formula "25") (term "2,1,3,1"))
                           (rule "add_zero_right" (formula "25") (term "2,1,3,1"))
                           (rule "polySimp_elimSub" (formula "22") (term "0,1"))
                           (rule "polySimp_elimSub" (formula "29") (term "5,1,1"))
                           (rule "mul_literals" (formula "29") (term "1,5,1,1"))
                           (rule "polySimp_addLiterals" (formula "29") (term "5,1,1"))
                           (rule "add_zero_right" (formula "29") (term "5,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0,1,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,1,0,0,1,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0,1,1"))
                           (rule "add_zero_right" (formula "1") (term "2,1,0,0,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,0,0,0,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,0,0,0,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,0,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "2,0,0,0,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,0,1,0,1,1"))
                           (rule "add_zero_right" (formula "1") (term "2,0,1,0,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,0,0,1,1,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,0,0,1,1,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,0,0,1,1,1"))
                           (rule "add_zero_right" (formula "1") (term "2,0,0,1,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,1,0"))
                           (rule "polySimp_addLiterals" (formula "1") (term "0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addLiterals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "1,0,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,1,0,0,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "2,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1"))
                           (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "1") (term "2,0,1,0,1"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "28") (term "2,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_leqRight" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
                           (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "9"))
                           (rule "mul_literals" (formula "9") (term "1,0"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "3"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "eqSymm" (formula "8") (term "1"))
                           (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "14"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0"))
                           (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "29") (term "1,1,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                           (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,1"))
                           (rule "add_literals" (formula "2") (term "1,0,0,1"))
                           (rule "times_zero_1" (formula "2") (term "0,0,1"))
                           (rule "leq_literals" (formula "2") (term "0,1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "2") (term "0,1,0,1") (ifseqformula "23"))
                           (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,1"))
                           (rule "polySimp_sepNegMonomial" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "13"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "4"))
                           (rule "times_zero_2" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "5") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "qeq_literals" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1"))
                           (rule "mul_literals" (formula "11") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "6"))
                           (rule "times_zero_1" (formula "20") (term "0,0"))
                           (rule "add_zero_left" (formula "20") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "12") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                           (rule "times_zero_1" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0"))
                           (rule "nnf_imp2or" (formula "28") (term "0"))
                           (rule "Contract_axiom_for_writtenCountOfBucket_in_BucketPointers" (formula "9") (term "0"))
                           (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "30")) (ifInst ""  (formula "19")) (ifInst ""  (formula "32")) (ifInst ""  (formula "30")))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
                           (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "applyEq" (formula "9") (term "0,0,1,1") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "9") (term "0,1"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0"))
                           (rule "qeq_literals" (formula "9") (term "0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
                           (rule "translateJavaSubInt" (formula "10") (term "0"))
                           (rule "polySimp_elimSub" (formula "10") (term "0"))
                           (rule "polySimp_addComm0" (formula "10") (term "0"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "17"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "10") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                           (rule "applyEq" (formula "31") (term "1,2,1") (ifseqformula "10"))
                           (rule "polySimp_addAssoc" (formula "31") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,2,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "2,1"))
                           (rule "add_literals" (formula "31") (term "1,1,2,1"))
                           (rule "times_zero_1" (formula "31") (term "1,2,1"))
                           (rule "add_zero_right" (formula "31") (term "2,1"))
                           (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "18") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "30") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "translateJavaCastInt" (formula "30") (term "0,0,1,0"))
                           (rule "translateJavaCastInt" (formula "30") (term "1,1,0,1,0,0,0"))
                           (rule "translateJavaMulInt" (formula "30") (term "1,0,1,0,0,0,0"))
                           (rule "translateJavaMulInt" (formula "30") (term "0,1,1,0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "30") (term "1,1,0,0"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "31"))
                           (rule "notLeft" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1"))
                           (rule "polySimp_addComm0" (formula "35") (term "1"))
                           (rule "castedGetAny" (formula "36") (term "0"))
                           (rule "castedGetAny" (formula "33") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32"))
                           (rule "inEqSimp_commuteLeq" (formula "30"))
                           (rule "inEqSimp_commuteLeq" (formula "33"))
                           (rule "applyEq" (formula "33") (term "1") (ifseqformula "7"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "7"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                           (rule "elimGcdGeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                           (rule "leq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "leq_literals" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "inEqSimp_exactShadow2" (formula "30") (ifseqformula "31"))
                           (rule "greater_literals" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "0,0"))
                           (rule "add_zero_left" (formula "30") (term "0"))
                           (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "32"))
                           (rule "greater_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                           (rule "mul_literals" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "29") (term "0"))
                           (rule "translateJavaCastInt" (formula "29") (term "0,0"))
                           (rule "castedGetAny" (formula "29") (term "0,0"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "7") (term "1"))
                           (rule "replace_known_right" (formula "7") (term "0,1,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "6")))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,1"))
                           (rule "replace_known_left" (formula "7") (term "0,0,1,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "applyEq" (formula "7") (term "1,0,0,1") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "7") (term "0,0,1") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                           (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0,1"))
                           (rule "add_literals" (formula "7") (term "1,0,0,1"))
                           (rule "times_zero_1" (formula "7") (term "0,0,1"))
                           (rule "leq_literals" (formula "7") (term "0,1"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                           (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "7") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "8") (term "1"))
                           (rule "translateJavaMulInt" (formula "8") (term "0,2,1"))
                           (rule "eqSymm" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "0,2,0"))
                           (rule "nnf_notAnd" (formula "31") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "41") (term "1,3,1"))
                           (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                           (rule "replace_known_left" (formula "1") (term "0,0,1,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0,1") (ifseqformula "20"))
                           (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "42") (term "1,3,1"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,1,3,1"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,1,3,1"))
                           (rule "applyEq" (formula "42") (term "1,3,1") (ifseqformula "9"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "31") (term "1"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "translateJavaAddInt" (formula "31") (term "0,0,1"))
                           (rule "translateJavaUnaryMinusInt" (formula "31") (term "1,1"))
                           (rule "translateJavaSubInt" (formula "31") (term "0,1"))
                           (rule "neg_literal" (formula "31") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "31") (term "0,1"))
                           (rule "mul_literals" (formula "31") (term "1,0,1"))
                           (rule "polySimp_addLiterals" (formula "31") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,0,1"))
                           (rule "nnf_imp2or" (formula "40") (term "0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "19") (term "0"))
                           (rule "translateJavaMulInt" (formula "19") (term "0,2,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "0,2,0"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "13") (term "0,1"))
                           (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")) (ifInst ""  (formula "44")) (ifInst ""  (formula "7")))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1"))
                           (rule "replace_known_left" (formula "13") (term "0,0,1,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "21"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "13") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "14") (term "0,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "0,2,0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,2,0,1"))
                           (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "9"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "43") (term "1,1,0"))
                           (rule "translateJavaMulInt" (formula "43") (term "0,2,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "43") (term "0,2,1,1,0"))
                           (rule "applyEq" (formula "43") (term "1,1,0") (ifseqformula "9"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "21") (term "0"))
                           (rule "translateJavaSubInt" (formula "21") (term "2,0,1,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "21") (term "2,1,1,0,1,1,1"))
                           (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                           (rule "polySimp_elimSub" (formula "21") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "21") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm0" (formula "21") (term "2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "21") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0,1,1,1,1"))
                           (rule "applyEq" (formula "21") (term "0,0,0,1,1") (ifseqformula "22"))
                           (rule "applyEq" (formula "21") (term "1,1,0,1,1,1,1") (ifseqformula "22"))
                           (rule "applyEq" (formula "21") (term "0,0,1") (ifseqformula "22"))
                           (rule "applyEq" (formula "21") (term "1,1,0,1,1,1") (ifseqformula "22"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                           (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "21") (term "1,0,1,1") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0,1,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0,1,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "21") (term "0,0,1,0,1,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,1,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,1,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,1,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,1,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,1,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,1"))
                           (rule "qeq_literals" (formula "21") (term "0,1,0,1,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "21") (term "0,0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "21") (term "1,0,0,1,1") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0,1,0,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,1,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,1,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,1,1"))
                           (rule "qeq_literals" (formula "21") (term "0,1,0,0,1,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "22") (term "0"))
                           (rule "translateJavaCastInt" (formula "22") (term "0,0"))
                           (rule "castedGetAny" (formula "22") (term "0,0"))
                           (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "47") (term "1"))
                           (rule "translateJavaAddInt" (formula "47") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "47") (term "3,1"))
                           (rule "applyEq" (formula "47") (term "1,2,1") (ifseqformula "12"))
                           (rule "polySimp_addAssoc" (formula "47") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "47") (term "0,2,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "47") (term "2,1"))
                           (rule "add_literals" (formula "47") (term "1,1,2,1"))
                           (rule "times_zero_1" (formula "47") (term "1,2,1"))
                           (rule "add_zero_right" (formula "47") (term "2,1"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "47") (term "1,1,0"))
                           (rule "translateJavaMulInt" (formula "47") (term "0,2,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "47") (term "0,2,1,1,0"))
                           (rule "applyEq" (formula "47") (term "1,1,0") (ifseqformula "9"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1"))
                           (rule "translateJavaAddInt" (formula "2") (term "2,1,1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "2") (term "2,0,1,0,1,1,1,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                           (rule "polySimp_elimSub" (formula "2") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "2") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "2") (term "2,1,1,0,1,1,1"))
                           (rule "add_literals" (formula "2") (term "0,2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "2") (term "2,0,1,0,1,1,1,1"))
                           (rule "add_literals" (formula "2") (term "0,2,0,1,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "2") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "2") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1,1,1") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_invertInEq0" (formula "2") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,1,1,1,1"))
                           (rule "times_zero_2" (formula "2") (term "1,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0,1,1,1,1") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "2") (term "0,0,0") (ifseqformula "18"))
                           (rule "leq_literals" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_subsumption1" (formula "2") (term "0,1") (ifseqformula "4"))
                           (rule "leq_literals" (formula "2") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_subsumption1" (formula "2") (term "0,0,1,1,1") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,1,1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0,0,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0,0,1,1,1"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,1,1"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,1,1,1"))
                           (rule "qeq_literals" (formula "2") (term "0,0,0,1,1,1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1"))
                           (rule "translateJavaCastInt" (formula "3") (term "0,1,1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "translateJavaMod" (formula "8") (term "0"))
                           (rule "jmod_axiom" (formula "8") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "newSym_eq" (formula "8") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::lastReadOf(heap,
                                          self,
                                          bucket_0),
    Z(0(#)))"))
                           (rule "times_zero_1" (formula "8") (term "1,1"))
                           (rule "add_zero_right" (formula "8") (term "1"))
                           (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "8"))
                           (rule "eqSymm" (formula "9"))
                           (rule "applyEq" (formula "1") (term "1,0,1,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "40") (term "1") (ifseqformula "9"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                           (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "15") (term "0,0,0,1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1"))
                           (rule "applyEq" (formula "15") (term "1,0,1,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "15") (term "1,1,0,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "16") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
                           (rule "applyEq" (formula "49") (term "1,3,1") (ifseqformula "9"))
                           (rule "polySimp_addComm0" (formula "49") (term "3,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                           (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0,1,0"))
                           (rule "leq_literals" (formula "6") (term "0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0"))
                           (rule "leq_literals" (formula "6") (term "0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "20") (term "0"))
                           (rule "translateJavaAddInt" (formula "20") (term "2,1,1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "20") (term "2,0,1,0,1,1,1,1"))
                           (rule "replace_known_right" (formula "20") (term "0,1,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                           (rule "polySimp_elimSub" (formula "20") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "20") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "20") (term "2,1,1,0,1,1,1"))
                           (rule "add_literals" (formula "20") (term "0,2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "20") (term "2,0,1,0,1,1,1,1"))
                           (rule "add_literals" (formula "20") (term "0,2,0,1,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "20") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,1,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0"))
                           (rule "times_zero_2" (formula "20") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "20") (term "0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "20") (term "0,0,0,1,1,1,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "20") (term "0,0,1,1,1") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "20") (term "0,0,1,1,1,1") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,1,1,1,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,1,1"))
                           (rule "qeq_literals" (formula "20") (term "0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "20") (term "0,1") (ifseqformula "4"))
                           (rule "leq_literals" (formula "20") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "20") (term "0,0,0") (ifseqformula "19"))
                           (rule "leq_literals" (formula "20") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "20") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "20") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")))
                           (rule "true_left" (formula "20"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0"))
                           (rule "translateJavaCastInt" (formula "20") (term "0,0"))
                           (rule "castedGetAny" (formula "20") (term "0,0"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "translateJavaAddInt" (formula "21") (term "0,0,0"))
                           (rule "translateJavaUnaryMinusInt" (formula "21") (term "1,0"))
                           (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                           (rule "neg_literal" (formula "21") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "21") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,0,0"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0"))
                           (rule "translateJavaAddInt" (formula "4") (term "2,1,1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,1,1,1,1"))
                           (rule "replace_known_right" (formula "4") (term "0,1,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                           (rule "polySimp_elimSub" (formula "4") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "4") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "4") (term "2,1,1,0,1,1,1"))
                           (rule "add_literals" (formula "4") (term "0,2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "4") (term "2,0,1,0,1,1,1,1"))
                           (rule "add_literals" (formula "4") (term "0,2,0,1,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "4") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                           (rule "times_zero_2" (formula "4") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "4") (term "0,0,0,1,1,1,1"))
                           (rule "times_zero_2" (formula "4") (term "1,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "4") (term "0,0,0,1,1,1,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "4") (term "0,0,1,1,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,0,1,1,1,1") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,0,0,1,1,1,1"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,1,1,1"))
                           (rule "qeq_literals" (formula "4") (term "0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,0,0") (ifseqformula "20"))
                           (rule "leq_literals" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,1") (ifseqformula "5"))
                           (rule "leq_literals" (formula "4") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                           (rule "true_left" (formula "4"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
                           (rule "translateJavaCastInt" (formula "4") (term "0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0"))
                           (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "translateJavaMod" (formula "5") (term "0,0,1"))
                           (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
                           (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,1"))
                           (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
                           (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,1,1"))
                           (rule "jmod_axiom" (formula "5") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1"))
                           (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "andLeft" (formula "5"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                           (rule "mul_literals" (formula "7") (term "0,0,1"))
                           (rule "newSym_eq" (formula "5") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(add(mul(begin,
                                             Z(neglit(1(#)))),
                                         end)),
    Z(0(#)))"))
                           (rule "times_zero_1" (formula "5") (term "1,1"))
                           (rule "add_zero_right" (formula "5") (term "1"))
                           (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "5"))
                           (rule "eqSymm" (formula "6"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "6"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
                           (rule "inEqSimp_commuteGeq" (formula "11"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1"))
                           (rule "polySimp_rightDist" (formula "8") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,1"))
                           (rule "mul_literals" (formula "8") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                           (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                           (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                           (rule "leq_literals" (formula "9") (term "0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "7"))
                           (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0"))
                           (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "37") (term "0"))
                           (rule "add_literals" (formula "37") (term "1,1,0"))
                           (rule "times_zero_1" (formula "37") (term "1,0"))
                           (rule "add_zero_right" (formula "37") (term "0"))
                           (rule "inEqSimp_subsumption6" (formula "37") (ifseqformula "9"))
                           (rule "times_zero_1" (formula "37") (term "1,1,0"))
                           (rule "greater_literals" (formula "37") (term "0,0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "leq_literals" (formula "37") (term "0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "true_left" (formula "37"))
                           (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
                           (rule "times_zero_1" (formula "10") (term "0,0"))
                           (rule "add_zero_left" (formula "10") (term "0"))
                           (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "40") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "translateJavaAddInt" (formula "40") (term "2,2,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "2,2,0,1,1,0"))
                           (rule "nnf_notAnd" (formula "48") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                           (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                           (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "translateJavaMod" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
                           (rule "translateJavaAddInt" (formula "17") (term "0,2,0"))
                           (rule "translateJavaMulInt" (formula "17") (term "0,0,2,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,2,0"))
                           (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "28") (term "1,2,2,1"))
                           (rule "translateJavaAddInt" (formula "28") (term "0,2,1,2,2,1"))
                           (rule "translateJavaMulInt" (formula "28") (term "0,0,2,1,2,2,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,2,1,2,2,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,2,1,2,2,1"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "28") (term "1,3,2,1"))
                           (rule "translateJavaMulInt" (formula "28") (term "0,2,1,3,2,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,2,1,3,2,1"))
                           (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "46") (term "0") (inst "i=i") (inst "j=j"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "translateJavaCastInt" (formula "46") (term "0,1,0,1,0"))
                           (rule "translateJavaCastInt" (formula "46") (term "1,1,0,1,0"))
                           (rule "castedGetAny" (formula "46") (term "0,1,0,1,0"))
                           (rule "castedGetAny" (formula "46") (term "1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "46") (term "1,0,1,0"))
                           (rule "applyEq" (formula "46") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "44"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,1,0"))
                           (rule "applyEq" (formula "46") (term "0,1,0,0,1,0,0") (ifseqformula "44"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "2,1,1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "14") (term "2,0,1,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "31")) (ifInst ""  (formula "51")))
                           (rule "polySimp_elimSub" (formula "14") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "14") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1"))
                           (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,1,1"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0"))
                           (rule "add_literals" (formula "14") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "14") (term "0,0,0"))
                           (rule "qeq_literals" (formula "14") (term "0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,1,1,1"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,1,1,1"))
                           (rule "add_literals" (formula "14") (term "1,0,1,0,0,1,1,1"))
                           (rule "times_zero_1" (formula "14") (term "0,1,0,0,1,1,1"))
                           (rule "qeq_literals" (formula "14") (term "1,0,0,1,1,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "15") (term "1,1") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "49")))
                           (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0,1,1"))
                           (rule "translateJavaMulInt" (formula "15") (term "0,1,0,0,0,0,1,1"))
                           (rule "translateJavaCastInt" (formula "15") (term "1,1,0,1,0,0,0,1,1"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,0,0,0,0,0,1,1"))
                           (rule "translateJavaCastInt" (formula "15") (term "0,0,1,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0,0,1,1"))
                           (rule "replace_known_left" (formula "15") (term "1,0,0,0,0,1,1") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,1,1"))
                           (rule "replace_known_left" (formula "15") (term "1,0,0,1,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "castedGetAny" (formula "15") (term "1,1,0,1,0,0,1,1"))
                           (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,1"))
                           (rule "replace_known_left" (formula "15") (term "0,1,0,1,1") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,1"))
                           (rule "inEqSimp_subsumption6" (formula "15") (term "0,0,0,1,1") (ifseqformula "42"))
                           (rule "greater_literals" (formula "15") (term "0,0,0,0,0,1,1"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,1"))
                           (rule "leq_literals" (formula "15") (term "0,0,0,0,1,1"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "arrayLengthNotNegative" (formula "38") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "39") (term "0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "1") (term "0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                           (rule "translateJavaCastInt" (formula "1") (term "1,1,0,1,0,0,0,0"))
                           (rule "translateJavaMulInt" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "translateJavaMulInt" (formula "1") (term "0,1,0,0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,0"))
                           (rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "castedGetAny" (formula "1") (term "1,1,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_subsumption6" (formula "1") (term "0,0,0,0") (ifseqformula "43"))
                           (rule "times_zero_1" (formula "1") (term "1,1,0,0,0,0,0"))
                           (rule "greater_literals" (formula "1") (term "0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "leq_literals" (formula "1") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "51") (term "1") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "closeTrue" (formula "51"))
                        )
                        (branch "Assume self.lastReadOf(bucket_0 + 1 - 1) != self.first_empty_position"
                           (rule "true_left" (formula "15"))
                           (rule "translateJavaAddInt" (formula "22") (term "2,0"))
                           (rule "translateJavaAddInt" (formula "22") (term "3,0"))
                           (rule "translateJavaSubInt" (formula "19") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "5") (term "2,0,0,2,1"))
                           (rule "translateJavaAddInt" (formula "5") (term "2,1,2,1"))
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "1"))
                           (rule "andLeft" (formula "6"))
                           (rule "eqSymm" (formula "24"))
                           (rule "eqSymm" (formula "20"))
                           (rule "eqSymm" (formula "5"))
                           (rule "eqSymm" (formula "23"))
                           (rule "replace_known_left" (formula "28") (term "0,1,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "5") (term "0,2,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_homoEq" (formula "10"))
                           (rule "polySimp_elimSub" (formula "24") (term "2,1,2,1"))
                           (rule "mul_literals" (formula "24") (term "1,2,1,2,1"))
                           (rule "polySimp_addLiterals" (formula "24") (term "2,1,2,1"))
                           (rule "add_zero_right" (formula "24") (term "2,1,2,1"))
                           (rule "polySimp_elimSub" (formula "24") (term "2,1,3,1"))
                           (rule "mul_literals" (formula "24") (term "1,2,1,3,1"))
                           (rule "polySimp_addLiterals" (formula "24") (term "2,1,3,1"))
                           (rule "add_zero_right" (formula "24") (term "2,1,3,1"))
                           (rule "polySimp_elimSub" (formula "20") (term "0,1"))
                           (rule "polySimp_elimSub" (formula "23") (term "2,1"))
                           (rule "mul_literals" (formula "23") (term "1,2,1"))
                           (rule "polySimp_addLiterals" (formula "23") (term "2,1"))
                           (rule "add_zero_right" (formula "23") (term "2,1"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_elimSub" (formula "28") (term "5,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,5,1,0,0"))
                           (rule "polySimp_addLiterals" (formula "28") (term "5,1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "5,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "2,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "7") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "1"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "inEqSimp_commuteLeq" (formula "18"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "7"))
                           (rule "times_zero_2" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "12"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "11"))
                           (rule "polySimp_sepNegMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_invertInEq0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                           (rule "leq_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "15") (term "0,0"))
                           (rule "add_zero_left" (formula "15") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                           (rule "mul_literals" (formula "7") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,0,1"))
                           (rule "nnf_imp2or" (formula "21") (term "0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "22") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "translateJavaMulInt" (formula "22") (term "0,1,1,0,0,0,0"))
                           (rule "translateJavaMulInt" (formula "22") (term "1,0,1,0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "22") (term "1,1,0,0"))
                           (rule "translateJavaCastInt" (formula "22") (term "0,0,1,0"))
                           (rule "translateJavaCastInt" (formula "22") (term "1,1,0,1,0,0,0"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "23") (term "0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1"))
                           (rule "castedGetAny" (formula "28") (term "0"))
                           (rule "castedGetAny" (formula "25") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24"))
                           (rule "inEqSimp_commuteLeq" (formula "22"))
                           (rule "inEqSimp_commuteLeq" (formula "25"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                           (rule "elimGcdGeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "22") (term "0,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "24") (term "0,0"))
                           (rule "add_zero_left" (formula "24") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "mul_literals" (formula "24") (term "1"))
                           (rule "inEqSimp_exactShadow2" (formula "22") (ifseqformula "23"))
                           (rule "greater_literals" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "times_zero_1" (formula "22") (term "0,0"))
                           (rule "add_zero_left" (formula "22") (term "0"))
                           (rule "inEqSimp_exactShadow2" (formula "5") (ifseqformula "24"))
                           (rule "greater_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "nnf_imp2or" (formula "33") (term "0"))
                           (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "3") (term "0"))
                           (rule "translateJavaSubInt" (formula "3") (term "0"))
                           (rule "polySimp_elimSub" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                           (rule "applyEq" (formula "36") (term "1,2,1") (ifseqformula "3"))
                           (rule "polySimp_addAssoc" (formula "36") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "36") (term "0,2,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "2,1"))
                           (rule "add_literals" (formula "36") (term "1,1,2,1"))
                           (rule "times_zero_1" (formula "36") (term "1,2,1"))
                           (rule "add_zero_right" (formula "36") (term "2,1"))
                           (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "11") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "3,2,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,2,1"))
                           (rule "nnf_notAnd" (formula "33") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "21") (term "0"))
                           (rule "translateJavaCastInt" (formula "21") (term "0,0"))
                           (rule "castedGetAny" (formula "21") (term "0,0"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "4") (term "1"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "14")) (ifInst ""  (formula "38")))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1"))
                           (rule "applyEq" (formula "4") (term "1,0,0,1") (ifseqformula "11"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "5") (term "1"))
                           (rule "translateJavaMulInt" (formula "5") (term "0,2,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,2,1"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "37") (term "1,3,1"))
                           (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0,1") (ifseqformula "12"))
                           (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                           (rule "true_left" (formula "1"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "37") (term "1,3,1"))
                           (rule "translateJavaMulInt" (formula "37") (term "0,2,1,3,1"))
                           (rule "polySimp_mulComm0" (formula "37") (term "0,2,1,3,1"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "36") (term "1"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "39")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEq" (formula "1") (term "1,0,0,1") (ifseqformula "12"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "36") (term "1"))
                           (rule "translateJavaMulInt" (formula "36") (term "0,2,1"))
                           (rule "eqSymm" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "36") (term "0,2,0"))
                           (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "22") (term "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "translateJavaSubInt" (formula "22") (term "0,1,1,1"))
                           (rule "translateJavaMod" (formula "22") (term "0,0,1"))
                           (rule "polySimp_elimSub" (formula "22") (term "0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1,1,1"))
                           (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1,1"))
                           (rule "mul_literals" (formula "22") (term "1,0,0,1,1,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,1,1"))
                           (rule "jmod_axiom" (formula "22") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_sepNegMonomial" (formula "22") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,0"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "23"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "0,1"))
                           (rule "mul_literals" (formula "24") (term "0,0,1"))
                           (rule "newSym_eq" (formula "22") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(add(mul(begin,
                                             Z(neglit(1(#)))),
                                         end)),
    Z(0(#)))"))
                           (rule "times_zero_1" (formula "22") (term "1,1"))
                           (rule "add_zero_right" (formula "22") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "22"))
                           (rule "eqSymm" (formula "23"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq1" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                           (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "23"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1"))
                           (rule "polySimp_rightDist" (formula "25") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1"))
                           (rule "mul_literals" (formula "25") (term "0,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "24"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,1,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0"))
                           (rule "leq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "0"))
                           (rule "translateJavaSubInt" (formula "11") (term "2,0,1,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,1,1,0,1,1,1"))
                           (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                           (rule "polySimp_elimSub" (formula "11") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "11") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1"))
                           (rule "applyEq" (formula "11") (term "1,1,0,1,1,1,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "11") (term "1,1,0,1,1,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "11") (term "0,0,0,1,1") (ifseqformula "12"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                           (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,1,1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,1,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,1,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0,1,0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,0,1,1"))
                           (rule "qeq_literals" (formula "11") (term "0,1,0,1,1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,0,1,1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,1,1"))
                           (rule "qeq_literals" (formula "11") (term "0,1,0,0,1,1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "11") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                           (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                           (rule "castedGetAny" (formula "12") (term "0,0"))
                           (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "46") (term "1"))
                           (rule "translateJavaAddInt" (formula "46") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "46") (term "3,1"))
                           (rule "applyEq" (formula "46") (term "1,2,1") (ifseqformula "3"))
                           (rule "polySimp_addAssoc" (formula "46") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "46") (term "0,2,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "46") (term "2,1"))
                           (rule "add_literals" (formula "46") (term "1,1,2,1"))
                           (rule "times_zero_1" (formula "46") (term "1,2,1"))
                           (rule "add_zero_right" (formula "46") (term "2,1"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "1,1"))
                           (rule "translateJavaCastInt" (formula "1") (term "0,1,1"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
                           (rule "translateJavaCastInt" (formula "9") (term "0,0"))
                           (rule "castedGetAny" (formula "9") (term "0,0"))
                           (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "29") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "translateJavaAddInt" (formula "29") (term "2,2,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "2,2,0,1,1,0"))
                           (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "39") (term "0") (inst "i=i") (inst "j=j"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "translateJavaCastInt" (formula "39") (term "1,1,0,1,0"))
                           (rule "translateJavaCastInt" (formula "39") (term "0,1,0,1,0"))
                           (rule "castedGetAny" (formula "39") (term "1,1,0,1,0"))
                           (rule "castedGetAny" (formula "39") (term "0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1,0"))
                           (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "37"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1,0"))
                           (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,0") (ifseqformula "37"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "36") (term "0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "translateJavaMod" (formula "36") (term "0"))
                           (rule "jmod_axiom" (formula "36") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "36"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                           (rule "newSym_eq" (formula "36") (inst "l=l_1") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                           (rule "times_zero_1" (formula "36") (term "1,1"))
                           (rule "add_zero_right" (formula "36") (term "1"))
                           (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "36"))
                           (rule "eqSymm" (formula "37"))
                           (rule "applyEq" (formula "47") (term "1,1,0") (ifseqformula "37"))
                           (rule "polySimp_addComm0" (formula "47") (term "1,0"))
                           (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "37"))
                           (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,1"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "37"))
                           (rule "applyEq" (formula "44") (term "1,1,0") (ifseqformula "37"))
                           (rule "polySimp_addComm0" (formula "44") (term "1,0"))
                           (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
                           (rule "applyEq" (formula "29") (term "3,0,1,1,0") (ifseqformula "37"))
                           (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "37"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "37"))
                           (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "37"))
                           (rule "applyEq" (formula "35") (term "1") (ifseqformula "37"))
                           (rule "applyEq" (formula "43") (term "1") (ifseqformula "37"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                           (rule "elimGcdGeq_antec" (formula "34") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,1,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0"))
                           (rule "add_zero_right" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "35"))
                           (rule "greater_literals" (formula "10") (term "0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "times_zero_1" (formula "10") (term "1,0"))
                           (rule "leq_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "33") (term "0"))
                           (rule "translateJavaSubInt" (formula "33") (term "2,0,1,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "33") (term "2,1,1,0,1,1,1"))
                           (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "14")) (ifInst ""  (formula "46")))
                           (rule "polySimp_elimSub" (formula "33") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "33") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "33") (term "2,1,1,0,1,1,1"))
                           (rule "add_literals" (formula "33") (term "0,2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "33") (term "2,0,1,0,1,1,1,1"))
                           (rule "add_literals" (formula "33") (term "0,2,0,1,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "33") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,1,1,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0,0"))
                           (rule "times_zero_2" (formula "33") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "33") (term "0,0,0,1,1,1,1"))
                           (rule "times_zero_2" (formula "33") (term "1,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0,1,1,1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "33") (term "0,0,1,1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_subsumption1" (formula "33") (term "0,0,0") (ifseqformula "8"))
                           (rule "leq_literals" (formula "33") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_subsumption1" (formula "33") (term "0,0,1,1,1,1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0,0,0,1,1,1,1"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,1,1"))
                           (rule "qeq_literals" (formula "33") (term "0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_subsumption1" (formula "33") (term "0,1") (ifseqformula "34"))
                           (rule "leq_literals" (formula "33") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_subsumption1" (formula "33") (term "0,0") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "33") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "34") (term "0"))
                           (rule "translateJavaCastInt" (formula "34") (term "0,0"))
                           (rule "castedGetAny" (formula "34") (term "0,0"))
                           (rule "Contract_axiom_for_isValidBucketPointer_in_BucketPointers" (formula "42") (term "0,1,0"))
                           (rule "replace_known_left" (formula "42") (term "1,0,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "15")) (ifInst ""  (formula "47")))
                           (rule "true_left" (formula "42"))
                           (rule "Definition_axiom_for_isValidBucketPointer_in_de_wiesler_BucketPointers" (formula "42") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "translateJavaAddInt" (formula "42") (term "0,2,1,0,1,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,1,0,0,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,0,1,0,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,0,1,1,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,0,0,1,0,1,0"))
                           (rule "translateJavaAddInt" (formula "42") (term "2,1,1,0,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,2,1,0,1,0,0,1,0"))
                           (rule "translateJavaAddInt" (formula "42") (term "0,2,0,0,1,1,0"))
                           (rule "translateJavaAddInt" (formula "42") (term "0,2,0,1,1,0,0,0,1,0"))
                           (rule "translateJavaAddInt" (formula "42") (term "2,1,1,1,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,0,2,1,0,1,0,0,0,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,0,2,0,0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "42") (term "0,0,2,0,1,1,0,0,0,1,0"))
                           (rule "eqSymm" (formula "42") (term "0,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,1,0,0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,0,1,0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,0,1,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,0,2,1,0,1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,0,2,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,0,2,0,1,1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "0,2,0,0,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "42") (term "2,1,1,0,0,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "42") (term "2,1,1,1,0,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "42") (term "0,2,1,0,1,0,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "42") (term "0,2,0,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "42") (term "0,2,0,1,1,0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "42") (term "0,1,0,0,0,1,0"))
                           (rule "applyEq" (formula "42") (term "1,1,1,0,0,1,0") (ifseqformula "38"))
                           (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "3") (term "0"))
                           (rule "translateJavaAddInt" (formula "3") (term "2,1,1,0,1"))
                           (rule "replace_known_right" (formula "3") (term "0,1,0") (ifseqformula "47"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
                           (rule "polySimp_addComm0" (formula "3") (term "2,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
                           (rule "applyEq" (formula "3") (term "0,0,0,1") (ifseqformula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "3") (term "0,0,1"))
                           (rule "applyEq" (formula "3") (term "0,0,0,1,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "4"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
                           (rule "translateJavaAddInt" (formula "4") (term "0,2,0"))
                           (rule "translateJavaMulInt" (formula "4") (term "0,0,2,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,2,0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "14") (term "1,3,2,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "0,2,1,3,2,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,3,2,1"))
                           (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "14") (term "1,2,2,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,2,1,2,2,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "0,0,2,1,2,2,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,1,2,2,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,2,1,2,2,1"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "29") (term "0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "translateJavaUnaryMinusInt" (formula "29") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "29") (term "0,0,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "0,0"))
                           (rule "neg_literal" (formula "29") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "29") (term "0,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "29") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,1"))
                           (rule "translateJavaMulInt" (formula "5") (term "0,2,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,2,0,0,0,1"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "5") (term "1,1,0,1,1"))
                           (rule "replace_known_right" (formula "5") (term "0,1,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1"))
                           (rule "applyEq" (formula "5") (term "0,1,0,1") (ifseqformula "40"))
                           (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "5") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "5") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "6") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "18")) (ifInst ""  (formula "49")))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                           (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                           (rule "applyEq" (formula "6") (term "0,1,0,1") (ifseqformula "41"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,1"))
                           (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "6") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
                           (rule "true_left" (formula "6"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6") (term "0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "45")))
                           (rule "translateJavaCastInt" (formula "6") (term "1,1,0,1,0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "6") (term "1,1,0,0,0"))
                           (rule "translateJavaMulInt" (formula "6") (term "1,0,0,0,0,0,0"))
                           (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,0"))
                           (rule "translateJavaMulInt" (formula "6") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "castedGetAny" (formula "6") (term "0,0,1,0,0"))
                           (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "castedGetAny" (formula "6") (term "1,1,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,0,0"))
                           (rule "applyEq" (formula "6") (term "0,0,1,1,0,0,0") (ifseqformula "40"))
                           (rule "applyEq" (formula "6") (term "0,0,0,1,0,0,0") (ifseqformula "40"))
                           (rule "applyEq" (formula "6") (term "1,1,0,1,0,0,0") (ifseqformula "40"))
                           (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_subsumption6" (formula "6") (term "0,1,0,0,0") (ifseqformula "37"))
                           (rule "mul_literals" (formula "6") (term "1,1,0,0,1,0,0,0"))
                           (rule "greater_literals" (formula "6") (term "0,0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "leq_literals" (formula "6") (term "0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_subsumption6" (formula "6") (term "0,0,0,0") (ifseqformula "33"))
                           (rule "times_zero_1" (formula "6") (term "1,1,0,0,0,0,0"))
                           (rule "greater_literals" (formula "6") (term "0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "leq_literals" (formula "6") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "47") (term "1") (inst "i=i"))
                           (rule "eqSymm" (formula "47"))
                           (rule "nnf_imp2or" (formula "43") (term "0"))
                           (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "translateJavaMod" (formula "28") (term "0,0,1"))
                           (rule "translateJavaSubInt" (formula "28") (term "0,1,1,1"))
                           (rule "polySimp_elimSub" (formula "28") (term "0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,1,1,1"))
                           (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,1,1"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,1,1,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,1,1"))
                           (rule "applyEq" (formula "28") (term "0,0,0,1") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,0,1,1") (ifseqformula "29"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1,1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,1,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,1"))
                           (rule "applyEq" (formula "28") (term "1,0,1,1,1") (ifseqformula "29"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,1,1,1"))
                           (rule "jmod_axiom" (formula "28") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1"))
                           (rule "applyEqRigid" (formula "28") (term "0,1,0,0,1") (ifseqformula "27"))
                           (rule "polySimp_pullOutFactor0" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,1"))
                           (rule "replace_known_left" (formula "28") (term "1,1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "translateJavaAddInt" (formula "28") (term "0,0,0"))
                           (rule "translateJavaUnaryMinusInt" (formula "28") (term "1,0"))
                           (rule "translateJavaSubInt" (formula "28") (term "0,0"))
                           (rule "neg_literal" (formula "28") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "28") (term "0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0"))
                           (rule "lenNonNegative" (formula "42") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "42"))
                           (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                           (rule "mul_literals" (formula "42") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "34"))
                           (rule "leq_literals" (formula "42") (term "0"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "true_left" (formula "42"))
                           (rule "arrayLengthIsAShort" (formula "35") (term "1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "arrayLengthNotNegative" (formula "35") (term "1"))
                           (rule "seqGetAlphaCast" (formula "43") (term "0"))
                           (rule "castedGetAny" (formula "43") (term "0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "true_left" (formula "43"))
                           (rule "seqGetAlphaCast" (formula "39") (term "0"))
                           (rule "castedGetAny" (formula "39") (term "0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "13") (term "0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "46")))
                           (rule "translateJavaCastInt" (formula "13") (term "1,1,0,1,0,0,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "translateJavaCastInt" (formula "13") (term "0,0,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "1,1,0,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0"))
                           (rule "replace_known_left" (formula "13") (term "1,0,0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "castedGetAny" (formula "13") (term "1,1,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "13") (term "0,0,1,0,0"))
                           (rule "replace_known_left" (formula "13") (term "0,1,0,0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "13") (term "0,0,1,1,0,0,0") (ifseqformula "41"))
                           (rule "applyEq" (formula "13") (term "0,0,0,1,0,0,0") (ifseqformula "41"))
                           (rule "applyEq" (formula "13") (term "1,1,0,1,0,0,0") (ifseqformula "41"))
                           (rule "replace_known_left" (formula "13") (term "1,0,1,0,0,0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_subsumption6" (formula "13") (term "0,1,0,0,0") (ifseqformula "38"))
                           (rule "greater_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_subsumption6" (formula "13") (term "0,0,0,0") (ifseqformula "34"))
                           (rule "times_zero_1" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "greater_literals" (formula "13") (term "0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "leq_literals" (formula "13") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1"))
                           (rule "translateJavaMod" (formula "14") (term "0,0,1"))
                           (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,1"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,1,1,1"))
                           (rule "add_literals" (formula "14") (term "0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1"))
                           (rule "applyEq" (formula "14") (term "1,0,1,1,1") (ifseqformula "15"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1"))
                           (rule "applyEq" (formula "14") (term "0,0,0,1") (ifseqformula "15"))
                           (rule "applyEq" (formula "14") (term "0,0,1,1") (ifseqformula "15"))
                           (rule "inEqSimp_commuteGeq" (formula "14") (term "0,1,1"))
                           (rule "jmod_axiom" (formula "14") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_sepNegMonomial" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,1,1"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "translateJavaUnaryMinusInt" (formula "15") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "0,0,0"))
                           (rule "translateJavaSubInt" (formula "15") (term "0,0"))
                           (rule "neg_literal" (formula "15") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "15") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "52") (term "1,3,1"))
                           (rule "translateJavaMulInt" (formula "52") (term "0,2,1,3,1"))
                           (rule "polySimp_mulComm0" (formula "52") (term "0,2,1,3,1"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
                           (rule "translateJavaSubInt" (formula "1") (term "0,0"))
                           (rule "neg_literal" (formula "1") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "translateJavaSubInt" (formula "11") (term "0,0"))
                           (rule "translateJavaUnaryMinusInt" (formula "11") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "11") (term "0,0,0"))
                           (rule "neg_literal" (formula "11") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "33") (term "1,0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "33") (term "0,2,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,0,1,1,0"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "33") (term "0,0,1,1,0"))
                           (rule "translateJavaCastInt" (formula "33") (term "0,0,0,1,1,0"))
                           (rule "castedGetAny" (formula "33") (term "0,0,0,1,1,0"))
                           (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "33") (term "0,0,1,0"))
                           (rule "translateJavaSubInt" (formula "33") (term "0,0,1,0"))
                           (rule "polySimp_elimSub" (formula "33") (term "0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "33") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "33") (term "2,0,1,1,0"))
                           (rule "translateJavaCastInt" (formula "33") (term "0,2,0,1,1,0"))
                           (rule "castedGetAny" (formula "33") (term "0,2,0,1,1,0"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,2,1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                           (rule "inEqSimp_subsumption6" (formula "28") (term "0,0") (ifseqformula "24"))
                           (rule "greater_literals" (formula "28") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                           (rule "leq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "polyDiv_pullOut" (formula "28") (term "0") (inst "polyDivCoeff=l_0"))
                           (rule "equal_literals" (formula "28") (term "0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "28") (term "0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "0,0,0"))
                           (rule "div_literals" (formula "28") (term "0,0"))
                           (rule "add_zero_left" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "nnf_notAnd" (formula "45") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                           (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                           (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0,1,0"))
                           (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "37") (term "0,0,1,1"))
                           (rule "translateJavaCastInt" (formula "37") (term "0,0,0,1,1"))
                           (rule "castedGetAny" (formula "37") (term "0,0,0,1,1"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "37") (term "0,0,0,1"))
                           (rule "translateJavaSubInt" (formula "37") (term "2,0,1,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "37") (term "2,1,1,0,1,1,1"))
                           (rule "replace_known_right" (formula "37") (term "0,1,0") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
                           (rule "polySimp_elimSub" (formula "37") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "37") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "37") (term "2,1,1,0,1,1,1"))
                           (rule "add_literals" (formula "37") (term "0,2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "37") (term "2,0,1,0,1,1,1,1"))
                           (rule "add_literals" (formula "37") (term "0,2,0,1,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "37") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_left" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "37") (term "0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,1,1,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "37") (term "0,0,0"))
                           (rule "times_zero_2" (formula "37") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "37") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "times_zero_2" (formula "37") (term "1,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "37") (term "0,0,0,1,1,1,1") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "37") (term "0,0,0,1,1,1"))
                           (rule "replace_known_left" (formula "37") (term "0,0,1,1,1") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                           (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "37") (term "0,0,0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "37") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_subsumption1" (formula "37") (term "0,0,1,1,1,1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "37") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "37") (term "0,0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "37") (term "1,1,0,0,0,0,1,1,1,1"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "37") (term "0,0,0,0,1,1,1,1"))
                           (rule "qeq_literals" (formula "37") (term "0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_subsumption1" (formula "37") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "37") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "37") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,0,0"))
                           (rule "add_literals" (formula "37") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "37") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "38") (term "1,0,1,1"))
                           (rule "translateJavaCastInt" (formula "38") (term "0,1,0,1,1"))
                           (rule "castedGetAny" (formula "38") (term "0,1,0,1,1"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "38") (term "0,0,1,1,1"))
                           (rule "translateJavaCastInt" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "castedGetAny" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "38") (term "1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "38") (term "2,0,1,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "38") (term "2,1,1,0,1,1,1"))
                           (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "18")) (ifInst ""  (formula "52")))
                           (rule "polySimp_elimSub" (formula "38") (term "2,0,1,0,1,1,1,1"))
                           (rule "mul_literals" (formula "38") (term "1,2,0,1,0,1,1,1,1"))
                           (rule "polySimp_addComm0" (formula "38") (term "2,1,1,0,1,1,1"))
                           (rule "polySimp_addComm0" (formula "38") (term "2,0,1,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                           (rule "replace_known_left" (formula "38") (term "0,0,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,0,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,0,0,1,1,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "inEqSimp_subsumption1" (formula "38") (term "1,0,0,1,1,1,1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0,1,0,0,1,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,1,1,1,1"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,1,1,1,1"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,1,1,1,1"))
                           (rule "add_zero_right" (formula "38") (term "0,0,1,0,0,1,1,1,1"))
                           (rule "qeq_literals" (formula "38") (term "0,1,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_subsumption1" (formula "38") (term "0,0,1,1,1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,1,1,1"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,1,1,1"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,1,1,1"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "38") (term "0,0,0,0,0,0,1,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0,1,1,1"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0,0,0,1,1,1"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,1,1,1"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0,1,1,1"))
                           (rule "qeq_literals" (formula "38") (term "0,0,0,1,1,1"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_subsumption1" (formula "38") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "38") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "39") (term "1,0,1,1,1"))
                           (rule "translateJavaCastInt" (formula "39") (term "0,1,0,1,1,1"))
                           (rule "castedGetAny" (formula "39") (term "0,1,0,1,1,1"))
                           (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "39") (term "1,1,1,1") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "49")))
                           (rule "translateJavaMulInt" (formula "39") (term "1,0,0,0,0,0,1,1,1,1"))
                           (rule "translateJavaMulInt" (formula "39") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "translateJavaAddInt" (formula "39") (term "1,1,0,0,1,1,1,1"))
                           (rule "translateJavaCastInt" (formula "39") (term "1,1,0,1,0,0,0,1,1,1,1"))
                           (rule "translateJavaCastInt" (formula "39") (term "0,0,1,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,0,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "39") (term "1,0,0,0,0,1,1,1,1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "39") (term "1,0,0,1,1,1,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "castedGetAny" (formula "39") (term "0,0,1,0,1,1,1,1"))
                           (rule "replace_known_left" (formula "39") (term "0,1,0,1,1,1,1") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "castedGetAny" (formula "39") (term "1,1,0,1,0,0,1,1,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1,0,0,1,1,1,1"))
                           (rule "applyEq" (formula "39") (term "1,1,0,1,0,0,1,1,1,1") (ifseqformula "44"))
                           (rule "replace_known_left" (formula "39") (term "1,0,1,0,0,1,1,1,1") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "applyEq" (formula "39") (term "0,0,1,0,0,1,1,1,1") (ifseqformula "44"))
                           (rule "applyEq" (formula "39") (term "0,0,1,1,0,0,1,1,1,1") (ifseqformula "44"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,1,1,1,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,1,1,1,1"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,1,1,1,1"))
                           (rule "inEqSimp_subsumption6" (formula "39") (term "0,0,0,1,1,1,1") (ifseqformula "35"))
                           (rule "greater_literals" (formula "39") (term "0,0,0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "leq_literals" (formula "39") (term "0,0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "inEqSimp_subsumption6" (formula "39") (term "0,0,0,1,1,1,1") (ifseqformula "41"))
                           (rule "greater_literals" (formula "39") (term "0,0,0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,1,1,1,1"))
                           (rule "leq_literals" (formula "39") (term "0,0,0,0,1,1,1,1"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "40") (term "0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "translateJavaAddInt" (formula "40") (term "0,0,0"))
                           (rule "translateJavaUnaryMinusInt" (formula "40") (term "1,0"))
                           (rule "translateJavaSubInt" (formula "40") (term "0,0"))
                           (rule "neg_literal" (formula "40") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "0,0"))
                           (rule "mul_literals" (formula "40") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "40") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                           (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "48") (term "1,0,1,0,0,1,0"))
                           (rule "translateJavaCastInt" (formula "48") (term "0,1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "48") (term "0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "48") (term "0,0,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "48") (term "0,1,0,0,1,0"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "48") (term "0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "48"))
                           (rule "translateJavaMod" (formula "48") (term "0,1,0,1,0"))
                           (rule "jmod_axiom" (formula "48") (term "0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "48") (term "1,0,1,0,1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "48") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0,1,0"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "translateJavaMod" (formula "3") (term "0,0,1,1"))
                           (rule "jmod_axiom" (formula "3") (term "0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1,1"))
                           (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1"))
                           (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "16") (term "2,1") (inst "i=i"))
                           (rule "eqSymm" (formula "16"))
                           (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
                           (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,1"))
                           (rule "translateJavaMulInt" (formula "5") (term "0,2,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,2,0,0,0,1"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1,1,1"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "translateJavaMod" (formula "5") (term "0,0,1,1,1"))
                           (rule "jmod_axiom" (formula "5") (term "0,0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,1,1"))
                           (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1"))
                           (rule "jdiv_axiom" (formula "43") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "43") (term "0,0,2,1"))
                           (rule "eqSymm" (formula "43"))
                           (rule "applyEq" (formula "43") (term "1") (ifseqformula "44"))
                           (rule "inEqSimp_subsumption6" (formula "43") (term "0,0") (ifseqformula "41"))
                           (rule "times_zero_1" (formula "43") (term "1,1,0,0,0"))
                           (rule "greater_literals" (formula "43") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "leq_literals" (formula "43") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "polyDiv_pullOut" (formula "43") (term "0") (inst "polyDivCoeff=l_1"))
                           (rule "equal_literals" (formula "43") (term "0,0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "43") (term "0,0,0"))
                           (rule "add_literals" (formula "43") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "43") (term "0,0,0"))
                           (rule "div_literals" (formula "43") (term "0,0"))
                           (rule "add_zero_left" (formula "43") (term "0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "true_left" (formula "43"))
                           (rule "ifthenelse_split" (formula "7") (term "0"))
                           (branch "begin <= l_1 * -256 + add_0 TRUE"
                              (rule "eqSymm" (formula "8"))
                              (rule "applyEq" (formula "6") (term "0,0,0,1") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0,0,1"))
                              (rule "add_literals" (formula "6") (term "1,0,0,0,1"))
                              (rule "times_zero_1" (formula "6") (term "0,0,0,1"))
                              (rule "leq_literals" (formula "6") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "applyEq" (formula "51") (term "0") (ifseqformula "8"))
                              (rule "polySimp_homoEq" (formula "51"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "51") (term "0"))
                              (rule "applyEq" (formula "5") (term "0,0,0,1") (ifseqformula "8"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "0,0,1"))
                              (rule "applyEq" (formula "52") (term "1,1,0") (ifseqformula "8"))
                              (rule "eqSymm" (formula "52"))
                              (rule "polySimp_addAssoc" (formula "52") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "52") (term "0,1,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "52") (term "1,1"))
                              (rule "add_literals" (formula "52") (term "1,1,1,1"))
                              (rule "times_zero_1" (formula "52") (term "1,1,1"))
                              (rule "add_zero_right" (formula "52") (term "1,1"))
                              (rule "bsum_lower_equals_upper" (formula "52") (term "1"))
                              (rule "applyEq" (formula "55") (term "1,3,1") (ifseqformula "8"))
                              (rule "polySimp_addAssoc" (formula "55") (term "3,1"))
                              (rule "polySimp_addComm0" (formula "55") (term "0,3,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "55") (term "3,1"))
                              (rule "add_literals" (formula "55") (term "1,1,3,1"))
                              (rule "times_zero_1" (formula "55") (term "1,3,1"))
                              (rule "add_zero_right" (formula "55") (term "3,1"))
                              (rule "polySimp_sepPosMonomial" (formula "51"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1"))
                              (rule "polySimp_rightDist" (formula "51") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "51") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "51") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "0,1"))
                              (rule "inEqSimp_strengthen0" (formula "7") (ifseqformula "51"))
                              (rule "polySimp_addAssoc" (formula "7") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "51") (ifseqformula "7"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "51") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "51") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                              (rule "add_literals" (formula "51") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "51") (term "1,0,0"))
                              (rule "add_zero_right" (formula "51") (term "0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "51") (term "0,0"))
                              (rule "add_literals" (formula "51") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "51") (term "1,0,0"))
                              (rule "add_zero_right" (formula "51") (term "0,0"))
                              (rule "qeq_literals" (formula "51") (term "0"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "false_right" (formula "51"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "13"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "begin <= l_1 * -256 + add_0 FALSE"
                              (rule "eqSymm" (formula "7"))
                              (rule "close" (formula "51") (ifseqformula "7"))
                           )
                        )
                     )
                     (branch "0 < bucket_0 + 1 FALSE"
                        (rule "true_left" (formula "13"))
                        (rule "translateJavaSubInt" (formula "17") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "3") (term "2,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "3") (term "2,1,2,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "5"))
                        (rule "eqSymm" (formula "23"))
                        (rule "eqSymm" (formula "19"))
                        (rule "eqSymm" (formula "4"))
                        (rule "replace_known_right" (formula "27") (term "0,1,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "add_zero_right" (formula "27") (term "1"))
                        (rule "replace_known_right" (formula "4") (term "0,2,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_elimSub" (formula "19") (term "0,1"))
                        (rule "polySimp_homoEq" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_addComm0" (formula "26") (term "2,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "1"))
                        (rule "polySimp_addComm0" (formula "6") (term "0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "inEqSimp_ltRight" (formula "22"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "times_zero_2" (formula "7") (term "1,0"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "12"))
                        (rule "polySimp_addComm1" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "11"))
                        (rule "polySimp_invertEq" (formula "27"))
                        (rule "times_zero_2" (formula "27") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulAssoc" (formula "4") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                        (rule "leq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
               )
               (branch " begin <= add_0 & add_0 <= begin + self.first_empty_position FALSE"
                  (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "1,0") (userinteraction))
                  (rule "true_left" (formula "13"))
                  (rule "translateJavaAddInt" (formula "2") (term "2,0,0,2,1"))
                  (rule "translateJavaSubInt" (formula "17") (term "0,0"))
                  (rule "translateJavaAddInt" (formula "6") (term "2,1,1,0,1,1,1"))
                  (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,1,1,1,1"))
                  (rule "translateJavaAddInt" (formula "2") (term "2,1,2,1"))
                  (rule "andLeft" (formula "3"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "2"))
                  (rule "replace_known_right" (formula "2") (term "0,2,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "replace_known_left" (formula "7") (term "1,0,0,0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                  (rule "polySimp_elimSub" (formula "25") (term "5,1,1,1"))
                  (rule "mul_literals" (formula "25") (term "1,5,1,1,1"))
                  (rule "polySimp_addLiterals" (formula "25") (term "5,1,1,1"))
                  (rule "add_zero_right" (formula "25") (term "5,1,1,1"))
                  (rule "polySimp_homoEq" (formula "8"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,1"))
                  (rule "polySimp_elimSub" (formula "7") (term "2,0,1,1,1,1,1"))
                  (rule "mul_literals" (formula "7") (term "1,2,0,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "1,0,1,1"))
                  (rule "polySimp_addComm0" (formula "23") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,1,1,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "7") (term "2,0,1,1,1,1,1"))
                  (rule "polySimp_addComm0" (formula "25") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_leqRight" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0,1"))
                  (rule "add_zero_left" (formula "25") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                  (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "applyEq" (formula "8") (term "0,0,0,1,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "7") (term "1") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "1,1,0,1,1,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "1,1,1,1,1,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_invertInEq0" (formula "25") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1"))
                  (rule "times_zero_2" (formula "25") (term "1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1"))
                  (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "24") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "0,1,1"))
                  (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_leqRight" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "qeq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "self.bucketStart(bucket_0) <= self.first_empty_position FALSE"
         (rule "ifthenelse_split" (formula "19") (term "1,1,0") (userinteraction))
         (branch " self.bucketStart(bucket_0 + 1) <= self.first_empty_position TRUE"
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0") (userinteraction))
            (rule "true_left" (formula "10"))
            (rule "translateJavaSubInt" (formula "14") (term "0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "2,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "2,0,1,0,1,1,1,1"))
            (rule "polySimp_addLiterals" (formula "1") (term "2,1,1,0,1,1,1"))
            (rule "andLeft" (formula "3"))
            (rule "eqSymm" (formula "15"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_left" (formula "1") (term "1,1,1,1,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "19")) (ifInst ""  (formula "4")))
            (rule "polySimp_elimSub" (formula "15") (term "0,1"))
            (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,2,0,1,1,1,1,1"))
            (rule "polySimp_addLiterals" (formula "1") (term "2,0,1,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "2,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "21") (term "2,1,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "2,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "2,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,0,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "2,0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "2,0,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "2,0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,1"))
            (rule "inEqSimp_leqRight" (formula "18"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "bsum_induction_upper_concrete" (formula "21") (term "1"))
            (rule "polySimp_addComm0" (formula "21") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1"))
            (rule "replace_known_left" (formula "21") (term "0,0,1") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_homoInEq0" (formula "4"))
            (rule "times_zero_2" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_invertInEq0" (formula "2") (term "0,0,1,1,1,1"))
            (rule "times_zero_2" (formula "2") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "replace_known_left" (formula "2") (term "0,0,1,1,1,1") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (term "0,1,1,1,1") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,1,1,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "qeq_literals" (formula "2") (term "0,0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
            (rule "leq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
            (rule "andLeft" (formula "5"))
            (rule "inEqSimp_homoInEq1" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "1,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0"))
            (rule "add_literals" (formula "5") (term "0"))
            (rule "leq_literals" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
         (branch " self.bucketStart(bucket_0 + 1) <= self.first_empty_position FALSE"
            (rule "bsum_induction_upper" (formula "20") (term "1") (userinteraction))
            (rule "ifthenelse_split" (formula "20") (term "1,1") (userinteraction))
            (branch "0 < bucket_0 + 1 TRUE"
               (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "21") (term "1,1") (userinteraction))
               (rule "translateJavaAddInt" (formula "21") (term "2,1,1"))
               (rule "translateJavaAddInt" (formula "21") (term "3,1,1"))
               (rule "sub" (formula "21") (term "2,1,3,1,1"))
               (rule "neg_literal" (formula "21") (term "1,2,1,3,1,1"))
               (rule "polySimp_addLiterals" (formula "21") (term "2,1,3,1,1"))
               (rule "add_zero_right" (formula "21") (term "2,1,3,1,1"))
               (rule "sub" (formula "21") (term "2,1,2,1,1"))
               (rule "polySimp_elimNeg" (formula "21") (term "1,2,1,2,1,1"))
               (rule "mul_literals" (formula "21") (term "1,2,1,2,1,1"))
               (rule "polySimp_addComm0" (formula "21") (term "0,2,1,2,1,1"))
               (rule "polySimp_addComm1" (formula "21") (term "2,1,2,1,1"))
               (rule "add_literals" (formula "21") (term "0,2,1,2,1,1"))
               (rule "add_zero_left" (formula "21") (term "2,1,2,1,1"))
               (rule "eqTermCut" (formula "21") (term "1,3,1,1") (inst "s=de.wiesler.BucketPointers::nextWriteOf(heap,
                                       self,
                                       bucket_0)") (userinteraction))
               (branch "Assume self.lastReadOf(bucket_0) = self.nextWriteOf(bucket_0)"
                  (rule "true_left" (formula "10"))
                  (rule "translateJavaSubInt" (formula "14") (term "0,0"))
                  (rule "andLeft" (formula "3"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "15"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_elimSub" (formula "22") (term "1,0,1"))
                  (rule "mul_literals" (formula "22") (term "1,1,0,1"))
                  (rule "polySimp_addLiterals" (formula "22") (term "1,0,1"))
                  (rule "add_zero_right" (formula "22") (term "1,0,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "21") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1"))
                  (rule "polySimp_addComm0" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "22") (term "1"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "add_zero_left" (formula "4") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "times_zero_2" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "8"))
                  (rule "polySimp_homoEq" (formula "22"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                  (rule "add_literals" (formula "22") (term "1,1,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0"))
                  (rule "add_zero_right" (formula "22") (term "0"))
                  (rule "applyEq" (formula "22") (term "1,2,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_invertInEq0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "times_zero_2" (formula "4") (term "1"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "nnf_imp2or" (formula "16") (term "0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0"))
                  (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "17") (term "1,0,1,0,0,0,0"))
                  (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0,0"))
                  (rule "translateJavaCastInt" (formula "17") (term "1,1,0,1,0,0,0"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "19"))
                  (rule "notLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_addComm0" (formula "22") (term "1"))
                  (rule "castedGetAny" (formula "23") (term "0"))
                  (rule "castedGetAny" (formula "20") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                  (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
                  (rule "leq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "19") (term "0,0"))
                  (rule "add_zero_left" (formula "19") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1"))
                  (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "18"))
                  (rule "greater_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "2"))
                  (rule "mul_literals" (formula "21") (term "0,0"))
                  (rule "add_zero_left" (formula "21") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                  (rule "mul_literals" (formula "21") (term "1"))
                  (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "19"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "greater_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "times_zero_1" (formula "18") (term "0,0"))
                  (rule "add_zero_left" (formula "18") (term "0"))
                  (rule "nnf_imp2or" (formula "29") (term "0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "7") (term "2,1"))
                  (rule "translateJavaAddInt" (formula "7") (term "2,2,1"))
                  (rule "translateJavaAddInt" (formula "7") (term "3,2,1"))
                  (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "3") (term "1"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "9")) (ifInst ""  (formula "32")))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1"))
                  (rule "applyEq" (formula "3") (term "0,1,0,1,1") (ifseqformula "17"))
                  (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "4") (term "0"))
                  (rule "translateJavaAddInt" (formula "4") (term "2,1,1,0,1"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")) (ifInst ""  (formula "33")))
                  (rule "polySimp_addComm0" (formula "4") (term "2,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1"))
                  (rule "applyEq" (formula "4") (term "0,0,0,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "4") (term "0,0,0,1,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "5"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "5") (term "1"))
                  (rule "translateJavaMulInt" (formula "5") (term "0,2,1"))
                  (rule "eqSymm" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,2,0"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0"))
                  (rule "translateJavaCastInt" (formula "18") (term "0,0"))
                  (rule "castedGetAny" (formula "18") (term "0,0"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "translateJavaSubInt" (formula "18") (term "0,1,1,1"))
                  (rule "translateJavaMod" (formula "18") (term "0,0,1"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1,1"))
                  (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,1,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,1"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,1"))
                  (rule "jmod_axiom" (formula "18") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "18") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                  (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "19"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "0,1"))
                  (rule "mul_literals" (formula "20") (term "0,0,1"))
                  (rule "newSym_eq" (formula "18") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(add(mul(begin,
                                             Z(neglit(1(#)))),
                                         end)),
    Z(0(#)))") (inst "l=l_0"))
                  (rule "times_zero_1" (formula "18") (term "1,1"))
                  (rule "add_zero_right" (formula "18") (term "1"))
                  (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "18"))
                  (rule "eqSymm" (formula "19"))
                  (rule "applyEq" (formula "3") (term "1,1,0,1,1") (ifseqformula "19"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq0" (formula "21"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                  (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1"))
                  (rule "mul_literals" (formula "21") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "1,1,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0"))
                  (rule "add_zero_right" (formula "16") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                  (rule "leq_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "40") (term "1,3,0"))
                  (rule "translateJavaMulInt" (formula "40") (term "0,2,1,3,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "0,2,1,3,0"))
                  (rule "applyEq" (formula "40") (term "1,3,0") (ifseqformula "5"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "40") (term "1,2,0"))
                  (rule "translateJavaMulInt" (formula "40") (term "0,2,1,2,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "0,2,1,2,0"))
                  (rule "applyEq" (formula "40") (term "1,2,0") (ifseqformula "5"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1"))
                  (rule "translateJavaCastInt" (formula "2") (term "0,1,1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "1,1"))
                  (rule "translateJavaCastInt" (formula "1") (term "0,1,1"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "2,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "2,2,0,1,1,0"))
                  (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "35") (term "0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "translateJavaCastInt" (formula "35") (term "0,1,0,1,0"))
                  (rule "translateJavaCastInt" (formula "35") (term "1,1,0,1,0"))
                  (rule "castedGetAny" (formula "35") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "35") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0"))
                  (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "33"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,0"))
                  (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "33"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "translateJavaMod" (formula "32") (term "0"))
                  (rule "jmod_axiom" (formula "32") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "32"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                  (rule "newSym_eq" (formula "32") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_1"))
                  (rule "times_zero_1" (formula "32") (term "1,1"))
                  (rule "add_zero_right" (formula "32") (term "1"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "32"))
                  (rule "eqSymm" (formula "33"))
                  (rule "applyEq" (formula "31") (term "1") (ifseqformula "33"))
                  (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "33"))
                  (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,1"))
                  (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "33"))
                  (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "33"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,0"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "33"))
                  (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "33"))
                  (rule "applyEq" (formula "24") (term "3,0,1,1,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                  (rule "elimGcdGeq_antec" (formula "30") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcdRightDiv=Z(0(#))"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "30") (term "0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "28") (term "0"))
                  (rule "translateJavaSubInt" (formula "28") (term "2,0,1,0,1,1,1,1"))
                  (rule "translateJavaAddInt" (formula "28") (term "2,1,1,0,1,1,1"))
                  (rule "replace_known_right" (formula "28") (term "0,1,0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                  (rule "polySimp_elimSub" (formula "28") (term "2,0,1,0,1,1,1,1"))
                  (rule "mul_literals" (formula "28") (term "1,2,0,1,0,1,1,1,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "2,1,1,0,1,1,1"))
                  (rule "add_literals" (formula "28") (term "0,2,1,1,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "2,0,1,0,1,1,1,1"))
                  (rule "add_literals" (formula "28") (term "0,2,0,1,0,1,1,1,1"))
                  (rule "add_zero_left" (formula "28") (term "2,0,1,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,1,1,1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,1,1,1,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,1,1,1"))
                  (rule "add_zero_left" (formula "28") (term "0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,1,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0,0"))
                  (rule "times_zero_2" (formula "28") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "28") (term "0,0,1,1,1") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_invertInEq0" (formula "28") (term "0,0,0,1,1,1,1"))
                  (rule "times_zero_2" (formula "28") (term "1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0,1,1,1,1"))
                  (rule "replace_known_left" (formula "28") (term "0,0,0,1,1,1,1") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "28") (term "1,0,0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                  (rule "qeq_literals" (formula "28") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_subsumption1" (formula "28") (term "0,1") (ifseqformula "29"))
                  (rule "leq_literals" (formula "28") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_subsumption1" (formula "28") (term "0,0,1,1,1") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,1,1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,1,1,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,0,0,1,1,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1,1,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,1,1,1"))
                  (rule "qeq_literals" (formula "28") (term "0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_subsumption1" (formula "28") (term "0,0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "28") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "29") (term "0"))
                  (rule "translateJavaCastInt" (formula "29") (term "0,0"))
                  (rule "castedGetAny" (formula "29") (term "0,0"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "30") (term "0"))
                  (rule "translateJavaCastInt" (formula "30") (term "0,0"))
                  (rule "castedGetAny" (formula "30") (term "0,0"))
                  (rule "Definition_axiom_for_isValidBucketPointer_in_de_wiesler_BucketPointers" (formula "38") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,2,1,0,0,0,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "38") (term "2,1,1,1,0,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "38") (term "0,2,1,0,1,0,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,2,1,0,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,2,0,1,1,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,2,0,0,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "38") (term "0,2,0,1,1,0,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,2,0,1,0,0,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "38") (term "2,1,1,0,0,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "38") (term "0,2,0,0,1,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,0,2,1,0,1,0,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,0,2,0,1,1,0,0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "38") (term "0,0,2,0,0,1,1,0"))
                  (rule "eqSymm" (formula "38") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,2,1,0,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,2,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,2,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,2,0,1,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,0,2,1,0,1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,0,2,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,0,2,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,2,0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "38") (term "2,1,1,1,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "38") (term "2,1,1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,2,1,0,1,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,2,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,2,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "38") (term "1,1,1,0,0,1,0") (ifseqformula "34"))
                  (rule "nnf_imp2or" (formula "37") (term "0"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "1,2,2,1"))
                  (rule "translateJavaAddInt" (formula "9") (term "0,2,1,2,2,1"))
                  (rule "translateJavaMulInt" (formula "9") (term "0,0,2,1,2,2,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,1,2,2,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,2,1,2,2,1"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "9") (term "1,3,2,1"))
                  (rule "translateJavaMulInt" (formula "9") (term "0,2,1,3,2,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,3,2,1"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "3") (term "1,1,1,1") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                  (rule "translateJavaAddInt" (formula "3") (term "1,1,0,0,1,1,1,1"))
                  (rule "translateJavaCastInt" (formula "3") (term "0,0,1,0,1,1,1,1"))
                  (rule "translateJavaMulInt" (formula "3") (term "1,0,0,0,0,0,1,1,1,1"))
                  (rule "translateJavaMulInt" (formula "3") (term "0,1,0,0,0,0,1,1,1,1"))
                  (rule "translateJavaCastInt" (formula "3") (term "1,1,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0,0,1,1,1,1"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,1,1,1,1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,1,1,1,1"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0,1,1,1,1") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,1,1,1,1"))
                  (rule "replace_known_left" (formula "3") (term "0,1,0,1,1,1,1") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "castedGetAny" (formula "3") (term "1,1,0,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,0,0,1,1,1,1"))
                  (rule "applyEq" (formula "3") (term "0,0,1,1,0,0,1,1,1,1") (ifseqformula "34"))
                  (rule "applyEq" (formula "3") (term "1,1,0,1,0,0,1,1,1,1") (ifseqformula "34"))
                  (rule "replace_known_left" (formula "3") (term "1,0,1,0,0,1,1,1,1") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEq" (formula "3") (term "0,0,1,0,0,1,1,1,1") (ifseqformula "34"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,1,1,1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,1,1,1,1"))
                  (rule "inEqSimp_subsumption6" (formula "3") (term "0,0,0,1,1,1,1") (ifseqformula "26"))
                  (rule "greater_literals" (formula "3") (term "0,0,0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,1,1,1"))
                  (rule "leq_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_subsumption6" (formula "3") (term "0,0,0,1,1,1,1") (ifseqformula "31"))
                  (rule "greater_literals" (formula "3") (term "0,0,0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,1,1,1"))
                  (rule "leq_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,0,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,2,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,2,0,0,0,1"))
                  (rule "applyEq" (formula "4") (term "0,0,0,1") (ifseqformula "5"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "1,1,1") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "39")))
                  (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "4") (term "1,1,0,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "4") (term "1,0,0,0,0,0,1,1,1"))
                  (rule "translateJavaCastInt" (formula "4") (term "1,1,0,1,0,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0,0,0,1,1,1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0,1,1,1") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "castedGetAny" (formula "4") (term "1,1,0,1,0,0,1,1,1"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,1,1,1"))
                  (rule "replace_known_left" (formula "4") (term "0,1,0,1,1,1") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,0,1,1,1"))
                  (rule "applyEq" (formula "4") (term "1,1,0,1,0,0,1,1,1") (ifseqformula "34"))
                  (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,1,1,1") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,1,1,1") (ifseqformula "34"))
                  (rule "applyEq" (formula "4") (term "0,0,1,0,0,1,1,1") (ifseqformula "34"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,1,1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,1,1,1") (ifseqformula "26"))
                  (rule "greater_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,1,1"))
                  (rule "leq_literals" (formula "4") (term "0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,1,1,1") (ifseqformula "31"))
                  (rule "greater_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,1,1"))
                  (rule "leq_literals" (formula "4") (term "0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "5") (term "1"))
                  (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                  (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "5"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "translateJavaUnaryMinusInt" (formula "23") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "23") (term "0,0"))
                  (rule "translateJavaAddInt" (formula "23") (term "0,0,0"))
                  (rule "neg_literal" (formula "23") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "23") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "translateJavaMod" (formula "20") (term "0,0,1"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,1,1,1"))
                  (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,1"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "20") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,1,1"))
                  (rule "applyEq" (formula "20") (term "0,0,1,1") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,1,1"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,1"))
                  (rule "applyEq" (formula "20") (term "1,0,1,1,1") (ifseqformula "21"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1,1"))
                  (rule "applyEq" (formula "20") (term "0,0,0,1") (ifseqformula "21"))
                  (rule "jmod_axiom" (formula "20") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,1"))
                  (rule "applyEqRigid" (formula "20") (term "0,1,0,0,1") (ifseqformula "19"))
                  (rule "polySimp_pullOutFactor0" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                  (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                  (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,0,0"))
                  (rule "neg_literal" (formula "20") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "20") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "37") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                  (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "37") (term "0,1,0"))
                  (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "42") (term "1,3,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "2,1,1,0,1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "41")))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "43") (term "1,3,0"))
                  (rule "translateJavaAddInt" (formula "43") (term "0,2,1,3,0"))
                  (rule "translateJavaMulInt" (formula "43") (term "0,0,2,1,3,0"))
                  (rule "polySimp_mulComm0" (formula "43") (term "0,0,2,1,3,0"))
                  (rule "polySimp_addComm0" (formula "43") (term "0,2,1,3,0"))
                  (rule "applyEq" (formula "43") (term "1,3,0") (ifseqformula "6"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "43") (term "1,2,0"))
                  (rule "translateJavaAddInt" (formula "43") (term "0,2,1,2,0"))
                  (rule "translateJavaMulInt" (formula "43") (term "0,0,2,1,2,0"))
                  (rule "polySimp_mulComm0" (formula "43") (term "0,0,2,1,2,0"))
                  (rule "polySimp_addComm0" (formula "43") (term "0,2,1,2,0"))
                  (rule "applyEq" (formula "43") (term "1,2,0") (ifseqformula "6"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "translateJavaSubInt" (formula "3") (term "0,0"))
                  (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "3") (term "0,0,0"))
                  (rule "neg_literal" (formula "3") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "translateJavaMod" (formula "2") (term "0,0,1"))
                  (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
                  (rule "jmod_axiom" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "3") (term "0,0,0"))
                  (rule "translateJavaSubInt" (formula "3") (term "0,0"))
                  (rule "neg_literal" (formula "3") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "26") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "26") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "0,0,1,1,0"))
                  (rule "translateJavaCastInt" (formula "26") (term "0,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "26") (term "0,0,0,1,1,0"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "26") (term "1,0,1,1,0"))
                  (rule "translateJavaMulInt" (formula "26") (term "0,2,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,2,1,0,1,1,0"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "2,0,1,1,0"))
                  (rule "translateJavaCastInt" (formula "26") (term "0,2,0,1,1,0"))
                  (rule "castedGetAny" (formula "26") (term "0,2,0,1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,1,1,1,1,1"))
                  (rule "lenNonNegative" (formula "38") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "38"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                  (rule "mul_literals" (formula "38") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "29"))
                  (rule "leq_literals" (formula "38") (term "0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "true_left" (formula "38"))
                  (rule "arrayLengthNotNegative" (formula "30") (term "1"))
                  (rule "arrayLengthIsAShort" (formula "30") (term "1"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "seqGetAlphaCast" (formula "39") (term "0"))
                  (rule "castedGetAny" (formula "39") (term "0"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "true_left" (formula "39"))
                  (rule "seqGetAlphaCast" (formula "35") (term "0"))
                  (rule "castedGetAny" (formula "35") (term "0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "nnf_imp2or" (formula "6") (term "0,1,1,1,1"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "31") (term "0,0,1,1"))
                  (rule "translateJavaCastInt" (formula "31") (term "0,0,0,1,1"))
                  (rule "castedGetAny" (formula "31") (term "0,0,0,1,1"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "31") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "translateJavaMod" (formula "31") (term "0,0,1"))
                  (rule "jmod_axiom" (formula "31") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "31") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "translateJavaMod" (formula "32") (term "0,0,1"))
                  (rule "translateJavaSubInt" (formula "32") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "32") (term "0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "1,1,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "32") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,1,1,1"))
                  (rule "jmod_axiom" (formula "32") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "32") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,1"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,1,1"))
                  (rule "mul_literals" (formula "32") (term "0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,1,1,1"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "translateJavaAddInt" (formula "32") (term "0,0,0"))
                  (rule "translateJavaUnaryMinusInt" (formula "32") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "32") (term "0,0"))
                  (rule "neg_literal" (formula "32") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "32") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "33") (term "0"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "translateJavaSubInt" (formula "33") (term "0,0"))
                  (rule "translateJavaUnaryMinusInt" (formula "33") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "33") (term "0,0,0"))
                  (rule "neg_literal" (formula "33") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "33") (term "0,0"))
                  (rule "mul_literals" (formula "33") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "33") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                  (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "41") (term "1,0,1,0,0,1,0"))
                  (rule "translateJavaCastInt" (formula "41") (term "0,1,0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "41") (term "0,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "41") (term "0,0,0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "41") (term "0,1,0,0,1,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "41") (term "0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "translateJavaMod" (formula "41") (term "0,1,0,1,0"))
                  (rule "jmod_axiom" (formula "41") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0,1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "41") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "40") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "40") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0"))
                  (rule "jdiv_axiom" (formula "22") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "22"))
                  (rule "applyEq" (formula "22") (term "1") (ifseqformula "23"))
                  (rule "inEqSimp_subsumption6" (formula "22") (term "0,0") (ifseqformula "18"))
                  (rule "times_zero_1" (formula "22") (term "1,1,0,0,0"))
                  (rule "greater_literals" (formula "22") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "leq_literals" (formula "22") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "polyDiv_pullOut" (formula "22") (term "0") (inst "polyDivCoeff=l_0"))
                  (rule "equal_literals" (formula "22") (term "0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_homoEq" (formula "22"))
                  (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "22") (term "0,0,0,1,0"))
                  (rule "div_literals" (formula "22") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "22") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                  (rule "add_literals" (formula "22") (term "1,0"))
                  (rule "times_zero_1" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "11") (term "2,1") (inst "i=i"))
                  (rule "eqSymm" (formula "11"))
                  (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "5") (term "0,0,0,1,1"))
                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "13")) (ifInst ""  (formula "44")))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                  (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1"))
                  (rule "applyEq" (formula "5") (term "0,1,0,1") (ifseqformula "38"))
                  (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "5") (term "0,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "6") (term "0,0,0,1"))
                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "15")) (ifInst ""  (formula "45")))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                  (rule "applyEq" (formula "6") (term "0,1,0,1") (ifseqformula "39"))
                  (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,1"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "6"))
                  (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "6") (term "0,1,0,1"))
                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "15")) (ifInst ""  (formula "45")))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "applyEq" (formula "6") (term "0,1,0,1") (ifseqformula "39"))
                  (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,1"))
                  (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "6") (term "0,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "15")) (ifInst ""  (formula "45")))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "translateJavaMod" (formula "7") (term "0,0,0,1,1,1,1"))
                  (rule "jmod_axiom" (formula "7") (term "0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1,1,1,1"))
                  (rule "applyEqRigid" (formula "7") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "38"))
                  (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,0,1,1,1,1"))
                  (rule "add_literals" (formula "7") (term "1,0,0,0,1,1,1,1"))
                  (rule "times_zero_1" (formula "7") (term "0,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "1,0,0,1"))
                  (rule "translateJavaSubInt" (formula "8") (term "2,0,1,0,1,1,1,1"))
                  (rule "translateJavaAddInt" (formula "8") (term "2,1,1,0,1,1,1"))
                  (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "16")) (ifInst ""  (formula "46")))
                  (rule "polySimp_elimSub" (formula "8") (term "2,0,1,0,1,1,1,1"))
                  (rule "mul_literals" (formula "8") (term "1,2,0,1,0,1,1,1,1"))
                  (rule "polySimp_addComm0" (formula "8") (term "2,1,1,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "8") (term "2,0,1,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0,1,1,1,1") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0,1,1,1,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0,1,1,1,1"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0,1,1,1,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,1,1,1"))
                  (rule "qeq_literals" (formula "8") (term "0,1,0,0,1,1,1,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_subsumption1" (formula "8") (term "0,0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "8") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_subsumption1" (formula "8") (term "0,0,1,1,1") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1,1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,1,1,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,1,1,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,1,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,1,1,1"))
                  (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (term "0") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "45")))
                  (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,0,0,0"))
                  (rule "translateJavaMulInt" (formula "9") (term "0,1,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0,0"))
                  (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0,0"))
                  (rule "translateJavaCastInt" (formula "9") (term "1,1,0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,0,0,0"))
                  (rule "replace_known_left" (formula "9") (term "1,0,0,0,0,0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,0"))
                  (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "castedGetAny" (formula "9") (term "0,0,1,0,0"))
                  (rule "replace_known_left" (formula "9") (term "0,1,0,0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "castedGetAny" (formula "9") (term "1,1,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,0,0"))
                  (rule "applyEq" (formula "6") (term "0,1,0,1") (ifseqformula "40"))
                  (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,1"))
                  (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0") (ifseqformula "39"))
                  (rule "applyEq" (formula "8") (term "1,1,0,1,0,0,0") (ifseqformula "39"))
                  (rule "replace_known_left" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0") (ifseqformula "39"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_subsumption6" (formula "8") (term "0,1,0,0,0") (ifseqformula "36"))
                  (rule "greater_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "8") (term "0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_subsumption6" (formula "8") (term "0,0,0,0") (ifseqformula "31"))
                  (rule "greater_literals" (formula "8") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "jdiv_axiom" (formula "38") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "38"))
                  (rule "applyEq" (formula "38") (term "1") (ifseqformula "39"))
                  (rule "inEqSimp_subsumption6" (formula "38") (term "0,0") (ifseqformula "36"))
                  (rule "times_zero_1" (formula "38") (term "1,1,0,0,0"))
                  (rule "greater_literals" (formula "38") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "leq_literals" (formula "38") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "polyDiv_pullOut" (formula "38") (term "0") (inst "polyDivCoeff=l_1"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,2,0"))
                  (rule "equal_literals" (formula "38") (term "0,0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "polySimp_homoEq" (formula "38"))
                  (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "38") (term "1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "38") (term "0,0,0,1,0"))
                  (rule "div_literals" (formula "38") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "38") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "38") (term "0"))
                  (rule "add_literals" (formula "38") (term "1,0"))
                  (rule "times_zero_1" (formula "38") (term "0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "true_left" (formula "38"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "1") (term "0,0,0,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,0,0,0,1"))
                  (rule "translateJavaMulInt" (formula "1") (term "0,0,2,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,0,1"))
                  (rule "applyEq" (formula "1") (term "0,0,0,1") (ifseqformula "9"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "1") (term "1,1,1") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "translateJavaCastInt" (formula "1") (term "1,1,0,1,0,0,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                  (rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "1") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,1,1,1") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,1,1,1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0,1,1,1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,1,1,1"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,1,1,1") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "1,1,0,1,0,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,0,1,1,1"))
                  (rule "applyEq" (formula "1") (term "0,0,0,1,0,0,1,1,1") (ifseqformula "39"))
                  (rule "applyEq" (formula "1") (term "1,1,0,1,0,0,1,1,1") (ifseqformula "39"))
                  (rule "replace_known_left" (formula "1") (term "1,0,1,0,0,1,1,1") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0,0,1,1,0,0,1,1,1") (ifseqformula "39"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,1,1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,1,1,1"))
                  (rule "inEqSimp_subsumption6" (formula "1") (term "0,0,0,1,1,1") (ifseqformula "31"))
                  (rule "greater_literals" (formula "1") (term "0,0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,1"))
                  (rule "leq_literals" (formula "1") (term "0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_subsumption6" (formula "1") (term "0,0,0,1,1,1") (ifseqformula "36"))
                  (rule "greater_literals" (formula "1") (term "0,0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,1"))
                  (rule "leq_literals" (formula "1") (term "0,0,0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "47") (term "0") (inst "i=i"))
                  (rule "bsum_lower_equals_upper" (formula "47") (term "0"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "closeTrue" (formula "47"))
               )
               (branch "Assume self.lastReadOf(bucket_0) != self.nextWriteOf(bucket_0)"
                  (rule "notLeft" (formula "1") (userinteraction))
                  (rule "eqTermCut" (formula "17") (term "0") (inst "s=de.wiesler.BucketPointers::bucketStart(heap,
                                       self,
                                       bucket_0)") (userinteraction))
                  (branch "Assume self.lastReadOf(bucket_0) = self.bucketStart(bucket_0)"
                     (rule "true_left" (formula "10"))
                     (rule "translateJavaSubInt" (formula "14") (term "0,0"))
                     (rule "andLeft" (formula "3"))
                     (rule "eqSymm" (formula "18"))
                     (rule "eqSymm" (formula "15"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_elimSub" (formula "23") (term "1,0,1"))
                     (rule "mul_literals" (formula "23") (term "1,1,0,1"))
                     (rule "polySimp_addLiterals" (formula "23") (term "1,0,1"))
                     (rule "add_zero_right" (formula "23") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "2,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "23") (term "1"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "22"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "add_zero_left" (formula "4") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "times_zero_2" (formula "5") (term "1,0"))
                     (rule "add_zero_right" (formula "5") (term "0"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "8"))
                     (rule "polySimp_homoEq" (formula "23"))
                     (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,1,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0"))
                     (rule "add_zero_right" (formula "23") (term "0"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_invertInEq0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "times_zero_2" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                     (rule "leq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "nnf_imp2or" (formula "16") (term "0"))
                     (rule "nnf_notAnd" (formula "16") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                     (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "3") (term "0"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "9")) (ifInst ""  (formula "20")) (ifInst ""  (formula "18")))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1"))
                     (rule "applyEq" (formula "3") (term "0,0,0,1,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "3") (term "0,1,0,1,1") (ifseqformula "16"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,1,1"))
                     (rule "applyEq" (formula "3") (term "0,0,1,1,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "3") (term "0,0,0,1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0,1"))
                     (rule "add_literals" (formula "3") (term "1,0,0,0,1"))
                     (rule "times_zero_1" (formula "3") (term "0,0,0,1"))
                     (rule "leq_literals" (formula "3") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEq" (formula "3") (term "0,1,0,1,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "3") (term "1,0,1") (ifseqformula "4"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (term "0,1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,1"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,1"))
                     (rule "leq_literals" (formula "3") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Assume self.lastReadOf(bucket_0) != self.bucketStart(bucket_0)"
                     (rule "instAll" (formula "18") (term "2,0") (ifseqformula "16") (userinteraction))
                     (rule "impLeft" (formula "1") (userinteraction))
                     (branch "Case 1"
                        (rule "true_left" (formula "10"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,0"))
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "19"))
                        (rule "eqSymm" (formula "14"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "polySimp_elimSub" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "24") (term "1,0,1"))
                        (rule "add_zero_right" (formula "24") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "2,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "24") (term "1"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_leqRight" (formula "20"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "times_zero_2" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "8"))
                        (rule "polySimp_homoEq" (formula "24"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "1,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0"))
                        (rule "add_zero_right" (formula "24") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "times_zero_2" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Case 2"
                        (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "1") (term "0") (userinteraction))
                         (builtin "One Step Simplification" (formula "1") (userinteraction))
                        (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "1") (term "0,0") (userinteraction))
                        (rule "Definition_axiom_for_readIsMaximal_in_de_wiesler_BucketPointers" (formula "1") (term "0,1") (userinteraction))
                        (rule "andLeft" (formula "1") (userinteraction))
                        (rule "true_left" (formula "12"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                        (rule "translateJavaSubInt" (formula "1") (term "0"))
                        (rule "translateJavaAddInt" (formula "2") (term "2,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "2") (term "2,1,2,1"))
                        (rule "notLeft" (formula "3"))
                        (rule "andLeft" (formula "4"))
                        (rule "eqSymm" (formula "20"))
                        (rule "eqSymm" (formula "16"))
                        (rule "eqSymm" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "0,2,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,0,1"))
                        (rule "mul_literals" (formula "25") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "25") (term "1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "2,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1"))
                        (rule "polySimp_addComm0" (formula "5") (term "0"))
                        (rule "polySimp_addComm0" (formula "25") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "0,0"))
                        (rule "add_zero_left" (formula "5") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "times_zero_2" (formula "6") (term "1,0"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "9"))
                        (rule "polySimp_homoEq" (formula "25"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1"))
                        (rule "applyEq" (formula "25") (term "1,2,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                        (rule "eqSymm" (formula "22"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "5"))
                        (rule "times_zero_2" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1"))
                        (rule "inEqSimp_subsumption0" (formula "4") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4"))
                        (rule "close" (formula "20") (ifseqformula "4"))
                     )
                  )
               )
            )
            (branch "0 < bucket_0 + 1 FALSE"
               (rule "true_left" (formula "8"))
               (rule "translateJavaSubInt" (formula "12") (term "0,0"))
               (rule "add_zero_right" (formula "20") (term "1"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "13"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "polySimp_elimSub" (formula "21") (term "1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,1"))
               (rule "polySimp_addLiterals" (formula "21") (term "1,1"))
               (rule "add_zero_right" (formula "21") (term "1,1"))
               (rule "close" (formula "21") (ifseqformula "4"))
            )
         )
      )
   )
)
(branch "Step Case (negative)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "translateJavaSubInt" (formula "9") (term "0,0"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0,1,1,0"))
   (rule "translateJavaCastInt" (formula "14") (term "1,1,1,0"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0,1,1"))
   (rule "translateJavaCastInt" (formula "14") (term "1,1,1"))
   (rule "impRight" (formula "14"))
   (rule "impRight" (formula "15"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "18"))
   (rule "eqSymm" (formula "4") (term "1"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_elimSub" (formula "2") (term "0"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "polySimp_elimSub" (formula "13") (term "0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,0"))
   (rule "mul_literals" (formula "18") (term "1,1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "2,1,1,3,1"))
   (rule "mul_literals" (formula "18") (term "1,2,1,1,3,1"))
   (rule "polySimp_elimSub" (formula "18") (term "2,0,0,1,3,1"))
   (rule "mul_literals" (formula "18") (term "1,2,0,0,1,3,1"))
   (rule "polySimp_addComm0" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "polySimp_addComm0" (formula "13") (term "0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "2,1,1,3,1"))
   (rule "polySimp_addComm0" (formula "18") (term "2,0,0,1,3,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
   (rule "bsum_induction_upper2_concrete" (formula "18") (term "0"))
   (rule "polySimp_elimSub" (formula "18") (term "5,1,1,0"))
   (rule "mul_literals" (formula "18") (term "1,5,1,1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "0"))
   (rule "polySimp_homoEq" (formula "18"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "5,1,0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,3,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,3,1,0,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "times_zero_2" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "18"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0"))
   (rule "polySimp_elimOne" (formula "18") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "4") (term "0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1"))
   (rule "replace_known_left" (formula "18") (term "0,1,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "polySimp_addComm0" (formula "18") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)
}
