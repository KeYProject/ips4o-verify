\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 28 00:13:18 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Mar 28 00:13:18 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:elementsToReadOfBucketCountElement([I,int,int,int,int)].JML accessible clause.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:elementsToReadOfBucketCountElement([I,int,int,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "24203")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,values_0,begin,end,bucket,element,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "16") (userinteraction))
(rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "16") (term "0") (userinteraction))
(rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "16") (term "1") (userinteraction))
 (builtin "Use Dependency Contract" (formula "16") (term "1,2,1") (ifInst ""  (formula "16") (term "1,1,0,1,1,0,1,3,1")) (contract "de.wiesler.BucketPointers[de.wiesler.BucketPointers::nextWriteOf(int)].JML accessible clause.0") (userinteraction))
 (builtin "Use Dependency Contract" (formula "17") (term "1,3,1") (ifInst ""  (formula "17") (term "1,0,2,0,1,1,0,1,3,1")) (contract "de.wiesler.BucketPointers[de.wiesler.BucketPointers::lastReadOf(int)].JML accessible clause.0") (userinteraction))
(rule "impLeft" (formula "14") (userinteraction))
(branch "Case 1"
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
   (rule "true_left" (formula "6"))
   (rule "wellFormedAnon" (formula "11") (term "0"))
   (rule "wellFormedAnon" (formula "10") (term "0,0"))
   (rule "translateJavaAddInt" (formula "14") (term "2,0"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0"))
   (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1"))
   (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1"))
   (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1,3,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1"))
   (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1,3,1"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1,3,1"))
   (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1,3,1"))
   (rule "translateJavaAddInt" (formula "10") (term "0,2,0,1,0,1,0"))
   (rule "translateJavaMulInt" (formula "10") (term "1,1,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "10") (term "2,1,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "10") (term "2,1,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "10") (term "1,0,1,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,0,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "10") (term "1,0,1,0,1,0"))
   (rule "translateJavaMulInt" (formula "10") (term "0,1,1,1,0"))
   (rule "translateJavaMulInt" (formula "10") (term "1,1,1,1,0,0,1"))
   (rule "translateJavaMulInt" (formula "11") (term "1,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "1,0,1,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "2,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "2,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "0,1,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1,3,1"))
   (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1,2,1"))
   (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1,2,1"))
   (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1,2,1"))
   (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1,2,1"))
   (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1,3,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,0,1,0,1,0"))
   (rule "translateJavaMulInt" (formula "10") (term "0,2,1,1,1,0,0,1"))
   (rule "translateJavaMulInt" (formula "10") (term "0,2,1,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "10") (term "0,2,0,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "0,2,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "11") (term "0,2,1,1,0,1"))
   (rule "translateJavaMulInt" (formula "11") (term "0,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1,2,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1,2,1"))
   (rule "translateJavaAddInt" (formula "14") (term "3,1"))
   (rule "eqSymm" (formula "14"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")))
   (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,1,2,0"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,1,2,0"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,1,3,0"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,1,3,0"))
   (rule "polySimp_elimSub" (formula "11") (term "2,0,1,0"))
   (rule "mul_literals" (formula "11") (term "1,2,0,1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "1,2,0,1,0,0"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,2,0,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,1,2,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,1,2,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,1,3,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,1,3,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,0,0,1"))
   (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,1,2,0"))
   (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,1,3,0"))
   (rule "polySimp_addComm1" (formula "11") (term "2,0,1,0"))
   (rule "polySimp_addComm1" (formula "10") (term "2,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "10") (term "2,0,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,1,2,0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,1,3,0"))
   (rule "polySimp_addComm0" (formula "11") (term "2,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "2,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "2,1,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,1,2,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,1,3,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,1,0,0,1"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "disjointDefinition" (formula "11"))
   (rule "disjointDefinition" (formula "10") (term "0"))
   (rule "disjointWithSingleton1" (formula "11"))
   (rule "notRight" (formula "11"))
   (rule "disjointWithSingleton1" (formula "11") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "elementOfSetMinus" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "elementOfSetMinus" (formula "10") (term "0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "elementOfUnion" (formula "11"))
   (rule "orRight" (formula "11"))
   (rule "elementOfArrayRangeConcrete" (formula "12"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "elementOfArrayRangeConcrete" (formula "11"))
   (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
   (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1"))
   (rule "add_literals" (formula "12") (term "1,0,1"))
   (rule "times_zero_1" (formula "12") (term "0,1"))
   (rule "qeq_literals" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_leqRight" (formula "12"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Case 2"
   (rule "impLeft" (formula "15") (userinteraction))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
      (rule "true_left" (formula "6"))
      (rule "wellFormedAnon" (formula "11") (term "0"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1,3,1"))
      (rule "translateJavaAddInt" (formula "10") (term "1,0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "10") (term "2,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "14") (term "2,0"))
      (rule "translateJavaMulInt" (formula "10") (term "1,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "10") (term "2,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "14") (term "3,0"))
      (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "2,1"))
      (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1,3,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1,3,1"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1,3,1"))
      (rule "translateJavaMulInt" (formula "11") (term "0,1,1,1"))
      (rule "translateJavaAddInt" (formula "11") (term "1,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "11") (term "2,0,1,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "2,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "11") (term "1,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1,3,1"))
      (rule "translateJavaAddInt" (formula "10") (term "0,2,0,1,1,0,0"))
      (rule "translateJavaMulInt" (formula "10") (term "0,2,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,1,2,1"))
      (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,1,2,1"))
      (rule "translateJavaMulInt" (formula "14") (term "1,1,1,1,0,1,2,1"))
      (rule "translateJavaAddInt" (formula "14") (term "1,0,1,1,0,1,2,1"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1,3,1"))
      (rule "translateJavaAddInt" (formula "11") (term "0,2,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "11") (term "0,2,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "14") (term "0,2,1,1,1,0,1,2,1"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,1,0,1,2,1"))
      (rule "translateJavaAddInt" (formula "14") (term "3,1"))
      (rule "eqSymm" (formula "14"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "10") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,1,2,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,1,2,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,1,3,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,1,3,0"))
      (rule "polySimp_elimSub" (formula "11") (term "2,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,1,3,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,1,2,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1,1,0,1,2,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,1,3,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "10") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,1,2,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,0,1,1,0,1,3,0"))
      (rule "polySimp_addComm1" (formula "11") (term "2,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,1,3,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,1,2,0"))
      (rule "polySimp_addComm0" (formula "11") (term "2,1,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,1,2,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,1,0,1,3,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "disjointDefinition" (formula "11"))
      (rule "disjointWithSingleton1" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "11"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0"))
      (rule "polySimp_elimOne" (formula "9") (term "0"))
      (rule "elementOfSetMinus" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elementOfUnion" (formula "11"))
      (rule "orRight" (formula "11"))
      (rule "elementOfArrayRangeConcrete" (formula "11"))
      (rule "elementOfArrayRangeConcrete" (formula "12"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "11") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
      (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0"))
      (rule "add_literals" (formula "12") (term "1,0,0"))
      (rule "times_zero_1" (formula "12") (term "0,0"))
      (rule "qeq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_leqRight" (formula "12"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "applyEq" (formula "18") (term "1,2,1") (ifseqformula "14") (userinteraction))
      (rule "applyEq" (formula "18") (term "1,3,1") (ifseqformula "15") (userinteraction))
       (builtin "Use Dependency Contract" (formula "18") (term "1") (ifInst ""  (formula "18") (term "0")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "9")) (ifInst ""  (formula "18")) (userinteraction))
      (rule "impLeft" (formula "16") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "16"))
         (branch
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "8"))
             (builtin "One Step Simplification" (formula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "wellFormedAnon" (formula "13"))
            (rule "true_left" (formula "6"))
            (rule "translateJavaAddInt" (formula "10") (term "1,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "10") (term "2,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "10") (term "1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "10") (term "2,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "11") (term "1,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "11") (term "2,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "15") (term "2,0"))
            (rule "translateJavaMulInt" (formula "11") (term "1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "11") (term "2,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "15") (term "3,0"))
            (rule "translateJavaAddInt" (formula "15") (term "1,0,1,1,0,1"))
            (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,1"))
            (rule "translateJavaMulInt" (formula "15") (term "1,1,1,1,0,1"))
            (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,1"))
            (rule "translateJavaAddInt" (formula "15") (term "2,1"))
            (rule "translateJavaAddInt" (formula "15") (term "3,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,2,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "10") (term "0,2,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "11") (term "0,2,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "11") (term "0,2,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "15") (term "0,2,0,1,1,0,1"))
            (rule "translateJavaMulInt" (formula "15") (term "0,2,1,1,1,0,1"))
            (rule "eqSymm" (formula "15"))
            (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "12"))
         )
         (branch "Case 2"
            (rule "translateJavaAddInt" (formula "16") (term "1,0,1,0"))
            (rule "translateJavaSubInt" (formula "16") (term "2,0,1,0"))
            (rule "translateJavaMulInt" (formula "16") (term "1,1,1,0"))
            (rule "translateJavaAddInt" (formula "16") (term "2,1,1,0"))
            (rule "translateJavaAddInt" (formula "16") (term "1,1"))
            (rule "translateJavaSubInt" (formula "16") (term "2,1"))
            (rule "translateJavaAddInt" (formula "16") (term "0,2,0,1,0"))
            (rule "translateJavaAddInt" (formula "16") (term "0,2,1"))
            (rule "polySimp_elimSub" (formula "16") (term "2,0,1,0"))
            (rule "mul_literals" (formula "16") (term "1,2,0,1,0"))
            (rule "polySimp_elimSub" (formula "16") (term "2,1"))
            (rule "polySimp_elimOneLeft0" (formula "16") (term "1,2,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "2,1,1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "2,0,1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "2,1"))
            (rule "polySimp_addComm0" (formula "16") (term "0,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
            (rule "disjointDefinition" (formula "16"))
            (rule "commuteIntersection" (formula "16") (term "0"))
            (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "16") (term "1,2,0,1,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "16") (term "1,1,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "4")) (ifInst ""  (formula "18")) (ifInst ""  (formula "14")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "22") (term "1,2,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "24")) (ifInst ""  (formula "20")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "27") (term "1,1,0,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "27") (term "1,1,0,1,1,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "13")) (ifInst ""  (formula "15")) (ifInst ""  (formula "29")) (ifInst ""  (formula "12")) (ifInst ""  (formula "25")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "27") (term "1,1,0,1,1,0"))
            (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "27") (term "1,2,0,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "11") (term "0,0"))
            (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0"))
            (rule "translateJavaMulInt" (formula "11") (term "0,0,2,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
            (rule "translateJavaAddInt" (formula "9") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,2,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1"))
            (rule "castedGetAny" (formula "9") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")) (ifInst ""  (formula "25")) (ifInst ""  (formula "29")) (ifInst ""  (formula "24")))
            (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "translateJavaAddInt" (formula "6") (term "1,1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "6") (term "0,0,0,1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "6") (term "0,1,1,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
            (rule "translateJavaCastInt" (formula "7") (term "0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1"))
            (rule "castedGetAny" (formula "9") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
            (rule "mul_literals" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
            (rule "translateJavaCastInt" (formula "12") (term "0,0"))
            (rule "castedGetAny" (formula "12") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "27")) (ifInst ""  (formula "31")))
            (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "12") (term "1,1,1,1,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1"))
            (rule "castedGetAny" (formula "13") (term "0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")) (ifInst ""  (formula "32")))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "9") (term "1,1,1,1,1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,0"))
            (rule "castedGetAny" (formula "9") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1"))
            (rule "castedGetAny" (formula "9") (term "0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,1"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "32")) (ifInst ""  (formula "27")))
            (rule "translateJavaAddInt" (formula "3") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "4") (term "0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "4") (term "1,0,0,0,0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")) (ifInst ""  (formula "17")) (ifInst ""  (formula "19")) (ifInst ""  (formula "33")) (ifInst ""  (formula "7")) (ifInst ""  (formula "29")))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "replace_known_left" (formula "3") (term "0,0,0,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "replace_known_left" (formula "15") (term "1,0,0,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "1,1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,1,1"))
            (rule "eqSymm" (formula "6") (term "1"))
            (rule "castedGetAny" (formula "6") (term "0,0,1"))
            (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "2") (term "0"))
            (rule "translateJavaMulInt" (formula "2") (term "0,2,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,2,0"))
            (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "8") (term "0,0"))
            (rule "translateJavaAddInt" (formula "8") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "21")) (ifInst ""  (formula "35")) (ifInst ""  (formula "9")) (ifInst ""  (formula "31")))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "replace_known_left" (formula "4") (term "0,1,1,1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "12")))
            (rule "true_left" (formula "4"))
            (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "10") (term "0,0"))
            (rule "translateJavaMulInt" (formula "10") (term "0,2,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,2,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1"))
            (rule "castedGetAny" (formula "3") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "6") (term "1,0"))
            (rule "translateJavaMulInt" (formula "6") (term "0,2,1,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,0"))
            (rule "inEqSimp_commuteGeq" (formula "6") (term "0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
            (rule "translateJavaCastInt" (formula "7") (term "0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,1"))
            (rule "castedGetAny" (formula "2") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "2"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "add_zero_left" (formula "13") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "8"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "add_zero_left" (formula "13") (term "0"))
            (rule "replace_known_left" (formula "19") (term "0,0,1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "translateJavaMod" (formula "21") (term "0"))
            (rule "jmod_axiom" (formula "21") (term "0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "21"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0"))
            (rule "newSym_eq" (formula "21") (inst "l=l_0") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(bucket, Z(2(#)))))),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "21") (term "1,1"))
            (rule "add_zero_right" (formula "21") (term "1"))
            (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "22"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "22"))
            (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,1"))
            (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaUnaryMinusInt" (formula "19") (term "1,0"))
            (rule "translateJavaSubInt" (formula "19") (term "0,0"))
            (rule "translateJavaAddInt" (formula "19") (term "0,0,0"))
            (rule "neg_literal" (formula "19") (term "1,0"))
            (rule "polySimp_elimSub" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "19") (term "0,0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "11") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "11") (term "0,0,0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "0,1,0,1"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "37")) (ifInst ""  (formula "41")))
            (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "11") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "11") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "11") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "11") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "11") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "11") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "11") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0"))
            (rule "add_literals" (formula "11") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "0,1,0"))
            (rule "qeq_literals" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "12") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "12") (term "0,0,1,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "36")) (ifInst ""  (formula "38")) (ifInst ""  (formula "42")) (ifInst ""  (formula "37")))
            (rule "translateJavaAddInt" (formula "12") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "12") (term "0,0,0,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "12") (term "0,1,1,1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,0,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1,0,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "13") (term "0,1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0"))
            (rule "translateJavaSubInt" (formula "17") (term "0,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,0,0"))
            (rule "neg_literal" (formula "17") (term "1,0"))
            (rule "polySimp_elimSub" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "17") (term "0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaSubInt" (formula "19") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "19") (term "1,0"))
            (rule "translateJavaAddInt" (formula "19") (term "0,0,0"))
            (rule "neg_literal" (formula "19") (term "1,0"))
            (rule "polySimp_elimSub" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "19") (term "0,0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "19"))
            (rule "mul_literals" (formula "17") (term "0,0"))
            (rule "add_zero_left" (formula "17") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaAddInt" (formula "14") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "14") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,2,0"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "25"))
            (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "23") (term "0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "translateJavaSubInt" (formula "23") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "23") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "23") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,1,1"))
            (rule "mul_literals" (formula "23") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "23") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "translateJavaUnaryMinusInt" (formula "24") (term "1,0"))
            (rule "translateJavaSubInt" (formula "24") (term "0,0"))
            (rule "translateJavaAddInt" (formula "24") (term "0,0,0"))
            (rule "neg_literal" (formula "24") (term "1,0"))
            (rule "polySimp_elimSub" (formula "24") (term "0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "24") (term "0,0"))
            (rule "polySimp_addComm0" (formula "24") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,1"))
            (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
            (rule "neg_literal" (formula "18") (term "1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0"))
            (rule "equalityToElementOfRight" (formula "42") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "translateJavaAddInt" (formula "42") (term "0,2,1,1,0,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,2,1,2,0,2,0,0,0"))
            (rule "translateJavaAddInt" (formula "42") (term "0,2,1,1,0,1,1,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,2,1,2,0,1,1,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "1,2,1,1,1,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,0,2,1,1,0,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,0,2,1,1,0,1,1,2,0,0,0"))
            (rule "allRight" (formula "42") (inst "sk=ov_0"))
            (rule "allRight" (formula "42") (inst "sk=fv_0"))
            (rule "notRight" (formula "42"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,2,1,1,1,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,1,0,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,2,0,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,1,0,1,1,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,2,0,1,1,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,1,1,2"))
            (rule "applyEq" (formula "1") (term "1,1,0,2") (ifseqformula "27"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,2"))
            (rule "applyEq" (formula "1") (term "1,1,0,1,1,2") (ifseqformula "27"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,2"))
            (rule "elementOfIntersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
            (rule "andLeft" (formula "1"))
            (rule "exLeft" (formula "2") (inst "sk=iv_0"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_homoInEq0" (formula "4"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "0,1"))
            (rule "mul_literals" (formula "4") (term "0,0,1"))
            (rule "elementOfSetMinus" (formula "5"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "elementOfUnion" (formula "46"))
            (rule "orRight" (formula "46"))
            (rule "elementOfArrayRangeConcrete" (formula "47"))
            (rule "eqSymm" (formula "47") (term "0,0"))
            (rule "elementOfArrayRangeConcrete" (formula "46"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "inEqSimp_commuteLeq" (formula "47") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "46") (term "0"))
            (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "inEqSimp_leqRight" (formula "46"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
            (rule "andLeft" (formula "5"))
            (rule "inEqSimp_homoInEq1" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "1,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0"))
            (rule "add_literals" (formula "5") (term "0"))
            (rule "leq_literals" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "9"))
          (builtin "One Step Simplification" (formula "8"))
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "translateJavaAddInt" (formula "10") (term "1,0,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "2,0"))
         (rule "translateJavaAddInt" (formula "15") (term "3,0"))
         (rule "translateJavaAddInt" (formula "15") (term "1,0,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "10") (term "2,0,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "3,1"))
         (rule "translateJavaMulInt" (formula "10") (term "1,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "10") (term "2,1,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,1"))
         (rule "translateJavaMulInt" (formula "15") (term "1,1,1,1,0,1"))
         (rule "translateJavaAddInt" (formula "11") (term "1,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "11") (term "2,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "11") (term "1,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,1"))
         (rule "translateJavaAddInt" (formula "11") (term "2,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "1,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,0,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "2,1"))
         (rule "translateJavaMulInt" (formula "12") (term "1,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "2,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "2,0"))
         (rule "translateJavaAddInt" (formula "12") (term "3,0"))
         (rule "translateJavaAddInt" (formula "12") (term "2,1"))
         (rule "translateJavaAddInt" (formula "12") (term "3,1"))
         (rule "translateJavaAddInt" (formula "10") (term "0,2,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "10") (term "0,2,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "0,2,0,1,1,0,1"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,2,1,1,1,0,1"))
         (rule "translateJavaMulInt" (formula "11") (term "0,2,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "12") (term "0,2,1,1,1,0,0"))
         (rule "eqSymm" (formula "15"))
         (rule "close" (formula "15") (ifseqformula "12"))
      )
   )
)
)
}
