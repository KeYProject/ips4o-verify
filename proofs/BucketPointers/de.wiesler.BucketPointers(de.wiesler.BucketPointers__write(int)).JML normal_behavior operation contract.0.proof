\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 05 14:47:48 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 05 14:47:48 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:write(int)].JML normal_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:write(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "1212")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_write,savedHeapBefore_write"))
 (builtin "One Step Simplification" (formula "9"))
(rule "variableDeclarationFinalAssign" (formula "9") (term "1"))
(rule "variableDeclarationFinal" (formula "9") (term "1") (newnames "write_pos"))
(rule "compound_addition_1" (formula "9") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
(rule "assignmentMultiplicationInt" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "translateJavaMulInt" (formula "9") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
(rule "assignmentAdditionInt" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "translateJavaAddInt" (formula "9") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
(rule "returnUnfold" (formula "9") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
(rule "eval_order_array_access4" (formula "9") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this_final" (formula "9"))
 (builtin "One Step Simplification" (formula "9"))
(rule "assignment_array2" (formula "9"))
(branch "Normal Execution (x_arr != null)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallReturn" (formula "9") (term "1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "tryEmpty" (formula "9") (term "1"))
   (rule "emptyModality" (formula "9") (term "1"))
   (rule "andRight" (formula "9"))
   (branch "Case 1"
      (rule "andRight" (formula "9"))
      (branch "Case 1"
         (rule "andRight" (formula "9"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7") (inst "b=b"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaMulInt" (formula "7") (term "1,0,1,0,0,0,0"))
            (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0"))
            (rule "translateJavaMulInt" (formula "7") (term "0,1,1,0,0,0,0"))
            (rule "translateJavaCastInt" (formula "7") (term "1,1,0,0,1,0,0,0"))
            (rule "translateJavaCastInt" (formula "7") (term "0,1,0,1,0,0,0"))
            (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "polySimp_mulComm0" (formula "8") (term "0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_addComm0" (formula "13") (term "1"))
            (rule "castedGetAny" (formula "14") (term "0"))
            (rule "castedGetAny" (formula "11") (term "0"))
            (rule "castedGetAny" (formula "10") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
            (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "8"))
            (rule "greater_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "times_zero_1" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "6") (ifseqformula "9"))
            (rule "greater_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "22") (term "1"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,1"))
            (rule "translateJavaMulInt" (formula "22") (term "0,0,2,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,0,2,1"))
            (rule "eqSymm" (formula "22"))
            (rule "polySimp_addComm0" (formula "22") (term "0,2,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "closeTrue" (formula "22"))
         )
         (branch "Case 2"
            (rule "andRight" (formula "9"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7") (inst "b=b"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,1,0,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "7") (term "0,1,1,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "7") (term "1,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "7") (term "1,1,0,0,1,0,0,0"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_mulComm0" (formula "8") (term "0"))
               (rule "polySimp_addComm0" (formula "13") (term "1"))
               (rule "castedGetAny" (formula "14") (term "0"))
               (rule "castedGetAny" (formula "11") (term "0"))
               (rule "castedGetAny" (formula "10") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
               (rule "leq_literals" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "8"))
               (rule "greater_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "times_zero_1" (formula "7") (term "0,0"))
               (rule "add_zero_left" (formula "7") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "6") (ifseqformula "9"))
               (rule "greater_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "22") (term "0,1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,1,1") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,1,1,1,1") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "23") (term "1,1"))
               (rule "translateJavaSubInt" (formula "23") (term "1,1"))
               (rule "polySimp_elimSub" (formula "23") (term "1,1"))
               (rule "polySimp_addComm0" (formula "23") (term "1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "1"))
               (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1"))
               (rule "add_literals" (formula "23") (term "1,0,1"))
               (rule "times_zero_1" (formula "23") (term "0,1"))
               (rule "add_zero_left" (formula "23") (term "1"))
               (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaCastInt" (formula "19") (term "1,1,0,1,0"))
               (rule "translateJavaCastInt" (formula "19") (term "0,1,0,1,0"))
               (rule "castedGetAny" (formula "19") (term "1,1,0,1,0"))
               (rule "castedGetAny" (formula "19") (term "0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
               (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaMod" (formula "16") (term "0"))
               (rule "jmod_axiom" (formula "16") (term "0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "16"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0"))
               (rule "newSym_eq" (formula "16") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "16") (term "1,1"))
               (rule "add_zero_right" (formula "16") (term "1"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
               (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
               (rule "leq_literals" (formula "13") (term "0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "neg_literal" (formula "13") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "qeq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "12") (term "0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "inEqSimp_subsumption4" (formula "14") (ifseqformula "13"))
               (rule "mul_literals" (formula "14") (term "0,1,0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "commute_or_2" (formula "21") (term "0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0,1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,1,1,1,0,1,1,1"))
               (rule "add_zero_left" (formula "1") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,1"))
               (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
               (rule "times_zero_2" (formula "1") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,1,1,1,1") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "0,0,1,1,1") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "2") (term "0,0,1,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1,0,0,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,1,1,0,0,1"))
               (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")))
               (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,1,1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "2") (term "1,0,1,1,1,1") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "2") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "2") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "3") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "3") (term "0,0,1,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")))
               (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "3") (term "0,0,1,1,1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "3") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "3") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
               (rule "true_left" (formula "3"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "3") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")))
               (rule "translateJavaAddInt" (formula "3") (term "1,1,0,0,0"))
               (rule "translateJavaCastInt" (formula "3") (term "0,0,1,0,0"))
               (rule "translateJavaCastInt" (formula "3") (term "0,1,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "3") (term "1,1,0,0,1,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "3") (term "1,0,0,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "3") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "castedGetAny" (formula "3") (term "1,1,0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "3") (term "0,1,0,1,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "castedGetAny" (formula "3") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0"))
               (rule "applyEq" (formula "3") (term "1,1,0,1,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEq" (formula "3") (term "0,0,1,0,0,0") (ifseqformula "19"))
               (rule "applyEq" (formula "3") (term "0,0,1,1,0,0,0") (ifseqformula "19"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_subsumption6" (formula "3") (term "0,0,0,0") (ifseqformula "12"))
               (rule "greater_literals" (formula "3") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
               (rule "leq_literals" (formula "3") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_subsumption6" (formula "3") (term "0,0,0,0") (ifseqformula "14"))
               (rule "times_zero_1" (formula "3") (term "1,1,0,0,0,0,0"))
               (rule "greater_literals" (formula "3") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "leq_literals" (formula "3") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "26") (term "1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
               (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "27") (term "1"))
               (rule "translateJavaMulInt" (formula "27") (term "0,0,2,1"))
               (rule "translateJavaAddInt" (formula "27") (term "0,2,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "0,0,2,1"))
               (rule "eqSymm" (formula "27"))
               (rule "polySimp_addComm0" (formula "27") (term "0,2,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "closeTrue" (formula "27"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
               (rule "closeTrue" (formula "9"))
            )
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "9"))
      (rule "closeTrue" (formula "9"))
   )
)
(branch "Null Reference (x_arr = null)"
   (rule "false_right" (formula "10"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (inst "b=b"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "8"))
)
(branch "Index Out of Bounds (x_arr != null, but write_pos Out of Bounds!)"
   (rule "false_right" (formula "10"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "6"))
   (rule "greater_literals" (formula "1") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (inst "b=b"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0"))
   (rule "translateJavaMulInt" (formula "8") (term "0,1,0,0,0,0"))
   (rule "translateJavaCastInt" (formula "8") (term "0,0,1,0"))
   (rule "translateJavaMulInt" (formula "8") (term "1,0,0,0,0,0"))
   (rule "translateJavaCastInt" (formula "8") (term "1,1,0,0,1,0,0,0"))
   (rule "translateJavaCastInt" (formula "8") (term "0,1,0,1,0,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "polySimp_mulComm0" (formula "9") (term "0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1"))
   (rule "polySimp_addComm0" (formula "14") (term "1"))
   (rule "castedGetAny" (formula "15") (term "0"))
   (rule "castedGetAny" (formula "12") (term "0"))
   (rule "castedGetAny" (formula "11") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
   (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
   (rule "leq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "leq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "12"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0"))
   (rule "polySimp_elimOne" (formula "11") (term "0"))
   (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "9"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
   (rule "greater_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "times_zero_1" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "10"))
   (rule "greater_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
   (rule "mul_literals" (formula "7") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1"))
   (rule "polySimp_rightDist" (formula "7") (term "1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
   (rule "mul_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
   (rule "andLeft" (formula "7"))
   (rule "inEqSimp_homoInEq1" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0"))
   (rule "polySimp_addComm1" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0"))
   (rule "add_literals" (formula "7") (term "1,1,0"))
   (rule "times_zero_1" (formula "7") (term "1,0"))
   (rule "add_literals" (formula "7") (term "0"))
   (rule "leq_literals" (formula "7"))
   (rule "closeFalse" (formula "7"))
)
)
}
