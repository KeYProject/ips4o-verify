\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 23:52:31 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Apr 11 23:52:31 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:disjointBucketsLemma(int)].JML model_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:disjointBucketsLemma(int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "82c4308ea5"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "4" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "5" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "87853")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")))
(rule "allRight" (formula "10") (inst "sk=b_0"))
(rule "impRight" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_BucketPointers" (formula "11") (userinteraction))
(rule "andLeft" (formula "11") (userinteraction))
(rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "j=j") (inst "i=i") (userinteraction))
(rule "true_left" (formula "7"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "10") (userinteraction))
(rule "andRight" (formula "14") (userinteraction))
(branch "Case 1"
   (rule "impRight" (formula "14") (userinteraction))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0") (userinteraction))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "1") (userinteraction))
   (rule "instAll" (formula "15") (term "1,0,0,0,0") (ifseqformula "11") (userinteraction))
   (rule "impLeft" (formula "1") (userinteraction))
   (branch "Case 1"
      (rule "translateJavaCastInt" (formula "11") (term "0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "1,0"))
      (rule "translateJavaCastInt" (formula "11") (term "1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "0,1"))
      (rule "translateJavaCastInt" (formula "16") (term "0,0"))
      (rule "translateJavaCastInt" (formula "16") (term "0,1"))
      (rule "translateJavaCastInt" (formula "10") (term "0"))
      (rule "translateJavaAddInt" (formula "16") (term "1,0,0,0"))
      (rule "eqSymm" (formula "14"))
      (rule "polySimp_addComm0" (formula "13") (term "1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,1"))
      (rule "polySimp_addComm0" (formula "16") (term "1,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "16") (term "0,1"))
      (rule "castedGetAny" (formula "10") (term "0"))
      (rule "castedGetAny" (formula "16") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "9"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
      (rule "add_literals" (formula "14") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
      (rule "times_zero_2" (formula "14") (term "1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0"))
      (rule "mul_literals" (formula "14") (term "1,0"))
      (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "2"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "inEqSimp_subsumption1" (formula "14") (term "0") (ifseqformula "3"))
      (rule "leq_literals" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "14") (inst "b=b"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaCastInt" (formula "14") (term "0,0,1,0"))
      (rule "translateJavaCastInt" (formula "14") (term "1,1,0,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "14") (term "1,0,1,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "14") (term "1,1,0,0"))
      (rule "translateJavaCastInt" (formula "14") (term "0,1,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0,0"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "polySimp_mulComm0" (formula "15") (term "0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1"))
      (rule "polySimp_addComm0" (formula "20") (term "1"))
      (rule "castedGetAny" (formula "21") (term "0"))
      (rule "castedGetAny" (formula "18") (term "0"))
      (rule "castedGetAny" (formula "17") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "20"))
      (rule "applyEq" (formula "13") (term "1,1,0,0,1,0") (ifseqformula "20"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
      (rule "andLeft" (formula "5"))
      (rule "inEqSimp_homoInEq1" (formula "5"))
      (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
      (rule "add_literals" (formula "5") (term "1,1,0"))
      (rule "times_zero_1" (formula "5") (term "1,0"))
      (rule "add_literals" (formula "5") (term "0"))
      (rule "leq_literals" (formula "5"))
      (rule "closeFalse" (formula "5"))
   )
   (branch "Case 2"
      (rule "instAll" (formula "16") (term "1,0,0,0,1") (ifseqformula "1") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "translateJavaAddInt" (formula "14") (term "0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "0,0"))
         (rule "translateJavaCastInt" (formula "11") (term "0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "1") (term "1,1,0"))
         (rule "translateJavaCastInt" (formula "17") (term "0,1"))
         (rule "translateJavaCastInt" (formula "12") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "12") (term "1,1,0,1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0"))
         (rule "translateJavaAddInt" (formula "17") (term "1,0,0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "15"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "1,0,0,1,0"))
         (rule "castedGetAny" (formula "11") (term "0"))
         (rule "castedGetAny" (formula "1") (term "1,1,0"))
         (rule "castedGetAny" (formula "17") (term "0,1"))
         (rule "castedGetAny" (formula "12") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "17") (term "0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
         (rule "polySimp_addComm1" (formula "14") (term "0,1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "10"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "inEqSimp_leqRight" (formula "17"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_geqRight" (formula "15"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "4"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "nnf_imp2or" (formula "3") (term "0"))
         (rule "nnf_imp2or" (formula "14") (term "0"))
         (rule "nnf_notAnd" (formula "3") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "15") (inst "b=b"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaMulInt" (formula "15") (term "1,0,1,0,0,0,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,1,1,0,0,0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "1,1,0,0,1,0,0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "0,1,0,1,0,0,0"))
         (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "0,0,1,0"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "polySimp_mulComm0" (formula "15") (term "1"))
         (rule "polySimp_mulComm0" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "21") (term "1"))
         (rule "castedGetAny" (formula "22") (term "0"))
         (rule "castedGetAny" (formula "19") (term "0"))
         (rule "castedGetAny" (formula "18") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "18"))
         (rule "applyEq" (formula "3") (term "1,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "14") (term "1,1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0"))
         (rule "add_literals" (formula "12") (term "0"))
         (rule "leq_literals" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
      (branch "Case 2"
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "17") (term "0") (userinteraction))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "1") (userinteraction))
          (builtin "One Step Simplification" (formula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaCastInt" (formula "14") (term "0"))
         (rule "translateJavaCastInt" (formula "19") (term "0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "4") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "15") (term "1,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "19") (term "0,1"))
         (rule "translateJavaCastInt" (formula "4") (term "1,1,0"))
         (rule "translateJavaCastInt" (formula "3") (term "0"))
         (rule "translateJavaCastInt" (formula "3") (term "1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,1,0"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "19") (term "1,0,0,0"))
         (rule "translateJavaAddInt" (formula "4") (term "1,0,0,1,0"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,0"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,0,1"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,0"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,1,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1,0"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "eqSymm" (formula "17"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "castedGetAny" (formula "14") (term "0"))
         (rule "castedGetAny" (formula "15") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "15") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "19") (term "0,1"))
         (rule "castedGetAny" (formula "4") (term "1,1,0"))
         (rule "castedGetAny" (formula "3") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,1"))
         (rule "castedGetAny" (formula "1") (term "1,0,1,1"))
         (rule "castedGetAny" (formula "1") (term "1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1"))
         (rule "castedGetAny" (formula "19") (term "0,0"))
         (rule "castedGetAny" (formula "4") (term "0,1,0"))
         (rule "castedGetAny" (formula "3") (term "0"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,1,1"))
         (rule "castedGetAny" (formula "2") (term "1,0,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,0,1"))
         (rule "castedGetAny" (formula "2") (term "1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_leqRight" (formula "19"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "castedGetAny" (formula "3") (term "0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
         (rule "polySimp_elimOne" (formula "14") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "6"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
         (rule "add_literals" (formula "18") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0"))
         (rule "leq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "false_right" (formula "18"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "16") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (inst "b=b"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaMulInt" (formula "17") (term "1,0,1,0,0,0,0"))
         (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "1,1,0,0,1,0,0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0,0,0"))
         (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "polySimp_mulComm0" (formula "18") (term "0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1"))
         (rule "polySimp_addComm0" (formula "23") (term "1"))
         (rule "castedGetAny" (formula "24") (term "0"))
         (rule "castedGetAny" (formula "21") (term "0"))
         (rule "castedGetAny" (formula "20") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "16") (term "1,1,0,0,1,0") (ifseqformula "23"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "18"))
         (rule "greater_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "inEqSimp_exactShadow2" (formula "15") (ifseqformula "19"))
         (rule "greater_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
         (rule "polySimp_mulComm0" (formula "15") (term "1"))
         (rule "polySimp_rightDist" (formula "15") (term "1"))
         (rule "mul_literals" (formula "15") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
         (rule "inEqSimp_exactShadow2" (formula "19") (ifseqformula "20"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
         (rule "greater_literals" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "times_zero_1" (formula "19") (term "0,0"))
         (rule "add_zero_left" (formula "19") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "23"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
         (rule "polySimp_elimOne" (formula "23") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,1,1"))
         (rule "neg_literal" (formula "2") (term "1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "29") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "translateJavaCastInt" (formula "29") (term "1,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "29") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "29") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "29") (term "0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
         (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0") (ifseqformula "28"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "28"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "27") (term "0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "translateJavaMod" (formula "27") (term "0"))
         (rule "jmod_axiom" (formula "27") (term "0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "27"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0"))
         (rule "newSym_eq" (formula "27") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
         (rule "times_zero_1" (formula "27") (term "1,1"))
         (rule "add_zero_right" (formula "27") (term "1"))
         (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "27"))
         (rule "eqSymm" (formula "28"))
         (rule "applyEq" (formula "24") (term "0") (ifseqformula "28"))
         (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "28"))
         (rule "applyEq" (formula "25") (term "1") (ifseqformula "28"))
         (rule "elimGcdGeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
         (rule "leq_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
         (rule "add_literals" (formula "23") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0"))
         (rule "leq_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "elimGcdLeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "24") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
         (rule "add_literals" (formula "24") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0"))
         (rule "qeq_literals" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "26"))
         (rule "polySimp_mulAssoc" (formula "25") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
         (rule "polySimp_addComm0" (formula "25") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "25"))
         (rule "polySimp_mulLiterals" (formula "25") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "25") (ifseqformula "24"))
         (rule "mul_literals" (formula "25") (term "0,1,0"))
         (rule "greater_literals" (formula "25") (term "0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "leq_literals" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaMod" (formula "3") (term "0,0,1"))
         (rule "jmod_axiom" (formula "3") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "4") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,1"))
         (rule "commute_or" (formula "19") (term "0,0,1,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "1") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,1"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,1,1"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,1,1"))
         (rule "neg_literal" (formula "3") (term "1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,1,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "seqGetAlphaCast" (formula "19") (term "0"))
         (rule "castedGetAny" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "seqGetAlphaCast" (formula "6") (term "0"))
         (rule "castedGetAny" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "seqGetAlphaCast" (formula "6") (term "1"))
         (rule "castedGetAny" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "6") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "6") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "1") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,1"))
         (rule "lenNonNegative" (formula "31") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "31"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
         (rule "mul_literals" (formula "31") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "23"))
         (rule "leq_literals" (formula "31") (term "0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "arrayLengthNotNegative" (formula "24") (term "1"))
         (rule "arrayLengthIsAShort" (formula "24") (term "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "seqGetAlphaCast" (formula "28") (term "0"))
         (rule "castedGetAny" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "commute_or" (formula "32") (term "0,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,0,0,1"))
         (rule "neg_literal" (formula "5") (term "1,0,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,0,0,0,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
         (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaMod" (formula "6") (term "0,0,1"))
         (rule "jmod_axiom" (formula "6") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "6") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaMod" (formula "7") (term "0,0,1"))
         (rule "jmod_axiom" (formula "7") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "7") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaMod" (formula "1") (term "0,0,1"))
         (rule "jmod_axiom" (formula "1") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
         (rule "jdiv_axiom" (formula "30") (term "0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,0,2,1"))
         (rule "eqSymm" (formula "30"))
         (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "31"))
         (rule "inEqSimp_subsumption6" (formula "30") (term "0,0") (ifseqformula "26"))
         (rule "times_zero_1" (formula "30") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "30") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "leq_literals" (formula "30") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "polyDiv_pullOut" (formula "30") (term "0") (inst "polyDivCoeff=l_0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "polySimp_pullOutFactor0" (formula "30") (term "0,0,0"))
         (rule "add_literals" (formula "30") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "30") (term "0,0,0"))
         (rule "div_literals" (formula "30") (term "0,0"))
         (rule "add_zero_left" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaMod" (formula "2") (term "0,0,1"))
         (rule "jmod_axiom" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
         (rule "all_pull_out3" (formula "22") (term "0"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,1,0,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,1,0,1"))
         (rule "neg_literal" (formula "5") (term "1,1,0,1"))
         (rule "eqSymm" (formula "5") (term "0,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,0,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
         (rule "eqSymm" (formula "5") (term "0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
         (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "7") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "1") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
         (rule "allLeft" (formula "10") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,1,0"))
         (rule "leq_literals" (formula "10") (term "1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "15"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "31"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "polySimp_elimOne" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "shift_paren_or" (formula "25") (term "0,0"))
         (rule "commute_and" (formula "5") (term "1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "1") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,1,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,1,0,1"))
         (rule "neg_literal" (formula "2") (term "1,1,0,1"))
         (rule "eqSymm" (formula "2") (term "0,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaMod" (formula "5") (term "0,0,1"))
         (rule "jmod_axiom" (formula "5") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "7") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "8") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "12")))
         (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "8") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "8") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,1"))
         (rule "mul_literals" (formula "8") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "8") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,1,1"))
         (rule "mul_literals" (formula "8") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaSubInt" (formula "9") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "9") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "9") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "9") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "1") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,1,0,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,0,1,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,1,0,1"))
         (rule "neg_literal" (formula "2") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "2") (term "0,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,0,0,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
         (rule "commute_and" (formula "10") (term "1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,1,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,1,0,1"))
         (rule "translateJavaAddInt" (formula "6") (term "0,0,1,0,1"))
         (rule "neg_literal" (formula "6") (term "1,1,0,1"))
         (rule "eqSymm" (formula "6") (term "0,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "40") (term "0") (ifseqformula "20") (ifseqformula "21"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "9") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
         (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1"))
         (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "9") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,1,1"))
         (rule "mul_literals" (formula "9") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaSubInt" (formula "9") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "9") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "9") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "9") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "9") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "0,0,1,1,1"))
         (rule "shift_paren_or" (formula "29") (term "0,0,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "10") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "15")))
         (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "10") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,1,1"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "10") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,1,1"))
         (rule "mul_literals" (formula "10") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaMod" (formula "10") (term "0,0,1"))
         (rule "jmod_axiom" (formula "10") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "10") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "11") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "11") (term "1,1,0,1"))
         (rule "translateJavaAddInt" (formula "11") (term "0,0,1,0,1"))
         (rule "neg_literal" (formula "11") (term "1,1,0,1"))
         (rule "eqSymm" (formula "11") (term "0,1"))
         (rule "polySimp_elimSub" (formula "11") (term "0,0,0,1"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaMod" (formula "2") (term "0,0,1"))
         (rule "jmod_axiom" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaMod" (formula "5") (term "0,0,1"))
         (rule "jmod_axiom" (formula "5") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
         (rule "cut_direct" (formula "8") (term "0,0"))
         (branch "CUT: (int)self.bucket_starts[bucket] >= 0 TRUE"
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaMod" (formula "10") (term "0,0,1"))
            (rule "jmod_axiom" (formula "10") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "11") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,1"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,1,1"))
            (rule "mul_literals" (formula "11") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "12") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "17")))
            (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0,1,1,1"))
            (rule "neg_literal" (formula "12") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "13") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaSubInt" (formula "13") (term "0,0,0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "13") (term "1,0,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "13") (term "0,0,0,0,1,0,1"))
            (rule "neg_literal" (formula "13") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "13") (term "0,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
            (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,0,0,1"))
            (rule "neg_literal" (formula "5") (term "1,0,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0,0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,0,1"))
            (rule "neg_literal" (formula "7") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "7") (term "0,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "6") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
            (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
            (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "9") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,1,0,1"))
            (rule "translateJavaAddInt" (formula "9") (term "0,0,1,0,1"))
            (rule "neg_literal" (formula "9") (term "1,1,0,1"))
            (rule "eqSymm" (formula "9") (term "0,1"))
            (rule "polySimp_elimSub" (formula "9") (term "0,0,0,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "10") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "16")))
            (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,1,1"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "10") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,1,1"))
            (rule "mul_literals" (formula "10") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "10") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,1"))
            (rule "cut_direct" (formula "13") (term "0"))
            (branch "CUT: (int)self.bucket_starts[1 + b_0] >= 0 TRUE"
                (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "replace_known_left" (formula "11") (term "1,1,1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
               (rule "andLeft" (formula "11"))
               (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
               (rule "replace_known_left" (formula "10") (term "0,1,1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
               (rule "andLeft" (formula "10"))
               (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
               (rule "true_left" (formula "14"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
               (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "9"))
               (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "9"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "9"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "12"))
               (rule "applyEq" (formula "9") (term "1") (ifseqformula "12"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "11"))
               (rule "newSym_eq" (formula "11") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 add(Z(1(#)),
                                                     b_0))),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "11") (term "1,1"))
               (rule "add_zero_right" (formula "11") (term "1"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
               (rule "eqSymm" (formula "12"))
               (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "12"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_commuteGeq" (formula "13"))
               (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "12"))
               (rule "applyEqRigid" (formula "15") (term "0,1") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "13"))
               (rule "mul_literals" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,1,0"))
               (rule "leq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
               (rule "leq_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "qeq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "commute_and" (formula "3") (term "1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "1,0,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
               (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,0,0,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,0,1"))
               (rule "neg_literal" (formula "5") (term "1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,0,0,0,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
               (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "2") (term "0,0,0,1,1"))
               (rule "neg_literal" (formula "2") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "19")))
               (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1,1"))
               (rule "mul_literals" (formula "12") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "12") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
               (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "13"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "14"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
               (rule "inEqSimp_commuteGeq" (formula "12"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0"))
               (rule "translateJavaSubInt" (formula "12") (term "0,0"))
               (rule "translateJavaAddInt" (formula "12") (term "0,0,0"))
               (rule "neg_literal" (formula "12") (term "1,0"))
               (rule "polySimp_elimSub" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "12") (term "0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0"))
               (rule "jdiv_axiom" (formula "7") (term "0,0,1,1"))
               (rule "eqSymm" (formula "7"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaMod" (formula "9") (term "0"))
               (rule "jmod_axiom" (formula "9") (term "0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
               (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "12"))
               (rule "polySimp_pullOutFactor0" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,0"))
               (rule "times_zero_1" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "cut_direct" (formula "8") (term "0"))
               (branch "CUT: (int)self.bucket_starts[bucket] <= 2147483392 TRUE"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "replace_known_left" (formula "5") (term "1,1,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")))
                  (rule "andLeft" (formula "5"))
                  (rule "replace_known_left" (formula "4") (term "0,1,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "9")) (ifInst ""  (formula "11")))
                  (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "9")))
                  (rule "andLeft" (formula "2"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "5"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "9") (term "0,0,0,2,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "10"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,0") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  bucket)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                  (rule "polyDiv_pullOut" (formula "8") (term "1,1,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      bucket)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,2,1,1,0"))
                  (rule "equal_literals" (formula "8") (term "0,1,1,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,1,0"))
                  (rule "add_zero_right" (formula "8") (term "1,0"))
                  (rule "newSym_eq" (formula "5") (inst "l=l_2") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 bucket)),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "5") (term "1,1"))
                  (rule "add_zero_right" (formula "5") (term "1"))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "5"))
                  (rule "eqSymm" (formula "6"))
                  (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_commuteGeq" (formula "7"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "applyEq" (formula "9") (term "0,0,0,2,0") (ifseqformula "6"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,2,0"))
                  (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "6"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "6"))
                  (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "polyDiv_pullOut" (formula "9") (term "0,2,0") (inst "polyDivCoeff=mul(l_2, Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,2,0,2,0"))
                  (rule "equal_literals" (formula "9") (term "0,0,2,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,2,0"))
                  (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,0,2,0"))
                  (rule "add_literals" (formula "9") (term "1,0,0,0,2,0"))
                  (rule "times_zero_1" (formula "9") (term "0,0,0,2,0"))
                  (rule "div_literals" (formula "9") (term "0,0,2,0"))
                  (rule "add_zero_left" (formula "9") (term "0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "2,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "2,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polyDiv_pullOut" (formula "9") (term "0,1") (inst "polyDivCoeff=l_2"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "9") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_homoEq" (formula "9") (term "1"))
                  (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "add_literals" (formula "9") (term "1,0,0,0,1,0,1"))
                  (rule "times_zero_1" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "div_literals" (formula "9") (term "0,0,1,0,1"))
                  (rule "add_zero_left" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1"))
                  (rule "add_literals" (formula "9") (term "1,0,1"))
                  (rule "times_zero_1" (formula "9") (term "0,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "7"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                  (rule "times_zero_1" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,1,0"))
                  (rule "leq_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "11"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "3") (ifseqformula "5"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "greater_literals" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "20"))
                  (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "inEqSimp_contradInEq5" (formula "14") (ifseqformula "5"))
                  (rule "greater_literals" (formula "14") (term "0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,1,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0"))
                  (rule "add_zero_right" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "closeFalse" (formula "14"))
               )
               (branch "CUT: (int)self.bucket_starts[bucket] <= 2147483392 FALSE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_leqRight" (formula "40"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "jdiv_axiom" (formula "7") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption6" (formula "7") (term "0,0") (ifseqformula "10"))
                  (rule "greater_literals" (formula "7") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "leq_literals" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0") (inst "polyDivCoeff=l_1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0"))
                  (rule "equal_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7"))
                  (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "7") (term "0,0,0,1,0"))
                  (rule "div_literals" (formula "7") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "7") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,0"))
                  (rule "times_zero_1" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "allLeft" (formula "28") (inst "t=Z(0(#))"))
                  (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                  (rule "leq_literals" (formula "28") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "28") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0,0") (ifseqformula "31"))
                  (rule "qeq_literals" (formula "28") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "commute_or" (formula "28") (term "0,0"))
                  (rule "allLeft" (formula "29") (inst "t=bucket"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0,0") (ifseqformula "26"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "29") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "commute_or" (formula "29") (term "0,0"))
                  (rule "div_axiom" (formula "4") (term "1,0") (inst "quotient=quotient_0"))
                  (rule "equal_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "qeq_literals" (formula "4") (term "0,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,1,1"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "polySimp_addComm1" (formula "6") (term "1"))
                  (rule "add_literals" (formula "6") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                  (rule "polySimp_mulAssoc" (formula "5") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=add(Z(1(#)), quotient_0)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "5") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "div_axiom" (formula "9") (term "0,2,0") (inst "quotient=quotient_1"))
                  (rule "qeq_literals" (formula "9") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "equal_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1,1,1"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "polySimp_addComm1" (formula "11") (term "1"))
                  (rule "add_literals" (formula "11") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                  (rule "applyEq" (formula "12") (term "0,2,0") (ifseqformula "9"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "10"))
                  (rule "polySimp_mulAssoc" (formula "7") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "leq_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                  (rule "neg_literal" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "qeq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "13") (term "0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "leq_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "16"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1"))
                  (rule "allLeft" (formula "42") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                  (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "1,1,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "42") (term "1,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "42") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0,0,0") (ifseqformula "45"))
                  (rule "qeq_literals" (formula "42") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "commute_or" (formula "42") (term "0,0"))
                  (rule "inEqSimp_or_antiSymm0" (formula "42") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "42") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "1,0,1,0,0"))
                  (rule "add_literals" (formula "42") (term "0,1,0,1,0,0"))
                  (rule "add_zero_left" (formula "42") (term "1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "42") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "42") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "42") (term "0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "1,0,0,0,0"))
                  (rule "times_zero_1" (formula "42") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "commute_or" (formula "42") (term "0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "inEqSimp_homoInEq1" (formula "42"))
                  (rule "polySimp_pullOutFactor1" (formula "42") (term "0"))
                  (rule "add_literals" (formula "42") (term "1,0"))
                  (rule "times_zero_1" (formula "42") (term "0"))
                  (rule "leq_literals" (formula "42"))
                  (rule "true_left" (formula "42"))
                  (rule "allLeft" (formula "42") (inst "t=mul(l_1, Z(6(5(2(#)))))"))
                  (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq5" (formula "42") (term "0,0,0,0,0") (ifseqformula "21"))
                  (rule "greater_literals" (formula "42") (term "0,0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0"))
                  (rule "qeq_literals" (formula "42") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or" (formula "42") (term "0,0,0"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or_2" (formula "42") (term "0"))
                  (rule "ifthenelse_split" (formula "16") (term "0"))
                  (branch " javaBitwiseAndInt( 255 + (int)self.bucket_starts[bucket], -256) >= 0 TRUE"
                     (rule "eqSymm" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "16") (term "0,0"))
                     (rule "add_zero_left" (formula "16") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "16"))
                     (rule "leq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "17") (term "0,0"))
                     (rule "add_zero_left" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "17") (term "0,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
                     (rule "times_zero_1" (formula "18") (term "0,0"))
                     (rule "add_zero_left" (formula "18") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "18"))
                     (rule "times_zero_2" (formula "18") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                     (rule "neg_literal" (formula "18") (term "0,0,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "17") (term "0,0"))
                     (rule "add_zero_left" (formula "17") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "17"))
                     (rule "times_zero_2" (formula "17") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "allLeft" (formula "43") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "43") (term "0,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_homoInEq1" (formula "43") (term "0"))
                     (rule "mul_literals" (formula "43") (term "1,0,0"))
                     (rule "add_zero_right" (formula "43") (term "0,0"))
                     (rule "applyEq" (formula "43") (term "0,1") (ifseqformula "42"))
                     (rule "qeq_literals" (formula "43") (term "1"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "true_left" (formula "43"))
                     (rule "allLeft" (formula "43") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,1,0"))
                     (rule "add_literals" (formula "43") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "43") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "43") (term "0,1,0"))
                     (rule "leq_literals" (formula "43") (term "1,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_contradInEq1" (formula "43") (term "0") (ifseqformula "49"))
                     (rule "qeq_literals" (formula "43") (term "0,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "allLeft" (formula "45") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "45") (term "1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,1,0"))
                     (rule "add_literals" (formula "45") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "45") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "45") (term "0,1,0"))
                     (rule "leq_literals" (formula "45") (term "1,0"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "inEqSimp_contradInEq1" (formula "45") (term "0") (ifseqformula "41"))
                     (rule "inEqSimp_homoInEq1" (formula "45") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "45") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "45") (term "0,0,0,0"))
                     (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0"))
                     (rule "add_literals" (formula "45") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "45") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "45") (term "0,0,0"))
                     (rule "leq_literals" (formula "45") (term "0,0"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "55"))
                     (rule "polySimp_mulComm0" (formula "45") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "45") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "45"))
                     (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                     (rule "polySimp_elimOne" (formula "45") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "45"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " javaBitwiseAndInt( 255 + (int)self.bucket_starts[bucket], -256) >= 0 FALSE"
                     (rule "eqSymm" (formula "16"))
                     (rule "inEqSimp_geqRight" (formula "55"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                     (rule "mul_literals" (formula "16") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                     (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "16"))
                     (rule "leq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                     (rule "polySimp_mulAssoc" (formula "9") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "neg_literal" (formula "9") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "9") (term "0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "qeq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "9"))
                     (rule "leq_literals" (formula "6") (term "0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "8"))
                     (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                     (rule "mul_literals" (formula "14") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "0,0"))
                     (rule "add_zero_left" (formula "14") (term "0"))
                     (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "41") (term "0,0"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "inEqSimp_homoInEq1" (formula "41") (term "0"))
                     (rule "times_zero_2" (formula "41") (term "1,0,0"))
                     (rule "add_zero_right" (formula "41") (term "0,0"))
                     (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "40"))
                     (rule "qeq_literals" (formula "41") (term "1"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "allLeft" (formula "41") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,0"))
                     (rule "add_literals" (formula "41") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "41") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "41") (term "0,1,0"))
                     (rule "leq_literals" (formula "41") (term "1,0"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "inEqSimp_contradInEq1" (formula "41") (term "0") (ifseqformula "47"))
                     (rule "qeq_literals" (formula "41") (term "0,0"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "allLeft" (formula "43") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,1,0"))
                     (rule "add_literals" (formula "43") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "43") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "43") (term "0,1,0"))
                     (rule "leq_literals" (formula "43") (term "1,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_contradInEq1" (formula "43") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq1" (formula "43") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "43") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "43") (term "0,0,0,0"))
                     (rule "add_literals" (formula "43") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,0"))
                     (rule "add_literals" (formula "43") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "43") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "43") (term "0,0,0"))
                     (rule "leq_literals" (formula "43") (term "0,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "53"))
                     (rule "polySimp_mulComm0" (formula "43") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "43") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "43"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                     (rule "polySimp_elimOne" (formula "43") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "43") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "43") (term "0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "closeFalse" (formula "43"))
                  )
               )
            )
            (branch "CUT: (int)self.bucket_starts[1 + b_0] >= 0 FALSE"
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "inEqSimp_geqRight" (formula "37"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "commute_and" (formula "4") (term "1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,1"))
               (rule "neg_literal" (formula "5") (term "1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
               (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,0,0,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "6") (term "0,0,0,0,0,1"))
               (rule "neg_literal" (formula "6") (term "1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,0,0,0,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0,1"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "translateJavaMod" (formula "3") (term "0,0,1"))
               (rule "jmod_axiom" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
               (rule "jdiv_axiom" (formula "8") (term "0,0,1,1"))
               (rule "eqSymm" (formula "8"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "1,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,1,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,1,0,1"))
               (rule "translateJavaAddInt" (formula "6") (term "0,0,1,0,1"))
               (rule "neg_literal" (formula "6") (term "1,1,0,1"))
               (rule "eqSymm" (formula "6") (term "0,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
               (rule "eqSymm" (formula "6") (term "0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
               (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "7") (term "0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,1"))
               (rule "neg_literal" (formula "7") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,1"))
               (rule "cut_direct" (formula "10") (term "0"))
               (branch "CUT: (int)self.bucket_starts[bucket] <= 2147483392 TRUE"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "13")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
                  (rule "true_left" (formula "6"))
                  (rule "replace_known_left" (formula "6") (term "1,1,1") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
                  (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "6"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                  (rule "newSym_eq" (formula "14") (inst "l=l_1") (inst "newSymDef=mul(javaBitwiseAndInt(add(Z(5(5(2(#)))),
                          int::seqGet(Seq::final(self,
                                                 de.wiesler.BucketPointers::$bucket_starts),
                                      bucket)),
                      Z(neglit(6(5(2(#)))))),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "14") (term "1,1"))
                  (rule "add_zero_right" (formula "14") (term "1"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                  (rule "eqSymm" (formula "15"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_commuteGeq" (formula "12"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "10") (term "0,0,0,2,0") (ifseqformula "15"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,0,2,0"))
                  (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "15"))
                  (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "10") (term "0,2,0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,2,0"))
                  (rule "equal_literals" (formula "10") (term "0,0,2,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,2,0"))
                  (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,0,2,0"))
                  (rule "add_literals" (formula "10") (term "1,0,0,0,2,0"))
                  (rule "times_zero_1" (formula "10") (term "0,0,0,2,0"))
                  (rule "div_literals" (formula "10") (term "0,0,2,0"))
                  (rule "add_zero_left" (formula "10") (term "0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "2,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "2,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polyDiv_pullOut" (formula "10") (term "0,1") (inst "polyDivCoeff=l_1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "10") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_homoEq" (formula "10") (term "1"))
                  (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,0,1,0,1"))
                  (rule "add_literals" (formula "10") (term "1,0,0,0,1,0,1"))
                  (rule "times_zero_1" (formula "10") (term "0,0,0,1,0,1"))
                  (rule "div_literals" (formula "10") (term "0,0,1,0,1"))
                  (rule "add_zero_left" (formula "10") (term "0,1,0,1"))
                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1"))
                  (rule "add_literals" (formula "10") (term "1,0,1"))
                  (rule "times_zero_1" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "newSym_eq" (formula "3") (inst "l=l_2") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 bucket)),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "3") (term "1,1"))
                  (rule "add_zero_right" (formula "3") (term "1"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_commuteGeq" (formula "7"))
                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "4"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "11"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "1"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "11"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "13") (term "0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "neg_literal" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "qeq_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "12"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "13"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "7"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "7"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=add(Z(0(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "add_zero_left" (formula "15") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "neg_literal" (formula "15") (term "0,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "add_zero_left" (formula "15") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                  (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "7"))
                  (rule "times_zero_1" (formula "12") (term "0,0"))
                  (rule "add_zero_left" (formula "12") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "15"))
                  (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                  (rule "mul_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                  (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=add(Z(0(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "add_zero_left" (formula "9") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "9") (term "1,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "18"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "1,0"))
                  (rule "times_zero_1" (formula "16") (term "0"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEqRigid" (formula "17") (term "0,0,0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,0"))
                  (rule "times_zero_1" (formula "10") (term "0"))
                  (rule "leq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "9"))
                  (rule "applyEq" (formula "14") (term "0,1,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                  (rule "applyEqRigid" (formula "14") (term "0,1") (ifseqformula "8"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "8"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "13")))
                  (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "6"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_commuteGeq" (formula "3"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "3") (term "0,0"))
                  (rule "translateJavaAddInt" (formula "3") (term "0,0,0"))
                  (rule "neg_literal" (formula "3") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "translateJavaMod" (formula "4") (term "0"))
                  (rule "jmod_axiom" (formula "4") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,0"))
                  (rule "times_zero_1" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "allLeft" (formula "29") (inst "t=bucket"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0,0") (ifseqformula "27"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "25"))
                  (rule "qeq_literals" (formula "29") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "allLeft" (formula "30") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "30") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "28"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "33"))
                  (rule "qeq_literals" (formula "30") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "commute_or" (formula "29") (term "0,0"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "allLeft" (formula "31") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "31") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0,0,0") (ifseqformula "34"))
                  (rule "qeq_literals" (formula "31") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "commute_or" (formula "31") (term "0,0"))
                  (rule "inEqSimp_or_antiSymm0" (formula "31") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "31") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "1,0,1,0,0"))
                  (rule "add_literals" (formula "31") (term "0,1,0,1,0,0"))
                  (rule "add_zero_left" (formula "31") (term "1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "1,0,0,0,0"))
                  (rule "times_zero_1" (formula "31") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "commute_or" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "31"))
                  (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                  (rule "add_literals" (formula "31") (term "1,0"))
                  (rule "times_zero_1" (formula "31") (term "0"))
                  (rule "leq_literals" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "jdiv_axiom" (formula "11") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "11"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                  (rule "inEqSimp_subsumption6" (formula "11") (term "0,0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "11") (term "1,1,0,0,0"))
                  (rule "greater_literals" (formula "11") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "leq_literals" (formula "11") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=l_2"))
                  (rule "equal_literals" (formula "11") (term "0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0,0"))
                  (rule "add_literals" (formula "11") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "0,0,0"))
                  (rule "div_literals" (formula "11") (term "0,0"))
                  (rule "add_zero_left" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "allLeft" (formula "30") (inst "t=add(Z(1(#)), b_0)"))
                  (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "30") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "20"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "30") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "30") (term "0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq0" (formula "30") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "closeFalse" (formula "30"))
               )
               (branch "CUT: (int)self.bucket_starts[bucket] <= 2147483392 FALSE"
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "div_axiom" (formula "5") (term "0,2,0") (inst "quotient=quotient_0"))
                  (rule "equal_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1,1,1,1"))
                  (rule "qeq_literals" (formula "5") (term "0,1"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "polySimp_addComm1" (formula "7") (term "1"))
                  (rule "add_literals" (formula "7") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0"))
                  (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "5"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "div_axiom" (formula "9") (term "1,0") (inst "quotient=quotient_1"))
                  (rule "mul_literals" (formula "9") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "9") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "equal_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "polySimp_addComm1" (formula "11") (term "1"))
                  (rule "add_literals" (formula "11") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "4"))
                  (rule "polySimp_mulAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "leq_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "6"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "neg_literal" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "allLeft" (formula "31") (inst "t=bucket"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0,0") (ifseqformula "29"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "31") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0,0,0") (ifseqformula "27"))
                  (rule "qeq_literals" (formula "31") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "allLeft" (formula "32") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "32") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "32") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "30"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0,0,0") (ifseqformula "35"))
                  (rule "qeq_literals" (formula "32") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "commute_or" (formula "31") (term "0,0"))
                  (rule "commute_or" (formula "32") (term "0,0"))
                  (rule "ifthenelse_split" (formula "15") (term "0"))
                  (branch " javaBitwiseAndInt( 255 + (int)self.bucket_starts[bucket], -256) >= 0 TRUE"
                     (rule "eqSymm" (formula "16"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "4"))
                     (rule "mul_literals" (formula "15") (term "0,0"))
                     (rule "add_zero_left" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "16") (term "0,0"))
                     (rule "add_zero_left" (formula "16") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "times_zero_2" (formula "16") (term "1"))
                     (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "neg_literal" (formula "16") (term "0,0,0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "14"))
                     (rule "times_zero_1" (formula "17") (term "0,0"))
                     (rule "add_zero_left" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "17") (term "0,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0"))
                     (rule "mul_literals" (formula "8") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "18"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "allLeft" (formula "37") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,1,0,0,0,0"))
                     (rule "add_literals" (formula "37") (term "1,1,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "37") (term "1,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "37") (term "0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "37") (term "1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0,0,0") (ifseqformula "40"))
                     (rule "qeq_literals" (formula "37") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "commute_or" (formula "37") (term "0,0"))
                     (rule "inEqSimp_or_antiSymm0" (formula "37") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "37") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "37") (term "0,1,0,1,0,0"))
                     (rule "add_zero_left" (formula "37") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "37") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "37") (term "0,0,0,0"))
                     (rule "add_literals" (formula "37") (term "1,0,0,0,0"))
                     (rule "times_zero_1" (formula "37") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "commute_or" (formula "37") (term "0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "inEqSimp_homoInEq1" (formula "37"))
                     (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                     (rule "add_literals" (formula "37") (term "1,0"))
                     (rule "times_zero_1" (formula "37") (term "0"))
                     (rule "leq_literals" (formula "37"))
                     (rule "true_left" (formula "37"))
                     (rule "allLeft" (formula "37") (inst "t=javaBitwiseAndInt(add(Z(5(5(2(#)))),
                      int::seqGet(Seq::final(self,
                                             de.wiesler.BucketPointers::$bucket_starts),
                                  add(Z(1(#)), b_0))),
                  Z(neglit(6(5(2(#))))))"))
                     (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0,0,0,0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "37") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "commute_or" (formula "37") (term "0,0,0"))
                     (rule "commute_or_2" (formula "37") (term "0,0"))
                     (rule "commute_or_2" (formula "37") (term "0"))
                     (rule "allLeft" (formula "36") (inst "t=add(Z(1(#)), b_0)"))
                     (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                     (rule "add_literals" (formula "36") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0"))
                     (rule "add_literals" (formula "36") (term "0,0,0,1,0"))
                     (rule "add_zero_left" (formula "36") (term "0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "36") (term "1,1,0"))
                     (rule "inEqSimp_contradInEq0" (formula "36") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "36") (term "0,1"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "24"))
                     (rule "qeq_literals" (formula "36") (term "0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "36"))
                     (rule "andLeft" (formula "26"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "1,1,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0"))
                     (rule "add_zero_right" (formula "26") (term "0"))
                     (rule "leq_literals" (formula "26"))
                     (rule "closeFalse" (formula "26"))
                  )
                  (branch " javaBitwiseAndInt( 255 + (int)self.bucket_starts[bucket], -256) >= 0 FALSE"
                     (rule "eqSymm" (formula "15"))
                     (rule "inEqSimp_geqRight" (formula "45"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                     (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "neg_literal" (formula "15") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "qeq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "14"))
                     (rule "times_zero_1" (formula "10") (term "0,0"))
                     (rule "add_zero_left" (formula "10") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "16"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "allLeft" (formula "36") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,1,0,0,0,0"))
                     (rule "add_literals" (formula "36") (term "1,1,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "36") (term "1,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "36") (term "0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "36") (term "1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0,0,0") (ifseqformula "39"))
                     (rule "qeq_literals" (formula "36") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "inEqSimp_or_antiSymm0" (formula "36") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "36") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "36") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "36") (term "0,1,0,1,0,0"))
                     (rule "add_zero_left" (formula "36") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "36") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "36") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "36") (term "0,0,0,0"))
                     (rule "add_literals" (formula "36") (term "1,0,0,0,0"))
                     (rule "times_zero_1" (formula "36") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "commute_or" (formula "36") (term "0"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_homoInEq1" (formula "36"))
                     (rule "polySimp_pullOutFactor1" (formula "36") (term "0"))
                     (rule "add_literals" (formula "36") (term "1,0"))
                     (rule "times_zero_1" (formula "36") (term "0"))
                     (rule "leq_literals" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "allLeft" (formula "36") (inst "t=javaBitwiseAndInt(add(Z(5(5(2(#)))),
                      int::seqGet(Seq::final(self,
                                             de.wiesler.BucketPointers::$bucket_starts),
                                  add(Z(1(#)), b_0))),
                  Z(neglit(6(5(2(#))))))"))
                     (rule "commute_or_2" (formula "36") (term "0,0,0"))
                     (rule "commute_or_2" (formula "36") (term "0,0"))
                     (rule "commute_or_2" (formula "36") (term "0"))
                     (rule "commute_or" (formula "36") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "36") (term "0,0,0"))
                     (rule "commute_or_2" (formula "36") (term "0,0"))
                     (rule "allLeft" (formula "35") (inst "t=add(Z(1(#)), b_0)"))
                     (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "35") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0") (ifseqformula "23"))
                     (rule "qeq_literals" (formula "35") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,0"))
                     (rule "leq_literals" (formula "35") (term "0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "35"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
         )
         (branch "CUT: (int)self.bucket_starts[bucket] >= 0 FALSE"
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "4") (term "0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "4") (term "0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "7"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_contradInEq0" (formula "4") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "4") (term "0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_contradInEq0" (formula "5") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_contradInEq0" (formula "4") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "4") (term "0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "allLeft" (formula "20") (inst "t=bucket"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0,0,0") (ifseqformula "18"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0,0"))
            (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "16"))
            (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "commute_or" (formula "20") (term "0,0"))
            (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
            (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
            (rule "leq_literals" (formula "21") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0,0,0"))
            (rule "times_zero_2" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "24"))
            (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "commute_or" (formula "21") (term "0,0"))
            (rule "allLeft" (formula "21") (inst "t=add(Z(1(#)), b_0)"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0"))
            (rule "allLeft" (formula "22") (inst "t=bucket"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
            (rule "leq_literals" (formula "21") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "9"))
            (rule "qeq_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "18"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "22") (term "0,0,1"))
            (rule "leq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "21"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
)
(branch "Case 2"
   (rule "impRight" (formula "14") (userinteraction))
   (rule "instAll" (formula "15") (term "1,0") (ifseqformula "11") (userinteraction))
   (rule "impLeft" (formula "1") (userinteraction))
   (branch "Case 1"
      (rule "translateJavaCastInt" (formula "11") (term "0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "0,1"))
      (rule "translateJavaAddInt" (formula "16") (term "1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "1,0"))
      (rule "translateJavaCastInt" (formula "11") (term "1,1,0,1,0"))
      (rule "translateJavaCastInt" (formula "10") (term "0"))
      (rule "eqSymm" (formula "14"))
      (rule "polySimp_addComm0" (formula "13") (term "0,1"))
      (rule "polySimp_addComm0" (formula "16") (term "1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "0"))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_gtToGeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
      (rule "add_literals" (formula "14") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
      (rule "times_zero_2" (formula "14") (term "1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0"))
      (rule "mul_literals" (formula "14") (term "1,0"))
      (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "2"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0"))
      (rule "qeq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "inEqSimp_subsumption1" (formula "14") (term "0") (ifseqformula "9"))
      (rule "leq_literals" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
      (rule "times_zero_1" (formula "10") (term "0,0"))
      (rule "add_zero_left" (formula "10") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "mul_literals" (formula "10") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
      (rule "leq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "14") (inst "b=b"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaCastInt" (formula "14") (term "0,0,1,0"))
      (rule "translateJavaAddInt" (formula "14") (term "1,1,0,0"))
      (rule "translateJavaCastInt" (formula "14") (term "0,1,0,1,0,0,0"))
      (rule "translateJavaCastInt" (formula "14") (term "1,1,0,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "14") (term "1,0,1,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "14") (term "0,1,1,0,0,0,0"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "polySimp_mulComm0" (formula "15") (term "0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1"))
      (rule "polySimp_addComm0" (formula "20") (term "1"))
      (rule "castedGetAny" (formula "21") (term "0"))
      (rule "castedGetAny" (formula "18") (term "0"))
      (rule "castedGetAny" (formula "17") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "20"))
      (rule "applyEq" (formula "13") (term "1,1,0,0,1,0") (ifseqformula "20"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
      (rule "andLeft" (formula "11"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0"))
      (rule "add_literals" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
   (branch "Case 2"
      (rule "instAll" (formula "16") (term "1,1") (ifseqformula "1") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "translateJavaAddInt" (formula "17") (term "1,0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
         (rule "translateJavaAddInt" (formula "14") (term "0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0"))
         (rule "translateJavaCastInt" (formula "1") (term "1,1,0"))
         (rule "translateJavaCastInt" (formula "12") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "12") (term "1,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "11") (term "0"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "15"))
         (rule "polySimp_addComm0" (formula "17") (term "1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "1,0,0,1,0"))
         (rule "castedGetAny" (formula "1") (term "1,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "11") (term "0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
         (rule "polySimp_addComm1" (formula "14") (term "0,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "inEqSimp_leqRight" (formula "17"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0"))
         (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "0,0,0"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "4"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "qeq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "4"))
         (rule "times_zero_1" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "nnf_imp2or" (formula "3") (term "0"))
         (rule "nnf_imp2or" (formula "14") (term "0"))
         (rule "nnf_notAnd" (formula "3") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "15") (inst "b=b"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaCastInt" (formula "15") (term "0,0,1,0"))
         (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "0,1,0,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "15") (term "1,0,1,0,0,0,0"))
         (rule "translateJavaCastInt" (formula "15") (term "1,1,0,0,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "15") (term "0,1,1,0,0,0,0"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "polySimp_mulComm0" (formula "15") (term "1"))
         (rule "polySimp_mulComm0" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "21") (term "1"))
         (rule "castedGetAny" (formula "22") (term "0"))
         (rule "castedGetAny" (formula "19") (term "0"))
         (rule "castedGetAny" (formula "18") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "18"))
         (rule "applyEq" (formula "14") (term "1,1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "3") (term "1,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
         (rule "andLeft" (formula "5"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "times_zero_1" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0"))
         (rule "leq_literals" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
      (branch "Case 2"
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0") (userinteraction))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "1") (userinteraction))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "17") (term "0") (userinteraction))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "1") (userinteraction))
          (builtin "One Step Simplification" (formula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaCastInt" (formula "19") (term "0,0"))
         (rule "translateJavaCastInt" (formula "3") (term "1"))
         (rule "translateJavaCastInt" (formula "4") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "4") (term "1,1,0"))
         (rule "translateJavaCastInt" (formula "14") (term "0"))
         (rule "translateJavaCastInt" (formula "19") (term "0,1"))
         (rule "translateJavaCastInt" (formula "15") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "15") (term "1,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "3") (term "0"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1,0,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,0,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,1,0"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,0,1"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,0"))
         (rule "translateJavaAddInt" (formula "19") (term "1,0,0,0"))
         (rule "translateJavaAddInt" (formula "4") (term "1,0,0,1,0"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,0"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,0,1"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,1,1,1"))
         (rule "translateJavaCastInt" (formula "2") (term "0,0,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1,0"))
         (rule "translateJavaCastInt" (formula "2") (term "1,0,0"))
         (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1,1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "eqSymm" (formula "17"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "castedGetAny" (formula "3") (term "1"))
         (rule "castedGetAny" (formula "4") (term "1,1,0"))
         (rule "castedGetAny" (formula "14") (term "0"))
         (rule "castedGetAny" (formula "19") (term "0,1"))
         (rule "castedGetAny" (formula "15") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "15") (term "1,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,1"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1"))
         (rule "castedGetAny" (formula "1") (term "1,0,1,1"))
         (rule "castedGetAny" (formula "1") (term "1,0,0"))
         (rule "castedGetAny" (formula "19") (term "0,0"))
         (rule "castedGetAny" (formula "4") (term "0,1,0"))
         (rule "castedGetAny" (formula "3") (term "0"))
         (rule "castedGetAny" (formula "2") (term "1,0,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,0,1"))
         (rule "castedGetAny" (formula "2") (term "0,1,0"))
         (rule "castedGetAny" (formula "2") (term "1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,1,1"))
         (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,1,1,1"))
         (rule "castedGetAny" (formula "2") (term "0,1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
         (rule "inEqSimp_leqRight" (formula "19"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
         (rule "polySimp_elimOne" (formula "14") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "6"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
         (rule "add_literals" (formula "18") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0"))
         (rule "qeq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "false_right" (formula "18"))
         (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "6"))
         (rule "times_zero_1" (formula "13") (term "0,0"))
         (rule "add_zero_left" (formula "13") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13"))
         (rule "mul_literals" (formula "13") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0,1,0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (inst "b=b"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0"))
         (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0,0,0"))
         (rule "translateJavaCastInt" (formula "17") (term "1,1,0,0,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "17") (term "1,0,1,0,0,0,0"))
         (rule "translateJavaMulInt" (formula "17") (term "0,1,1,0,0,0,0"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "polySimp_mulComm0" (formula "17") (term "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "0"))
         (rule "polySimp_addComm0" (formula "23") (term "1"))
         (rule "castedGetAny" (formula "24") (term "0"))
         (rule "castedGetAny" (formula "21") (term "0"))
         (rule "castedGetAny" (formula "20") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "applyEq" (formula "16") (term "1,1,0,0,1,0") (ifseqformula "23"))
         (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_exactShadow2" (formula "14") (ifseqformula "18"))
         (rule "greater_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
         (rule "polySimp_mulComm0" (formula "14") (term "1"))
         (rule "polySimp_rightDist" (formula "14") (term "1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
         (rule "mul_literals" (formula "14") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "22"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "21"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0"))
         (rule "polySimp_elimOne" (formula "21") (term "0"))
         (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "19"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
         (rule "greater_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "times_zero_1" (formula "18") (term "0,0"))
         (rule "add_zero_left" (formula "18") (term "0"))
         (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "20"))
         (rule "greater_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
         (rule "mul_literals" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,0"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
         (rule "neg_literal" (formula "1") (term "1,0"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "translateJavaCastInt" (formula "28") (term "1,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "28") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "28") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "28") (term "0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,0"))
         (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0") (ifseqformula "27"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
         (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "27"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "28") (term "0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "28") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "translateJavaMod" (formula "26") (term "0"))
         (rule "jmod_axiom" (formula "26") (term "0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "26"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0"))
         (rule "newSym_eq" (formula "26") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
         (rule "times_zero_1" (formula "26") (term "1,1"))
         (rule "add_zero_right" (formula "26") (term "1"))
         (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "26"))
         (rule "eqSymm" (formula "27"))
         (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "27"))
         (rule "applyEq" (formula "24") (term "1") (ifseqformula "27"))
         (rule "applyEq" (formula "22") (term "0") (ifseqformula "27"))
         (rule "elimGcdGeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
         (rule "add_literals" (formula "22") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0"))
         (rule "leq_literals" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "elimGcdLeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "23") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
         (rule "add_literals" (formula "23") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0"))
         (rule "qeq_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
         (rule "polySimp_mulAssoc" (formula "24") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
         (rule "polySimp_addComm0" (formula "24") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "24"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "24") (ifseqformula "23"))
         (rule "greater_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "mul_literals" (formula "24") (term "0,0"))
         (rule "leq_literals" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "5") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1"))
         (rule "commute_or" (formula "20") (term "0,0,1,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "1,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,1,1"))
         (rule "neg_literal" (formula "1") (term "1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,1,1"))
         (rule "mul_literals" (formula "1") (term "1,0,1,1"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1"))
         (rule "commute_or_2" (formula "31") (term "0"))
         (rule "seqGetAlphaCast" (formula "6") (term "1"))
         (rule "castedGetAny" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "seqGetAlphaCast" (formula "19") (term "0"))
         (rule "castedGetAny" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "seqGetAlphaCast" (formula "6") (term "0"))
         (rule "castedGetAny" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "2") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "5") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaMod" (formula "6") (term "0,0,1"))
         (rule "jmod_axiom" (formula "6") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "6") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
         (rule "lenNonNegative" (formula "31") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "31"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
         (rule "mul_literals" (formula "31") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "23"))
         (rule "leq_literals" (formula "31") (term "0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "arrayLengthNotNegative" (formula "24") (term "1"))
         (rule "arrayLengthIsAShort" (formula "24") (term "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "seqGetAlphaCast" (formula "28") (term "0"))
         (rule "castedGetAny" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
         (rule "commute_or" (formula "32") (term "0,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaMod" (formula "4") (term "0,0,1"))
         (rule "jmod_axiom" (formula "4") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "4") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "6") (term "0,0,0,0,0,1"))
         (rule "neg_literal" (formula "6") (term "1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,1,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,1,0,1"))
         (rule "translateJavaAddInt" (formula "7") (term "0,0,1,0,1"))
         (rule "neg_literal" (formula "7") (term "1,1,0,1"))
         (rule "eqSymm" (formula "7") (term "0,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
         (rule "jdiv_axiom" (formula "30") (term "0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,0,2,1"))
         (rule "eqSymm" (formula "30"))
         (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "31"))
         (rule "inEqSimp_subsumption6" (formula "30") (term "0,0") (ifseqformula "26"))
         (rule "times_zero_1" (formula "30") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "30") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "leq_literals" (formula "30") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "polyDiv_pullOut" (formula "30") (term "0") (inst "polyDivCoeff=l_0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "polySimp_pullOutFactor0" (formula "30") (term "0,0,0"))
         (rule "add_literals" (formula "30") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "30") (term "0,0,0"))
         (rule "div_literals" (formula "30") (term "0,0"))
         (rule "add_zero_left" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaMod" (formula "4") (term "0,0,1"))
         (rule "jmod_axiom" (formula "4") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "4") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
         (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "6") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "6") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "7") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,1,1,1"))
         (rule "all_pull_out3" (formula "23") (term "0"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,0,1,0,1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,0,1,0,1"))
         (rule "translateJavaSubInt" (formula "8") (term "0,0,0,1,0,1"))
         (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,0,1"))
         (rule "neg_literal" (formula "8") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "8") (term "0,1"))
         (rule "polySimp_elimSub" (formula "8") (term "0,0,0,0,0,1"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,1"))
         (rule "commute_and" (formula "5") (term "1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaMod" (formula "2") (term "0,0,1"))
         (rule "jmod_axiom" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaMod" (formula "3") (term "0,0,1"))
         (rule "jmod_axiom" (formula "3") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "5") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaSubInt" (formula "8") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "8") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "8") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "8") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "8") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0,1,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "9") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0,0,1"))
         (rule "jmod_axiom" (formula "9") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "9") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1"))
         (rule "allLeft" (formula "11") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "0,1,0"))
         (rule "leq_literals" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "23"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0"))
         (rule "leq_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "32"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "polySimp_elimOne" (formula "11") (term "0"))
         (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "translateJavaSubInt" (formula "2") (term "0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0,1,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,0,1,1,1"))
         (rule "neg_literal" (formula "2") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "2") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "6") (term "0,0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "6") (term "0,0,0,0,0,0,1"))
         (rule "neg_literal" (formula "6") (term "1,0,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "6") (term "0,0,0,0,0,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0,0,1"))
         (rule "shift_paren_or" (formula "27") (term "0,0"))
         (rule "commute_and" (formula "3") (term "1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaMod" (formula "8") (term "0,0,1"))
         (rule "jmod_axiom" (formula "8") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "8") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaMod" (formula "7") (term "0,0,1"))
         (rule "jmod_axiom" (formula "7") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "7") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0") (ifseqformula "17") (ifseqformula "18"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,0,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "translateJavaSubInt" (formula "3") (term "0,0,0,0,0,1"))
         (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,0,0,1"))
         (rule "neg_literal" (formula "3") (term "1,0,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0,0,0,0,0,1"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,0,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
         (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "translateJavaSubInt" (formula "5") (term "0,0,0,1,1"))
         (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,1,1"))
         (rule "neg_literal" (formula "5") (term "1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "5") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,1,1"))
         (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,1"))
         (rule "commute_and" (formula "10") (term "1"))
         (rule "cut_direct" (formula "7") (term "0,0"))
         (branch "CUT: (int)self.bucket_starts[b_0] >= 0 TRUE"
             (builtin "One Step Simplification" (formula "8"))
            (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,1,0,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,1,0,1"))
            (rule "neg_literal" (formula "10") (term "1,1,0,1"))
            (rule "eqSymm" (formula "10") (term "0,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0,0,1"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "9") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "10") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,1,1,1"))
            (rule "shift_paren_or" (formula "29") (term "0,0,0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaMod" (formula "5") (term "0,0,1"))
            (rule "jmod_axiom" (formula "5") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,1,0,1"))
            (rule "translateJavaSubInt" (formula "7") (term "0,1,0,1"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,1,0,1"))
            (rule "neg_literal" (formula "7") (term "1,1,0,1"))
            (rule "eqSymm" (formula "7") (term "0,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
            (rule "eqSymm" (formula "7") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,1,0,1"))
            (rule "translateJavaAddInt" (formula "3") (term "0,0,1,0,1"))
            (rule "neg_literal" (formula "3") (term "1,1,0,1"))
            (rule "eqSymm" (formula "3") (term "0,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1"))
            (rule "eqSymm" (formula "3") (term "0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
            (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "4") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "12") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
            (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0,0,1,0,1"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,0,0,1,0,1"))
            (rule "neg_literal" (formula "12") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "12") (term "0,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "10") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "11") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,1"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,1,1"))
            (rule "mul_literals" (formula "11") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,0,0,0,0,1"))
            (rule "neg_literal" (formula "12") (term "1,0,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
            (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,1"))
            (rule "neg_literal" (formula "5") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaMod" (formula "6") (term "0,0,1"))
            (rule "jmod_axiom" (formula "6") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
            (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
            (rule "cut_direct" (formula "14") (term "0"))
            (branch "CUT: (int)self.bucket_starts[1 + bucket] >= 0 TRUE"
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "replace_known_left" (formula "13") (term "1,1,1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
               (rule "true_left" (formula "13"))
               (rule "replace_known_left" (formula "12") (term "1,1,1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
               (rule "andLeft" (formula "12"))
               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")))
               (rule "andLeft" (formula "10"))
               (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "11")))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "13"))
               (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "13"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "13"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "12"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "newSym_eq" (formula "12") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 add(Z(1(#)),
                                                     bucket))),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "12") (term "1,1"))
               (rule "add_zero_right" (formula "12") (term "1"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
               (rule "eqSymm" (formula "13"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
               (rule "inEqSimp_commuteGeq" (formula "14"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "13"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "13"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "14"))
               (rule "times_zero_1" (formula "15") (term "0,0"))
               (rule "add_zero_left" (formula "15") (term "0"))
               (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0"))
               (rule "leq_literals" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "leq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "18"))
               (rule "times_zero_1" (formula "16") (term "0,0"))
               (rule "add_zero_left" (formula "16") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0"))
               (rule "mul_literals" (formula "10") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "20"))
               (rule "polySimp_rightDist" (formula "11") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "qeq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaMod" (formula "4") (term "0,0,1"))
               (rule "jmod_axiom" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "4") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
               (rule "commute_and" (formula "6") (term "1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
               (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,0,0,1"))
               (rule "translateJavaSubInt" (formula "4") (term "0,0,0,0,0,1"))
               (rule "neg_literal" (formula "4") (term "1,0,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0,0,0,0,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0,0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,0,0,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,1,1"))
               (rule "neg_literal" (formula "5") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
               (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
               (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "translateJavaMod" (formula "3") (term "0,0,1"))
               (rule "jmod_axiom" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
               (rule "jdiv_axiom" (formula "7") (term "0,0,1,1"))
               (rule "eqSymm" (formula "7"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "21")))
               (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,1"))
               (rule "mul_literals" (formula "14") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "15"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_commuteGeq" (formula "15"))
               (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "15"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaUnaryMinusInt" (formula "14") (term "1,0"))
               (rule "translateJavaSubInt" (formula "14") (term "0,0"))
               (rule "translateJavaAddInt" (formula "14") (term "0,0,0"))
               (rule "neg_literal" (formula "14") (term "1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "14") (term "0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaMod" (formula "12") (term "0"))
               (rule "jmod_axiom" (formula "12") (term "0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
               (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "13"))
               (rule "polySimp_pullOutFactor0" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,0"))
               (rule "times_zero_1" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "cut_direct" (formula "8") (term "0"))
               (branch "CUT: (int)self.bucket_starts[b_0] <= 2147483392 TRUE"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "replace_known_left" (formula "4") (term "1,1,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
                  (rule "replace_known_left" (formula "5") (term "0,1,1") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")))
                  (rule "andLeft" (formula "5"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "4"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                  (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "7") (term "0,0,0,2,0") (ifseqformula "11"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "9"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,2,0") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,2,0,2,0"))
                  (rule "equal_literals" (formula "7") (term "0,0,2,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "1,2,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "2,0"))
                  (rule "polySimp_mulAssoc" (formula "7") (term "0,2,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,2,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,2,0"))
                  (rule "applyEq" (formula "7") (term "1,0,0,1,2,0") (ifseqformula "4"))
                  (rule "polySimp_pullOutFactor2" (formula "7") (term "0,0,1,2,0"))
                  (rule "add_literals" (formula "7") (term "1,0,0,1,2,0"))
                  (rule "times_zero_1" (formula "7") (term "0,0,1,2,0"))
                  (rule "div_literals" (formula "7") (term "0,1,2,0"))
                  (rule "times_zero_2" (formula "7") (term "1,2,0"))
                  (rule "add_zero_right" (formula "7") (term "2,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1,1"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,1,1"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0,1") (inst "polyDivCoeff=mul(jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                                 de.wiesler.BucketPointers::$bucket_starts),
                                                      b_0)),
         Z(6(5(2(#))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,2,0,1"))
                  (rule "equal_literals" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "7") (term "1,1") (inst "polyDivCoeff=jdiv(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                             de.wiesler.BucketPointers::$bucket_starts),
                                                  b_0)),
     Z(6(5(2(#)))))"))
                  (rule "equal_literals" (formula "7") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1,1"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,1"))
                  (rule "newSym_eq" (formula "4") (inst "l=l_2") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 b_0)),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "4") (term "1,1"))
                  (rule "add_zero_right" (formula "4") (term "1"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                  (rule "eqSymm" (formula "5"))
                  (rule "applyEq" (formula "8") (term "0,1,0,0,1") (ifseqformula "4"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,0,1"))
                  (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_commuteGeq" (formula "3"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "1,0,0,1") (ifseqformula "5"))
                  (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,1"))
                  (rule "add_literals" (formula "8") (term "1,0,0,1"))
                  (rule "times_zero_1" (formula "8") (term "0,0,1"))
                  (rule "div_literals" (formula "8") (term "0,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=add(Z(1(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "leq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "12"))
                  (rule "mul_literals" (formula "10") (term "0,1,0"))
                  (rule "greater_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "inEqSimp_contradInEq5" (formula "10") (ifseqformula "2"))
                  (rule "greater_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0"))
                  (rule "add_zero_right" (formula "10") (term "0"))
                  (rule "leq_literals" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
               (branch "CUT: (int)self.bucket_starts[b_0] <= 2147483392 FALSE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_leqRight" (formula "41"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "jdiv_axiom" (formula "8") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "8"))
                  (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_subsumption6" (formula "8") (term "0,0") (ifseqformula "11"))
                  (rule "greater_literals" (formula "8") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                  (rule "leq_literals" (formula "8") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polyDiv_pullOut" (formula "8") (term "0") (inst "polyDivCoeff=l_1"))
                  (rule "equal_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "0,0,0"))
                  (rule "div_literals" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "4") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "equal_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "polySimp_addComm1" (formula "6") (term "1"))
                  (rule "add_literals" (formula "6") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                  (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "add_zero_left" (formula "6") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                  (rule "add_zero_left" (formula "6") (term "1,1,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "leq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "10"))
                  (rule "polySimp_mulAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "9") (term "1,0") (inst "quotient=quotient_1"))
                  (rule "mul_literals" (formula "9") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "9") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "equal_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "polySimp_addComm1" (formula "11") (term "1"))
                  (rule "add_literals" (formula "11") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "11"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "5"))
                  (rule "polySimp_mulAssoc" (formula "11") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=add(Z(1(#)), quotient_1)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "11"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "13"))
                  (rule "leq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "41") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "add_zero_right" (formula "41") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "41") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "40"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0,0,0") (ifseqformula "44"))
                  (rule "qeq_literals" (formula "41") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "allLeft" (formula "42") (inst "t=b_0"))
                  (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "42") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0,0,0,0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "42") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0,0,0") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "42") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "42") (term "0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "0,0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "42") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "commute_or" (formula "41") (term "0,0"))
                  (rule "commute_or" (formula "42") (term "0,0"))
                  (rule "ifthenelse_split" (formula "16") (term "0"))
                  (branch " javaBitwiseAndInt(255 + (int)self.bucket_starts[b_0], -256) >= 0 TRUE"
                     (rule "eqSymm" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "16") (term "0,0"))
                     (rule "add_zero_left" (formula "16") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "neg_literal" (formula "16") (term "0,0,0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "17") (term "0,0"))
                     (rule "add_zero_left" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "17") (term "0,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "17"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "15"))
                     (rule "times_zero_1" (formula "18") (term "0,0"))
                     (rule "add_zero_left" (formula "18") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                     (rule "mul_literals" (formula "18") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                     (rule "mul_literals" (formula "8") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "19"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "allLeft" (formula "46") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "46") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,1,0,0,0,0"))
                     (rule "add_literals" (formula "46") (term "1,1,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "46") (term "1,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "46") (term "0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "46") (term "1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "inEqSimp_contradInEq1" (formula "46") (term "0,0,0,0") (ifseqformula "49"))
                     (rule "qeq_literals" (formula "46") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "commute_or" (formula "46") (term "0,0"))
                     (rule "inEqSimp_or_antiSymm0" (formula "46") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "46") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "46") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "46") (term "0,1,0,1,0,0"))
                     (rule "add_zero_left" (formula "46") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "46") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "46") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "46") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "46") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "46") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "46") (term "0,0,0,0"))
                     (rule "add_literals" (formula "46") (term "1,0,0,0,0"))
                     (rule "times_zero_1" (formula "46") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "commute_or" (formula "46") (term "0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "inEqSimp_homoInEq1" (formula "46"))
                     (rule "polySimp_pullOutFactor1" (formula "46") (term "0"))
                     (rule "add_literals" (formula "46") (term "1,0"))
                     (rule "times_zero_1" (formula "46") (term "0"))
                     (rule "leq_literals" (formula "46"))
                     (rule "true_left" (formula "46"))
                     (rule "allLeft" (formula "46") (inst "t=mul(l_1, Z(6(5(2(#)))))"))
                     (rule "inEqSimp_homoInEq1" (formula "46") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq5" (formula "46") (term "0,0,0,0,0") (ifseqformula "17"))
                     (rule "mul_literals" (formula "46") (term "1,1,0,0,0,0,0,0"))
                     (rule "greater_literals" (formula "46") (term "0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "qeq_literals" (formula "46") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "commute_or_2" (formula "46") (term "0,0"))
                     (rule "commute_or" (formula "46") (term "0,0,0"))
                     (rule "commute_or_2" (formula "46") (term "0,0"))
                     (rule "commute_or_2" (formula "46") (term "0"))
                     (rule "cut_direct" (formula "46") (term "1,0"))
                     (branch "CUT: self.num_buckets <= -1 + l_1 * 256 TRUE"
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "true_left" (formula "47"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "46"))
                        (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                        (rule "mul_literals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "47"))
                        (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                        (rule "mul_literals" (formula "43") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "43") (term "0"))
                        (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                        (rule "add_literals" (formula "43") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "43"))
                        (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                        (rule "polySimp_elimOne" (formula "43") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "48"))
                        (rule "times_zero_1" (formula "51") (term "0,0"))
                        (rule "add_zero_left" (formula "51") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "51"))
                        (rule "mul_literals" (formula "51") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "51") (ifseqformula "17"))
                        (rule "mul_literals" (formula "51") (term "1,1,0"))
                        (rule "greater_literals" (formula "51") (term "0,0"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "leq_literals" (formula "51") (term "0"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "true_left" (formula "51"))
                        (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "34"))
                        (rule "mul_literals" (formula "40") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0"))
                        (rule "add_literals" (formula "40") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                        (rule "mul_literals" (formula "40") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "40") (ifseqformula "17"))
                        (rule "greater_literals" (formula "40") (term "0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "mul_literals" (formula "40") (term "1,0"))
                        (rule "leq_literals" (formula "40") (term "0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "true_left" (formula "40"))
                        (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "43"))
                        (rule "times_zero_1" (formula "41") (term "0,0"))
                        (rule "add_zero_left" (formula "41") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                        (rule "mul_literals" (formula "41") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "41") (ifseqformula "17"))
                        (rule "greater_literals" (formula "41") (term "0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "mul_literals" (formula "41") (term "1,0"))
                        (rule "leq_literals" (formula "41") (term "0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "true_left" (formula "41"))
                        (rule "allLeft" (formula "46") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "46") (term "0,0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "inEqSimp_homoInEq1" (formula "46") (term "0"))
                        (rule "times_zero_2" (formula "46") (term "1,0,0"))
                        (rule "add_zero_right" (formula "46") (term "0,0"))
                        (rule "applyEq" (formula "46") (term "0,1") (ifseqformula "45"))
                        (rule "qeq_literals" (formula "46") (term "1"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "true_left" (formula "46"))
                        (rule "allLeft" (formula "47") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                        (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1,0"))
                        (rule "add_literals" (formula "47") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "47") (term "0,1,0"))
                        (rule "leq_literals" (formula "47") (term "1,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "47") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "47") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "47") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0"))
                        (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,0"))
                        (rule "add_literals" (formula "47") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "47") (term "0,0,0"))
                        (rule "leq_literals" (formula "47") (term "0,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "57"))
                        (rule "polySimp_mulComm0" (formula "47") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "47") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "47"))
                        (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                        (rule "polySimp_elimOne" (formula "47") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "47"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "CUT: self.num_buckets <= -1 + l_1 * 256 FALSE"
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "inEqSimp_leqRight" (formula "59"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "51"))
                        (rule "greater_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "allLeft" (formula "46") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "46") (term "0,0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "inEqSimp_homoInEq1" (formula "46") (term "0"))
                        (rule "times_zero_2" (formula "46") (term "1,0,0"))
                        (rule "add_zero_right" (formula "46") (term "0,0"))
                        (rule "applyEq" (formula "46") (term "0,1") (ifseqformula "45"))
                        (rule "qeq_literals" (formula "46") (term "1"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "true_left" (formula "46"))
                        (rule "allLeft" (formula "47") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                        (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1,0"))
                        (rule "add_literals" (formula "47") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "47") (term "0,1,0"))
                        (rule "leq_literals" (formula "47") (term "1,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq1" (formula "47") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "47") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "47") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0"))
                        (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,0"))
                        (rule "add_literals" (formula "47") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "47") (term "0,0,0"))
                        (rule "leq_literals" (formula "47") (term "0,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "57"))
                        (rule "polySimp_mulComm0" (formula "47") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "47") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "47"))
                        (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                        (rule "polySimp_elimOne" (formula "47") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "47"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch " javaBitwiseAndInt(255 + (int)self.bucket_starts[b_0], -256) >= 0 FALSE"
                     (rule "eqSymm" (formula "16"))
                     (rule "inEqSimp_geqRight" (formula "55"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                     (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                     (rule "neg_literal" (formula "15") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "qeq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "15"))
                     (rule "leq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "12"))
                     (rule "mul_literals" (formula "9") (term "0,0"))
                     (rule "add_zero_left" (formula "9") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "9"))
                     (rule "times_zero_2" (formula "9") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "15"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "allLeft" (formula "44") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                     (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,1,0,0,0,0"))
                     (rule "add_literals" (formula "44") (term "1,1,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "44") (term "1,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "44") (term "0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "44") (term "1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "inEqSimp_contradInEq1" (formula "44") (term "0,0,0,0") (ifseqformula "47"))
                     (rule "qeq_literals" (formula "44") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "commute_or" (formula "44") (term "0,0"))
                     (rule "inEqSimp_or_antiSymm0" (formula "44") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "44") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "44") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "44") (term "0,1,0,1,0,0"))
                     (rule "add_zero_left" (formula "44") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "44") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "44") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "44") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "44") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "44") (term "0,0,0,0"))
                     (rule "add_literals" (formula "44") (term "1,0,0,0,0"))
                     (rule "times_zero_1" (formula "44") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "commute_or" (formula "44") (term "0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "inEqSimp_homoInEq1" (formula "44"))
                     (rule "polySimp_pullOutFactor1" (formula "44") (term "0"))
                     (rule "add_literals" (formula "44") (term "1,0"))
                     (rule "times_zero_1" (formula "44") (term "0"))
                     (rule "leq_literals" (formula "44"))
                     (rule "true_left" (formula "44"))
                     (rule "allLeft" (formula "44") (inst "t=mul(l_1, Z(6(5(2(#)))))"))
                     (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "44") (term "0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq5" (formula "44") (term "0,0,0,0,0") (ifseqformula "23"))
                     (rule "greater_literals" (formula "44") (term "0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "44") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "commute_or_2" (formula "44") (term "0,0"))
                     (rule "commute_or" (formula "44") (term "0,0,0"))
                     (rule "commute_or_2" (formula "44") (term "0,0"))
                     (rule "commute_or_2" (formula "44") (term "0"))
                     (rule "cut_direct" (formula "44") (term "1,0"))
                     (branch "CUT: self.num_buckets <= -1 + l_1 * 256 TRUE"
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "true_left" (formula "45"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "44"))
                        (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                        (rule "mul_literals" (formula "32") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "45"))
                        (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                        (rule "mul_literals" (formula "41") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                        (rule "add_literals" (formula "41") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "49") (ifseqformula "46"))
                        (rule "times_zero_1" (formula "49") (term "0,0"))
                        (rule "add_zero_left" (formula "49") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "49"))
                        (rule "mul_literals" (formula "49") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "49") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "leq_literals" (formula "49") (term "0,0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0"))
                        (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "49") (term "0,0,0,0"))
                        (rule "add_literals" (formula "49") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,0"))
                        (rule "add_literals" (formula "49") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "49") (term "1,0,0"))
                        (rule "add_zero_right" (formula "49") (term "0,0"))
                        (rule "leq_literals" (formula "49") (term "0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "49"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "31"))
                        (rule "mul_literals" (formula "37") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                        (rule "mul_literals" (formula "37") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "37") (ifseqformula "49"))
                        (rule "mul_literals" (formula "37") (term "1,1,0"))
                        (rule "greater_literals" (formula "37") (term "0,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "leq_literals" (formula "37") (term "0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "40"))
                        (rule "times_zero_1" (formula "38") (term "0,0"))
                        (rule "add_zero_left" (formula "38") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                        (rule "mul_literals" (formula "38") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "38") (ifseqformula "49"))
                        (rule "greater_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "mul_literals" (formula "38") (term "1,0"))
                        (rule "leq_literals" (formula "38") (term "0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "allLeft" (formula "44") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                        (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,1,0"))
                        (rule "add_literals" (formula "44") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "44") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "44") (term "0,1,0"))
                        (rule "leq_literals" (formula "44") (term "1,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "inEqSimp_contradInEq1" (formula "44") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "44") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,0,0,0"))
                        (rule "add_literals" (formula "44") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,0"))
                        (rule "add_literals" (formula "44") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "44") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "44") (term "0,0,0"))
                        (rule "leq_literals" (formula "44") (term "0,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "55"))
                        (rule "polySimp_mulComm0" (formula "44") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "44"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                        (rule "polySimp_elimOne" (formula "44") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "44"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: self.num_buckets <= -1 + l_1 * 256 FALSE"
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "inEqSimp_leqRight" (formula "57"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow2" (formula "1") (ifseqformula "49"))
                        (rule "greater_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "allLeft" (formula "45") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                        (rule "inEqSimp_homoInEq1" (formula "45") (term "1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,1,0"))
                        (rule "add_literals" (formula "45") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "45") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "45") (term "0,1,0"))
                        (rule "leq_literals" (formula "45") (term "1,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "inEqSimp_contradInEq1" (formula "45") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "45") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "45") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0,0,0,0"))
                        (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0"))
                        (rule "add_literals" (formula "45") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "45") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "45") (term "0,0,0"))
                        (rule "leq_literals" (formula "45") (term "0,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "55"))
                        (rule "polySimp_mulComm0" (formula "45") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "45"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                        (rule "polySimp_elimOne" (formula "45") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "45") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "45") (term "0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "closeFalse" (formula "45"))
                     )
                  )
               )
            )
            (branch "CUT: (int)self.bucket_starts[1 + bucket] >= 0 FALSE"
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "38"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaMod" (formula "5") (term "0,0,1"))
               (rule "jmod_axiom" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
               (rule "commute_and" (formula "7") (term "1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,0,0,0,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,0,0,1"))
               (rule "neg_literal" (formula "5") (term "1,0,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,0,0,0,0,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
               (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,1,1,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "6") (term "0,0,0,1,1,1"))
               (rule "neg_literal" (formula "6") (term "1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,0,1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
               (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
               (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
               (rule "jdiv_axiom" (formula "8") (term "0,0,1,1"))
               (rule "eqSymm" (formula "8"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "1,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "translateJavaSubInt" (formula "6") (term "0,1,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,1,0,1"))
               (rule "translateJavaAddInt" (formula "6") (term "0,0,1,0,1"))
               (rule "neg_literal" (formula "6") (term "1,1,0,1"))
               (rule "eqSymm" (formula "6") (term "0,1"))
               (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
               (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
               (rule "eqSymm" (formula "6") (term "0,1"))
               (rule "cut_direct" (formula "10") (term "0"))
               (branch "CUT: (int)self.bucket_starts[b_0] <= 2147483392 TRUE"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "replace_known_left" (formula "6") (term "1,1,1") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")) (ifInst ""  (formula "13")) (ifInst ""  (formula "11")))
                  (rule "true_left" (formula "6"))
                  (rule "replace_known_left" (formula "4") (term "0,1,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "9")))
                  (rule "andLeft" (formula "4"))
                  (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
                  (rule "andLeft" (formula "7"))
                  (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "4")) (ifInst ""  (formula "8")) (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "6"))
                  (rule "newSym_eq" (formula "13") (inst "l=l_1") (inst "newSymDef=mul(javaBitwiseAndInt(add(Z(5(5(2(#)))),
                          int::seqGet(Seq::final(self,
                                                 de.wiesler.BucketPointers::$bucket_starts),
                                      b_0)),
                      Z(neglit(6(5(2(#)))))),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "13") (term "1,1"))
                  (rule "add_zero_right" (formula "13") (term "1"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "9") (term "0,0,0,2,0") (ifseqformula "14"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,2,0"))
                  (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_commuteGeq" (formula "11"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "14"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "14"))
                  (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "polyDiv_pullOut" (formula "9") (term "1,0") (inst "polyDivCoeff=l_1"))
                  (rule "equal_literals" (formula "9") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "1,0,0,1,0"))
                  (rule "times_zero_1" (formula "9") (term "0,0,1,0"))
                  (rule "div_literals" (formula "9") (term "0,1,0"))
                  (rule "add_zero_left" (formula "9") (term "1,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_homoEq" (formula "9") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                  (rule "polyDiv_pullOut" (formula "9") (term "0,1") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                  (rule "equal_literals" (formula "9") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,1"))
                  (rule "polySimp_homoEq" (formula "9") (term "1"))
                  (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "add_literals" (formula "9") (term "1,0,0,0,1,0,1"))
                  (rule "times_zero_1" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "div_literals" (formula "9") (term "0,0,1,0,1"))
                  (rule "add_zero_left" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
                  (rule "polySimp_pullOutFactor0" (formula "9") (term "0,1"))
                  (rule "add_literals" (formula "9") (term "1,0,1"))
                  (rule "times_zero_1" (formula "9") (term "0,1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "newSym_eq" (formula "6") (inst "l=l_2") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 b_0)),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "6") (term "1,1"))
                  (rule "add_zero_right" (formula "6") (term "1"))
                  (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_commuteGeq" (formula "8"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "neg_literal" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "11"))
                  (rule "times_zero_1" (formula "9") (term "0,0"))
                  (rule "add_zero_left" (formula "9") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=add(Z(0(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "leq_literals" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "add_zero_left" (formula "5") (term "1,1"))
                  (rule "add_zero_left" (formula "5") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "neg_literal" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "10"))
                  (rule "times_zero_1" (formula "12") (term "0,0"))
                  (rule "add_zero_left" (formula "12") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "17") (inst "elimGcdRightDiv=add(Z(0(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "neg_literal" (formula "17") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "add_zero_left" (formula "17") (term "1,1"))
                  (rule "add_zero_left" (formula "17") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "17"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "1,0"))
                  (rule "times_zero_1" (formula "18") (term "0"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEqRigid" (formula "19") (term "0,0,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "16") (term "0,1") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,0"))
                  (rule "times_zero_1" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "8"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "5"))
                  (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
                  (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
                  (rule "add_literals" (formula "9") (term "0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
                  (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "10"))
                  (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
                  (rule "inEqSimp_commuteGeq" (formula "9"))
                  (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "10"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "9") (term "0,0"))
                  (rule "translateJavaAddInt" (formula "9") (term "0,0,0"))
                  (rule "neg_literal" (formula "9") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "translateJavaMod" (formula "4") (term "0"))
                  (rule "jmod_axiom" (formula "4") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "8"))
                  (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,0"))
                  (rule "times_zero_1" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "allLeft" (formula "28") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "28") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "28") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0,0") (ifseqformula "31"))
                  (rule "qeq_literals" (formula "28") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "allLeft" (formula "29") (inst "t=b_0"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0,0") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "23"))
                  (rule "qeq_literals" (formula "29") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "jdiv_axiom" (formula "7") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption6" (formula "7") (term "0,0") (ifseqformula "10"))
                  (rule "times_zero_1" (formula "7") (term "1,1,0,0,0"))
                  (rule "greater_literals" (formula "7") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "leq_literals" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polyDiv_pullOut" (formula "7") (term "0") (inst "polyDivCoeff=l_2"))
                  (rule "equal_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "0,0,0"))
                  (rule "div_literals" (formula "7") (term "0,0"))
                  (rule "add_zero_left" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "commute_or" (formula "28") (term "0,0"))
                  (rule "commute_or" (formula "29") (term "0,0"))
                  (rule "allLeft" (formula "30") (inst "t=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "30") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "33"))
                  (rule "qeq_literals" (formula "30") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "inEqSimp_or_antiSymm0" (formula "30") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,1,0,1,0,0"))
                  (rule "add_zero_left" (formula "30") (term "1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "30") (term "0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "commute_or" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "30"))
                  (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
                  (rule "add_literals" (formula "30") (term "1,0"))
                  (rule "times_zero_1" (formula "30") (term "0"))
                  (rule "leq_literals" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "allLeft" (formula "28") (inst "t=add(Z(1(#)), bucket)"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0,1,0"))
                  (rule "add_zero_left" (formula "28") (term "0,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "28") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "26"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0"))
                  (rule "leq_literals" (formula "28") (term "0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "28") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "28") (term "0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "closeFalse" (formula "28"))
               )
               (branch "CUT: (int)self.bucket_starts[b_0] <= 2147483392 FALSE"
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "div_axiom" (formula "5") (term "0,2,0") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "5") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "5") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "equal_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "polySimp_addComm1" (formula "7") (term "1"))
                  (rule "add_literals" (formula "7") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0"))
                  (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "5"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "8") (term "1,0") (inst "quotient=quotient_1"))
                  (rule "mul_literals" (formula "8") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "8") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "equal_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "polySimp_addComm1" (formula "10") (term "1"))
                  (rule "add_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "8"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "6"))
                  (rule "polySimp_mulAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "allLeft" (formula "29") (inst "t=Z(0(#))"))
                  (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "29") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "32"))
                  (rule "qeq_literals" (formula "29") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "commute_or" (formula "29") (term "0,0"))
                  (rule "allLeft" (formula "30") (inst "t=b_0"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0,0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "30") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "30") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "ifthenelse_split" (formula "13") (term "0"))
                  (branch " javaBitwiseAndInt(255 + (int)self.bucket_starts[b_0], -256) >= 0 TRUE"
                     (rule "eqSymm" (formula "14"))
                     (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "13") (term "0,0"))
                     (rule "add_zero_left" (formula "13") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "13"))
                     (rule "times_zero_2" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,1,0"))
                     (rule "leq_literals" (formula "13") (term "0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "neg_literal" (formula "13") (term "0,0,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "12"))
                     (rule "times_zero_1" (formula "14") (term "0,0"))
                     (rule "add_zero_left" (formula "14") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "mul_literals" (formula "14") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "13"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                     (rule "mul_literals" (formula "7") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "15"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "allLeft" (formula "32") (inst "t=add(Z(1(#)), bucket)"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "32") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "28"))
                     (rule "qeq_literals" (formula "32") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "32") (term "0,1"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq0" (formula "30") (ifseqformula "32"))
                     (rule "andLeft" (formula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "30"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "1,1,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0"))
                     (rule "add_zero_right" (formula "30") (term "0"))
                     (rule "leq_literals" (formula "30"))
                     (rule "closeFalse" (formula "30"))
                  )
                  (branch " javaBitwiseAndInt(255 + (int)self.bucket_starts[b_0], -256) >= 0 FALSE"
                     (rule "eqSymm" (formula "13"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                     (rule "polySimp_mulAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "leq_literals" (formula "12") (term "0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                     (rule "neg_literal" (formula "12") (term "0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "9") (term "0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "12"))
                     (rule "times_zero_1" (formula "9") (term "0,0"))
                     (rule "add_zero_left" (formula "9") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "9"))
                     (rule "times_zero_2" (formula "9") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "14"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "allLeft" (formula "32") (inst "t=add(Z(1(#)), bucket)"))
                     (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "32") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "32") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "28"))
                     (rule "qeq_literals" (formula "32") (term "0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "32"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
         )
         (branch "CUT: (int)self.bucket_starts[b_0] >= 0 FALSE"
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_geqRight" (formula "34"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "9")))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,1,0,1"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,1,0,1"))
            (rule "neg_literal" (formula "6") (term "1,1,0,1"))
            (rule "eqSymm" (formula "6") (term "0,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "4") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1"))
            (rule "shift_paren_or" (formula "24") (term "0,0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,0,0,1"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "5") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,0,1,0,1"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,0,1"))
            (rule "neg_literal" (formula "7") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "7") (term "0,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "11")))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "4") (term "1,0,1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "11")))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,0,0,1"))
            (rule "neg_literal" (formula "4") (term "1,0,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "11")))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "5") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "11")))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,0,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,0,1,1"))
            (rule "neg_literal" (formula "6") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,1"))
            (rule "cut_direct" (formula "8") (term "0"))
            (branch "CUT: (int)self.bucket_starts[1 + bucket] >= 0 TRUE"
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "replace_known_left" (formula "5") (term "1,1,1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")))
               (rule "andLeft" (formula "5"))
               (rule "replace_known_left" (formula "8") (term "1,1,1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")) (ifInst ""  (formula "12")) (ifInst ""  (formula "10")))
               (rule "true_left" (formula "8"))
               (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "6")) (ifInst ""  (formula "10")))
               (rule "replace_known_left" (formula "7") (term "0,1,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")))
               (rule "andLeft" (formula "7"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "4"))
               (rule "eqSymm" (formula "12"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "11"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "9"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "newSym_eq" (formula "4") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(int::seqGet(Seq::final(self,
                                                            de.wiesler.BucketPointers::$bucket_starts),
                                                 add(Z(1(#)),
                                                     bucket))),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "4") (term "1,1"))
               (rule "add_zero_right" (formula "4") (term "1"))
               (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
               (rule "eqSymm" (formula "5"))
               (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "5"))
               (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "5"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
               (rule "inEqSimp_commuteGeq" (formula "6"))
               (rule "applyEq" (formula "10") (term "1") (ifseqformula "5"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1"))
               (rule "polySimp_rightDist" (formula "8") (term "1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
               (rule "mul_literals" (formula "8") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "6"))
               (rule "times_zero_1" (formula "9") (term "0,0"))
               (rule "add_zero_left" (formula "9") (term "0"))
               (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "9") (term "0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "12"))
               (rule "mul_literals" (formula "10") (term "0,0"))
               (rule "add_zero_left" (formula "10") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
               (rule "qeq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
            (branch "CUT: (int)self.bucket_starts[1 + bucket] >= 0 FALSE"
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "1"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
               (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "19"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "23"))
               (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "allLeft" (formula "21") (inst "t=b_0"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0,0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "21") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "21") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commute_or" (formula "21") (term "0,0"))
               (rule "allLeft" (formula "20") (inst "t=b_0"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,1,0"))
               (rule "allLeft" (formula "21") (inst "t=add(Z(1(#)), bucket)"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "20") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "21") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "20") (term "0,1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "18"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0"))
               (rule "leq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "20"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "leq_literals" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
         )
      )
   )
)
)
}
