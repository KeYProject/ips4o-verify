\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jan 10 17:39:03 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Jan 10 17:39:03 CET 2022
contract=de.wiesler.Functions[de.wiesler.Functions\\:\\:isSortedSlice([I,int,int)].JML accessible clause.0
name=de.wiesler.Functions[de.wiesler.Functions\\:\\:isSortedSlice([I,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "a684beee49"))

(autoModeTime "613")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "values_0,begin,end,anon_heap"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "6"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "3"))
(rule "polySimp_elimSub" (formula "6") (term "2,1,1,0,0"))
(rule "mul_literals" (formula "6") (term "1,2,1,1,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "2,1,1,0,0"))
(rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "6") (term "1") (inst "i=i"))
 (builtin "One Step Simplification" (formula "6"))
(rule "translateJavaAddInt" (formula "6") (term "0,2,1,1,0,1,0,1"))
(rule "translateJavaSubInt" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "0,2,1,1,0,1,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0,1,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "6") (term "1") (inst "i=i"))
 (builtin "One Step Simplification" (formula "6"))
(rule "translateJavaAddInt" (formula "6") (term "0,2,1,1,0,1,0,1"))
(rule "translateJavaSubInt" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "6") (term "0,2,1,1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "6") (term "0,1,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,1"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0"))
(rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "6") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "6") (term "0,1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0,0,0"))
(rule "Definition_axiom_for_isValidSlice_in_de_wiesler_Functions" (formula "6") (term "0,0,0,1"))
 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "6") (term "0,0,0,0,0,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,0,1"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "6") (term "0,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,0,0"))
(rule "Definition_axiom_for_isBetweenInclusive_in_de_wiesler_Functions" (formula "6") (term "0,1,0,0,0,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0,0,1"))
(rule "shift_paren_and" (formula "6") (term "0,0,0,0"))
(rule "commute_and_2" (formula "6") (term "0,0,0"))
(rule "commute_and_2" (formula "6") (term "0,0,0,0,0"))
(rule "commute_and_2" (formula "6") (term "0,0,0,0"))
(rule "shift_paren_and" (formula "6") (term "0,0,0,1"))
(rule "commute_and_2" (formula "6") (term "0,0,1"))
(rule "commute_and_2" (formula "6") (term "0,0,0,0,1"))
(rule "commute_and_2" (formula "6") (term "0,0,0,1"))
(rule "ifthenelse_split" (formula "6") (term "0"))
(branch " begin >= 0 & end >= 0 & end >= begin & values_0.length >= begin & values_0.length >= end & forall int i; ( i <= -1 + begin | i >= -1 + end | values_0[1 + i]@heap[anon( allLocs setMinus arrayRange(values_0, begin, -1 + end), anon_heap<<anonHeapFunction>>)] >= values_0[i]@heap[anon( allLocs setMinus arrayRange(values_0, begin, -1 + end), anon_heap<<anonHeapFunction>>)]) TRUE"
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "12"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
   (rule "allRight" (formula "12") (inst "sk=i_0"))
   (rule "orRight" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_leqRight" (formula "13"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "polySimp_elimOne" (formula "2") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "allLeft" (formula "9") (inst "t=i_0"))
   (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "leq_literals" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_contradInEq0" (formula "9") (term "0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "pullOutSelect" (formula "9") (term "1") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "9"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")) (ifInst ""  (formula "14")))
   (rule "elementOfSetMinus" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "elementOfArrayRangeConcrete" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "ifthenelse_negated" (formula "9") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_subsumption0" (formula "9") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "9"))
   (rule "hideAuxiliaryEq" (formula "9"))
   (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "9"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")) (ifInst ""  (formula "14")))
   (rule "inEqSimp_commuteGeq" (formula "10"))
   (rule "elementOfSetMinus" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "elementOfArrayRangeConcrete" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "ifthenelse_negated" (formula "9") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "9"))
   (rule "hideAuxiliaryEq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "4"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_homoInEq1" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0"))
   (rule "add_zero_right" (formula "9") (term "0"))
   (rule "leq_literals" (formula "9"))
   (rule "closeFalse" (formula "9"))
)
(branch " begin >= 0 & end >= 0 & end >= begin & values_0.length >= begin & values_0.length >= end & forall int i; ( i <= -1 + begin | i >= -1 + end | values_0[1 + i]@heap[anon( allLocs setMinus arrayRange(values_0, begin, -1 + end), anon_heap<<anonHeapFunction>>)] >= values_0[i]@heap[anon( allLocs setMinus arrayRange(values_0, begin, -1 + end), anon_heap<<anonHeapFunction>>)]) FALSE"
   (rule "eqSymm" (formula "7"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "notRight" (formula "7"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "replace_known_left" (formula "12") (term "0,0,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
   (rule "allRight" (formula "12") (inst "sk=i_0"))
   (rule "orRight" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_leqRight" (formula "13"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "polySimp_elimOne" (formula "2") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "15")) (ifInst ""  (formula "13")))
   (rule "inEqSimp_homoInEq0" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "elementOfSetMinus" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "ifthenelse_negated" (formula "3") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
   (rule "hideAuxiliaryEq" (formula "3"))
   (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "15")) (ifInst ""  (formula "13")))
   (rule "inEqSimp_homoInEq1" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "elementOfSetMinus" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "ifthenelse_negated" (formula "3") (term "0"))
   (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_subsumption0" (formula "3") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
   (rule "hideAuxiliaryEq" (formula "3"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "allLeft" (formula "9") (inst "t=i_0"))
   (rule "inEqSimp_contradInEq0" (formula "9") (term "1,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0"))
   (rule "leq_literals" (formula "9") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_contradInEq0" (formula "9") (term "1") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
   (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1"))
   (rule "leq_literals" (formula "9") (term "0,1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "3"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_homoInEq1" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0"))
   (rule "add_zero_right" (formula "9") (term "0"))
   (rule "leq_literals" (formula "9"))
   (rule "closeFalse" (formula "9"))
)
)
}
