\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 06 11:57:25 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Wed Apr 06 11:57:25 CEST 2022
contract=de.wiesler.Functions[de.wiesler.Functions\\:\\:isSortedSliceTransitive([I,int,int)].JML accessible clause.0
name=de.wiesler.Functions[de.wiesler.Functions\\:\\:isSortedSliceTransitive([I,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "342")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "values_0,begin,end,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j") (userinteraction))
(rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "1,1") (inst "i=i") (inst "j=j") (userinteraction))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "One Step Simplification" (formula "7"))
(rule "true_left" (formula "4"))
(rule "translateJavaSubInt" (formula "6") (term "2,1,1,0,1,1,0,1,0,0,1"))
(rule "translateJavaSubInt" (formula "6") (term "2,1,1,0,0,1,0,1,0,0,1"))
(rule "eqSymm" (formula "6"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "3"))
(rule "polySimp_elimSub" (formula "6") (term "2,1,1,0,1,1,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "1,2,1,1,0,1,1,0,1,0,0,0"))
(rule "polySimp_elimSub" (formula "6") (term "2,1,1,0,0,1,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "1,2,1,1,0,0,1,0,1,0,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "2,1,1,0,1,1,0,1,0,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "2,1,1,0,0,1,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "eqSymm" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,0,0"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0,0"))
(rule "eqSymm" (formula "6"))
(rule "nnf_imp2or" (formula "6") (term "0,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0"))
(rule "eqSymm" (formula "6"))
(rule "nnf_imp2or" (formula "6") (term "0,1,0,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0,1,0,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,0,1"))
(rule "eqSymm" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,0,0"))
(rule "eqSymm" (formula "6"))
(rule "ifthenelse_split" (formula "6") (term "1"))
(branch "forall int i; ( i <= -1 + begin | i >= end | forall int j; ( j <= -1 + i | j >= end | values_0[j] >= values_0[i])) TRUE"
    (builtin "One Step Simplification" (formula "7"))
   (rule "allRight" (formula "7") (inst "sk=i_0"))
   (rule "orRight" (formula "7"))
   (rule "orRight" (formula "7"))
   (rule "allRight" (formula "9") (inst "sk=j_0"))
   (rule "orRight" (formula "9"))
   (rule "orRight" (formula "9"))
   (rule "inEqSimp_geqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_leqRight" (formula "11"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
   (rule "polySimp_mulComm0" (formula "5") (term "1"))
   (rule "polySimp_rightDist" (formula "5") (term "1"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
   (rule "mul_literals" (formula "5") (term "0,1"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1"))
   (rule "polySimp_elimOne" (formula "4") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "12")) (ifInst ""  (formula "10")))
   (rule "inEqSimp_homoInEq0" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "elementOfSetMinus" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
   (rule "ifthenelse_negated" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
   (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0"))
   (rule "polySimp_addComm0" (formula "5") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "polySimp_mulComm0" (formula "5") (term "1"))
   (rule "polySimp_rightDist" (formula "5") (term "1"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
   (rule "mul_literals" (formula "5") (term "0,1"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1"))
   (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "4"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "14")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "ifthenelse_negated" (formula "4") (term "0"))
   (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "8")))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
   (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
   (rule "hideAuxiliaryEq" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "commute_or" (formula "8") (term "0,0,1,0"))
   (rule "all_pull_out3" (formula "8") (term "0"))
   (rule "shift_paren_or" (formula "8") (term "0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0,0"))
   (rule "ifthenelse_split" (formula "3") (term "0"))
   (branch "j_0 >= begin TRUE"
      (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
      (rule "hideAuxiliaryEq" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "allLeft" (formula "8") (inst "t=i_0"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "leq_literals" (formula "8") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
      (rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "allLeft" (formula "8") (inst "t=j_0"))
      (rule "inEqSimp_contradInEq0" (formula "8") (term "1") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,1"))
      (rule "leq_literals" (formula "8") (term "0,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq0" (formula "8") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0"))
      (rule "leq_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "j_0 >= begin FALSE"
      (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "inEqSimp_geqRight" (formula "12"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "2"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0"))
      (rule "add_zero_right" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
)
(branch "forall int i; ( i <= -1 + begin | i >= end | forall int j; ( j <= -1 + i | j >= end | values_0[j] >= values_0[i])) FALSE"
    (builtin "One Step Simplification" (formula "7"))
   (rule "notRight" (formula "7"))
   (rule "allRight" (formula "7") (inst "sk=i_0"))
   (rule "orRight" (formula "7"))
   (rule "orRight" (formula "7"))
   (rule "allRight" (formula "9") (inst "sk=j_0"))
   (rule "orRight" (formula "9"))
   (rule "orRight" (formula "9"))
   (rule "inEqSimp_leqRight" (formula "7"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_geqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_leqRight" (formula "10"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1"))
   (rule "polySimp_elimOne" (formula "5") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "polySimp_elimOne" (formula "2") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "4"))
   (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0"))
   (rule "polySimp_addComm0" (formula "5") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "polySimp_mulComm0" (formula "5") (term "1"))
   (rule "polySimp_rightDist" (formula "5") (term "1"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
   (rule "mul_literals" (formula "5") (term "0,1"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "commute_or" (formula "7") (term "0,0,1,0"))
   (rule "all_pull_out3" (formula "7") (term "0"))
   (rule "shift_paren_or" (formula "7") (term "0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0"))
   (rule "allLeft" (formula "7") (inst "t=i_0"))
   (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_contradInEq0" (formula "7") (term "0,0,0,0") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0"))
   (rule "leq_literals" (formula "7") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "pullOutSelect" (formula "7") (term "1,1,0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "7"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "14")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "ifthenelse_negated" (formula "7") (term "0"))
   (rule "elementOfArrayRangeConcrete" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
   (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "applyEqReverse" (formula "8") (term "1,1,0") (ifseqformula "7"))
   (rule "hideAuxiliaryEq" (formula "7"))
   (rule "allLeft" (formula "7") (inst "t=i_0"))
   (rule "replaceKnownSelect_taclet1_0" (formula "7") (term "0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "7") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,1,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,1,0"))
   (rule "add_zero_right" (formula "7") (term "0,1,0"))
   (rule "qeq_literals" (formula "7") (term "1,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "1"))
   (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
   (rule "add_literals" (formula "7") (term "1,0,1"))
   (rule "times_zero_1" (formula "7") (term "0,1"))
   (rule "leq_literals" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "allLeft" (formula "7") (inst "t=j_0"))
   (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
   (rule "leq_literals" (formula "7") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_contradInEq0" (formula "7") (term "0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0"))
   (rule "leq_literals" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "7"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "15")) (ifInst ""  (formula "13")))
   (rule "inEqSimp_commuteGeq" (formula "8"))
   (rule "elementOfSetMinus" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "ifthenelse_negated" (formula "7") (term "0"))
   (rule "elementOfArrayRangeConcrete" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
   (rule "ifthenelse_split" (formula "7") (term "0"))
   (branch "j_0 >= begin TRUE"
      (rule "applyEqReverse" (formula "9") (term "1") (ifseqformula "8"))
      (rule "hideAuxiliaryEq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
      (rule "andLeft" (formula "8"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "1,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0"))
      (rule "add_zero_right" (formula "8") (term "0"))
      (rule "leq_literals" (formula "8"))
      (rule "closeFalse" (formula "8"))
   )
   (branch "j_0 >= begin FALSE"
      (rule "applyEqReverse" (formula "8") (term "1") (ifseqformula "7"))
      (rule "hideAuxiliaryEq" (formula "7"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "8"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
)
)
}
