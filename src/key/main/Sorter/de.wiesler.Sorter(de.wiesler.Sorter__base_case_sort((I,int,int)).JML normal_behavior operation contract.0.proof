\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 14 14:12:07 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Thu Apr 14 14:12:07 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:base_case_sort([I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:base_case_sort([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "99")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "8") (term "1,2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "elementOfArrayRange" (formula "8") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_base_case_sort,savedHeapBefore_base_case_sort"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_fallback_sort,exc_77,heapAfter_fallback_sort,anon_heap_fallback_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::fallback_sort([I,int,int)].JML normal_behavior operation contract.0"))
(branch "Post (fallback_sort)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "polySimp_elimSub" (formula "8") (term "2,1,0"))
   (rule "mul_literals" (formula "8") (term "1,2,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "2,1,0"))
   (rule "narrowSelectArrayType" (formula "10") (term "2,1") (ifseqformula "1") (ifseqformula "13"))
   (rule "methodCallEmpty" (formula "14") (term "1"))
   (rule "tryEmpty" (formula "14") (term "1"))
   (rule "emptyModality" (formula "14") (term "1"))
   (rule "andRight" (formula "14"))
   (branch
      (rule "andRight" (formula "14"))
      (branch
         (rule "andRight" (formula "14"))
         (branch
             (builtin "One Step Simplification" (formula "14"))
            (rule "narrowSelectArrayType" (formula "14") (term "2,1") (ifseqformula "1") (ifseqformula "13"))
            (rule "close" (formula "14") (ifseqformula "10"))
         )
         (branch
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch
       (builtin "One Step Simplification" (formula "14"))
      (rule "allRight" (formula "14") (inst "sk=f_0"))
      (rule "allRight" (formula "14") (inst "sk=o_0"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "eqSymm" (formula "16"))
      (rule "eqSymm" (formula "14") (term "0,0,0,1"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "eqSymm" (formula "17"))
      (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
      (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (fallback_sort)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (fallback_sort)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "2")))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
