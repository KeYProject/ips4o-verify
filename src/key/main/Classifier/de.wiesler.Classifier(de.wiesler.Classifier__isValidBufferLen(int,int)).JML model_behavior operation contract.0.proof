\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 19:05:18 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Mon Apr 11 19:05:18 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isValidBufferLen(int,int)].JML model_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isValidBufferLen(int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "1626")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "Definition_axiom_for_bufferSizeForBucketLen_in_de_wiesler_Buffers" (formula "5") (term "0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "translateJavaMod" (formula "5") (term "2,0"))
(rule "translateJavaMod" (formula "5") (term "0,1,0,0"))
(rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
(rule "jmod_axiom" (formula "5") (term "2,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,2,0"))
(rule "jmod_axiom" (formula "5") (term "0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0"))
(rule "polySimp_sepNegMonomial" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,0,0,0"))
(rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "1") (term "0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
(rule "polySimp_elimOne" (formula "3") (term "0,0"))
(rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "translateJavaMod" (formula "2") (term "0"))
(rule "jmod_axiom" (formula "2") (term "0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "newSym_eq" (formula "2") (inst "l=l_0") (inst "newSymDef=mul(writtenElements, Z(0(#)))"))
(rule "times_zero_1" (formula "2") (term "1,1"))
(rule "add_zero_right" (formula "2") (term "1"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
(rule "eqSymm" (formula "3"))
(rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
(rule "applyEq" (formula "8") (term "1,0,0,0,1,0,0") (ifseqformula "3"))
(rule "polySimp_homoEq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,0,1,0,0"))
(rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "3"))
(rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
(rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
(rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
(rule "applyEq" (formula "8") (term "1,0,0,1,2,0") (ifseqformula "3"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,2,0"))
(rule "polySimp_addComm1" (formula "8") (term "2,0"))
(rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "3"))
(rule "polySimp_addComm1" (formula "8") (term "2,0"))
(rule "polySimp_addComm0" (formula "8") (term "0,2,0"))
(rule "applyEq" (formula "8") (term "1,0,1,0,0") (ifseqformula "3"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,0"))
(rule "polySimp_sepNegMonomial" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,0,0"))
(rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
(rule "leq_literals" (formula "1") (term "0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
(rule "add_literals" (formula "1") (term "1,1,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "leq_literals" (formula "1") (term "0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "elimGcdGeq" (formula "4") (term "0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0,0,0"))
(rule "sub_literals" (formula "4") (term "0,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "4") (term "0,0,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "4") (term "0,1,0,0"))
(rule "add_literals" (formula "4") (term "1,1,0,1,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,1,0,0"))
(rule "leq_literals" (formula "4") (term "1,0,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0"))
(rule "add_literals" (formula "4") (term "1,0,0,0"))
(rule "times_zero_1" (formula "4") (term "0,0,0"))
(rule "qeq_literals" (formula "4") (term "0,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "jdiv_axiom" (formula "2") (term "0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
(rule "eqSymm" (formula "2"))
(rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
(rule "inEqSimp_subsumption6" (formula "2") (term "0,0") (ifseqformula "1"))
(rule "times_zero_1" (formula "2") (term "1,1,0,0,0"))
(rule "greater_literals" (formula "2") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "leq_literals" (formula "2") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=l_0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0"))
(rule "equal_literals" (formula "2") (term "0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "2"))
(rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "0,0,0,1,0"))
(rule "div_literals" (formula "2") (term "0,0,1,0"))
(rule "add_zero_left" (formula "2") (term "0,1,0"))
(rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
(rule "add_literals" (formula "2") (term "1,0"))
(rule "times_zero_1" (formula "2") (term "0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "jdiv_axiom" (formula "8") (term "0,1,2,0"))
(rule "eqSymm" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
(rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,0,0,2,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0,2,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,2,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
(rule "polyDiv_pullOut" (formula "1") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,2,0"))
(rule "equal_literals" (formula "1") (term "0,0,2,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,2,0"))
(rule "polySimp_mulComm0" (formula "1") (term "2,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,2,0"))
(rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,2,0"))
(rule "add_literals" (formula "1") (term "1,0,0,0,1,2,0"))
(rule "times_zero_1" (formula "1") (term "0,0,0,1,2,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,2,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,2,0"))
(rule "polySimp_rightDist" (formula "1") (term "2,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,2,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,2,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,2,0"))
(rule "polyDiv_pullOut" (formula "1") (term "1,0") (inst "polyDivCoeff=l_0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1,0"))
(rule "equal_literals" (formula "1") (term "0,1,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_addComm0" (formula "1") (term "1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
(rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,1,0"))
(rule "add_literals" (formula "1") (term "1,0,0,1,1,0"))
(rule "times_zero_1" (formula "1") (term "0,0,1,1,0"))
(rule "add_zero_left" (formula "1") (term "0,1,1,0"))
(rule "ifthenelse_split" (formula "9") (term "0"))
(branch " len >= 256 + l_0 * -256 & jdiv(l_0 * 256 + len, 256) * 256 = l_0 * 256 + len TRUE"
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "11"))
   (rule "inEqSimp_strengthen0" (formula "10") (ifseqformula "11"))
   (rule "add_literals" (formula "10") (term "1"))
   (rule "inEqSimp_contradEq3" (formula "11") (ifseqformula "10"))
   (rule "mul_literals" (formula "11") (term "1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "false_right" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
   (rule "polySimp_mulComm0" (formula "2") (term "0"))
   (rule "polySimp_rightDist" (formula "2") (term "0"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "2") (term "0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "newSym_eq" (formula "2") (inst "l=l_1") (inst "newSymDef=mul(len, Z(0(#)))"))
   (rule "times_zero_1" (formula "2") (term "1,1"))
   (rule "add_zero_right" (formula "2") (term "1"))
   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
   (rule "eqSymm" (formula "3"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
   (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
   (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "3"))
   (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "3"))
   (rule "polySimp_homoEq" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "polySimp_addComm0" (formula "4") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "3"))
   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "3"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "2"))
   (rule "polySimp_addComm0" (formula "4") (term "0,0"))
   (rule "polySimp_sepNegMonomial" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "elimGcdEq" (formula "8") (term "0,1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,1"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,1"))
   (rule "add_literals" (formula "8") (term "1,0,0,0,1"))
   (rule "add_zero_left" (formula "8") (term "0,1,0,0,1"))
   (rule "times_zero_1" (formula "8") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "8") (term "0,0,1,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "leq_literals" (formula "8") (term "0,0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "times_zero_1" (formula "8") (term "0,0,0,1"))
   (rule "qeq_literals" (formula "8") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(l_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
   (rule "leq_literals" (formula "10") (term "0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
   (rule "neg_literal" (formula "11") (term "0,0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "11") (term "0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=l_1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0"))
   (rule "equal_literals" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "times_zero_1" (formula "2") (term "0,0,0,1,0"))
   (rule "div_literals" (formula "2") (term "0,0,1,0"))
   (rule "add_zero_left" (formula "2") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,0"))
   (rule "times_zero_1" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "10"))
   (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
   (rule "qeq_literals" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "9"))
   (rule "times_zero_2" (formula "2") (term "1,1"))
   (rule "add_zero_right" (formula "2") (term "1"))
   (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
   (rule "leq_literals" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "9"))
   (rule "times_zero_2" (formula "4") (term "0,0,0"))
   (rule "add_zero_left" (formula "4") (term "0,0"))
   (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "9"))
   (rule "times_zero_2" (formula "3") (term "1"))
   (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
   (rule "polySimp_homoEq" (formula "4"))
   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "1,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch " len >= 256 + l_0 * -256 & jdiv(l_0 * 256 + len, 256) * 256 = l_0 * 256 + len FALSE"
   (rule "polySimp_homoEq" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
   (rule "polySimp_mulAssoc" (formula "10") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "polySimp_sepPosMonomial" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1"))
   (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=jdiv(add(mul(l_0, Z(6(5(2(#))))), len), Z(6(5(2(#)))))") (inst "elimGcd=Z(6(5(2(#))))"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
   (rule "add_literals" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
   (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0"))
   (rule "add_literals" (formula "10") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "0,1,0"))
   (rule "qeq_literals" (formula "10") (term "1,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,1"))
   (rule "add_literals" (formula "10") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,0,0"))
   (rule "times_zero_1" (formula "10") (term "0,0"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "div_axiom" (formula "1") (term "0,1,2,0") (inst "quotient=quotient_0"))
   (rule "equal_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,1,1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0"))
   (rule "applyEq" (formula "4") (term "0,1,2,0") (ifseqformula "1"))
   (rule "polySimp_addComm0" (formula "4") (term "2,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
   (rule "times_zero_1" (formula "10") (term "0,0"))
   (rule "add_zero_left" (formula "10") (term "0"))
   (rule "inEqSimp_invertInEq1" (formula "10"))
   (rule "times_zero_2" (formula "10") (term "1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "10") (term "0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "qeq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "12"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1"))
   (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0"))
   (rule "leq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "div_axiom" (formula "5") (term "1,1,0") (inst "quotient=quotient_1"))
   (rule "mul_literals" (formula "5") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "5") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "equal_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "polySimp_addComm1" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_homoInEq1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "5"))
   (rule "polySimp_addComm0" (formula "8") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1"))
   (rule "polySimp_rightDist" (formula "7") (term "1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
   (rule "mul_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "7"))
   (rule "times_zero_1" (formula "15") (term "0,0"))
   (rule "add_zero_left" (formula "15") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1"))
   (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "15") (term "0,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
   (rule "add_literals" (formula "15") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0"))
   (rule "leq_literals" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "7"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
   (rule "polySimp_mulAssoc" (formula "7") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
   (rule "neg_literal" (formula "7") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "polySimp_mulAssoc" (formula "7") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "19"))
   (rule "polySimp_mulAssoc" (formula "8") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
   (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "qeq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "17"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "polySimp_rightDist" (formula "4") (term "0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
   (rule "mul_literals" (formula "4") (term "0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "mul_literals" (formula "4") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "19"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
   (rule "mul_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "cut_direct" (formula "15") (term "0"))
   (branch "CUT: l_0 >= 1 TRUE"
       (builtin "One Step Simplification" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "21"))
      (rule "add_zero_right" (formula "19") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "19"))
      (rule "times_zero_1" (formula "21") (term "1,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0"))
      (rule "leq_literals" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "false_right" (formula "21"))
      (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "15"))
      (rule "leq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "2"))
      (rule "mul_literals" (formula "18") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "elimGcdLeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0,1,0"))
      (rule "neg_literal" (formula "18") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "18") (term "0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0"))
      (rule "qeq_literals" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "18"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "10"))
      (rule "mul_literals" (formula "18") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0"))
      (rule "add_literals" (formula "18") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18"))
      (rule "mul_literals" (formula "18") (term "1"))
      (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "16"))
      (rule "times_zero_1" (formula "18") (term "1,1,0"))
      (rule "greater_literals" (formula "18") (term "0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "leq_literals" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "17"))
      (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,0"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0"))
      (rule "add_literals" (formula "5") (term "0,0"))
      (rule "add_zero_left" (formula "5") (term "0"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "3"))
      (rule "mul_literals" (formula "5") (term "1,1"))
      (rule "add_literals" (formula "5") (term "1"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
      (rule "leq_literals" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "applyEq" (formula "9") (term "0,0,2,0") (ifseqformula "2"))
      (rule "mul_literals" (formula "9") (term "0,2,0"))
      (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "inEqSimp_invertInEq0" (formula "3"))
      (rule "times_zero_2" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "cut_direct" (formula "15") (term "0"))
      (branch "CUT: len >= 256 + l_0 * -256 TRUE"
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_subsumption1" (formula "8") (term "0,0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "eqSymm" (formula "8"))
         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "8"))
         (rule "polySimp_mulComm0" (formula "16") (term "0"))
         (rule "polySimp_rightDist" (formula "16") (term "0"))
         (rule "polySimp_homoEq" (formula "16"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
         (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
         (rule "polySimp_homoEq" (formula "17"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "times_zero_1" (formula "17") (term "1,0"))
         (rule "add_zero_right" (formula "17") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "16"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1"))
         (rule "polySimp_invertEq" (formula "17"))
         (rule "times_zero_2" (formula "17") (term "1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "polySimp_elimOne" (formula "17") (term "0"))
         (rule "inEqSimp_strengthen1" (formula "13") (ifseqformula "17"))
         (rule "add_zero_right" (formula "13") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "13"))
         (rule "times_zero_1" (formula "17") (term "1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "16"))
         (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "6"))
         (rule "polySimp_mulAssoc" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "5"))
         (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "13"))
         (rule "mul_literals" (formula "7") (term "1,1"))
         (rule "add_literals" (formula "7") (term "1"))
         (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "13"))
         (rule "leq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
         (rule "qeq_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "12"))
         (rule "mul_literals" (formula "5") (term "1,1"))
         (rule "add_literals" (formula "5") (term "1"))
         (rule "applyEq" (formula "4") (term "1") (ifseqformula "12"))
         (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "12"))
         (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "5"))
         (rule "leq_literals" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "5"))
         (rule "qeq_literals" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "closeFalse" (formula "13"))
      )
      (branch "CUT: len >= 256 + l_0 * -256 FALSE"
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "inEqSimp_geqRight" (formula "15"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "add_zero_left" (formula "6") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
         (rule "add_zero_left" (formula "6") (term "1,1,0,0,0,0,1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "6") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "qeq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
         (rule "mul_literals" (formula "15") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0"))
         (rule "add_literals" (formula "15") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "15"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
         (rule "inEqSimp_contradInEq5" (formula "15") (ifseqformula "12"))
         (rule "mul_literals" (formula "15") (term "1,1,0"))
         (rule "greater_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "qeq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "closeFalse" (formula "15"))
      )
   )
   (branch "CUT: l_0 >= 1 FALSE"
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "20"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "13"))
      (rule "add_zero_right" (formula "12") (term "1,0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
      (rule "qeq_literals" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "applyEqRigid" (formula "12") (term "1,2,0") (ifseqformula "13"))
      (rule "add_zero_right" (formula "12") (term "2,0"))
      (rule "applyEqRigid" (formula "21") (term "0,1,1,0") (ifseqformula "13"))
      (rule "times_zero_2" (formula "21") (term "1,1,0"))
      (rule "add_zero_right" (formula "21") (term "1,0"))
      (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "13"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEqRigid" (formula "13") (term "0,0,0") (ifseqformula "12"))
      (rule "times_zero_2" (formula "13") (term "0,0"))
      (rule "jdiv_axiom_inline" (formula "13") (term "0"))
      (rule "qeq_literals" (formula "13") (term "0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "div_literals" (formula "13") (term "0"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "12"))
      (rule "times_zero_2" (formula "11") (term "1,0,0"))
      (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "11"))
      (rule "polySimp_homoEq" (formula "19") (term "1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "19") (term "0,1"))
      (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "11"))
      (rule "eqSymm" (formula "20"))
      (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "12"))
      (rule "times_zero_2" (formula "13") (term "1"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "12"))
      (rule "eqSymm" (formula "20"))
      (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "12"))
      (rule "times_zero_2" (formula "11") (term "0,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0"))
      (rule "applyEqRigid" (formula "19") (term "0,1,0,0,1") (ifseqformula "12"))
      (rule "times_zero_2" (formula "19") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "19") (term "0,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "19") (term "1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
      (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "20"))
      (rule "add_zero_right" (formula "16") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "16"))
      (rule "times_zero_1" (formula "20") (term "1,0,0"))
      (rule "add_zero_right" (formula "20") (term "0,0"))
      (rule "leq_literals" (formula "20") (term "0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "false_right" (formula "20"))
      (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "8"))
      (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "16"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "add_literals" (formula "4") (term "1"))
      (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
      (rule "qeq_literals" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "16"))
      (rule "leq_literals" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "15"))
      (rule "mul_literals" (formula "8") (term "1"))
      (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "15"))
      (rule "mul_literals" (formula "9") (term "1,1"))
      (rule "add_literals" (formula "9") (term "1"))
      (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "15"))
      (rule "mul_literals" (formula "7") (term "1"))
      (rule "applyEqRigid" (formula "18") (term "0,1") (ifseqformula "15"))
      (rule "mul_literals" (formula "18") (term "1"))
      (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "15"))
      (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "15"))
      (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "18"))
      (rule "add_literals" (formula "8") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "8"))
      (rule "mul_literals" (formula "18") (term "1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0"))
      (rule "leq_literals" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "false_right" (formula "18"))
      (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "7"))
      (rule "leq_literals" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "8"))
      (rule "qeq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "closeFalse" (formula "16"))
   )
)
)
}
