\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 29 16:45:56 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Fri Sep 29 16:45:56 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:len(int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:len(int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "weigl" ) (keyVersion "e1a85b31e7"))

(autoModeTime "1755")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "andLeft" (formula "5"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_len,savedHeapBefore_len"))
 (builtin "One Step Simplification" (formula "10"))
(rule "returnUnfold" (formula "10") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
(rule "eval_order_array_access4" (formula "10") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this_final" (formula "10"))
 (builtin "One Step Simplification" (formula "10"))
(rule "assignment_array2" (formula "10"))
(branch "Normal Execution (x_arr != null)"
    (builtin "One Step Simplification" (formula "10"))
   (rule "methodCallReturn" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "tryEmpty" (formula "10") (term "1"))
   (rule "emptyModality" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
   (rule "eqSymm" (formula "10"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "7") (inst "b=b"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,1,0,0,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "eqSymm" (formula "14"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "10"))
   (rule "polySimp_rightDist" (formula "6") (term "0,0"))
   (rule "mul_literals" (formula "6") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0"))
   (rule "add_literals" (formula "6") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "closeTrue" (formula "18"))
)
(branch "Null Reference (x_arr = null)"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "false_right" (formula "11"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8") (inst "b=b"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "8"))
)
(branch "Index Out of Bounds (x_arr != null, but _bucket Out of Bounds!)"
   (rule "false_right" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8") (inst "b=b"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
   (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "eqSymm" (formula "13"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "10"))
   (rule "polySimp_rightDist" (formula "6") (term "0,0"))
   (rule "mul_literals" (formula "6") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0"))
   (rule "add_literals" (formula "6") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "6"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
