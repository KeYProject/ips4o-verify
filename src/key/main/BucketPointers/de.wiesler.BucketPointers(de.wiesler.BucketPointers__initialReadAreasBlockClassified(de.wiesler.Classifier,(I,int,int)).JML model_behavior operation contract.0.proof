\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 19:23:53 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Mon Apr 11 19:23:53 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasBlockClassified(de.wiesler.Classifier,[I,int,int)].JML model_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasBlockClassified(de.wiesler.Classifier,[I,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "199646")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "16"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "16"))
(rule "notLeft" (formula "17"))
(rule "notLeft" (formula "16"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")))
(rule "true_left" (formula "6") (userinteraction))
(rule "allRight" (formula "17") (inst "sk=b_0") (userinteraction))
(rule "impRight" (formula "17") (userinteraction))
(rule "andLeft" (formula "1") (userinteraction))
(rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "14") (term "0") (inst "block=block") (userinteraction))
 (builtin "One Step Simplification" (formula "14") (userinteraction))
(rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "19") (term "0") (userinteraction))
 (builtin "One Step Simplification" (formula "19") (userinteraction))
(rule "impRight" (formula "19") (userinteraction))
(rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "20") (term "0") (inst "block=block") (userinteraction))
 (builtin "One Step Simplification" (formula "20") (userinteraction))
(rule "allRight" (formula "20") (inst "sk=block_0") (userinteraction))
(rule "pullOut" (formula "1") (term "0") (inst "sk=de_wiesler_BucketPointersnextWriteOf_0") (userinteraction))
(rule "allLeftHide" (formula "16") (inst "t=add(block_0,
    div(de_wiesler_BucketPointersnextWriteOf_0,
        Z(6(5(2(#))))))") (userinteraction))
(rule "impLeft" (formula "16") (userinteraction))
(branch "Case 1"
   (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "1") (term "0") (userinteraction))
   (rule "impLeft" (formula "1") (userinteraction))
   (branch "Case 1"
      (rule "translateJavaDivInt" (formula "22") (term "1,1,0"))
      (rule "translateJavaDivInt" (formula "18") (term "1,1"))
      (rule "translateJavaSubInt" (formula "14") (term "0"))
      (rule "translateJavaCastInt" (formula "14") (term "1"))
      (rule "translateJavaAddInt" (formula "22") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "22") (term "4,0,1"))
      (rule "translateJavaAddInt" (formula "22") (term "0,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "22") (term "1,0,1,1,0"))
      (rule "translateJavaSubInt" (formula "18") (term "0,1,1"))
      (rule "translateJavaMulInt" (formula "22") (term "1,3,0,1"))
      (rule "translateJavaAddInt" (formula "22") (term "0,3,0,1"))
      (rule "translateJavaAddInt" (formula "22") (term "0,1,4,0,1"))
      (rule "translateJavaAddInt" (formula "22") (term "0,4,0,1"))
      (rule "translateJavaSubInt" (formula "22") (term "0,1,1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "0,0,1,1"))
      (rule "translateJavaMulInt" (formula "22") (term "1,4,0,1"))
      (rule "impRight" (formula "22"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "16"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "18")) (ifInst ""  (formula "8")) (ifInst ""  (formula "23")))
      (rule "closeTrue" (formula "19"))
   )
   (branch "Case 2"
      (rule "impRight" (formula "22"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "9") (term "1") (userinteraction))
      (rule "impLeft" (formula "9") (userinteraction))
      (branch "Case 1"
         (rule "translateJavaDivInt" (formula "25") (term "1,1"))
         (rule "translateJavaSubInt" (formula "21") (term "0"))
         (rule "translateJavaCastInt" (formula "21") (term "1"))
         (rule "translateJavaDivInt" (formula "2") (term "1"))
         (rule "translateJavaAddInt" (formula "29") (term "3,0"))
         (rule "translateJavaAddInt" (formula "6") (term "1,0"))
         (rule "translateJavaAddInt" (formula "5") (term "1,1"))
         (rule "translateJavaAddInt" (formula "29") (term "4,0"))
         (rule "translateJavaSubInt" (formula "25") (term "0,1,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1"))
         (rule "translateJavaAddInt" (formula "29") (term "0,3,0"))
         (rule "translateJavaMulInt" (formula "29") (term "1,3,0"))
         (rule "translateJavaAddInt" (formula "29") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "29") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "25") (term "0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0,1"))
         (rule "translateJavaAddInt" (formula "29") (term "0,1,4,0"))
         (rule "eqSymm" (formula "21"))
         (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_left" (formula "24") (term "0,0,0,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "11")) (ifInst ""  (formula "23")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "28")))
         (rule "closeTrue" (formula "24"))
      )
      (branch "Case 2"
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "13"))
         (rule "orLeft" (formula "11") (userinteraction))
         (branch "self.lastReadOf(b_0) <= self.first_empty_position"
            (rule "andRight" (formula "29") (userinteraction))
            (branch "Case 1"
               (rule "translateJavaSubInt" (formula "26") (term "0"))
               (rule "translateJavaCastInt" (formula "26") (term "1"))
               (rule "translateJavaAddInt" (formula "33") (term "3,0"))
               (rule "translateJavaDivInt" (formula "2") (term "1"))
               (rule "translateJavaAddInt" (formula "5") (term "1,1"))
               (rule "translateJavaAddInt" (formula "6") (term "1,0"))
               (rule "translateJavaAddInt" (formula "33") (term "4,0"))
               (rule "translateJavaAddInt" (formula "10") (term "1,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,3,0"))
               (rule "translateJavaMulInt" (formula "33") (term "1,3,0"))
               (rule "translateJavaSubInt" (formula "2") (term "0,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,4,0"))
               (rule "translateJavaMulInt" (formula "33") (term "1,4,0"))
               (rule "translateJavaAddInt" (formula "2") (term "1,0,1"))
               (rule "translateJavaAddInt" (formula "2") (term "0,0,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,1,4,0"))
               (rule "eqSymm" (formula "26"))
               (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1"))
               (rule "polySimp_elimSub" (formula "26") (term "1"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,4,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1"))
               (rule "polySimp_addComm1" (formula "33") (term "3,0"))
               (rule "polySimp_addComm0" (formula "26") (term "1"))
               (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "33") (term "1,4,0"))
               (rule "mul_literals" (formula "33") (term "0,1,4,0"))
               (rule "polySimp_addComm1" (formula "33") (term "4,0"))
               (rule "inEqSimp_leqRight" (formula "29"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "castedGetAny" (formula "27") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0,1"))
               (rule "add_literals" (formula "3") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "3") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "3") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "33") (term "0,4,0"))
               (rule "polySimp_addComm0" (formula "33") (term "0,0,4,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "applyEq" (formula "3") (term "0,1,0,0,1,0") (ifseqformula "9"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,1,0"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteGeq" (formula "5"))
               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "9"))
               (rule "applyEq" (formula "33") (term "1,4,0") (ifseqformula "9"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "applyEq" (formula "33") (term "1,3,0") (ifseqformula "9"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "11"))
               (rule "polySimp_rightDist" (formula "15") (term "0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1"))
               (rule "polySimp_rightDist" (formula "15") (term "1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
               (rule "mul_literals" (formula "15") (term "0,1"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "15"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1"))
               (rule "polySimp_elimOne" (formula "9") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
               (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0"))
               (rule "translateJavaAddInt" (formula "9") (term "0,2,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,2,0"))
               (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "15") (term "0,0"))
               (rule "translateJavaAddInt" (formula "15") (term "1,0,1,0,1"))
               (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,0,1"))
               (rule "replace_known_right" (formula "15") (term "0,1,0") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "32")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "16")) (ifInst ""  (formula "32")))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,0,1"))
               (rule "replace_known_left" (formula "15") (term "1,0,0,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,1") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1"))
               (rule "replace_known_left" (formula "15") (term "1,0,1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1"))
               (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
               (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
               (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "15") (term "0,0"))
               (rule "translateJavaMulInt" (formula "15") (term "0,2,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,2,0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "31") (inst "b=b"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "translateJavaCastInt" (formula "31") (term "1,1,0,0,1,0,0,0"))
               (rule "translateJavaCastInt" (formula "31") (term "0,0,1,0"))
               (rule "translateJavaMulInt" (formula "31") (term "1,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "31") (term "0,1,0,1,0,0,0"))
               (rule "translateJavaAddInt" (formula "31") (term "1,1,0,0"))
               (rule "translateJavaMulInt" (formula "31") (term "0,1,1,0,0,0,0"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "32"))
               (rule "notLeft" (formula "31"))
               (rule "andLeft" (formula "33"))
               (rule "polySimp_mulComm0" (formula "31") (term "1"))
               (rule "polySimp_mulComm0" (formula "32") (term "0"))
               (rule "polySimp_addComm0" (formula "37") (term "1"))
               (rule "castedGetAny" (formula "38") (term "0"))
               (rule "castedGetAny" (formula "35") (term "0"))
               (rule "castedGetAny" (formula "34") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "33"))
               (rule "inEqSimp_commuteLeq" (formula "31"))
               (rule "inEqSimp_commuteLeq" (formula "34"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "29"))
               (rule "inEqSimp_commuteGeq" (formula "34"))
               (rule "applyEq" (formula "35") (term "0") (ifseqformula "29"))
               (rule "inEqSimp_homoInEq0" (formula "35"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "35") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "35") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "35"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0"))
               (rule "polySimp_elimOne" (formula "35") (term "0"))
               (rule "elimGcdGeq_antec" (formula "31") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
               (rule "leq_literals" (formula "31") (term "0,0"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
               (rule "add_literals" (formula "31") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0"))
               (rule "leq_literals" (formula "31") (term "0"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "inEqSimp_exactShadow2" (formula "31") (ifseqformula "32"))
               (rule "greater_literals" (formula "31") (term "0"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "times_zero_1" (formula "31") (term "1,0,0"))
               (rule "times_zero_1" (formula "31") (term "0,0"))
               (rule "add_zero_left" (formula "31") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
               (rule "times_zero_1" (formula "34") (term "0,0"))
               (rule "add_zero_left" (formula "34") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "34"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1"))
               (rule "polySimp_elimOne" (formula "34") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "35"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "polySimp_elimOne" (formula "13") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "20") (ifseqformula "34"))
               (rule "greater_literals" (formula "20") (term "0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1"))
               (rule "polySimp_rightDist" (formula "20") (term "1"))
               (rule "mul_literals" (formula "20") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "13"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "14"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0"))
               (rule "mul_literals" (formula "19") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "polySimp_rightDist" (formula "19") (term "1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1"))
               (rule "polySimp_rightDist" (formula "19") (term "0,1"))
               (rule "mul_literals" (formula "19") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,0,1"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "11"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1"))
               (rule "polySimp_elimOne" (formula "5") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "40"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "nnf_imp2or" (formula "46") (term "0"))
               (rule "Definition_axiom_for_isAtInitialState_in_de_wiesler_BucketPointers" (formula "35") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
               (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "13") (term "0"))
               (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "13") (term "1,0,1,0,1"))
               (rule "replace_known_left" (formula "13") (term "1,0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")) (ifInst ""  (formula "51")))
               (rule "polySimp_addComm0" (formula "13") (term "1,0,1,0,1"))
               (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,0,1"))
               (rule "replace_known_left" (formula "13") (term "1,0,0,1") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1"))
               (rule "replace_known_left" (formula "13") (term "1,0,1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1"))
               (rule "replace_known_left" (formula "13") (term "1,0,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1"))
               (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
               (rule "replace_known_left" (formula "13") (term "0,0,1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1"))
               (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
               (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
               (rule "translateJavaMulInt" (formula "14") (term "0,2,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,2,0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,1"))
               (rule "castedGetAny" (formula "14") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "1"))
               (rule "translateJavaCastInt" (formula "12") (term "0,1"))
               (rule "castedGetAny" (formula "12") (term "0,1"))
               (rule "inEqSimp_commuteGeq" (formula "12"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
               (rule "translateJavaCastInt" (formula "5") (term "0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "12"))
               (rule "times_zero_1" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
               (rule "times_zero_1" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1"))
               (rule "polySimp_elimOne" (formula "5") (term "1"))
               (rule "nnf_notAnd" (formula "48") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
               (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
               (rule "mul_literals" (formula "48") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "53")))
               (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "18") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "18") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "18") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "18") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "18") (term "0,0,0"))
               (rule "add_literals" (formula "18") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "18") (term "0,0,0"))
               (rule "qeq_literals" (formula "18") (term "0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "18") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "18") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "18") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1"))
               (rule "nnf_imp2or" (formula "38") (term "0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0"))
               (rule "translateJavaCastInt" (formula "19") (term "0,0"))
               (rule "castedGetAny" (formula "19") (term "0,0"))
               (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "37"))
               (rule "inEqSimp_commuteGeq" (formula "19"))
               (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "19"))
               (rule "times_zero_1" (formula "42") (term "0,0"))
               (rule "add_zero_left" (formula "42") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "19"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "17"))
               (rule "times_zero_1" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "17"))
               (rule "polySimp_rightDist" (formula "25") (term "0,0"))
               (rule "mul_literals" (formula "25") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1"))
               (rule "polySimp_rightDist" (formula "25") (term "1"))
               (rule "mul_literals" (formula "25") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1"))
               (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "18") (term "1"))
               (rule "translateJavaMulInt" (formula "18") (term "0,2,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "0,2,1"))
               (rule "inEqSimp_commuteGeq" (formula "18"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "1"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "57")))
               (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "8") (term "1,0,1,1,1,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1"))
               (rule "replace_known_left" (formula "8") (term "1,0,0,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,1,1,1"))
               (rule "replace_known_left" (formula "8") (term "1,1,1,1,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
               (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
               (rule "times_zero_2" (formula "8") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "8") (term "0,0") (ifseqformula "28"))
               (rule "leq_literals" (formula "8") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
               (rule "translateJavaCastInt" (formula "9") (term "0,0"))
               (rule "castedGetAny" (formula "9") (term "0,0"))
               (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "40"))
               (rule "inEqSimp_commuteGeq" (formula "9"))
               (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "9"))
               (rule "polySimp_rightDist" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23"))
               (rule "polySimp_mulComm0" (formula "23") (term "1"))
               (rule "polySimp_rightDist" (formula "23") (term "1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
               (rule "mul_literals" (formula "23") (term "0,1"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "9"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,0"))
               (rule "castedGetAny" (formula "7") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMod" (formula "10") (term "0"))
               (rule "jmod_axiom" (formula "10") (term "0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(de_wiesler_BucketPointersnextWriteOf_0, Z(0(#)))"))
               (rule "times_zero_1" (formula "10") (term "1,1"))
               (rule "add_zero_right" (formula "10") (term "1"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEqRigid" (formula "28") (term "1,1") (ifseqformula "11"))
               (rule "applyEq" (formula "60") (term "1,4,0") (ifseqformula "11"))
               (rule "polySimp_addComm1" (formula "60") (term "4,0"))
               (rule "polySimp_addComm1" (formula "60") (term "0,4,0"))
               (rule "applyEqRigid" (formula "25") (term "1,1") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "27") (term "1,1") (ifseqformula "11"))
               (rule "polySimp_addComm1" (formula "27") (term "1"))
               (rule "applyEqRigid" (formula "60") (term "1,3,0") (ifseqformula "11"))
               (rule "polySimp_addComm1" (formula "60") (term "3,0"))
               (rule "polySimp_addComm0" (formula "60") (term "0,3,0"))
               (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "11"))
               (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "11"))
               (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "11"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
               (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "elimGcdLeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(6(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "26") (term "0,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,0"))
               (rule "neg_literal" (formula "26") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "26") (term "0,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
               (rule "add_literals" (formula "26") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0"))
               (rule "qeq_literals" (formula "26") (term "0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "0,0,0"))
               (rule "div_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "50"))
               (rule "polySimp_rightDist" (formula "27") (term "0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0"))
               (rule "polySimp_addComm1" (formula "27") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
               (rule "add_literals" (formula "27") (term "1,1,0"))
               (rule "times_zero_1" (formula "27") (term "1,0"))
               (rule "add_zero_right" (formula "27") (term "0"))
               (rule "polySimp_addComm1" (formula "27") (term "0"))
               (rule "add_literals" (formula "27") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "27"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0"))
               (rule "inEqSimp_subsumption4" (formula "27") (ifseqformula "26"))
               (rule "greater_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "mul_literals" (formula "27") (term "0,0"))
               (rule "leq_literals" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "9"))
               (rule "polySimp_rightDist" (formula "25") (term "0,0"))
               (rule "mul_literals" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1"))
               (rule "polySimp_rightDist" (formula "25") (term "1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
               (rule "mul_literals" (formula "25") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "4"))
               (rule "greater_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "times_zero_1" (formula "6") (term "1,0"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "19"))
               (rule "polySimp_rightDist" (formula "29") (term "0,0"))
               (rule "mul_literals" (formula "29") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29"))
               (rule "polySimp_mulComm0" (formula "29") (term "1"))
               (rule "polySimp_rightDist" (formula "29") (term "1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1"))
               (rule "polySimp_rightDist" (formula "29") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
               (rule "mul_literals" (formula "29") (term "0,0,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "times_zero_1" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "Case 2"
               (rule "translateJavaSubInt" (formula "26") (term "0"))
               (rule "translateJavaCastInt" (formula "26") (term "1"))
               (rule "translateJavaDivInt" (formula "29") (term "1"))
               (rule "translateJavaAddInt" (formula "33") (term "3,0"))
               (rule "translateJavaDivInt" (formula "2") (term "1"))
               (rule "translateJavaAddInt" (formula "33") (term "4,0"))
               (rule "translateJavaAddInt" (formula "5") (term "1,1"))
               (rule "translateJavaAddInt" (formula "6") (term "1,0"))
               (rule "translateJavaAddInt" (formula "10") (term "1,1"))
               (rule "translateJavaSubInt" (formula "29") (term "0,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,3,0"))
               (rule "translateJavaMulInt" (formula "33") (term "1,3,0"))
               (rule "translateJavaSubInt" (formula "2") (term "0,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,4,0"))
               (rule "translateJavaMulInt" (formula "33") (term "1,4,0"))
               (rule "translateJavaAddInt" (formula "29") (term "0,0,1"))
               (rule "translateJavaAddInt" (formula "2") (term "0,0,1"))
               (rule "translateJavaAddInt" (formula "2") (term "1,0,1"))
               (rule "translateJavaAddInt" (formula "33") (term "0,1,4,0"))
               (rule "eqSymm" (formula "26"))
               (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "polySimp_elimSub" (formula "29") (term "0,1"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1"))
               (rule "polySimp_elimSub" (formula "26") (term "1"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,4,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1"))
               (rule "polySimp_addComm1" (formula "33") (term "3,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,1"))
               (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,1"))
               (rule "add_literals" (formula "29") (term "1,0,0,1"))
               (rule "times_zero_1" (formula "29") (term "0,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,1"))
               (rule "polySimp_addComm0" (formula "26") (term "1"))
               (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "33") (term "1,4,0"))
               (rule "mul_literals" (formula "33") (term "0,1,4,0"))
               (rule "polySimp_addComm1" (formula "33") (term "4,0"))
               (rule "castedGetAny" (formula "26") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0,1"))
               (rule "add_literals" (formula "2") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "2") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "33") (term "0,4,0"))
               (rule "polySimp_addComm0" (formula "33") (term "0,0,4,0"))
               (rule "inEqSimp_ltRight" (formula "29"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "applyEq" (formula "3") (term "0,1,0,0,1,0") (ifseqformula "9"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,1,0"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteGeq" (formula "5"))
               (rule "applyEq" (formula "33") (term "1,3,0") (ifseqformula "9"))
               (rule "applyEq" (formula "33") (term "1,4,0") (ifseqformula "9"))
               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "9"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1"))
               (rule "polySimp_elimOne" (formula "10") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "13"))
               (rule "polySimp_rightDist" (formula "17") (term "0,0"))
               (rule "mul_literals" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1"))
               (rule "mul_literals" (formula "17") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "qeq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaMod" (formula "15") (term "0"))
               (rule "jmod_axiom" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "newSym_eq" (formula "15") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::lastReadOf(heap,
                                          self,
                                          b_0),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "15") (term "1,1"))
               (rule "add_zero_right" (formula "15") (term "1"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "16"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_commuteGeq" (formula "11"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "18"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1"))
               (rule "polySimp_rightDist" (formula "18") (term "1"))
               (rule "mul_literals" (formula "18") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "18"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
               (rule "leq_literals" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
               (rule "mul_literals" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "4"))
               (rule "greater_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1,0"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "Definition_axiom_for_isAtInitialState_in_de_wiesler_BucketPointers" (formula "32") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "32") (term "0"))
               (rule "nnf_notAnd" (formula "32") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
               (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
               (rule "mul_literals" (formula "32") (term "1,0,0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "33") (inst "b=b"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "translateJavaCastInt" (formula "33") (term "0,0,1,0"))
               (rule "translateJavaAddInt" (formula "33") (term "1,1,0,0"))
               (rule "translateJavaMulInt" (formula "33") (term "1,0,1,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "33") (term "0,1,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "33") (term "1,1,0,0,1,0,0,0"))
               (rule "translateJavaCastInt" (formula "33") (term "0,1,0,1,0,0,0"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "35"))
               (rule "notLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "polySimp_mulComm0" (formula "34") (term "0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1"))
               (rule "polySimp_addComm0" (formula "39") (term "1"))
               (rule "castedGetAny" (formula "40") (term "0"))
               (rule "castedGetAny" (formula "37") (term "0"))
               (rule "castedGetAny" (formula "36") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "35"))
               (rule "inEqSimp_commuteLeq" (formula "33"))
               (rule "inEqSimp_commuteLeq" (formula "36"))
               (rule "applyEq" (formula "36") (term "0") (ifseqformula "31"))
               (rule "inEqSimp_commuteGeq" (formula "36"))
               (rule "applyEq" (formula "37") (term "0") (ifseqformula "31"))
               (rule "inEqSimp_homoInEq0" (formula "37"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "37") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "37") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "37") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "37"))
               (rule "polySimp_mulLiterals" (formula "37") (term "0"))
               (rule "polySimp_elimOne" (formula "37") (term "0"))
               (rule "elimGcdGeq_antec" (formula "33") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
               (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
               (rule "leq_literals" (formula "33") (term "0,0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
               (rule "add_literals" (formula "33") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "33") (term "1,0,0"))
               (rule "add_zero_right" (formula "33") (term "0,0"))
               (rule "leq_literals" (formula "33") (term "0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "36"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
               (rule "inEqSimp_exactShadow2" (formula "34") (ifseqformula "35"))
               (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
               (rule "greater_literals" (formula "34") (term "0"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "times_zero_1" (formula "34") (term "0,0"))
               (rule "add_zero_left" (formula "34") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "38"))
               (rule "times_zero_1" (formula "37") (term "0,0"))
               (rule "add_zero_left" (formula "37") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "37"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1"))
               (rule "polySimp_elimOne" (formula "37") (term "1"))
               (rule "inEqSimp_exactShadow2" (formula "22") (ifseqformula "36"))
               (rule "greater_literals" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,0"))
               (rule "mul_literals" (formula "22") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22"))
               (rule "polySimp_mulComm0" (formula "22") (term "1"))
               (rule "polySimp_rightDist" (formula "22") (term "1"))
               (rule "mul_literals" (formula "22") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "40"))
               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0"))
               (rule "add_zero_right" (formula "14") (term "0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
               (rule "leq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0"))
               (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0"))
               (rule "qeq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
               (rule "translateJavaAddInt" (formula "10") (term "0,2,0"))
               (rule "translateJavaMulInt" (formula "10") (term "0,0,2,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,2,0"))
               (rule "nnf_imp2or" (formula "46") (term "0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "51")))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "17") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "0,0,0"))
               (rule "qeq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0"))
               (rule "translateJavaCastInt" (formula "18") (term "0,0"))
               (rule "castedGetAny" (formula "18") (term "0,0"))
               (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "35"))
               (rule "inEqSimp_commuteGeq" (formula "18"))
               (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "18"))
               (rule "times_zero_1" (formula "40") (term "0,0"))
               (rule "add_zero_left" (formula "40") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "18"))
               (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0"))
               (rule "translateJavaCastInt" (formula "6") (term "0,0"))
               (rule "castedGetAny" (formula "6") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "54")))
               (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "8") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,0"))
               (rule "add_literals" (formula "8") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "8") (term "0,0,0"))
               (rule "qeq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "8") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "8") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "8") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "8") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "8") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
               (rule "translateJavaCastInt" (formula "8") (term "0,0"))
               (rule "castedGetAny" (formula "8") (term "0,0"))
               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "36"))
               (rule "inEqSimp_commuteGeq" (formula "8"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "8"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "8"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "8"))
               (rule "polySimp_rightDist" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23"))
               (rule "polySimp_mulComm0" (formula "23") (term "1"))
               (rule "polySimp_rightDist" (formula "23") (term "1"))
               (rule "mul_literals" (formula "23") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,0"))
               (rule "castedGetAny" (formula "7") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "56") (term "0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "54"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "30")) (ifInst ""  (formula "33")))
               (rule "true_left" (formula "1"))
               (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "56") (term "0") (inst "bucket=bucket"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0"))
               (rule "mul_literals" (formula "56") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaMod" (formula "9") (term "0"))
               (rule "jmod_axiom" (formula "9") (term "0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "newSym_eq" (formula "9") (inst "l=l_1") (inst "newSymDef=mul(de_wiesler_BucketPointersnextWriteOf_0, Z(0(#)))"))
               (rule "times_zero_1" (formula "9") (term "1,1"))
               (rule "add_zero_right" (formula "9") (term "1"))
               (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "9"))
               (rule "eqSymm" (formula "10"))
               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "57") (term "1,3,0,1,0") (ifseqformula "10"))
               (rule "polySimp_addComm1" (formula "57") (term "3,0,1,0"))
               (rule "polySimp_addComm0" (formula "57") (term "0,3,0,1,0"))
               (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "10"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "57") (term "1,4,0,1,0") (ifseqformula "10"))
               (rule "polySimp_addComm1" (formula "57") (term "4,0,1,0"))
               (rule "polySimp_addComm1" (formula "57") (term "0,4,0,1,0"))
               (rule "applyEqRigid" (formula "24") (term "1,1") (ifseqformula "10"))
               (rule "applyEq" (formula "7") (term "1") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq0" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0"))
               (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "10"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26"))
               (rule "polySimp_mulComm0" (formula "26") (term "1"))
               (rule "polySimp_rightDist" (formula "26") (term "1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
               (rule "mul_literals" (formula "26") (term "0,1"))
               (rule "elimGcdGeq_antec" (formula "26") (inst "elimGcdRightDiv=add(Z(1(#)), l_1)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "26") (term "0,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
               (rule "add_literals" (formula "26") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
               (rule "polySimp_addComm0" (formula "26") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
               (rule "add_literals" (formula "26") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0"))
               (rule "leq_literals" (formula "26") (term "0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
               (rule "leq_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
               (rule "add_literals" (formula "5") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "polyDiv_pullOut" (formula "1") (term "1,1") (inst "polyDivCoeff=l_1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1,1"))
               (rule "equal_literals" (formula "1") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,1"))
               (rule "add_literals" (formula "1") (term "1,0,0,1,1"))
               (rule "times_zero_1" (formula "1") (term "0,0,1,1"))
               (rule "div_literals" (formula "1") (term "0,1,1"))
               (rule "add_zero_left" (formula "1") (term "1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "5"))
               (rule "greater_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "times_zero_1" (formula "6") (term "1,0"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "26") (term "0,0"))
               (rule "mul_literals" (formula "26") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0"))
               (rule "add_literals" (formula "26") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0"))
               (rule "polySimp_elimOne" (formula "26") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "8"))
               (rule "polySimp_rightDist" (formula "25") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0"))
               (rule "mul_literals" (formula "25") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1"))
               (rule "polySimp_rightDist" (formula "25") (term "1"))
               (rule "mul_literals" (formula "25") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0"))
               (rule "translateJavaCastInt" (formula "13") (term "0,0"))
               (rule "castedGetAny" (formula "13") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "58")))
               (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "13") (term "0,0,1,1,1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "31"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "13") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "31"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "13") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,1"))
               (rule "castedGetAny" (formula "14") (term "0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "0"))
               (rule "translateJavaCastInt" (formula "26") (term "0,0"))
               (rule "castedGetAny" (formula "26") (term "0,0"))
               (rule "nnf_notAnd" (formula "54") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "54") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "54") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0"))
               (rule "times_zero_1" (formula "54") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "54") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0"))
               (rule "mul_literals" (formula "54") (term "1,0,0,0"))
               (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "24") (term "0"))
               (rule "translateJavaMulInt" (formula "24") (term "0,2,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,2,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "59")))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
               (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
               (rule "times_zero_2" (formula "16") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_invertInEq0" (formula "16") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,1"))
               (rule "times_zero_2" (formula "16") (term "1,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "16") (term "0,1,1,1,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "30"))
               (rule "leq_literals" (formula "16") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
               (rule "translateJavaCastInt" (formula "17") (term "0,0"))
               (rule "castedGetAny" (formula "17") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "60")))
               (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,1,1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "33"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "15") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "33"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
               (rule "true_left" (formula "15"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0"))
               (rule "translateJavaCastInt" (formula "15") (term "0,0"))
               (rule "castedGetAny" (formula "15") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "15"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "4"))
               (rule "mul_literals" (formula "6") (term "1,1,0"))
               (rule "greater_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "43") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "translateJavaAddInt" (formula "43") (term "1,2,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "43") (term "1,2,0,1,1,0"))
               (rule "nnf_ex2all" (formula "60"))
               (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "55") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "55"))
               (rule "translateJavaCastInt" (formula "55") (term "1,1,0,1,0"))
               (rule "translateJavaCastInt" (formula "55") (term "0,1,0,1,0"))
               (rule "castedGetAny" (formula "55") (term "1,1,0,1,0"))
               (rule "castedGetAny" (formula "55") (term "0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0"))
               (rule "applyEq" (formula "55") (term "0,1,0,0,1,0,0") (ifseqformula "53"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "55") (term "0,0,1,0,0"))
               (rule "applyEq" (formula "55") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "53"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "55") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,1,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "52") (term "0"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "translateJavaMod" (formula "52") (term "0"))
               (rule "jmod_axiom" (formula "52") (term "0"))
               (rule "polySimp_mulLiterals" (formula "52") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "52"))
               (rule "polySimp_mulLiterals" (formula "52") (term "0"))
               (rule "newSym_eq" (formula "52") (inst "l=l_2") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "52") (term "1,1"))
               (rule "add_zero_right" (formula "52") (term "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "52"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "52"))
               (rule "eqSymm" (formula "53"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "53"))
               (rule "inEqSimp_commuteGeq" (formula "22"))
               (rule "applyEq" (formula "49") (term "0") (ifseqformula "53"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "53"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "applyEq" (formula "44") (term "3,0,1,1,0") (ifseqformula "53"))
               (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "53"))
               (rule "applyEq" (formula "50") (term "0") (ifseqformula "53"))
               (rule "inEqSimp_homoInEq0" (formula "50"))
               (rule "polySimp_mulLiterals" (formula "50") (term "1,0"))
               (rule "polySimp_addComm1" (formula "50") (term "0"))
               (rule "polySimp_addComm0" (formula "50") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "50"))
               (rule "polySimp_mulComm0" (formula "50") (term "1"))
               (rule "polySimp_rightDist" (formula "50") (term "1"))
               (rule "polySimp_mulLiterals" (formula "50") (term "1,1"))
               (rule "polySimp_elimOne" (formula "50") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "50") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "50") (term "0,1"))
               (rule "elimGcdGeq_antec" (formula "49") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "49") (term "0,0"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
               (rule "add_zero_right" (formula "49") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,0"))
               (rule "add_literals" (formula "49") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "49") (term "1,0,0"))
               (rule "add_zero_right" (formula "49") (term "0,0"))
               (rule "leq_literals" (formula "49") (term "0"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "elimGcdLeq_antec" (formula "22") (inst "elimGcdRightDiv=l_2") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "22") (term "0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
               (rule "neg_literal" (formula "22") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
               (rule "add_literals" (formula "22") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
               (rule "add_literals" (formula "22") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0"))
               (rule "qeq_literals" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "22"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "50") (ifseqformula "5"))
               (rule "leq_literals" (formula "50") (term "0"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "true_left" (formula "50"))
               (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "23"))
               (rule "polySimp_rightDist" (formula "31") (term "0,0"))
               (rule "mul_literals" (formula "31") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "31") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "31"))
               (rule "polySimp_mulLiterals" (formula "31") (term "0"))
               (rule "polySimp_elimOne" (formula "31") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "52"))
               (rule "polySimp_rightDist" (formula "51") (term "0,0"))
               (rule "polySimp_mulAssoc" (formula "51") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "51") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "51") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "51") (term "0"))
               (rule "polySimp_addComm1" (formula "51") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "51") (term "0"))
               (rule "add_literals" (formula "51") (term "1,1,0"))
               (rule "times_zero_1" (formula "51") (term "1,0"))
               (rule "add_zero_right" (formula "51") (term "0"))
               (rule "polySimp_addComm0" (formula "51") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "51"))
               (rule "polySimp_mulLiterals" (formula "51") (term "0"))
               (rule "elimGcdLeq_antec" (formula "51") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "leq_literals" (formula "51") (term "0,0"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "neg_literal" (formula "51") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0"))
               (rule "mul_literals" (formula "51") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "51") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "51") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "51") (term "0,0"))
               (rule "add_literals" (formula "51") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "51") (term "1,0,0"))
               (rule "add_zero_right" (formula "51") (term "0,0"))
               (rule "qeq_literals" (formula "51") (term "0"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "31"))
               (rule "times_zero_1" (formula "7") (term "0,0"))
               (rule "add_zero_left" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "24") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "24") (term "0,0,1,0,1"))
               (rule "applyEq" (formula "24") (term "0,0,1,0,1") (ifseqformula "45"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "24") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "64")))
               (rule "translateJavaSubInt" (formula "24") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "24") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "24") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "24") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "24") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "24") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "24") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "24") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "24") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "24") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "24") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "24") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "24") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0,0"))
               (rule "add_literals" (formula "24") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "24") (term "0,0,0"))
               (rule "qeq_literals" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "25") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "25") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "25") (term "0,1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,1,1"))
               (rule "applyEq" (formula "25") (term "0,0,1,1,1,1") (ifseqformula "46"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "1,1,1,1"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "25") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "translateJavaMod" (formula "25") (term "0,0,1,1"))
               (rule "jmod_axiom" (formula "25") (term "0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,1,1"))
               (rule "polySimp_sepNegMonomial" (formula "25") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1"))
               (rule "jdiv_axiom" (formula "27") (term "0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,0,2,1"))
               (rule "eqSymm" (formula "27"))
               (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
               (rule "inEqSimp_subsumption6" (formula "27") (term "0,0") (ifseqformula "6"))
               (rule "greater_literals" (formula "27") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0"))
               (rule "leq_literals" (formula "27") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "polyDiv_pullOut" (formula "27") (term "0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_homoEq" (formula "27"))
               (rule "polySimp_pullOutFactor0" (formula "27") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "1,0,0,0,1,0"))
               (rule "times_zero_1" (formula "27") (term "0,0,0,1,0"))
               (rule "div_literals" (formula "27") (term "0,0,1,0"))
               (rule "add_zero_left" (formula "27") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
               (rule "add_literals" (formula "27") (term "1,0"))
               (rule "times_zero_1" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "seqGetAlphaCast" (formula "46") (term "0"))
               (rule "castedGetAny" (formula "46") (term "0"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "true_left" (formula "46"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "51") (term "0"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "translateJavaSubInt" (formula "51") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "51") (term "1,0"))
               (rule "translateJavaAddInt" (formula "51") (term "0,0,0"))
               (rule "neg_literal" (formula "51") (term "1,0"))
               (rule "polySimp_elimSub" (formula "51") (term "0,0"))
               (rule "mul_literals" (formula "51") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "51") (term "0,0"))
               (rule "polySimp_addComm1" (formula "51") (term "0,0"))
               (rule "polySimp_addComm0" (formula "51") (term "0,0,0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "translateJavaAddInt" (formula "22") (term "0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "22") (term "1,0"))
               (rule "translateJavaSubInt" (formula "22") (term "0,0"))
               (rule "neg_literal" (formula "22") (term "1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "0,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "22") (term "0,0"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,0,0"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "8") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,1"))
               (rule "mul_literals" (formula "8") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaSubInt" (formula "9") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0"))
               (rule "translateJavaAddInt" (formula "9") (term "0,0,0"))
               (rule "neg_literal" (formula "9") (term "1,0"))
               (rule "polySimp_elimSub" (formula "9") (term "0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "9") (term "0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0"))
               (rule "arrayLengthIsAShort" (formula "46") (term "0"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "true_left" (formula "46"))
               (rule "arrayLengthNotNegative" (formula "46") (term "0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "translateJavaSubInt" (formula "11") (term "0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "11") (term "1,1"))
               (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
               (rule "neg_literal" (formula "11") (term "1,1"))
               (rule "polySimp_elimSub" (formula "11") (term "0,1"))
               (rule "mul_literals" (formula "11") (term "1,0,1"))
               (rule "polySimp_addLiterals" (formula "11") (term "0,1"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaSubInt" (formula "15") (term "0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "15") (term "1,1"))
               (rule "translateJavaAddInt" (formula "15") (term "0,0,1"))
               (rule "neg_literal" (formula "15") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,1"))
               (rule "mul_literals" (formula "15") (term "1,0,1"))
               (rule "polySimp_addLiterals" (formula "15") (term "0,1"))
               (rule "polySimp_addComm1" (formula "15") (term "0,1"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "30") (term "0"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "translateJavaAddInt" (formula "30") (term "0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "30") (term "1,0"))
               (rule "translateJavaSubInt" (formula "30") (term "0,0"))
               (rule "neg_literal" (formula "30") (term "1,0"))
               (rule "polySimp_elimSub" (formula "30") (term "0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "30") (term "0,0"))
               (rule "polySimp_addComm1" (formula "30") (term "0,0"))
               (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaAddInt" (formula "10") (term "0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0"))
               (rule "translateJavaSubInt" (formula "10") (term "0,0"))
               (rule "neg_literal" (formula "10") (term "1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "10") (term "0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
               (rule "times_zero_1" (formula "9") (term "0,0"))
               (rule "add_zero_left" (formula "9") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "7"))
               (rule "greater_literals" (formula "9") (term "0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "times_zero_1" (formula "9") (term "1,0"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "lenNonNegative" (formula "59") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "59"))
               (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
               (rule "inEqSimp_sepPosMonomial1" (formula "59"))
               (rule "mul_literals" (formula "59") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "51"))
               (rule "leq_literals" (formula "59") (term "0"))
                (builtin "One Step Simplification" (formula "59"))
               (rule "true_left" (formula "59"))
               (rule "arrayLengthNotNegative" (formula "52") (term "1"))
               (rule "arrayLengthIsAShort" (formula "52") (term "1"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "true_left" (formula "52"))
               (rule "seqGetAlphaCast" (formula "60") (term "0"))
               (rule "castedGetAny" (formula "60") (term "0"))
                (builtin "One Step Simplification" (formula "60"))
               (rule "true_left" (formula "60"))
               (rule "nnf_imp2or" (formula "61") (term "0"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0"))
               (rule "neg_literal" (formula "18") (term "1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "68")))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
               (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
               (rule "times_zero_2" (formula "16") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_invertInEq0" (formula "16") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,1"))
               (rule "times_zero_2" (formula "16") (term "1,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "16") (term "0,1,1,1,1") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "37"))
               (rule "leq_literals" (formula "16") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")))
               (rule "true_left" (formula "16"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1,0,1,1,1"))
               (rule "translateJavaCastInt" (formula "16") (term "0,1,0,1,1,1"))
               (rule "castedGetAny" (formula "16") (term "0,1,0,1,1,1"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "0,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "68")))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "16") (term "0,0,1,1,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "39"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "39"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "16") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "17") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "17") (term "0,0,0,0,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "17") (term "0,1,0,1"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "69")))
               (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "17") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "54"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "0,0,0"))
               (rule "qeq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "17") (term "1,1,0,0,1"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "69")))
               (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "17") (term "0,0,1,1,1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "17") (term "0,0") (ifseqformula "40"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "17") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_subsumption1" (formula "17") (term "1,0,1,1,1,1") (ifseqformula "40"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "17") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
               (rule "true_left" (formula "17"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "1,1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "17") (term "0,1,1,1,1,1,1"))
               (rule "castedGetAny" (formula "17") (term "0,1,1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0,0,0,0,1"))
               (rule "translateJavaCastInt" (formula "17") (term "0,0,0,0,0,1"))
               (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "17") (term "0,1,0,0,1"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "69")))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "17") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "54"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "0,0,0"))
               (rule "qeq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "1,1,0,0,1"))
               (rule "translateJavaCastInt" (formula "17") (term "0,1,1,0,0,1"))
               (rule "castedGetAny" (formula "17") (term "0,1,1,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "65")))
               (rule "translateJavaCastInt" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "17") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "54"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "17") (term "1,0,0,0") (ifseqformula "61"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "castedGetAny" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "castedGetAny" (formula "17") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "17") (term "0,1,0,0") (ifseqformula "62"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "castedGetAny" (formula "17") (term "1,1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,1,0,0,0"))
               (rule "applyEq" (formula "17") (term "0,0,0,0,1,0,0,0") (ifseqformula "60"))
               (rule "applyEq" (formula "17") (term "0,0,1,1,0,0,0") (ifseqformula "60"))
               (rule "applyEq" (formula "17") (term "0,1,0,1,0,0,0") (ifseqformula "50"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "applyEq" (formula "17") (term "1,1,0,0,1,0,0,0") (ifseqformula "60"))
               (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0,0") (ifseqformula "50"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,0") (ifseqformula "58"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,0") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,0") (ifseqformula "53"))
               (rule "greater_literals" (formula "17") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
               (rule "leq_literals" (formula "17") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,0") (ifseqformula "5"))
               (rule "greater_literals" (formula "17") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
               (rule "leq_literals" (formula "17") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "33") (term "0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "translateJavaUnaryMinusInt" (formula "33") (term "1,0"))
               (rule "translateJavaAddInt" (formula "33") (term "0,0,0"))
               (rule "translateJavaSubInt" (formula "33") (term "0,0"))
               (rule "neg_literal" (formula "33") (term "1,0"))
               (rule "polySimp_elimSub" (formula "33") (term "0,0"))
               (rule "mul_literals" (formula "33") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "33") (term "0,0"))
               (rule "polySimp_addComm0" (formula "33") (term "0,0"))
               (rule "commute_or_2" (formula "64") (term "0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "21") (term "1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "69")))
               (rule "translateJavaAddInt" (formula "21") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "21") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,1"))
               (rule "replace_known_left" (formula "21") (term "0,0,1,1,1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_subsumption1" (formula "21") (term "1,0,1,1,1,1") (ifseqformula "40"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,1,0,1,1,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,1,1,1,1"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,1,1,1,1"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,1,1,1,1"))
               (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,1,1,1"))
               (rule "qeq_literals" (formula "21") (term "0,1,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_subsumption1" (formula "21") (term "0,0") (ifseqformula "40"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "21") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "16")))
               (rule "true_left" (formula "21"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "21") (term "0,1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "69")))
               (rule "translateJavaAddInt" (formula "21") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "21") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "21") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "21") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "21") (term "0,1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "inEqSimp_subsumption1" (formula "21") (term "0,0,1,1,1,1") (ifseqformula "38"))
               (rule "leq_literals" (formula "21") (term "0,0,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_subsumption1" (formula "21") (term "0,0,0") (ifseqformula "38"))
               (rule "leq_literals" (formula "21") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "22") (term "0,1,0,1"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "70")))
               (rule "translateJavaAddInt" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "22") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "22") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "22") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "55"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "22") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "22") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "22") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "22") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "22") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0,0,0"))
               (rule "add_literals" (formula "22") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "22") (term "0,0,0"))
               (rule "qeq_literals" (formula "22") (term "0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "22") (term "1,1,0,0,1"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "70")))
               (rule "translateJavaSubInt" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "22") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "22") (term "1,0,1,1,1,1") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
               (rule "replace_known_left" (formula "22") (term "1,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
               (rule "times_zero_2" (formula "22") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_invertInEq0" (formula "22") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,1"))
               (rule "times_zero_2" (formula "22") (term "1,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "22") (term "0,1,1,1,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "22") (term "0,0") (ifseqformula "39"))
               (rule "leq_literals" (formula "22") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")))
               (rule "true_left" (formula "22"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "22") (term "0,1,0,1,1,1"))
               (rule "translateJavaCastInt" (formula "22") (term "0,0,1,0,1,1,1"))
               (rule "castedGetAny" (formula "22") (term "0,0,1,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "22") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "22") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "22") (term "0,0,1,0,1"))
               (rule "applyEq" (formula "22") (term "0,0,1,0,1") (ifseqformula "51"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "22") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "70")))
               (rule "translateJavaSubInt" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "22") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "22") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "22") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
               (rule "replace_known_left" (formula "22") (term "1,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "22") (term "1,0,1,1,1,1") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
               (rule "times_zero_2" (formula "22") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "22") (term "0,1,1,1,1"))
               (rule "times_zero_2" (formula "22") (term "1,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "22") (term "0,1,1,1,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "22") (term "0,0") (ifseqformula "39"))
               (rule "leq_literals" (formula "22") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "23") (term "1,1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "71")))
               (rule "translateJavaSubInt" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "23") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "23") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,0") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "23") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,1"))
               (rule "times_zero_2" (formula "23") (term "1,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "23") (term "0,1,1,1,1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "23") (term "0,0") (ifseqformula "40"))
               (rule "leq_literals" (formula "23") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
               (rule "true_left" (formula "23"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "23") (term "1,1,0,1,1,1"))
               (rule "translateJavaCastInt" (formula "23") (term "0,1,1,0,1,1,1"))
               (rule "castedGetAny" (formula "23") (term "0,1,1,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "23") (term "0,0,0,0,1"))
               (rule "translateJavaCastInt" (formula "23") (term "0,0,0,0,0,1"))
               (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "23") (term "0,1,0,0,1"))
               (rule "translateJavaCastInt" (formula "23") (term "0,0,1,0,0,1"))
               (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1"))
               (rule "applyEq" (formula "23") (term "0,0,1,0,0,1") (ifseqformula "52"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "23") (term "0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "71")))
               (rule "translateJavaSubInt" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "23") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "23") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "23") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "23") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,0") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,1,1,1"))
               (rule "replace_known_left" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "23") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,1"))
               (rule "times_zero_2" (formula "23") (term "1,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,1"))
               (rule "replace_known_left" (formula "23") (term "0,1,1,1,1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "23") (term "0,0") (ifseqformula "40"))
               (rule "leq_literals" (formula "23") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
               (rule "true_left" (formula "23"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "23") (term "0,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "23") (term "0,0,1,1,1,1"))
               (rule "castedGetAny" (formula "23") (term "0,0,1,1,1,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "23") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "67")))
               (rule "translateJavaCastInt" (formula "23") (term "0,0,1,0,0"))
               (rule "translateJavaCastInt" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "23") (term "0,1,0,1,0,0,0,0"))
               (rule "translateJavaAddInt" (formula "23") (term "1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "23") (term "1,0,0,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "23") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,0,0,0,0") (ifseqformula "56"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,0,0") (ifseqformula "63"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "castedGetAny" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "castedGetAny" (formula "23") (term "1,1,0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "23") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "23") (term "0,1,0,0") (ifseqformula "64"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
               (rule "applyEq" (formula "23") (term "0,0,1,1,0,0,0") (ifseqformula "62"))
               (rule "applyEq" (formula "23") (term "0,1,0,1,0,0,0") (ifseqformula "52"))
               (rule "inEqSimp_homoInEq0" (formula "23") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "applyEq" (formula "23") (term "0,0,0,0,1,0,0,0") (ifseqformula "62"))
               (rule "applyEq" (formula "23") (term "1,1,0,0,1,0,0,0") (ifseqformula "62"))
               (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,0") (ifseqformula "52"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,1,0,0,0") (ifseqformula "60"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0,0,0"))
               (rule "replace_known_left" (formula "23") (term "1,0,1,0,0,0") (ifseqformula "59"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_subsumption6" (formula "23") (term "0,1,0,0,0") (ifseqformula "5"))
               (rule "greater_literals" (formula "23") (term "0,0,0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "leq_literals" (formula "23") (term "0,0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_subsumption6" (formula "23") (term "0,0,0,0") (ifseqformula "55"))
               (rule "greater_literals" (formula "23") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
               (rule "leq_literals" (formula "23") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "translateJavaSubInt" (formula "24") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "24") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,1"))
               (rule "mul_literals" (formula "24") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "24") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,1,1"))
               (rule "mul_literals" (formula "24") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "translateJavaSubInt" (formula "24") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "24") (term "1,0"))
               (rule "translateJavaAddInt" (formula "24") (term "0,0,0"))
               (rule "neg_literal" (formula "24") (term "1,0"))
               (rule "polySimp_elimSub" (formula "24") (term "0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "24") (term "0,0"))
               (rule "polySimp_addComm0" (formula "24") (term "0,0"))
               (rule "jdiv_axiom" (formula "4") (term "0"))
               (rule "eqSymm" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,2,0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0,2,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,2,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,2,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
               (rule "inEqSimp_subsumption6" (formula "4") (term "0,0") (ifseqformula "39"))
               (rule "greater_literals" (formula "4") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "4") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "eqSymm" (formula "4"))
               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
               (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,2,0"))
               (rule "equal_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0,0"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "polyDiv_pullOut" (formula "4") (term "1") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,1"))
               (rule "equal_literals" (formula "4") (term "0,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0,1"))
               (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1"))
               (rule "polyDiv_pullOut" (formula "4") (term "1,1") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,1,1"))
               (rule "equal_literals" (formula "4") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1,1"))
               (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,1,1"))
               (rule "add_literals" (formula "4") (term "1,0,0,1,1"))
               (rule "times_zero_1" (formula "4") (term "0,0,1,1"))
               (rule "div_literals" (formula "4") (term "0,1,1"))
               (rule "add_zero_left" (formula "4") (term "1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1"))
               (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
               (rule "equal_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,0"))
               (rule "add_literals" (formula "5") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "0,0,0"))
               (rule "div_literals" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "0,1"))
               (rule "mul_literals" (formula "5") (term "0,0,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
               (rule "andLeft" (formula "30"))
               (rule "inEqSimp_homoInEq1" (formula "30"))
               (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
               (rule "add_literals" (formula "30") (term "1,1,0"))
               (rule "times_zero_1" (formula "30") (term "1,0"))
               (rule "add_zero_right" (formula "30") (term "0"))
               (rule "leq_literals" (formula "30"))
               (rule "closeFalse" (formula "30"))
            )
         )
         (branch " self.lastReadOf(b_0) = de.wiesler.BucketPointers::bucketStart(self, b_0)"
            (rule "translateJavaSubInt" (formula "26") (term "0"))
            (rule "translateJavaAddInt" (formula "10") (term "1,1"))
            (rule "translateJavaAddInt" (formula "33") (term "3,0"))
            (rule "translateJavaAddInt" (formula "33") (term "4,0"))
            (rule "translateJavaCastInt" (formula "26") (term "1"))
            (rule "translateJavaDivInt" (formula "29") (term "1,1"))
            (rule "translateJavaDivInt" (formula "2") (term "1"))
            (rule "translateJavaAddInt" (formula "5") (term "1,1"))
            (rule "translateJavaAddInt" (formula "6") (term "1,0"))
            (rule "translateJavaAddInt" (formula "33") (term "0,3,0"))
            (rule "translateJavaMulInt" (formula "33") (term "1,3,0"))
            (rule "translateJavaMulInt" (formula "33") (term "1,4,0"))
            (rule "translateJavaAddInt" (formula "33") (term "0,4,0"))
            (rule "translateJavaAddInt" (formula "29") (term "0,0,1,1"))
            (rule "translateJavaAddInt" (formula "2") (term "1,0,1"))
            (rule "translateJavaAddInt" (formula "2") (term "0,0,1"))
            (rule "translateJavaAddInt" (formula "33") (term "0,1,4,0"))
            (rule "translateJavaSubInt" (formula "29") (term "0,1,1"))
            (rule "translateJavaSubInt" (formula "2") (term "0,1"))
            (rule "eqSymm" (formula "26"))
            (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "polySimp_elimSub" (formula "29") (term "0,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,4,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0"))
            (rule "polySimp_addComm1" (formula "33") (term "3,0"))
            (rule "polySimp_addComm1" (formula "29") (term "0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,1,1"))
            (rule "add_literals" (formula "29") (term "1,0,0,1,1"))
            (rule "times_zero_1" (formula "29") (term "0,0,1,1"))
            (rule "add_zero_left" (formula "29") (term "0,1,1"))
            (rule "polySimp_addComm0" (formula "26") (term "1"))
            (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_rightDist" (formula "33") (term "1,4,0"))
            (rule "mul_literals" (formula "33") (term "0,1,4,0"))
            (rule "polySimp_addComm1" (formula "33") (term "4,0"))
            (rule "inEqSimp_ltToLeq" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0"))
            (rule "castedGetAny" (formula "26") (term "0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0,1"))
            (rule "add_literals" (formula "2") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "0,0,0,1"))
            (rule "add_zero_left" (formula "2") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,4,0"))
            (rule "polySimp_addComm0" (formula "33") (term "0,0,4,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "29") (term "0,1"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "25"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "inEqSimp_commuteLeq" (formula "23"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
            (rule "times_zero_2" (formula "29") (term "1,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0"))
            (rule "applyEq" (formula "33") (term "1,4,0") (ifseqformula "8"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "9"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "1,0"))
            (rule "times_zero_1" (formula "9") (term "0"))
            (rule "leq_literals" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "32") (term "1,3,0") (ifseqformula "8"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "2") (term "0,1,0,0,1,0") (ifseqformula "8"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,1,0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "applyEq" (formula "2") (term "1,0,0,1,0") (ifseqformula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "1"))
            (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
            (rule "polySimp_elimOne" (formula "28") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "13"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "1,1,0"))
            (rule "times_zero_1" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
)
(branch "Case 2"
   (rule "impRight" (formula "21") (userinteraction))
   (rule "eqTermCut" (formula "22") (term "3,0") (inst "s=javaAddInt(begin,
           javaMulInt(add(block_0,
                          div(de_wiesler_BucketPointersnextWriteOf_0,
                              Z(6(5(2(#)))))),
                      Z(6(5(2(#))))))") (userinteraction))
   (branch "Assume javaAddInt(javaAddInt(begin, self.nextWriteOf(b_0)), javaMulInt(block_0, 256)) = javaAddInt(begin, javaMulInt( block_0 + de_wiesler_BucketPointersnextWriteOf_0 / 256, 256))"
      (rule "eqTermCut" (formula "23") (term "4,0") (inst "s=javaAddInt(begin,
           javaMulInt(javaAddInt(add(block_0,
                                     div(de_wiesler_BucketPointersnextWriteOf_0,
                                         Z(6(5(2(#)))))),
                                 Z(1(#))),
                      Z(6(5(2(#))))))") (userinteraction))
      (branch "Assume javaAddInt(javaAddInt(begin, self.nextWriteOf(b_0)), javaMulInt(javaAddInt(block_0, 1), 256)) = javaAddInt(begin, javaMulInt(javaAddInt( block_0 + de_wiesler_BucketPointersnextWriteOf_0 / 256, 1), 256))"
         (rule "translateJavaAddInt" (formula "24") (term "3,0"))
         (rule "translateJavaSubInt" (formula "17") (term "0"))
         (rule "translateJavaCastInt" (formula "17") (term "1"))
         (rule "translateJavaAddInt" (formula "24") (term "4,0"))
         (rule "translateJavaAddInt" (formula "19") (term "3,0"))
         (rule "translateJavaAddInt" (formula "19") (term "4,0"))
         (rule "translateJavaDivInt" (formula "3") (term "1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0"))
         (rule "translateJavaAddInt" (formula "2") (term "1"))
         (rule "translateJavaAddInt" (formula "1") (term "0"))
         (rule "translateJavaAddInt" (formula "1") (term "1"))
         (rule "translateJavaMulInt" (formula "24") (term "1,3,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,3,0"))
         (rule "translateJavaMulInt" (formula "24") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "19") (term "1,3,0"))
         (rule "translateJavaMulInt" (formula "19") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,1,0"))
         (rule "translateJavaMulInt" (formula "1") (term "1,1"))
         (rule "translateJavaAddInt" (formula "24") (term "0,1,4,0"))
         (rule "translateJavaAddInt" (formula "19") (term "0,1,4,0"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1"))
         (rule "translateJavaMulInt" (formula "1") (term "1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,1,1"))
         (rule "andLeft" (formula "3"))
         (rule "eqSymm" (formula "18"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1"))
         (rule "polySimp_elimSub" (formula "18") (term "1"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "25") (term "3,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "18") (term "1"))
         (rule "polySimp_addComm0" (formula "25") (term "1,1,4,0"))
         (rule "polySimp_addComm1" (formula "20") (term "1,1,4,0"))
         (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "1") (term "1,1,1"))
         (rule "polySimp_rightDist" (formula "20") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,1,3,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "20") (term "0,1,1,4,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,4,0"))
         (rule "mul_literals" (formula "25") (term "0,1,4,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "25") (term "4,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,4,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "20") (term "0,1,4,0"))
         (rule "mul_literals" (formula "20") (term "0,0,1,4,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,1"))
         (rule "mul_literals" (formula "1") (term "0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "castedGetAny" (formula "18") (term "0"))
         (rule "polySimp_addAssoc" (formula "20") (term "3,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "1"))
         (rule "polySimp_homoEq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,1"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0,1"))
         (rule "add_literals" (formula "4") (term "1,0,0,0,1"))
         (rule "times_zero_1" (formula "4") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "4") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "25") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "polySimp_addAssoc" (formula "20") (term "4,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "2") (term "0,0,0"))
         (rule "add_zero_left" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "3") (term "0,1,0,0,1,0") (ifseqformula "4"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,1,0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "applyEq" (formula "24") (term "1,4,0") (ifseqformula "4"))
         (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "4"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "applyEqRigid" (formula "19") (term "1,4,0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "19") (term "1,3,0") (ifseqformula "1"))
         (rule "close" (formula "24") (ifseqformula "19"))
      )
      (branch "Assume javaAddInt(javaAddInt(begin, self.nextWriteOf(b_0)), javaMulInt(javaAddInt(block_0, 1), 256)) != javaAddInt(begin, javaMulInt(javaAddInt( block_0 + de_wiesler_BucketPointersnextWriteOf_0 / 256, 1), 256))"
         (rule "translateJavaAddInt" (formula "24") (term "3,0"))
         (rule "translateJavaSubInt" (formula "17") (term "0"))
         (rule "translateJavaAddInt" (formula "24") (term "4,0"))
         (rule "translateJavaCastInt" (formula "17") (term "1"))
         (rule "translateJavaAddInt" (formula "19") (term "3,0"))
         (rule "translateJavaAddInt" (formula "19") (term "4,0"))
         (rule "translateJavaDivInt" (formula "3") (term "1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0"))
         (rule "translateJavaAddInt" (formula "2") (term "1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,3,0"))
         (rule "translateJavaMulInt" (formula "24") (term "1,3,0"))
         (rule "translateJavaMulInt" (formula "24") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "19") (term "1,3,0"))
         (rule "translateJavaAddInt" (formula "19") (term "0,1,4,0"))
         (rule "translateJavaAddInt" (formula "3") (term "0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,1"))
         (rule "translateJavaMulInt" (formula "1") (term "1,0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
         (rule "translateJavaMulInt" (formula "1") (term "1,1,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,1,4,0"))
         (rule "translateJavaMulInt" (formula "19") (term "1,4,0"))
         (rule "translateJavaSubInt" (formula "3") (term "0,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,1,0,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,1,1,0"))
         (rule "andLeft" (formula "3"))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "17"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_elimSub" (formula "3") (term "0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "1"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "25") (term "3,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "17") (term "1"))
         (rule "polySimp_addComm0" (formula "25") (term "1,1,4,0"))
         (rule "polySimp_addComm1" (formula "19") (term "1,1,4,0"))
         (rule "polySimp_addComm0" (formula "21") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "21") (term "1,1,1"))
         (rule "polySimp_rightDist" (formula "19") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,1,3,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "19") (term "0,1,1,4,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,4,0"))
         (rule "mul_literals" (formula "25") (term "0,1,4,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "25") (term "4,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,4,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1"))
         (rule "polySimp_rightDist" (formula "19") (term "0,1,4,0"))
         (rule "mul_literals" (formula "19") (term "0,0,1,4,0"))
         (rule "polySimp_rightDist" (formula "21") (term "0,1,1"))
         (rule "mul_literals" (formula "21") (term "0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "castedGetAny" (formula "17") (term "0"))
         (rule "polySimp_addAssoc" (formula "19") (term "3,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "1"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,1"))
         (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0,1"))
         (rule "add_literals" (formula "3") (term "1,0,0,0,1"))
         (rule "times_zero_1" (formula "3") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "3") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "25") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "polySimp_addAssoc" (formula "19") (term "4,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
         (rule "polySimp_homoEq" (formula "21"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "0,0,1,0"))
         (rule "mul_literals" (formula "21") (term "0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "21") (term "0,0,0"))
         (rule "add_literals" (formula "21") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0"))
         (rule "close" (formula "21") (ifseqformula "1"))
      )
   )
   (branch "Assume javaAddInt(javaAddInt(begin, self.nextWriteOf(b_0)), javaMulInt(block_0, 256)) != javaAddInt(begin, javaMulInt( block_0 + de_wiesler_BucketPointersnextWriteOf_0 / 256, 256))"
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "translateJavaAddInt" (formula "19") (term "0") (userinteraction))
      (rule "translateJavaAddInt" (formula "19") (term "0,0") (userinteraction))
      (rule "translateJavaAddInt" (formula "19") (term "1") (userinteraction))
      (rule "translateJavaMulInt" (formula "19") (term "1,1") (userinteraction))
      (rule "translateJavaMulInt" (formula "19") (term "1,0") (userinteraction))
      (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "2") (term "0") (userinteraction))
      (rule "impLeft" (formula "2") (userinteraction))
      (branch "Case 1"
         (rule "translateJavaAddInt" (formula "24") (term "3,0"))
         (rule "translateJavaDivInt" (formula "1") (term "1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0"))
         (rule "translateJavaCastInt" (formula "15") (term "1"))
         (rule "translateJavaAddInt" (formula "17") (term "3,0"))
         (rule "translateJavaAddInt" (formula "17") (term "4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,3,0"))
         (rule "translateJavaMulInt" (formula "24") (term "1,3,0"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1"))
         (rule "translateJavaMulInt" (formula "17") (term "1,3,0"))
         (rule "translateJavaMulInt" (formula "17") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,1,4,0"))
         (rule "translateJavaAddInt" (formula "24") (term "0,4,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,1,4,0"))
         (rule "translateJavaMulInt" (formula "24") (term "1,4,0"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "16"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "24")))
         (rule "closeTrue" (formula "20"))
      )
      (branch "Case 2"
         (rule "hide_left" (formula "19") (userinteraction))
         (rule "translateJavaSubInt" (formula "16") (term "0"))
         (rule "translateJavaCastInt" (formula "16") (term "1"))
         (rule "translateJavaAddInt" (formula "18") (term "3,0"))
         (rule "translateJavaAddInt" (formula "18") (term "4,0"))
         (rule "translateJavaAddInt" (formula "23") (term "3,0"))
         (rule "translateJavaAddInt" (formula "23") (term "4,0"))
         (rule "translateJavaDivInt" (formula "1") (term "1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0"))
         (rule "translateJavaMulInt" (formula "18") (term "1,3,0"))
         (rule "translateJavaMulInt" (formula "18") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "23") (term "0,3,0"))
         (rule "translateJavaMulInt" (formula "23") (term "1,3,0"))
         (rule "translateJavaAddInt" (formula "23") (term "0,4,0"))
         (rule "translateJavaMulInt" (formula "23") (term "1,4,0"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,0,1,1"))
         (rule "translateJavaAddInt" (formula "18") (term "0,1,4,0"))
         (rule "translateJavaAddInt" (formula "23") (term "0,1,4,0"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "eqSymm" (formula "22"))
         (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "0,1"))
         (rule "polySimp_elimSub" (formula "22") (term "1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,4,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "25") (term "0"))
         (rule "polySimp_addComm1" (formula "29") (term "3,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0"))
         (rule "polySimp_addComm0" (formula "5") (term "1,1"))
         (rule "polySimp_addComm0" (formula "22") (term "1"))
         (rule "polySimp_addComm1" (formula "24") (term "1,1,4,0"))
         (rule "polySimp_addComm0" (formula "29") (term "1,1,4,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "24") (term "0,1,1,4,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "0,1,3,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,4,0"))
         (rule "mul_literals" (formula "29") (term "0,1,4,0"))
         (rule "polySimp_addComm1" (formula "29") (term "4,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,4,0"))
         (rule "polySimp_rightDist" (formula "24") (term "0,1,4,0"))
         (rule "mul_literals" (formula "24") (term "0,0,1,4,0"))
         (rule "inEqSimp_ltToLeq" (formula "10"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "castedGetAny" (formula "22") (term "0"))
         (rule "polySimp_addAssoc" (formula "25") (term "1"))
         (rule "polySimp_homoEq" (formula "25"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "3,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0,1"))
         (rule "add_literals" (formula "2") (term "1,0,0,0,1"))
         (rule "times_zero_1" (formula "2") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "2") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "29") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "4,0"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "inEqSimp_commuteLeq" (formula "21"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "polySimp_addAssoc" (formula "25") (term "0"))
         (rule "polySimp_addComm1" (formula "25") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,4,0"))
         (rule "polySimp_addComm0" (formula "24") (term "0,0,4,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0"))
         (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "25") (term "0,0,0"))
         (rule "add_literals" (formula "25") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "25") (term "0,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "applyEq" (formula "2") (term "0,1,0,0,1,0") (ifseqformula "9"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,1,0"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_commuteGeq" (formula "4"))
         (rule "applyEq" (formula "29") (term "1,4,0") (ifseqformula "9"))
         (rule "applyEq" (formula "25") (term "0,1,0") (ifseqformula "9"))
         (rule "polySimp_addComm0" (formula "25") (term "0"))
         (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "9"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "polySimp_sepPosMonomial" (formula "25"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1"))
         (rule "polySimp_elimOne" (formula "25") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "polySimp_elimOne" (formula "10") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
         (rule "times_zero_1" (formula "3") (term "0,0"))
         (rule "add_zero_left" (formula "3") (term "0"))
         (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
         (rule "translateJavaAddInt" (formula "10") (term "0,2,0"))
         (rule "translateJavaMulInt" (formula "10") (term "0,0,2,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0,2,0"))
         (rule "Definition_axiom_for_isAtInitialState_in_de_wiesler_BucketPointers" (formula "24") (term "0") (inst "b=b"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
         (rule "translateJavaMulInt" (formula "9") (term "1,0,1,0,0,0,0"))
         (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
         (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
         (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "9") (term "0,1,1,0,0,0,0"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "polySimp_mulComm0" (formula "9") (term "1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0"))
         (rule "polySimp_addComm0" (formula "15") (term "1"))
         (rule "castedGetAny" (formula "16") (term "0"))
         (rule "castedGetAny" (formula "13") (term "0"))
         (rule "castedGetAny" (formula "12") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "32"))
         (rule "inEqSimp_commuteGeq" (formula "12"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "32"))
         (rule "inEqSimp_homoInEq0" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "polySimp_elimOne" (formula "13") (term "0"))
         (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
         (rule "leq_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "12"))
         (rule "times_zero_1" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1"))
         (rule "polySimp_elimOne" (formula "11") (term "1"))
         (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "10"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "greater_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "times_zero_1" (formula "9") (term "0,0"))
         (rule "add_zero_left" (formula "9") (term "0"))
         (rule "inEqSimp_exactShadow2" (formula "23") (ifseqformula "11"))
         (rule "greater_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23"))
         (rule "polySimp_mulComm0" (formula "23") (term "1"))
         (rule "polySimp_rightDist" (formula "23") (term "1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
         (rule "mul_literals" (formula "23") (term "0,1"))
         (rule "nnf_imp2or" (formula "19") (term "0"))
         (rule "nnf_notAnd" (formula "19") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
         (rule "mul_literals" (formula "19") (term "1,0,0,0"))
         (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "36") (term "0") (inst "bucket=bucket"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "exLeft" (formula "36") (inst "sk=bucket_0"))
         (rule "andLeft" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "inEqSimp_ltToLeq" (formula "37"))
         (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "37") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "36"))
         (rule "inEqSimp_sepNegMonomial0" (formula "37"))
         (rule "polySimp_mulLiterals" (formula "37") (term "0"))
         (rule "polySimp_elimOne" (formula "37") (term "0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "44")))
         (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
         (rule "replace_known_left" (formula "4") (term "0,0,0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
         (rule "replace_known_left" (formula "4") (term "0,0,1,1,1") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "25"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_subsumption1" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "25"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,0,1,1,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,1,1,1,1"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,1,1,1,1"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,1,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,1,0,1,1,1,1"))
         (rule "qeq_literals" (formula "4") (term "0,1,0,1,1,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
         (rule "translateJavaCastInt" (formula "5") (term "0,0"))
         (rule "castedGetAny" (formula "5") (term "0,0"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
         (rule "translateJavaCastInt" (formula "8") (term "0,0"))
         (rule "castedGetAny" (formula "8") (term "0,0"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "35"))
         (rule "inEqSimp_commuteGeq" (formula "8"))
         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
         (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1"))
         (rule "polySimp_elimOne" (formula "7") (term "1"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0"))
         (rule "translateJavaCastInt" (formula "6") (term "0,0"))
         (rule "castedGetAny" (formula "6") (term "0,0"))
         (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
         (rule "mul_literals" (formula "5") (term "0,0"))
         (rule "add_zero_left" (formula "5") (term "0"))
         (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "46") (term "0"))
         (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "31")) (ifInst ""  (formula "44")))
         (rule "true_left" (formula "1"))
         (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "46") (term "0") (inst "bucket=bucket"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "46") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0"))
         (rule "nnf_ex2all" (formula "46"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaMod" (formula "11") (term "0"))
         (rule "jmod_axiom" (formula "11") (term "0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "newSym_eq" (formula "11") (inst "l=l_0") (inst "newSymDef=mul(de_wiesler_BucketPointersnextWriteOf_0, Z(0(#)))"))
         (rule "times_zero_1" (formula "11") (term "1,1"))
         (rule "add_zero_right" (formula "11") (term "1"))
         (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "11"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "8") (term "1") (ifseqformula "12"))
         (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "1") (ifseqformula "12"))
         (rule "applyEq" (formula "1") (term "1,3,0,1,0,0") (ifseqformula "12"))
         (rule "polySimp_addComm1" (formula "1") (term "3,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,3,0,1,0,0"))
         (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "42") (term "0,0,1,4,0") (ifseqformula "12"))
         (rule "applyEq" (formula "1") (term "1,4,0,1,0,0") (ifseqformula "12"))
         (rule "polySimp_addComm1" (formula "1") (term "4,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,4,0,1,0,0"))
         (rule "applyEq" (formula "42") (term "0,0,1,3,0") (ifseqformula "12"))
         (rule "applyEqRigid" (formula "44") (term "0,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "7") (term "1") (ifseqformula "12"))
         (rule "applyEqRigid" (formula "25") (term "1,1") (ifseqformula "12"))
         (rule "applyEqRigid" (formula "3") (term "0,0,0,0") (ifseqformula "12"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "applyEqRigid" (formula "44") (term "1") (ifseqformula "12"))
         (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "12"))
         (rule "elimGcdEq" (formula "44") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(mul(l_0, Z(6(5(2(#))))), Z(6(5(2(#)))))") (inst "elimGcd=Z(6(5(2(#))))"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "mul_literals" (formula "44") (term "0,1,0,1,0"))
         (rule "mul_literals" (formula "44") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "44") (term "1,0,0"))
         (rule "mul_literals" (formula "44") (term "0,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,0"))
         (rule "polySimp_pullOutFactor0" (formula "44") (term "0,1,0"))
         (rule "add_literals" (formula "44") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "44") (term "0,1,0"))
         (rule "qeq_literals" (formula "44") (term "1,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "44") (term "0,0"))
         (rule "add_literals" (formula "44") (term "1,0,0"))
         (rule "times_zero_1" (formula "44") (term "0,0"))
         (rule "leq_literals" (formula "44") (term "0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "44") (term "0,0"))
         (rule "add_literals" (formula "44") (term "1,0,0"))
         (rule "times_zero_1" (formula "44") (term "0,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polyDiv_pullOut" (formula "42") (term "0,1,3,0") (inst "polyDivCoeff=l_0"))
         (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,2,0,1,3,0"))
         (rule "equal_literals" (formula "42") (term "0,0,1,3,0"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "polySimp_pullOutFactor0" (formula "42") (term "0,0,0,1,3,0"))
         (rule "add_literals" (formula "42") (term "1,0,0,0,1,3,0"))
         (rule "times_zero_1" (formula "42") (term "0,0,0,1,3,0"))
         (rule "div_literals" (formula "42") (term "0,0,1,3,0"))
         (rule "add_zero_left" (formula "42") (term "0,1,3,0"))
         (rule "polySimp_addComm1" (formula "42") (term "3,0"))
         (rule "polySimp_addComm0" (formula "42") (term "0,3,0"))
         (rule "polyDiv_pullOut" (formula "44") (term "0") (inst "polyDivCoeff=l_0"))
         (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "44") (term "0,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "polySimp_homoEq" (formula "44"))
         (rule "polySimp_pullOutFactor0" (formula "44") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "44") (term "1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "44") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "44") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "44") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "44") (term "0"))
         (rule "add_literals" (formula "44") (term "1,0"))
         (rule "times_zero_1" (formula "44") (term "0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "closeTrue" (formula "44"))
      )
   )
)
)
}
