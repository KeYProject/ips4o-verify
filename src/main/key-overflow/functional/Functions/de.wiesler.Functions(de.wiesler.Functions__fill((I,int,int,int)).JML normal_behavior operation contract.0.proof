\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 06 11:55:32 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Wed Apr 06 11:55:32 CEST 2022
contract=de.wiesler.Functions[de.wiesler.Functions\\:\\:fill([I,int,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Functions[de.wiesler.Functions\\:\\:fill([I,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "801")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "8") (term "1,2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "elementOfArrayRange" (formula "8") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_fill,savedHeapBefore_fill,_beginBefore_fill,_endBefore_fill,_valueBefore_fill,_valuesBefore_fill"))
 (builtin "One Step Simplification" (formula "8"))
(rule "for_to_while" (formula "8") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "loopScopeInvDia" (formula "8") (term "1") (newnames "i_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
   (rule "andRight" (formula "8"))
   (branch "Case 1"
      (rule "andRight" (formula "8"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_leqRight" (formula "8"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_leqRight" (formula "8"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
         (rule "andLeft" (formula "6"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "times_zero_1" (formula "6") (term "1,0"))
         (rule "add_zero_right" (formula "6") (term "0"))
         (rule "leq_literals" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "8"))
      (rule "allRight" (formula "8") (inst "sk=j_0"))
      (rule "impRight" (formula "8"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,1,0,1,0,1,0,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,2,0,0,0,0,1,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,1,0,0,1,0,1,0"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "2,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "12") (term "1,2,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "12") (term "1,2,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "3") (term "2,1,0,0,1,0"))
   (rule "mul_literals" (formula "3") (term "1,2,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "2,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "3") (term "2,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
   (rule "elementOfArrayRange" (formula "12") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
   (rule "commute_and" (formula "3") (term "0,0"))
   (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
   (rule "less_than_comparison_simple" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "assignment_to_primitive_array_component" (formula "13"))
      (branch "Normal Execution (_values != null)"
          (builtin "One Step Simplification" (formula "13"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "postincrement" (formula "13") (term "1"))
         (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_2"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
         (rule "remove_parentheses_right" (formula "13") (term "1"))
         (rule "assignmentAdditionInt" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "lsContinue" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "eqSymm" (formula "13") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,1"))
         (rule "precOfInt" (formula "13") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,1"))
         (rule "add_literals" (formula "13") (term "1,1,0,1,1"))
         (rule "times_zero_1" (formula "13") (term "1,0,1,1"))
         (rule "add_zero_right" (formula "13") (term "0,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,1"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor2" (formula "13") (term "0,1,1"))
         (rule "add_literals" (formula "13") (term "1,0,1,1"))
         (rule "times_zero_1" (formula "13") (term "0,1,1"))
         (rule "leq_literals" (formula "13") (term "1,1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
         (rule "times_zero_2" (formula "13") (term "1,0,1"))
         (rule "add_zero_right" (formula "13") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0"))
         (rule "replace_known_left" (formula "13") (term "1,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1"))
         (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "qeq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "nnf_imp2or" (formula "4") (term "0"))
         (rule "nnf_imp2or" (formula "12") (term "0,0"))
         (rule "nnf_notAnd" (formula "4") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
         (rule "commute_or" (formula "4") (term "0,0"))
         (rule "andRight" (formula "12"))
         (branch "Case 1"
            (rule "allRight" (formula "12") (inst "sk=j_0"))
            (rule "orRight" (formula "12"))
            (rule "orRight" (formula "12"))
            (rule "inEqSimp_geqRight" (formula "13"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "13"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "1") (term "0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "11")))
            (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1"))
            (rule "polySimp_elimOne" (formula "3") (term "1"))
            (rule "arrayLengthIsAShort" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "arrayLengthNotNegative" (formula "14") (term "0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "j_0 <= -1 + end TRUE"
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch "j_0 = i_0 TRUE"
                  (rule "close" (formula "18") (ifseqformula "3"))
               )
               (branch "j_0 = i_0 FALSE"
                  (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "17"))
                  (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "15"))
                  (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "3"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "false_right" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "qeq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "qeq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "allLeft" (formula "7") (inst "t=j_0"))
                  (rule "replaceKnownSelect_taclet0001_1" (formula "7") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00001_2" (formula "7") (term "0,1"))
                  (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0"))
                  (rule "leq_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "5"))
                  (rule "andLeft" (formula "7"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "leq_literals" (formula "7"))
                  (rule "closeFalse" (formula "7"))
               )
            )
            (branch "j_0 <= -1 + end FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_leqRight" (formula "15"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
               (rule "andLeft" (formula "6"))
               (rule "inEqSimp_homoInEq1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
               (rule "add_literals" (formula "6") (term "1,1,0"))
               (rule "times_zero_1" (formula "6") (term "1,0"))
               (rule "add_zero_right" (formula "6") (term "0"))
               (rule "leq_literals" (formula "6"))
               (rule "closeFalse" (formula "6"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "12") (inst "sk=f_0"))
            (rule "allRight" (formula "12") (inst "sk=o_0"))
            (rule "orRight" (formula "12"))
            (rule "orRight" (formula "12"))
            (rule "eqSymm" (formula "12") (term "0,0,0,1"))
            (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "arrayLengthIsAShort" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "arrayLengthNotNegative" (formula "11") (term "0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "f_0 = arr(i_0) & o_0 = values TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "applyEq" (formula "16") (term "1,0,0,1") (ifseqformula "2"))
               (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "1"))
               (rule "narrowSelectArrayType" (formula "16") (term "0") (ifseqformula "8") (ifseqformula "14"))
               (rule "nnf_ex2all" (formula "15"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "f_0 = arr(i_0) & o_0 = values FALSE"
               (rule "close" (formula "17") (ifseqformula "1"))
            )
         )
      )
      (branch "Null Reference (_values = null)"
         (rule "false_right" (formula "14"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (_values != null, but i Out of Bounds!)"
         (rule "false_right" (formula "14"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0"))
         (rule "qeq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
         (rule "commute_or" (formula "1"))
         (rule "commute_or" (formula "5") (term "0,0"))
         (rule "arrayLengthNotNegative" (formula "11") (term "0"))
         (rule "arrayLengthIsAShort" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "cut_direct" (formula "1") (term "1"))
         (branch "CUT: values.length <= i_0 TRUE"
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
            (rule "times_zero_1" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1"))
            (rule "polySimp_elimOne" (formula "13") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "2"))
            (rule "andLeft" (formula "13"))
            (rule "inEqSimp_homoInEq1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "1,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0"))
            (rule "add_zero_right" (formula "13") (term "0"))
            (rule "leq_literals" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
         (branch "CUT: values.length <= i_0 FALSE"
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "13"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "12"))
            (rule "qeq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elim_double_block_2" (formula "13") (term "1"))
      (rule "blockBreak" (formula "13") (term "1"))
      (rule "lsBreak" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "tryEmpty" (formula "13") (term "1"))
      (rule "emptyModality" (formula "13") (term "1"))
      (rule "andRight" (formula "13"))
      (branch "Case 1"
         (rule "impRight" (formula "13"))
         (rule "andRight" (formula "14"))
         (branch "Case 1"
            (rule "andRight" (formula "14"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "1"))
               (rule "allRight" (formula "13") (inst "sk=i_1"))
               (rule "impRight" (formula "13"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_ltRight" (formula "13"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "10")))
               (rule "eqSymm" (formula "16"))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "15"))
               (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "5"))
               (rule "applyEq" (formula "7") (term "1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (rule "times_zero_1" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "5"))
               (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,0"))
               (rule "times_zero_1" (formula "5") (term "0"))
               (rule "qeq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "qeq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "nnf_imp2or" (formula "5") (term "0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
               (rule "commute_or" (formula "5") (term "0,0"))
               (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "arrayLengthNotNegative" (formula "11") (term "0"))
               (rule "allLeft" (formula "5") (inst "t=i_1"))
               (rule "replaceKnownSelect_taclet00011_0" (formula "5") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00011_1" (formula "5") (term "0,1"))
               (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_contradInEq0" (formula "5") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "5") (term "0,0,1"))
               (rule "leq_literals" (formula "5") (term "0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "3"))
               (rule "andLeft" (formula "5"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,1,0"))
               (rule "times_zero_1" (formula "5") (term "1,0"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "1"))
            (rule "allRight" (formula "13") (inst "sk=f_0"))
            (rule "allRight" (formula "13") (inst "sk=o_0"))
            (rule "orRight" (formula "13"))
            (rule "orRight" (formula "13"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "13") (term "0,0,0,1"))
            (rule "inEqSimp_ltRight" (formula "11"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
            (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,0"))
            (rule "times_zero_1" (formula "3") (term "0"))
            (rule "qeq_literals" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "applyEq" (formula "3") (term "1,1,0,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "eqSymm" (formula "14"))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Case 2"
         (rule "impRight" (formula "13"))
         (rule "andRight" (formula "14"))
         (branch "Case 1"
            (rule "andRight" (formula "14"))
            (branch "Case 1"
               (rule "andRight" (formula "14"))
               (branch "Case 1"
                  (rule "andRight" (formula "14"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
)
}
