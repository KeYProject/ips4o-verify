\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 12 00:41:05 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Tue Apr 12 00:41:05 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasCountLemma([I,int,int)].JML model_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:initialReadAreasCountLemma([I,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "76956")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre_0,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
(rule "auto_int_induction_geqZero" (formula "15") (inst "sk=iv_0") (userinteraction))
(branch "Base Case"
   (rule "impRight" (formula "15") (userinteraction))
   (rule "true_left" (formula "6"))
   (rule "andLeft" (formula "1"))
   (rule "allRight" (formula "16") (inst "sk=element_0") (userinteraction))
   (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "16") (term "0") (inst "i=i") (userinteraction))
   (rule "bsum_empty" (formula "16") (term "0") (userinteraction))
   (branch "Precondition"
      (rule "bsum_lower_equals_upper" (formula "17") (term "0,1"))
      (rule "translateJavaAddInt" (formula "17") (term "1,0"))
      (rule "translateJavaSubInt" (formula "11") (term "0"))
      (rule "translateJavaAddInt" (formula "16") (term "0"))
      (rule "translateJavaCastInt" (formula "11") (term "1"))
      (rule "translateJavaCastInt" (formula "17") (term "1"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "eqSymm" (formula "10"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "polySimp_elimSub" (formula "10") (term "1"))
      (rule "polySimp_addComm0" (formula "10") (term "1"))
      (rule "castedGetAny" (formula "10") (term "0"))
      (rule "inEqSimp_leqRight" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "13") (inst "b=b"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaMulInt" (formula "13") (term "1,0,1,0,0,0,0"))
      (rule "translateJavaCastInt" (formula "13") (term "0,1,0,1,0,0,0"))
      (rule "translateJavaCastInt" (formula "13") (term "0,0,1,0"))
      (rule "translateJavaCastInt" (formula "13") (term "1,1,0,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "13") (term "0,1,1,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "13") (term "1,1,0,0"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "polySimp_mulComm0" (formula "14") (term "0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1"))
      (rule "polySimp_addComm0" (formula "19") (term "1"))
      (rule "castedGetAny" (formula "20") (term "0"))
      (rule "castedGetAny" (formula "17") (term "0"))
      (rule "castedGetAny" (formula "16") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "11"))
      (rule "inEqSimp_commuteGeq" (formula "16"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "11"))
      (rule "inEqSimp_homoInEq0" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "17"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0"))
      (rule "polySimp_elimOne" (formula "17") (term "0"))
      (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "2"))
      (rule "times_zero_1" (formula "13") (term "1,1,0"))
      (rule "greater_literals" (formula "13") (term "0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "leq_literals" (formula "13") (term "0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "inEqSimp_exactShadow2" (formula "2") (ifseqformula "13"))
      (rule "greater_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "times_zero_1" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
      (rule "times_zero_1" (formula "15") (term "0,0"))
      (rule "add_zero_left" (formula "15") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1"))
      (rule "polySimp_elimOne" (formula "15") (term "1"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
      (rule "Definition_axiom_for_isAtInitialState_in_de_wiesler_BucketPointers" (formula "13") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "26") (term "1,1,1,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "1") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "add_zero_left" (formula "1") (term "1,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "27") (term "1,1,1,0"))
      (rule "translateJavaCastInt" (formula "27") (term "0,1,1,1,0"))
      (rule "castedGetAny" (formula "27") (term "0,1,1,1,0"))
      (rule "applyEq" (formula "27") (term "0,1,1,1,0") (ifseqformula "21"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "27") (term "1,1,0,1,1,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
      (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
      (rule "leq_literals" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "add_zero_left" (formula "1") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "1") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "27") (term "1,1,0,1,1,0"))
      (rule "translateJavaCastInt" (formula "27") (term "0,1,1,0,1,1,0"))
      (rule "castedGetAny" (formula "27") (term "0,1,1,0,1,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "0,0,1,1,0"))
      (rule "applyEq" (formula "27") (term "0,1,0,0,1,1,0") (ifseqformula "21"))
      (rule "polySimp_addComm1" (formula "27") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,0"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1,0,0"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")))
      (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
      (rule "leq_literals" (formula "2") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "sub_literals" (formula "2") (term "1,0,1,1,1,1,1"))
      (rule "add_zero_left" (formula "2") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "2") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "2") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
      (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,0"))
      (rule "translateJavaCastInt" (formula "2") (term "0,1,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,0"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "21"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1,0,0"))
      (rule "translateJavaCastInt" (formula "2") (term "0,1,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
      (rule "applyEq" (formula "2") (term "0,1,0,0,0") (ifseqformula "21"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
      (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "22") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "translateJavaCastInt" (formula "22") (term "0,1,0,1,0"))
      (rule "translateJavaCastInt" (formula "22") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "22") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "22") (term "1,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
      (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "20"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,0"))
      (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "translateJavaMod" (formula "19") (term "0"))
      (rule "jmod_axiom" (formula "19") (term "0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "19"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0"))
      (rule "newSym_eq" (formula "19") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
      (rule "times_zero_1" (formula "19") (term "1,1"))
      (rule "add_zero_right" (formula "19") (term "1"))
      (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
      (rule "eqSymm" (formula "20"))
      (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "20"))
      (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "20"))
      (rule "applyEq" (formula "28") (term "2,1,1,0") (ifseqformula "20"))
      (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq0" (formula "17"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
      (rule "polySimp_addComm1" (formula "17") (term "0"))
      (rule "polySimp_addComm0" (formula "17") (term "0,0"))
      (rule "applyEq" (formula "28") (term "0,0,1,1,0") (ifseqformula "20"))
      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "28") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1"))
      (rule "polySimp_rightDist" (formula "17") (term "1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,1,1,0"))
      (rule "mul_literals" (formula "28") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,0"))
      (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
      (rule "leq_literals" (formula "16") (term "0,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
      (rule "add_literals" (formula "16") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
      (rule "polySimp_rightDist" (formula "17") (term "0,0"))
      (rule "polySimp_mulAssoc" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "17") (term "0"))
      (rule "add_literals" (formula "17") (term "1,1,0"))
      (rule "times_zero_1" (formula "17") (term "1,0"))
      (rule "add_zero_right" (formula "17") (term "0"))
      (rule "polySimp_addComm0" (formula "17") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "17"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0"))
      (rule "elimGcdLeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "leq_literals" (formula "17") (term "0,0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "neg_literal" (formula "17") (term "0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
      (rule "add_literals" (formula "17") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0"))
      (rule "qeq_literals" (formula "17") (term "0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
      (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "14") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaAddInt" (formula "14") (term "1,2,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,2,0,1,1,0"))
      (rule "applyEq" (formula "14") (term "3,0,1,1,0") (ifseqformula "21"))
      (rule "commute_or_2" (formula "25") (term "0"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0,1,0,1"))
      (rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,1"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,0,1"))
      (rule "applyEq" (formula "1") (term "0,0,1,0,1") (ifseqformula "13"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
      (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1"))
      (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
      (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "29") (term "1,1,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "2"))
      (rule "polySimp_elimSub" (formula "3") (term "0"))
      (rule "times_zero_2" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0,0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "32") (term "1,1,1,0"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "translateJavaAddInt" (formula "32") (term "0,0,1,1,1,0"))
      (rule "translateJavaUnaryMinusInt" (formula "32") (term "1,1,1,1,0"))
      (rule "translateJavaSubInt" (formula "32") (term "0,1,1,1,0"))
      (rule "neg_literal" (formula "32") (term "1,1,1,1,0"))
      (rule "add_zero_left" (formula "32") (term "0,0,1,1,1,0"))
      (rule "sub_literals" (formula "32") (term "0,1,1,1,0"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "1,0"))
       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
      (rule "translateJavaSubInt" (formula "5") (term "0,1"))
      (rule "leq_literals" (formula "5") (term "1,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "polySimp_elimSub" (formula "5") (term "0"))
      (rule "times_zero_2" (formula "5") (term "1,0"))
      (rule "add_zero_right" (formula "5") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "1,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,0"))
      (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,1,0"))
      (rule "translateJavaAddInt" (formula "5") (term "0,0,1,0"))
      (rule "neg_literal" (formula "5") (term "1,1,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,1,0"))
      (rule "sub_literals" (formula "5") (term "0,1,0"))
      (rule "seqGetAlphaCast" (formula "16") (term "0"))
      (rule "castedGetAny" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "15") (term "0"))
      (rule "arrayLengthIsAShort" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,0,1,1,0"))
      (rule "translateJavaCastInt" (formula "18") (term "0,0,0,1,1,0"))
      (rule "castedGetAny" (formula "18") (term "0,0,0,1,1,0"))
      (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "18") (term "1,0,1,1,0"))
      (rule "translateJavaMulInt" (formula "18") (term "0,2,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,2,1,0,1,1,0"))
      (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "18") (term "0,0,1,0"))
      (rule "translateJavaSubInt" (formula "18") (term "0,0,1,0"))
      (rule "polySimp_elimSub" (formula "18") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "18") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "2,0,1,1,0"))
      (rule "translateJavaCastInt" (formula "18") (term "0,2,0,1,1,0"))
      (rule "castedGetAny" (formula "18") (term "0,2,0,1,1,0"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,1,0,0,1"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "32")))
      (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
      (rule "less_literals" (formula "4") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "add_zero_left" (formula "4") (term "1,1,1,1,1,1"))
      (rule "leq_literals" (formula "4") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
      (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0,1,0,1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0,1,0,1"))
      (rule "translateJavaAddInt" (formula "5") (term "0,0,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "5") (term "0,0,1,0,1"))
      (rule "neg_literal" (formula "5") (term "1,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0,0,1,0,1"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,0,1"))
      (rule "polySimp_addLiterals" (formula "5") (term "0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0,1"))
      (rule "lenNonNegative" (formula "27") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "27"))
      (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27"))
      (rule "mul_literals" (formula "27") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "8"))
      (rule "leq_literals" (formula "27") (term "0"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "true_left" (formula "27"))
      (rule "arrayLengthNotNegative" (formula "20") (term "1"))
      (rule "arrayLengthIsAShort" (formula "20") (term "1"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "true_left" (formula "20"))
      (rule "seqGetAlphaCast" (formula "28") (term "0"))
      (rule "castedGetAny" (formula "28") (term "0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "translateJavaSubInt" (formula "1") (term "0,1"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_elimSub" (formula "1") (term "0"))
      (rule "times_zero_2" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaMod" (formula "1") (term "0"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "newSym_eq" (formula "1") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.Buffers::blockAligned(Z(0(#))), Z(0(#)))"))
      (rule "times_zero_1" (formula "1") (term "1,1"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "7") (term "0,0,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
      (rule "applyEqRigid" (formula "35") (term "0,0,1,1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "35") (term "0,0,1,1,0"))
      (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "35") (term "1,0,1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0"))
      (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
      (rule "leq_literals" (formula "3") (term "0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "leq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,0"))
      (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "4") (term "0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
      (rule "add_literals" (formula "4") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0"))
      (rule "qeq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "elimGcdGeq" (formula "35") (term "0,1,1,0") (inst "elimGcdRightDiv=add(Z(1(#)), l_1)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,0,0,0,0,1,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,1,1,0"))
      (rule "sub_literals" (formula "35") (term "0,0,0,0,0,0,0,0,1,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,1,1,0"))
      (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,1,1,0"))
      (rule "add_zero_right" (formula "35") (term "0,1,0,0,1,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0"))
      (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "35") (term "0,0,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,0,0,1,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "35") (term "0,1,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "1,1,0,1,0,0,1,1,0"))
      (rule "times_zero_1" (formula "35") (term "1,0,1,0,0,1,1,0"))
      (rule "add_zero_right" (formula "35") (term "0,1,0,0,1,1,0"))
      (rule "leq_literals" (formula "35") (term "1,0,0,1,1,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "0,0,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "0,0,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "35") (term "0,0,0,0,1,1,0"))
      (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,0,1,1,0"))
      (rule "add_literals" (formula "35") (term "1,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "35") (term "0,0,0,1,1,0"))
      (rule "qeq_literals" (formula "35") (term "0,0,1,1,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "elimGcdGeq" (formula "7") (term "0,0") (inst "elimGcdRightDiv=add(Z(1(#)), l_1)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "sub_literals" (formula "7") (term "0,0,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,0,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,1,0,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,1,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "0,0,1,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,1,0,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,1,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,1,0,0,0"))
      (rule "leq_literals" (formula "7") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,0,0"))
      (rule "add_literals" (formula "7") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
      (rule "leq_literals" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "applyEqRigid" (formula "1") (term "0,0,0") (ifseqformula "3"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "jdiv_axiom_inline" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "div_literals" (formula "1") (term "0"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEqRigid" (formula "33") (term "1,1,0,1,1,0") (ifseqformula "2"))
      (rule "add_zero_right" (formula "33") (term "1,0,1,1,0"))
      (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "2"))
      (rule "add_literals" (formula "5") (term "1,0,0"))
      (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "2"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "commute_or" (formula "29") (term "0,0"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0,0,1,1,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0,0,1,1,0"))
      (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "0,0,0,0,1,1,0"))
      (rule "neg_literal" (formula "18") (term "1,0,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "18") (term "0,0,0,1,1,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0,0,1,1,0"))
      (rule "commute_or" (formula "28") (term "0,0,1,0"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,0,0,1,1"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
      (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
      (rule "leq_literals" (formula "3") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "add_zero_left" (formula "3") (term "1,1,1,0,1,1,1"))
      (rule "sub_literals" (formula "3") (term "1,0,1,1,1,1,1"))
      (rule "less_literals" (formula "3") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "3") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0,1,1"))
      (rule "translateJavaCastInt" (formula "3") (term "0,0,0,0,1,1"))
      (rule "castedGetAny" (formula "3") (term "0,0,0,0,1,1"))
      (rule "applyEq" (formula "3") (term "0,0,0,0,1,1") (ifseqformula "27"))
      (rule "applyEq" (formula "3") (term "0,0,0,1,1") (ifseqformula "1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,0,0,1"))
      (rule "translateJavaCastInt" (formula "3") (term "0,0,1,0,0,1"))
      (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,1"))
      (rule "applyEq" (formula "3") (term "0,0,1,0,0,1") (ifseqformula "17"))
      (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,1,0,1"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
      (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "3") (term "1,1,0,0,0,1,1,1"))
      (rule "times_zero_1" (formula "3") (term "1,0,0,0,1,1,1"))
      (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1"))
      (rule "leq_literals" (formula "3") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
      (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0"))
      (rule "add_literals" (formula "3") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "3") (term "0,0,0"))
      (rule "qeq_literals" (formula "3") (term "0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "3") (term "1,0,1,0,1,1,1"))
      (rule "times_zero_1" (formula "3") (term "0,1,0,1,1,1"))
      (rule "qeq_literals" (formula "3") (term "1,0,1,1,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "3") (term "1,0,1,0,0,1"))
      (rule "times_zero_1" (formula "3") (term "0,1,0,0,1"))
      (rule "qeq_literals" (formula "3") (term "1,0,0,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,1,1,1,1"))
      (rule "translateJavaCastInt" (formula "4") (term "0,0,1,1,1,1"))
      (rule "castedGetAny" (formula "4") (term "0,0,1,1,1,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,1,1,1,1"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "33")))
      (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "4") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "add_zero_left" (formula "4") (term "1,1,1,1,1,1"))
      (rule "leq_literals" (formula "4") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
      (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "0,0,0,0,1"))
       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")))
      (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
      (rule "leq_literals" (formula "5") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "add_zero_left" (formula "5") (term "1,1,1,0,1,1,1"))
      (rule "sub_literals" (formula "5") (term "1,0,1,1,1,1,1"))
      (rule "less_literals" (formula "5") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "5") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
      (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,0,1"))
      (rule "translateJavaCastInt" (formula "5") (term "0,0,0,0,0,1"))
      (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,1"))
      (rule "applyEq" (formula "5") (term "0,0,0,0,0,1") (ifseqformula "29"))
      (rule "applyEq" (formula "5") (term "0,0,0,0,1") (ifseqformula "1"))
      (rule "qeq_literals" (formula "5") (term "0,0,0,1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "32")))
      (rule "translateJavaCastInt" (formula "6") (term "0,1,0,1,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "6") (term "1,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "translateJavaCastInt" (formula "6") (term "1,1,0,0,1,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "castedGetAny" (formula "6") (term "1,1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,0,1,0,0"))
      (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "0,0,0,0,1,0,0,0") (ifseqformula "27"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0") (ifseqformula "19"))
      (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "0,0,1,1,0,0,0") (ifseqformula "27"))
      (rule "applyEq" (formula "6") (term "0,1,0,1,0,0,0") (ifseqformula "19"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0") (ifseqformula "27"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,1,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_subsumption6" (formula "6") (term "0,1,0,0,0") (ifseqformula "22"))
      (rule "mul_literals" (formula "6") (term "1,1,0,0,1,0,0,0"))
      (rule "greater_literals" (formula "6") (term "0,0,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "leq_literals" (formula "6") (term "0,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_subsumption6" (formula "6") (term "0,0,0,0") (ifseqformula "9"))
      (rule "greater_literals" (formula "6") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "leq_literals" (formula "6") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "jdiv_axiom" (formula "26") (term "0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,0,2,1"))
      (rule "eqSymm" (formula "26"))
      (rule "applyEq" (formula "26") (term "1") (ifseqformula "27"))
      (rule "inEqSimp_subsumption6" (formula "26") (term "0,0") (ifseqformula "22"))
      (rule "times_zero_1" (formula "26") (term "1,1,0,0,0"))
      (rule "greater_literals" (formula "26") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "leq_literals" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "polyDiv_pullOut" (formula "26") (term "0") (inst "polyDivCoeff=l_0"))
      (rule "equal_literals" (formula "26") (term "0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_homoEq" (formula "26"))
      (rule "polySimp_pullOutFactor0" (formula "26") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "26") (term "1,0,0,0,1,0"))
      (rule "times_zero_1" (formula "26") (term "0,0,0,1,0"))
      (rule "div_literals" (formula "26") (term "0,0,1,0"))
      (rule "add_zero_left" (formula "26") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
      (rule "add_literals" (formula "26") (term "1,0"))
      (rule "times_zero_1" (formula "26") (term "0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "2"))
      (rule "polySimp_elimSub" (formula "3") (term "0"))
      (rule "times_zero_2" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0,0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "4"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "replace_known_left" (formula "6") (term "0,1,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "translateJavaSubInt" (formula "2") (term "0,0"))
      (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0"))
      (rule "translateJavaAddInt" (formula "2") (term "0,0,0"))
      (rule "neg_literal" (formula "2") (term "1,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,0"))
      (rule "sub_literals" (formula "2") (term "0,0"))
      (rule "applyEqRigid" (formula "8") (term "1,0") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "36") (term "1,1,1,0") (ifseqformula "2"))
      (rule "nnf_imp2or" (formula "7") (term "0,1,0"))
      (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "21") (term "0,0,1,0"))
      (rule "translateJavaAddInt" (formula "21") (term "0,2,0,0,1,0"))
      (rule "translateJavaMulInt" (formula "21") (term "0,0,2,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "0,0,2,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "21") (term "0,2,0,0,1,0"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "21") (term "2,0,1,1,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "translateJavaUnaryMinusInt" (formula "21") (term "1,2,0,1,1,0"))
      (rule "translateJavaSubInt" (formula "21") (term "0,2,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "21") (term "0,0,2,0,1,1,0"))
      (rule "neg_literal" (formula "21") (term "1,2,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "21") (term "0,2,0,1,1,0"))
      (rule "mul_literals" (formula "21") (term "1,0,2,0,1,1,0"))
      (rule "polySimp_addLiterals" (formula "21") (term "0,2,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1,1,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0,1,0"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,1,0,1"))
      (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,1"))
      (rule "castedGetAny" (formula "4") (term "0,0,1,0,1"))
      (rule "applyEq" (formula "4") (term "0,0,1,0,1") (ifseqformula "20"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0,0,0,1"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "35")))
      (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "4") (term "1,1,0,0,0,1,1,1"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,0,1,1,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1"))
      (rule "leq_literals" (formula "4") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0"))
      (rule "add_literals" (formula "4") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "4") (term "0,0,0"))
      (rule "qeq_literals" (formula "4") (term "0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "4") (term "1,0,1,0,0,1"))
      (rule "times_zero_1" (formula "4") (term "0,1,0,0,1"))
      (rule "qeq_literals" (formula "4") (term "1,0,0,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "4") (term "1,0,1,0,1,1,1"))
      (rule "times_zero_1" (formula "4") (term "0,1,0,1,1,1"))
      (rule "qeq_literals" (formula "4") (term "1,0,1,1,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "5") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")))
      (rule "translateJavaCastInt" (formula "5") (term "1,1,0,0,1,0,0,0,0"))
      (rule "translateJavaCastInt" (formula "5") (term "0,1,0,1,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "5") (term "1,0,0,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "5") (term "0,1,0,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "5") (term "1,1,0,0,0"))
      (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0"))
      (rule "replace_known_left" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "castedGetAny" (formula "5") (term "1,1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,0,1,0,0"))
      (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0,0,0"))
      (rule "applyEq" (formula "5") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "5") (term "0,0,0,0,1,0,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "5") (term "0,0,1,1,0,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "5") (term "0,1,0,1,0,0,0") (ifseqformula "21"))
      (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0,0") (ifseqformula "21"))
      (rule "inEqSimp_homoInEq1" (formula "5") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "11"))
      (rule "times_zero_1" (formula "5") (term "1,1,0,0,0,0,0"))
      (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "24"))
      (rule "times_zero_1" (formula "5") (term "1,1,0,0,0,0,0"))
      (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,1,0,1"))
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "36")))
      (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "6") (term "1,1,0,0,0,1,1,1"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,1"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1"))
      (rule "leq_literals" (formula "6") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "6") (term "1,0,1,0,1,1,1"))
      (rule "times_zero_1" (formula "6") (term "0,1,0,1,1,1"))
      (rule "qeq_literals" (formula "6") (term "1,0,1,1,1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0,0"))
      (rule "add_literals" (formula "6") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "6") (term "0,0,0"))
      (rule "qeq_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "6") (term "1,0,1,0,0,1"))
      (rule "times_zero_1" (formula "6") (term "0,1,0,0,1"))
      (rule "qeq_literals" (formula "6") (term "1,0,0,1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0,0,0,1,1"))
      (rule "translateJavaCastInt" (formula "6") (term "0,0,0,0,1,1"))
      (rule "castedGetAny" (formula "6") (term "0,0,0,0,1,1"))
      (rule "applyEq" (formula "6") (term "0,0,0,0,1,1") (ifseqformula "31"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "34")))
      (rule "translateJavaMulInt" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "translateJavaAddInt" (formula "6") (term "1,1,0,0,0"))
      (rule "translateJavaCastInt" (formula "6") (term "1,1,0,0,1,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,0"))
      (rule "translateJavaCastInt" (formula "6") (term "0,1,0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "castedGetAny" (formula "6") (term "1,1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,0,1,0,0"))
      (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "castedGetAny" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0") (ifseqformula "21"))
      (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "0,0,0,0,1,0,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "6") (term "0,1,0,1,0,0,0") (ifseqformula "21"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,1,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "0,0,1,1,0,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0") (ifseqformula "29"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,1,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,1,0,0,0"))
      (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_subsumption6" (formula "6") (term "0,1,0,0,0") (ifseqformula "24"))
      (rule "greater_literals" (formula "6") (term "0,0,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "leq_literals" (formula "6") (term "0,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_subsumption6" (formula "6") (term "0,0,0,0") (ifseqformula "11"))
      (rule "greater_literals" (formula "6") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "leq_literals" (formula "6") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0") (ifseqformula "12") (ifseqformula "13"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "nnf_imp2or" (formula "6") (term "0,1,0"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1,1,1,1,1"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "37")))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "9") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "add_zero_left" (formula "9") (term "1,1,1,1,1,1"))
      (rule "leq_literals" (formula "9") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "9") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
      (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "1,1,0,0,1"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "38")))
      (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
      (rule "less_literals" (formula "10") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "add_zero_left" (formula "10") (term "1,1,1,1,1,1"))
      (rule "leq_literals" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
      (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,0,0,1"))
      (rule "translateJavaCastInt" (formula "10") (term "0,1,1,0,0,1"))
      (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0,1"))
      (rule "applyEq" (formula "10") (term "0,0,1,0,0,1") (ifseqformula "33"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "38")))
      (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
      (rule "leq_literals" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "less_literals" (formula "10") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "sub_literals" (formula "10") (term "1,0,1,1,1,1,1"))
      (rule "add_literals" (formula "10") (term "1,1,1,0,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "1,1,1,1,1"))
      (rule "translateJavaCastInt" (formula "11") (term "0,1,1,1,1,1"))
      (rule "castedGetAny" (formula "11") (term "0,1,1,1,1,1"))
      (rule "inEqSimp_commuteGeq" (formula "11") (term "1,1,1,1"))
      (rule "applyEq" (formula "11") (term "0,0,1,1,1,1") (ifseqformula "34"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,1,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "0,0,0,0,1"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "39")))
      (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
      (rule "leq_literals" (formula "11") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "sub_literals" (formula "11") (term "1,0,1,1,1,1,1"))
      (rule "add_zero_left" (formula "11") (term "1,1,1,0,1,1,1"))
      (rule "less_literals" (formula "11") (term "0,0,1,1,1,1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,1"))
      (rule "add_zero_right" (formula "11") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
      (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "1,0,1,1"))
      (rule "translateJavaCastInt" (formula "11") (term "0,1,0,1,1"))
      (rule "eqSymm" (formula "11") (term "0,1,1"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,1,1"))
      (rule "applyEq" (formula "11") (term "0,0,0,1,1") (ifseqformula "34"))
      (rule "eqSymm" (formula "11") (term "0,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "0,0,0,0,1"))
      (rule "translateJavaCastInt" (formula "11") (term "0,0,0,0,0,1"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1"))
      (rule "applyEq" (formula "11") (term "0,0,0,0,0,1") (ifseqformula "34"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "11") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaMod" (formula "11") (term "0,0,0,0"))
      (rule "jmod_axiom" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,0,0") (ifseqformula "31"))
      (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0,0,0"))
      (rule "add_literals" (formula "11") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "11") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "all_pull_out3" (formula "35") (term "0"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "translateJavaMod" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0,1,1,1"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
      (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
      (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
      (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
      (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
      (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,1,1,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaSubInt" (formula "8") (term "0,0,1,1,1"))
      (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,1,1,1"))
      (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,1,1"))
      (rule "neg_literal" (formula "8") (term "1,0,1,1,1"))
      (rule "polySimp_elimSub" (formula "8") (term "0,0,1,1,1"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,1,1"))
      (rule "polySimp_addLiterals" (formula "8") (term "0,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "25") (term "1,0,1,0"))
      (rule "translateJavaCastInt" (formula "25") (term "0,1,0,1,0"))
      (rule "eqSymm" (formula "25") (term "0,1,0"))
      (rule "castedGetAny" (formula "25") (term "0,0,0,1,0"))
      (rule "eqSymm" (formula "25") (term "0,1,0"))
      (rule "Definition_axiom_for_readIsMaximal_in_de_wiesler_BucketPointers" (formula "25") (term "0,1,1,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "eqSymm" (formula "25") (term "1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
      (rule "nnf_imp2or" (formula "6") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
      (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "translateJavaMod" (formula "4") (term "0,0,1,1"))
      (rule "jmod_axiom" (formula "4") (term "0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1,1"))
      (rule "polySimp_sepNegMonomial" (formula "4") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1"))
      (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,0,1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,1"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
      (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,1,1"))
      (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
      (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,1"))
      (rule "mul_literals" (formula "5") (term "0,0,1,1,1,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
      (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,0"))
      (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "6"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "0,0,0,1,1"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "42")))
      (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,1,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,1,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1"))
      (rule "leq_literals" (formula "8") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "8") (term "1,0,1,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "0,1,0,0,1"))
      (rule "qeq_literals" (formula "8") (term "1,0,0,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "8") (term "0,0,0"))
      (rule "qeq_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "8") (term "1,0,1,0,1,1,1"))
      (rule "times_zero_1" (formula "8") (term "0,1,0,1,1,1"))
      (rule "qeq_literals" (formula "8") (term "1,0,1,1,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1"))
      (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1,1,1,1,1"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "43")))
      (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0,0,1,1,1"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,1,1"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,1,1"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1"))
      (rule "leq_literals" (formula "9") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0,0"))
      (rule "add_literals" (formula "9") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "9") (term "0,0,0"))
      (rule "qeq_literals" (formula "9") (term "0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "9") (term "1,0,1,0,1,1,1"))
      (rule "times_zero_1" (formula "9") (term "0,1,0,1,1,1"))
      (rule "qeq_literals" (formula "9") (term "1,0,1,1,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "9") (term "1,0,1,0,0,1"))
      (rule "times_zero_1" (formula "9") (term "0,1,0,0,1"))
      (rule "qeq_literals" (formula "9") (term "1,0,0,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1"))
      (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,0,0,1,1"))
      (rule "translateJavaCastInt" (formula "9") (term "0,0,0,0,1,1"))
      (rule "castedGetAny" (formula "9") (term "0,0,0,0,1,1"))
      (rule "applyEq" (formula "9") (term "0,0,0,0,1,1") (ifseqformula "28"))
      (rule "replace_known_left" (formula "9") (term "0,1,1") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "bsum_zero_right" (formula "44"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "equal_literals" (formula "44") (term "1,1,0"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "allRight" (formula "44") (inst "sk=i_0"))
      (rule "impRight" (formula "44"))
      (rule "notRight" (formula "45"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "ifthenelse_split" (formula "19") (term "0"))
      (branch "l_0 >= 1 TRUE"
         (rule "qeq_literals" (formula "20"))
         (rule "closeFalse" (formula "20"))
      )
      (branch "l_0 >= 1 FALSE"
         (rule "replace_known_right" (formula "48") (term "0,1,1,0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addComm0" (formula "48") (term "1,0"))
         (rule "inEqSimp_geqRight" (formula "44"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "0,1"))
         (rule "mul_literals" (formula "4") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
         (rule "inEqSimp_contradInEq3" (formula "20") (ifseqformula "1"))
         (rule "times_zero_1" (formula "20") (term "0,1,0"))
         (rule "greater_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "qeq_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "closeFalse" (formula "20"))
      )
   )
   (branch "Empty Sum"
      (rule "bsum_lower_equals_upper" (formula "16") (term "0,1"))
      (rule "translateJavaSubInt" (formula "11") (term "0"))
      (rule "translateJavaCastInt" (formula "11") (term "1"))
      (rule "translateJavaCastInt" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "closeTrue" (formula "16"))
   )
)
(branch "Step Case (positive)"
   (rule "true_left" (formula "5"))
   (rule "impRight" (formula "14"))
   (rule "impRight" (formula "15"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "impLeft" (formula "4") (userinteraction))
   (branch "Case 1"
      (rule "translateJavaSubInt" (formula "12") (term "0"))
      (rule "translateJavaCastInt" (formula "12") (term "1"))
      (rule "translateJavaAddInt" (formula "18") (term "3,0,0"))
      (rule "translateJavaCastInt" (formula "18") (term "1,0"))
      (rule "allRight" (formula "18") (inst "sk=element_0"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "18"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_elimSub" (formula "12") (term "1"))
      (rule "polySimp_addComm0" (formula "1") (term "1"))
      (rule "polySimp_addComm0" (formula "2") (term "0"))
      (rule "polySimp_addComm0" (formula "18") (term "1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,3,1"))
      (rule "polySimp_addComm0" (formula "18") (term "1,1,1,3,1"))
      (rule "polySimp_addComm0" (formula "12") (term "1"))
      (rule "castedGetAny" (formula "12") (term "0"))
      (rule "bsum_induction_upper_concrete" (formula "18") (term "0"))
      (rule "polySimp_homoEq" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,3,1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,3,1,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,1,3,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_leqRight" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0"))
      (rule "replace_known_left" (formula "18") (term "0,0,0,0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "times_zero_2" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "polySimp_elimOne" (formula "18") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,3,1,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,3,1,1"))
      (rule "polySimp_elimOne" (formula "18") (term "0,0,1,3,1,1"))
      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_literals" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "Case 2"
      (rule "allRight" (formula "18") (inst "sk=element_0") (userinteraction))
      (rule "allLeftHide" (formula "4") (inst "t=element_0") (userinteraction))
      (rule "translateJavaCastInt" (formula "4") (term "1") (userinteraction))
      (rule "translateJavaCastInt" (formula "18") (term "1") (userinteraction))
      (rule "bsum_induction_upper" (formula "18") (term "1") (userinteraction))
      (rule "ifthenelse_split" (formula "18") (term "1,1") (userinteraction))
      (branch "0 < iv_0 + 1 TRUE"
         (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "5") (term "0") (inst "i=i") (userinteraction))
         (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i") (userinteraction))
         (rule "pullOut" (formula "5") (term "1,0") (inst "sk=javaAddInt_0") (userinteraction))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "0,0,1,0") (userinteraction))
         (rule "impLeft" (formula "5") (userinteraction))
         (branch "Case 1"
            (rule "translateJavaSubInt" (formula "15") (term "0"))
            (rule "translateJavaAddInt" (formula "21") (term "1,0"))
            (rule "translateJavaCastInt" (formula "15") (term "1"))
            (rule "translateJavaAddInt" (formula "5") (term "0"))
            (rule "eqSymm" (formula "15"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")))
            (rule "polySimp_elimSub" (formula "21") (term "1,0,1"))
            (rule "mul_literals" (formula "21") (term "1,1,0,1"))
            (rule "polySimp_addLiterals" (formula "21") (term "1,0,1"))
            (rule "add_zero_right" (formula "21") (term "1,0,1"))
            (rule "polySimp_elimSub" (formula "21") (term "5,1,1"))
            (rule "mul_literals" (formula "21") (term "1,5,1,1"))
            (rule "polySimp_addLiterals" (formula "21") (term "5,1,1"))
            (rule "add_zero_right" (formula "21") (term "5,1,1"))
            (rule "polySimp_homoEq" (formula "5"))
            (rule "polySimp_elimSub" (formula "15") (term "1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "2") (term "1"))
            (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1"))
            (rule "polySimp_addComm0" (formula "15") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
            (rule "castedGetAny" (formula "15") (term "0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
            (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_geqRight" (formula "18"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_invertInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "times_zero_2" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "9"))
            (rule "Definition_axiom_for_isAtInitialState_in_de_wiesler_BucketPointers" (formula "22") (term "0") (inst "b=b") (userinteraction))
             (builtin "One Step Simplification" (formula "22") (userinteraction))
            (rule "allLeftHide" (formula "22") (inst "t=iv_0") (userinteraction))
            (rule "impLeft" (formula "22") (userinteraction))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaAddInt" (formula "26") (term "1,0"))
               (rule "translateJavaSubInt" (formula "21") (term "0"))
               (rule "translateJavaCastInt" (formula "21") (term "1"))
               (rule "translateJavaAddInt" (formula "9") (term "1,1,1"))
               (rule "translateJavaSubInt" (formula "10") (term "1,0,1"))
               (rule "translateJavaAddInt" (formula "11") (term "0"))
               (rule "eqSymm" (formula "21"))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "polySimp_elimSub" (formula "26") (term "5,1,1"))
               (rule "mul_literals" (formula "26") (term "1,5,1,1"))
               (rule "polySimp_addLiterals" (formula "26") (term "5,1,1"))
               (rule "add_zero_right" (formula "26") (term "5,1,1"))
               (rule "polySimp_elimSub" (formula "26") (term "1,0,1"))
               (rule "mul_literals" (formula "26") (term "1,1,0,1"))
               (rule "polySimp_addLiterals" (formula "26") (term "1,0,1"))
               (rule "add_zero_right" (formula "26") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "10") (term "1,0,1"))
               (rule "mul_literals" (formula "10") (term "1,1,0,1"))
               (rule "polySimp_homoEq" (formula "11"))
               (rule "polySimp_elimSub" (formula "21") (term "1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "1"))
               (rule "polySimp_addComm0" (formula "26") (term "1,0,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "26") (term "1,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,1"))
               (rule "polySimp_addComm0" (formula "26") (term "1"))
               (rule "polySimp_addComm0" (formula "10") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "21") (term "1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
               (rule "castedGetAny" (formula "21") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0"))
               (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "times_zero_2" (formula "3") (term "1,0"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "2"))
               (rule "times_zero_2" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_subsumption1" (formula "8") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
               (rule "qeq_literals" (formula "8") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_literals" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "Case 2"
               (rule "Definition_axiom_for_isAtInitialBucketState_in_de_wiesler_BucketPointers" (formula "22") (term "0") (userinteraction))
                (builtin "One Step Simplification" (formula "22") (userinteraction))
               (rule "andLeft" (formula "22"))
               (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "22") (term "0") (userinteraction))
               (rule "Definition_axiom_for_readIsMaximal_in_de_wiesler_BucketPointers" (formula "23") (term "0") (userinteraction))
                (builtin "One Step Simplification" (formula "23") (userinteraction))
               (rule "ifthenelse_split" (formula "27") (term "1,1,0") (userinteraction))
               (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0 + 1) < self.first_empty_position TRUE"
                  (rule "ifthenelse_split" (formula "12") (term "1,0") (userinteraction))
                  (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0) < self.first_empty_position TRUE"
                     (rule "bsum_split" (formula "29") (term "0") (inst "middle=javaAddInt_0") (userinteraction))
                     (rule "ifthenelse_split" (formula "29") (term "0") (userinteraction))
                     (branch " begin <= javaAddInt_0 & javaAddInt_0 <= javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, iv_0 + 1)) TRUE"
                        (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "30") (term "1,1") (userinteraction))
                        (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "30") (term "1,1") (inst "i=i") (userinteraction))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "translateJavaAddInt" (formula "30") (term "1,1,1"))
                        (rule "translateJavaSubInt" (formula "24") (term "0"))
                        (rule "translateJavaCastInt" (formula "24") (term "1"))
                        (rule "translateJavaSubInt" (formula "25") (term "0"))
                        (rule "translateJavaAddInt" (formula "30") (term "1,1,0"))
                        (rule "translateJavaAddInt" (formula "26") (term "1,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,1,1"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                        (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "0"))
                        (rule "translateJavaAddInt" (formula "26") (term "1,1,2,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "25"))
                        (rule "eqSymm" (formula "27"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "31") (term "1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "2,1,1,1,1"))
                        (rule "mul_literals" (formula "31") (term "1,2,1,1,1,1"))
                        (rule "polySimp_addLiterals" (formula "31") (term "2,1,1,1,1"))
                        (rule "add_zero_right" (formula "31") (term "2,1,1,1,1"))
                        (rule "polySimp_elimSub" (formula "26") (term "0"))
                        (rule "polySimp_elimSub" (formula "31") (term "2,1,0,1,1"))
                        (rule "mul_literals" (formula "31") (term "1,2,1,0,1,1"))
                        (rule "polySimp_addLiterals" (formula "31") (term "2,1,0,1,1"))
                        (rule "add_zero_right" (formula "31") (term "2,1,0,1,1"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_elimSub" (formula "25") (term "1"))
                        (rule "polySimp_homoEq" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "0"))
                        (rule "polySimp_addComm0" (formula "5") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "1,1,2,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "1"))
                        (rule "polySimp_addComm0" (formula "31") (term "1,1,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "castedGetAny" (formula "25") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,2,0"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "times_zero_2" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "16"))
                        (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,0,0"))
                        (rule "add_zero_left" (formula "31") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "26"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1"))
                        (rule "applyEq" (formula "31") (term "1,0,1,0") (ifseqformula "26"))
                        (rule "polySimp_sepNegMonomial" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "15"))
                        (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "15"))
                        (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "15"))
                        (rule "applyEq" (formula "9") (term "1") (ifseqformula "15"))
                        (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "15"))
                        (rule "applyEq" (formula "27") (term "1,0,0") (ifseqformula "15"))
                        (rule "applyEq" (formula "31") (term "1,0,1,0") (ifseqformula "15"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,1,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0,1,0"))
                        (rule "times_zero_1" (formula "31") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "31") (term "0,1,0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                        (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "15"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "applyEq" (formula "26") (term "1") (ifseqformula "15"))
                        (rule "polySimp_sepPosMonomial" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                        (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "4"))
                        (rule "times_zero_2" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "1,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "10") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "24") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_subsumption1" (formula "23") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "23") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "eqSymm" (formula "23"))
                        (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "closeTrue" (formula "27"))
                     )
                     (branch " begin <= javaAddInt_0 & javaAddInt_0 <= javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, iv_0 + 1)) FALSE"
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "translateJavaAddInt" (formula "29") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "10") (term "1,1,1"))
                        (rule "translateJavaSubInt" (formula "11") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "23") (term "0"))
                        (rule "translateJavaCastInt" (formula "23") (term "1"))
                        (rule "translateJavaAddInt" (formula "30") (term "1,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "0"))
                        (rule "translateJavaAddInt" (formula "13") (term "0"))
                        (rule "translateJavaAddInt" (formula "25") (term "1,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "25") (term "1,1,2,1"))
                        (rule "eqSymm" (formula "23"))
                        (rule "eqSymm" (formula "25"))
                        (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_elimSub" (formula "30") (term "1,0,1"))
                        (rule "mul_literals" (formula "30") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "1,0,1"))
                        (rule "add_zero_right" (formula "30") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "30") (term "5,1,1"))
                        (rule "mul_literals" (formula "30") (term "1,5,1,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "5,1,1"))
                        (rule "add_zero_right" (formula "30") (term "5,1,1"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,0,1"))
                        (rule "mul_literals" (formula "11") (term "1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "24") (term "0"))
                        (rule "polySimp_homoEq" (formula "13"))
                        (rule "polySimp_elimSub" (formula "23") (term "1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "1,1,1,1"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "1,1,2,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "1"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,2,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "times_zero_2" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1"))
                        (rule "polySimp_sepNegMonomial" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "13"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                        (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,1"))
                        (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_geqRight" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "11") (term "1,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
                        (rule "qeq_literals" (formula "11") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "25") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0) < self.first_empty_position FALSE"
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "translateJavaSubInt" (formula "22") (term "0"))
                     (rule "translateJavaAddInt" (formula "10") (term "1,1,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "1,0,1"))
                     (rule "translateJavaAddInt" (formula "24") (term "1,0,0,2,1"))
                     (rule "translateJavaCastInt" (formula "22") (term "1"))
                     (rule "translateJavaAddInt" (formula "24") (term "1,1,2,1"))
                     (rule "translateJavaAddInt" (formula "12") (term "0"))
                     (rule "translateJavaAddInt" (formula "29") (term "1,0"))
                     (rule "translateJavaSubInt" (formula "23") (term "0"))
                     (rule "eqSymm" (formula "22"))
                     (rule "eqSymm" (formula "24"))
                     (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_elimSub" (formula "29") (term "5,1,1"))
                     (rule "mul_literals" (formula "29") (term "1,5,1,1"))
                     (rule "polySimp_addLiterals" (formula "29") (term "5,1,1"))
                     (rule "add_zero_right" (formula "29") (term "5,1,1"))
                     (rule "polySimp_elimSub" (formula "29") (term "1,0,1"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,1"))
                     (rule "polySimp_addLiterals" (formula "29") (term "1,0,1"))
                     (rule "add_zero_right" (formula "29") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,0,1"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,1"))
                     (rule "polySimp_homoEq" (formula "12"))
                     (rule "polySimp_elimSub" (formula "23") (term "0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "29") (term "1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "1,1,2,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "29") (term "1"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "23") (term "0"))
                     (rule "polySimp_addComm0" (formula "22") (term "1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_ltRight" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "castedGetAny" (formula "23") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "add_zero_left" (formula "3") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_commuteLeq" (formula "20"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "inEqSimp_commuteLeq" (formula "21"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "0,2,0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "times_zero_2" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1"))
                     (rule "polySimp_sepNegMonomial" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "applyEq" (formula "25") (term "2,2,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "25") (term "0,0,2,0") (ifseqformula "13"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "0,2,0"))
                     (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                     (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_invertInEq0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "times_zero_2" (formula "3") (term "1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                     (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
                     (rule "andLeft" (formula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "1,1,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0"))
                     (rule "add_zero_right" (formula "9") (term "0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "1,1,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0"))
                     (rule "add_literals" (formula "9") (term "0"))
                     (rule "leq_literals" (formula "9"))
                     (rule "closeFalse" (formula "9"))
                  )
               )
               (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0 + 1) < self.first_empty_position FALSE"
                  (rule "ifthenelse_split" (formula "11") (term "1,0") (userinteraction))
                  (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0) < self.first_empty_position TRUE"
                     (rule "bsum_split" (formula "29") (term "0") (inst "middle=javaAddInt_0") (userinteraction))
                     (rule "ifthenelse_split" (formula "29") (term "0") (userinteraction))
                     (branch " begin <= javaAddInt_0 & javaAddInt_0 <= javaAddInt(begin, self.first_empty_position) TRUE"
                        (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "30") (term "1,1") (userinteraction))
                        (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "30") (term "1,1") (inst "i=i") (userinteraction))
                        (rule "eqTermCut" (formula "30") (term "1,1") (inst "s=bsum{int i;}(javaAddInt_0,
             javaAddInt(begin,
                        int::final(self,
                                   de.wiesler.BucketPointers::$first_empty_position)),
             \\if (  int::select(heap, values, arr(i))
                  = element_0)
                 \\then (Z(1(#)))
                 \\else (Z(0(#))))") (userinteraction))
                        (branch "Assume bsum{int i;}(javaAddInt(begin, self.nextWriteOf(iv_0 + 1 - 1)), javaAddInt(begin, self.lastReadOf(iv_0 + 1 - 1)), if (values[i] = element_0) then (1) else (0)) = bsum{int i;}(javaAddInt_0, javaAddInt(begin, self.first_empty_position), if (values[i] = element_0) then (1) else (0))"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "translateJavaSubInt" (formula "24") (term "0"))
                           (rule "translateJavaCastInt" (formula "24") (term "1"))
                           (rule "translateJavaSubInt" (formula "25") (term "0"))
                           (rule "translateJavaAddInt" (formula "31") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "26") (term "1,0,0,2,1"))
                           (rule "translateJavaAddInt" (formula "26") (term "1,1,2,1"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "31") (term "0,1,1"))
                           (rule "translateJavaAddInt" (formula "31") (term "1,1,1"))
                           (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "1,1"))
                           (rule "translateJavaAddInt" (formula "2") (term "1,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                           (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0"))
                           (rule "andLeft" (formula "2"))
                           (rule "eqSymm" (formula "25"))
                           (rule "eqSymm" (formula "27"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,0,1"))
                           (rule "mul_literals" (formula "32") (term "1,1,0,1"))
                           (rule "polySimp_addLiterals" (formula "32") (term "1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "26") (term "0"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,2,1,0,0"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "2,1,0,0"))
                           (rule "polySimp_elimSub" (formula "32") (term "2,1,0,1,1"))
                           (rule "mul_literals" (formula "32") (term "1,2,1,0,1,1"))
                           (rule "polySimp_addLiterals" (formula "32") (term "2,1,0,1,1"))
                           (rule "add_zero_right" (formula "32") (term "2,1,0,1,1"))
                           (rule "polySimp_elimSub" (formula "32") (term "2,1,1,1,1"))
                           (rule "mul_literals" (formula "32") (term "1,2,1,1,1,1"))
                           (rule "polySimp_addLiterals" (formula "32") (term "2,1,1,1,1"))
                           (rule "add_zero_right" (formula "32") (term "2,1,1,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "2,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,2,1,1,0"))
                           (rule "polySimp_addLiterals" (formula "1") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "1") (term "2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                           (rule "polySimp_homoEq" (formula "15"))
                           (rule "polySimp_elimSub" (formula "25") (term "1"))
                           (rule "polySimp_homoEq" (formula "32"))
                           (rule "polySimp_addComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "5") (term "1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,1,1"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,2,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0"))
                           (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "25") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0"))
                           (rule "castedGetAny" (formula "25") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                           (rule "inEqSimp_ltRight" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23"))
                           (rule "inEqSimp_commuteLeq" (formula "9"))
                           (rule "inEqSimp_commuteLeq" (formula "24"))
                           (rule "inEqSimp_commuteLeq" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "0,0"))
                           (rule "add_zero_left" (formula "5") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,2,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "times_zero_2" (formula "6") (term "1,0"))
                           (rule "add_zero_right" (formula "6") (term "0"))
                           (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "2"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0"))
                           (rule "add_zero_right" (formula "32") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "17"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,0"))
                           (rule "times_zero_1" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "closeTrue" (formula "32"))
                        )
                        (branch "Assume bsum{int i;}(javaAddInt(begin, self.nextWriteOf(iv_0 + 1 - 1)), javaAddInt(begin, self.lastReadOf(iv_0 + 1 - 1)), if (values[i] = element_0) then (1) else (0)) != bsum{int i;}(javaAddInt_0, javaAddInt(begin, self.first_empty_position), if (values[i] = element_0) then (1) else (0))"
                           (rule "notLeft" (formula "1") (userinteraction))
                           (rule "eqTermCut" (formula "27") (term "0,1") (inst "s=javaAddInt(begin,
           de.wiesler.BucketPointers::nextWriteOf(heap,
                                                  self,
                                                  sub(add(iv_0,
                                                          Z(1(#))),
                                                      Z(1(#)))))") (userinteraction))
                           (branch "Assume javaAddInt_0 = javaAddInt(begin, self.nextWriteOf(iv_0 + 1 - 1))"
                              (rule "eqTermCut" (formula "28") (term "1,1") (inst "s=javaAddInt(begin,
           de.wiesler.BucketPointers::lastReadOf(heap,
                                                 self,
                                                 sub(add(iv_0,
                                                         Z(1(#))),
                                                     Z(1(#)))))") (userinteraction))
                              (branch "Assume javaAddInt(begin, self.first_empty_position) = javaAddInt(begin, self.lastReadOf(iv_0 + 1 - 1))"
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "translateJavaAddInt" (formula "27") (term "1,0,0,2,1"))
                                 (rule "translateJavaAddInt" (formula "33") (term "1,1,0"))
                                 (rule "translateJavaAddInt" (formula "27") (term "1,1,2,1"))
                                 (rule "translateJavaSubInt" (formula "26") (term "0"))
                                 (rule "translateJavaSubInt" (formula "25") (term "0"))
                                 (rule "translateJavaCastInt" (formula "25") (term "1"))
                                 (rule "translateJavaAddInt" (formula "15") (term "0"))
                                 (rule "translateJavaAddInt" (formula "33") (term "0,1,1"))
                                 (rule "translateJavaAddInt" (formula "29") (term "0,0"))
                                 (rule "translateJavaAddInt" (formula "33") (term "1,1,1"))
                                 (rule "translateJavaSubInt" (formula "13") (term "1,0,1"))
                                 (rule "translateJavaAddInt" (formula "12") (term "1,1,1"))
                                 (rule "translateJavaAddInt" (formula "3") (term "1,1"))
                                 (rule "translateJavaAddInt" (formula "29") (term "1,0"))
                                 (rule "translateJavaAddInt" (formula "29") (term "1,1"))
                                 (rule "translateJavaAddInt" (formula "2") (term "1"))
                                 (rule "translateJavaAddInt" (formula "1") (term "0"))
                                 (rule "translateJavaAddInt" (formula "1") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "polySimp_elimSub" (formula "34") (term "1,0,1"))
                                 (rule "mul_literals" (formula "34") (term "1,1,0,1"))
                                 (rule "polySimp_addLiterals" (formula "34") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "34") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "0"))
                                 (rule "polySimp_homoEq" (formula "16"))
                                 (rule "polySimp_elimSub" (formula "34") (term "2,1,0,1,1"))
                                 (rule "mul_literals" (formula "34") (term "1,2,1,0,1,1"))
                                 (rule "polySimp_addLiterals" (formula "34") (term "2,1,0,1,1"))
                                 (rule "add_zero_right" (formula "34") (term "2,1,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "2,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,2,1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "30") (term "2,1,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "2,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "34") (term "2,1,1,1,1"))
                                 (rule "mul_literals" (formula "34") (term "1,2,1,1,1,1"))
                                 (rule "polySimp_addLiterals" (formula "34") (term "2,1,1,1,1"))
                                 (rule "add_zero_right" (formula "34") (term "2,1,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "14") (term "1,0,1"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "2,1,1,0"))
                                 (rule "mul_literals" (formula "30") (term "1,2,1,1,0"))
                                 (rule "polySimp_addLiterals" (formula "30") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "30") (term "2,1,1,0"))
                                 (rule "polySimp_homoEq" (formula "2"))
                                 (rule "polySimp_homoEq" (formula "1"))
                                 (rule "polySimp_elimSub" (formula "26") (term "1"))
                                 (rule "polySimp_homoEq" (formula "34"))
                                 (rule "polySimp_elimSub" (formula "2") (term "2,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "1,2,1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "2") (term "2,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "2,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,2,1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "2,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "1"))
                                 (rule "polySimp_addComm0" (formula "5") (term "1"))
                                 (rule "polySimp_addComm0" (formula "7") (term "0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "13") (term "1,1,1"))
                                 (rule "polySimp_addComm0" (formula "28") (term "1,0,0,2,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "1,1,2,0"))
                                 (rule "polySimp_addComm0" (formula "27") (term "0"))
                                 (rule "polySimp_addComm0" (formula "14") (term "1,0,1"))
                                 (rule "polySimp_addComm0" (formula "26") (term "1"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                 (rule "castedGetAny" (formula "26") (term "0"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "25"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "24"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                 (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_ltRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4"))
                                 (rule "inEqSimp_ltToLeq" (formula "6"))
                                 (rule "add_zero_right" (formula "6") (term "0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,2,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "7"))
                                 (rule "times_zero_2" (formula "7") (term "1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "34") (term "0,1,0,0,0") (ifseqformula "18"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,0,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "34") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1"))
                                 (rule "applyEq" (formula "34") (term "1,0,1,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "28"))
                                 (rule "polySimp_sepNegMonomial" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "34") (term "1,0,1,0") (ifseqformula "17"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0"))
                                 (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "17"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "16"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "30") (term "0,0,0"))
                                 (rule "add_literals" (formula "30") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "applyEq" (formula "10") (term "1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "16"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                                 (rule "applyEq" (formula "27") (term "1") (ifseqformula "16"))
                                 (rule "polySimp_sepNegMonomial" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "28") (term "2,2,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "33") (term "1,1,0,1,0") (ifseqformula "2"))
                                 (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                                 (rule "add_literals" (formula "33") (term "1,0"))
                                 (rule "times_zero_1" (formula "33") (term "0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                              (branch "Assume javaAddInt(begin, self.first_empty_position) != javaAddInt(begin, self.lastReadOf(iv_0 + 1 - 1))"
                                 (rule "notLeft" (formula "1") (userinteraction))
                                 (rule "ifthenelse_split" (formula "26") (term "1") (userinteraction))
                                 (branch " self.first_empty_position <= de.wiesler.BucketPointers::bucketStart(self, iv_0) TRUE"
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "translateJavaAddInt" (formula "2") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "30") (term "0,0"))
                                    (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                                    (rule "translateJavaAddInt" (formula "34") (term "1,1,1"))
                                    (rule "translateJavaAddInt" (formula "29") (term "0"))
                                    (rule "translateJavaAddInt" (formula "30") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "29") (term "1"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1"))
                                    (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                                    (rule "translateJavaAddInt" (formula "30") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "34") (term "1,1,0"))
                                    (rule "translateJavaAddInt" (formula "34") (term "0,1,1"))
                                    (rule "translateJavaSubInt" (formula "24") (term "0"))
                                    (rule "translateJavaCastInt" (formula "24") (term "1"))
                                    (rule "translateJavaAddInt" (formula "14") (term "0"))
                                    (rule "translateJavaSubInt" (formula "25") (term "0"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "polySimp_elimSub" (formula "35") (term "1,0,1"))
                                    (rule "mul_literals" (formula "35") (term "1,1,0,1"))
                                    (rule "polySimp_addLiterals" (formula "35") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "35") (term "1,0,1"))
                                    (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,2,1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "31") (term "2,1,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "2,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "2,1,1,1,1"))
                                    (rule "mul_literals" (formula "35") (term "1,2,1,1,1,1"))
                                    (rule "polySimp_addLiterals" (formula "35") (term "2,1,1,1,1"))
                                    (rule "add_zero_right" (formula "35") (term "2,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "30") (term "2,1,1"))
                                    (rule "mul_literals" (formula "30") (term "1,2,1,1"))
                                    (rule "polySimp_addLiterals" (formula "30") (term "2,1,1"))
                                    (rule "add_zero_right" (formula "30") (term "2,1,1"))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "31") (term "2,1,1,0"))
                                    (rule "mul_literals" (formula "31") (term "1,2,1,1,0"))
                                    (rule "polySimp_addLiterals" (formula "31") (term "2,1,1,0"))
                                    (rule "add_zero_right" (formula "31") (term "2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "2,1,0,1,1"))
                                    (rule "mul_literals" (formula "35") (term "1,2,1,0,1,1"))
                                    (rule "polySimp_addLiterals" (formula "35") (term "2,1,0,1,1"))
                                    (rule "add_zero_right" (formula "35") (term "2,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "15"))
                                    (rule "polySimp_elimSub" (formula "26") (term "0"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1"))
                                    (rule "polySimp_homoEq" (formula "30"))
                                    (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,2,1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "2,1,0,0"))
                                    (rule "polySimp_homoEq" (formula "35"))
                                    (rule "polySimp_addComm0" (formula "34") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "5") (term "1"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "1"))
                                    (rule "polySimp_addComm0" (formula "12") (term "1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                                    (rule "polySimp_addComm0" (formula "26") (term "0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0"))
                                    (rule "castedGetAny" (formula "25") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "9"))
                                    (rule "inEqSimp_commuteLeq" (formula "24"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_commuteLeq" (formula "23"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "30") (term "0,0,0"))
                                    (rule "add_literals" (formula "30") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "30") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_ltRight" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "0,0"))
                                    (rule "add_zero_left" (formula "5") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "4"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "35") (term "0,1,0,0,0") (ifseqformula "17"))
                                    (rule "polySimp_pullOutFactor1" (formula "35") (term "0,0,0"))
                                    (rule "add_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "27"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "27"))
                                    (rule "applyEq" (formula "35") (term "1,0,1,0") (ifseqformula "27"))
                                    (rule "bsum_lower_equals_upper" (formula "35") (term "1,0"))
                                    (rule "add_zero_right" (formula "35") (term "0"))
                                    (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "27"))
                                    (rule "bsum_lower_equals_upper" (formula "32") (term "0"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "polySimp_sepNegMonomial" (formula "16"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0"))
                                    (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "10") (term "1") (ifseqformula "16"))
                                    (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "28") (term "1") (ifseqformula "16"))
                                    (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "16"))
                                    (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "16"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "16"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0"))
                                    (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,0"))
                                    (rule "times_zero_1" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "26") (term "1") (ifseqformula "15"))
                                    (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "15"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                    (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "28") (term "1") (ifseqformula "15"))
                                    (rule "polySimp_invertEq" (formula "34"))
                                    (rule "times_zero_2" (formula "34") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "30"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                    (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_invertInEq0" (formula "4"))
                                    (rule "times_zero_2" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "12"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0"))
                                    (rule "leq_literals" (formula "28") (term "0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "false_right" (formula "28"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
                                    (rule "qeq_literals" (formula "11") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "24"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "inEqSimp_homoInEq1" (formula "11"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0"))
                                    (rule "add_zero_right" (formula "11") (term "0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "11") (term "0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0"))
                                    (rule "add_literals" (formula "11") (term "0"))
                                    (rule "leq_literals" (formula "11"))
                                    (rule "closeFalse" (formula "11"))
                                 )
                                 (branch " self.first_empty_position <= de.wiesler.BucketPointers::bucketStart(self, iv_0) FALSE"
                                    (rule "ifthenelse_split" (formula "26") (term "1") (userinteraction))
                                    (branch " de.wiesler.BucketPointers::bucketStart(self, javaAddInt(iv_0, 1)) <= self.first_empty_position TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "translateJavaAddInt" (formula "35") (term "1,1,1"))
                                       (rule "translateJavaAddInt" (formula "1") (term "1"))
                                       (rule "translateJavaSubInt" (formula "24") (term "0"))
                                       (rule "translateJavaAddInt" (formula "31") (term "0,0"))
                                       (rule "translateJavaAddInt" (formula "31") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "35") (term "1,1,0"))
                                       (rule "translateJavaCastInt" (formula "24") (term "1"))
                                       (rule "translateJavaAddInt" (formula "31") (term "1,1"))
                                       (rule "translateJavaAddInt" (formula "30") (term "0"))
                                       (rule "translateJavaAddInt" (formula "30") (term "1"))
                                       (rule "translateJavaSubInt" (formula "25") (term "0"))
                                       (rule "translateJavaAddInt" (formula "27") (term "1,1"))
                                       (rule "translateJavaAddInt" (formula "26") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "35") (term "0,1,1"))
                                       (rule "translateJavaAddInt" (formula "2") (term "1,1"))
                                       (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                                       (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "0"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,1,0,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "2,1,1,1,1"))
                                       (rule "mul_literals" (formula "36") (term "1,2,1,1,1,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "2,1,1,1,1"))
                                       (rule "add_zero_right" (formula "36") (term "2,1,1,1,1"))
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "polySimp_elimSub" (formula "32") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "32") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "2,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "32") (term "2,1,1,0"))
                                       (rule "mul_literals" (formula "32") (term "1,2,1,1,0"))
                                       (rule "polySimp_addLiterals" (formula "32") (term "2,1,1,0"))
                                       (rule "add_zero_right" (formula "32") (term "2,1,1,0"))
                                       (rule "polySimp_homoEq" (formula "31"))
                                       (rule "polySimp_elimSub" (formula "26") (term "0"))
                                       (rule "polySimp_elimSub" (formula "36") (term "2,1,0,1,1"))
                                       (rule "mul_literals" (formula "36") (term "1,2,1,0,1,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "2,1,0,1,1"))
                                       (rule "add_zero_right" (formula "36") (term "2,1,0,1,1"))
                                       (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                                       (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                                       (rule "polySimp_homoEq" (formula "15"))
                                       (rule "polySimp_elimSub" (formula "25") (term "1"))
                                       (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "2,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "31") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "2,1,0,0"))
                                       (rule "polySimp_homoEq" (formula "36"))
                                       (rule "polySimp_addComm0" (formula "35") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "28") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "27") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "12") (term "1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                                       (rule "polySimp_addComm0" (formula "25") (term "1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "30"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "inEqSimp_commuteLeq" (formula "25"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "inEqSimp_commuteLeq" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "23"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                       (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,0"))
                                       (rule "add_literals" (formula "31") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "31") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_ltRight" (formula "35"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "4"))
                                       (rule "inEqSimp_ltToLeq" (formula "6"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                       (rule "add_literals" (formula "6") (term "0,0"))
                                       (rule "add_zero_left" (formula "6") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_commuteLeq" (formula "29"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "7"))
                                       (rule "times_zero_2" (formula "7") (term "1,0"))
                                       (rule "add_zero_right" (formula "7") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "36") (term "0,1,0,0,0") (ifseqformula "18"))
                                       (rule "polySimp_pullOutFactor1" (formula "36") (term "0,0,0"))
                                       (rule "add_literals" (formula "36") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "36") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "36") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "28"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1"))
                                       (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "36") (term "1,0,1,0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "33") (term "1,0,0") (ifseqformula "28"))
                                       (rule "polySimp_sepNegMonomial" (formula "17"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,0,0") (ifseqformula "17"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "33") (term "0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "33") (term "0,0"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "17"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,0"))
                                       (rule "times_zero_1" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "35") (term "1,0,1,0") (ifseqformula "16"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "35") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "35") (term "1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "35") (term "0,0,1,0"))
                                       (rule "add_zero_left" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "35") (term "0"))
                                       (rule "applyEq" (formula "10") (term "1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "27") (term "1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "16"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "31"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "35"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                                       (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_invertInEq0" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "times_zero_2" (formula "5") (term "1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0"))
                                       (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "28"))
                                       (rule "inEqSimp_contradEq3" (formula "28") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "false_right" (formula "28"))
                                       (rule "inEqSimp_subsumption1" (formula "12") (term "1,0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
                                       (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "24"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch " de.wiesler.BucketPointers::bucketStart(self, javaAddInt(iv_0, 1)) <= self.first_empty_position FALSE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "translateJavaAddInt" (formula "31") (term "0,0"))
                                       (rule "translateJavaAddInt" (formula "31") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "2") (term "1,1"))
                                       (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                                       (rule "translateJavaAddInt" (formula "1") (term "1"))
                                       (rule "translateJavaAddInt" (formula "35") (term "1,1,0"))
                                       (rule "translateJavaAddInt" (formula "35") (term "1,1,1"))
                                       (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                                       (rule "translateJavaAddInt" (formula "28") (term "1,0"))
                                       (rule "translateJavaSubInt" (formula "24") (term "0"))
                                       (rule "translateJavaAddInt" (formula "31") (term "1,1"))
                                       (rule "translateJavaAddInt" (formula "35") (term "0,1,1"))
                                       (rule "translateJavaAddInt" (formula "30") (term "0"))
                                       (rule "translateJavaAddInt" (formula "30") (term "1"))
                                       (rule "translateJavaCastInt" (formula "24") (term "1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "0"))
                                       (rule "translateJavaSubInt" (formula "25") (term "0"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,1,0,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "32") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "32") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "2,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "32") (term "2,1,1,0"))
                                       (rule "mul_literals" (formula "32") (term "1,2,1,1,0"))
                                       (rule "polySimp_addLiterals" (formula "32") (term "2,1,1,0"))
                                       (rule "add_zero_right" (formula "32") (term "2,1,1,0"))
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "2,1,1,1,1"))
                                       (rule "mul_literals" (formula "36") (term "1,2,1,1,1,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "2,1,1,1,1"))
                                       (rule "add_zero_right" (formula "36") (term "2,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                                       (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "2,1,0,1,1"))
                                       (rule "mul_literals" (formula "36") (term "1,2,1,0,1,1"))
                                       (rule "polySimp_addLiterals" (formula "36") (term "2,1,0,1,1"))
                                       (rule "add_zero_right" (formula "36") (term "2,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "31"))
                                       (rule "polySimp_homoEq" (formula "15"))
                                       (rule "polySimp_elimSub" (formula "26") (term "0"))
                                       (rule "polySimp_elimSub" (formula "25") (term "1"))
                                       (rule "polySimp_elimSub" (formula "1") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "1") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "2,1,0,0"))
                                       (rule "polySimp_homoEq" (formula "36"))
                                       (rule "polySimp_elimSub" (formula "31") (term "2,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,2,1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "31") (term "2,1,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "2,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "0"))
                                       (rule "polySimp_addComm0" (formula "35") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "1"))
                                       (rule "polySimp_addComm0" (formula "12") (term "1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "29") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                                       (rule "polySimp_addComm0" (formula "26") (term "0"))
                                       (rule "polySimp_addComm0" (formula "25") (term "1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "30"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "inEqSimp_commuteLeq" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "inEqSimp_commuteLeq" (formula "23"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                       (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,0"))
                                       (rule "add_literals" (formula "31") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "31") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_ltRight" (formula "35"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "31"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "5"))
                                       (rule "inEqSimp_ltToLeq" (formula "7"))
                                       (rule "add_zero_right" (formula "7") (term "0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "8"))
                                       (rule "times_zero_2" (formula "8") (term "1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0"))
                                       (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "30"))
                                       (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                                       (rule "add_literals" (formula "32") (term "1,0"))
                                       (rule "times_zero_1" (formula "32") (term "0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "closeTrue" (formula "32"))
                                    )
                                 )
                              )
                           )
                           (branch "Assume javaAddInt_0 != javaAddInt(begin, self.nextWriteOf(iv_0 + 1 - 1))"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "translateJavaAddInt" (formula "26") (term "1,0,0,2,1"))
                              (rule "translateJavaAddInt" (formula "32") (term "1,1,0"))
                              (rule "translateJavaAddInt" (formula "26") (term "1,1,2,1"))
                              (rule "translateJavaAddInt" (formula "28") (term "0,0"))
                              (rule "translateJavaAddInt" (formula "28") (term "1,0"))
                              (rule "translateJavaAddInt" (formula "28") (term "1,1"))
                              (rule "translateJavaSubInt" (formula "25") (term "0"))
                              (rule "translateJavaSubInt" (formula "24") (term "0"))
                              (rule "translateJavaAddInt" (formula "32") (term "0,1,1"))
                              (rule "translateJavaAddInt" (formula "32") (term "1,1,1"))
                              (rule "translateJavaCastInt" (formula "24") (term "1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0"))
                              (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
                              (rule "translateJavaAddInt" (formula "11") (term "1,1,1"))
                              (rule "translateJavaAddInt" (formula "2") (term "1,1"))
                              (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "1"))
                              (rule "eqSymm" (formula "26"))
                              (rule "eqSymm" (formula "24"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,0,1"))
                              (rule "mul_literals" (formula "33") (term "1,1,0,1"))
                              (rule "polySimp_addLiterals" (formula "33") (term "1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "29") (term "2,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,2,1,0,0"))
                              (rule "polySimp_addLiterals" (formula "29") (term "2,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "2,1,0,0"))
                              (rule "polySimp_elimSub" (formula "29") (term "2,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "1,2,1,1,0"))
                              (rule "polySimp_addLiterals" (formula "29") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "29") (term "2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "0"))
                              (rule "polySimp_elimSub" (formula "33") (term "2,1,0,1,1"))
                              (rule "mul_literals" (formula "33") (term "1,2,1,0,1,1"))
                              (rule "polySimp_addLiterals" (formula "33") (term "2,1,0,1,1"))
                              (rule "add_zero_right" (formula "33") (term "2,1,0,1,1"))
                              (rule "polySimp_elimSub" (formula "33") (term "2,1,1,1,1"))
                              (rule "mul_literals" (formula "33") (term "1,2,1,1,1,1"))
                              (rule "polySimp_addLiterals" (formula "33") (term "2,1,1,1,1"))
                              (rule "add_zero_right" (formula "33") (term "2,1,1,1,1"))
                              (rule "polySimp_homoEq" (formula "14"))
                              (rule "polySimp_elimSub" (formula "12") (term "1,0,1"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "28") (term "2,1,1"))
                              (rule "mul_literals" (formula "28") (term "1,2,1,1"))
                              (rule "polySimp_addLiterals" (formula "28") (term "2,1,1"))
                              (rule "add_zero_right" (formula "28") (term "2,1,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1"))
                              (rule "polySimp_homoEq" (formula "33"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_addComm0" (formula "4") (term "1"))
                              (rule "polySimp_addComm0" (formula "3") (term "1"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "11") (term "1,1,1"))
                              (rule "polySimp_addComm0" (formula "26") (term "1,0,0,2,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "1,1,2,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0"))
                              (rule "polySimp_addComm0" (formula "12") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "1"))
                              (rule "polySimp_addComm1" (formula "28") (term "0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                              (rule "castedGetAny" (formula "24") (term "0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7"))
                              (rule "inEqSimp_commuteLeq" (formula "8"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "inEqSimp_commuteLeq" (formula "23"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                              (rule "inEqSimp_ltRight" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "add_zero_left" (formula "4") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,2,0"))
                              (rule "inEqSimp_homoInEq0" (formula "5"))
                              (rule "times_zero_2" (formula "5") (term "1,0"))
                              (rule "add_zero_right" (formula "5") (term "0"))
                              (rule "applyEq" (formula "33") (term "0,1,0,0,0") (ifseqformula "16"))
                              (rule "polySimp_pullOutFactor1" (formula "33") (term "0,0,0"))
                              (rule "add_literals" (formula "33") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "33") (term "0,0,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "26"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1"))
                              (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "26"))
                              (rule "polySimp_sepNegMonomial" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0"))
                              (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "15"))
                              (rule "applyEq" (formula "9") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                              (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "15"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "33") (term "0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "33") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "33") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "15"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                              (rule "add_literals" (formula "29") (term "1,1,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                              (rule "add_literals" (formula "29") (term "1,0"))
                              (rule "times_zero_1" (formula "29") (term "0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "closeTrue" (formula "29"))
                           )
                        )
                     )
                     (branch " begin <= javaAddInt_0 & javaAddInt_0 <= javaAddInt(begin, self.first_empty_position) FALSE"
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "translateJavaSubInt" (formula "22") (term "0"))
                        (rule "translateJavaCastInt" (formula "22") (term "1"))
                        (rule "translateJavaAddInt" (formula "29") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "9") (term "1,1,1"))
                        (rule "translateJavaSubInt" (formula "10") (term "1,0,1"))
                        (rule "translateJavaAddInt" (formula "30") (term "1,0"))
                        (rule "translateJavaAddInt" (formula "24") (term "1,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "1,1,2,1"))
                        (rule "translateJavaSubInt" (formula "23") (term "0"))
                        (rule "translateJavaAddInt" (formula "12") (term "0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSymm" (formula "24"))
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_elimSub" (formula "30") (term "1,0,1"))
                        (rule "mul_literals" (formula "30") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "1,0,1"))
                        (rule "add_zero_right" (formula "30") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "30") (term "5,1,1"))
                        (rule "mul_literals" (formula "30") (term "1,5,1,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "5,1,1"))
                        (rule "add_zero_right" (formula "30") (term "5,1,1"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,0,1"))
                        (rule "mul_literals" (formula "10") (term "1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "0"))
                        (rule "polySimp_homoEq" (formula "12"))
                        (rule "polySimp_elimSub" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,1,2,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "1"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,2,0"))
                        (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "times_zero_2" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1"))
                        (rule "polySimp_sepNegMonomial" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "13"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "13"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                        (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1"))
                        (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_geqRight" (formula "28"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_subsumption0" (formula "25") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "25") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "eqSymm" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch " de.wiesler.BucketPointers::bucketStart(self, iv_0) < self.first_empty_position FALSE"
                     (rule "eqTermCut" (formula "29") (term "1,1") (inst "s=Z(0(#))") (userinteraction))
                     (branch "Assume self.elementsToReadOfBucketCountElement(values, begin, end, iv_0 + 1 - 1, element_0) = 0"
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "translateJavaSubInt" (formula "22") (term "0"))
                        (rule "translateJavaCastInt" (formula "22") (term "1"))
                        (rule "translateJavaAddInt" (formula "30") (term "1,0"))
                        (rule "translateJavaSubInt" (formula "23") (term "0"))
                        (rule "translateJavaAddInt" (formula "24") (term "1,0,0,2,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "1,1,2,1"))
                        (rule "translateJavaAddInt" (formula "10") (term "1,1,1"))
                        (rule "translateJavaSubInt" (formula "11") (term "1,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSymm" (formula "24"))
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_elimSub" (formula "30") (term "5,1,1"))
                        (rule "mul_literals" (formula "30") (term "1,5,1,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "5,1,1"))
                        (rule "add_zero_right" (formula "30") (term "5,1,1"))
                        (rule "polySimp_elimSub" (formula "30") (term "1,0,1"))
                        (rule "mul_literals" (formula "30") (term "1,1,0,1"))
                        (rule "polySimp_addLiterals" (formula "30") (term "1,0,1"))
                        (rule "add_zero_right" (formula "30") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "5,0"))
                        (rule "mul_literals" (formula "1") (term "1,5,0"))
                        (rule "polySimp_addLiterals" (formula "1") (term "5,0"))
                        (rule "add_zero_right" (formula "1") (term "5,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "0"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,0,1"))
                        (rule "mul_literals" (formula "11") (term "1,1,0,1"))
                        (rule "polySimp_homoEq" (formula "12"))
                        (rule "polySimp_elimSub" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,1,2,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                        (rule "inEqSimp_ltRight" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "castedGetAny" (formula "23") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "0,2,0"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "times_zero_2" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "3"))
                        (rule "add_zero_left" (formula "30") (term "1"))
                        (rule "polySimp_sepPosMonomial" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1"))
                        (rule "polySimp_elimOne" (formula "25") (term "1"))
                        (rule "polySimp_sepNegMonomial" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "14"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0"))
                        (rule "add_literals" (formula "30") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "30") (term "0,1,0"))
                        (rule "add_zero_left" (formula "30") (term "1,0"))
                        (rule "close" (formula "30") (ifseqformula "15"))
                     )
                     (branch "Assume self.elementsToReadOfBucketCountElement(values, begin, end, iv_0 + 1 - 1, element_0) != 0"
                        (rule "notLeft" (formula "1") (userinteraction))
                        (rule "Definition_axiom_for_elementsToReadOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "25") (term "0") (userinteraction))
                        (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (userinteraction))
                        (rule "bsum_empty" (formula "25") (term "0") (userinteraction))
                        (branch "Precondition"
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "translateJavaAddInt" (formula "31") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "26") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "26") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "25") (term "1"))
                           (rule "translateJavaSubInt" (formula "21") (term "0"))
                           (rule "translateJavaCastInt" (formula "21") (term "1"))
                           (rule "translateJavaAddInt" (formula "25") (term "0"))
                           (rule "translateJavaSubInt" (formula "22") (term "0"))
                           (rule "translateJavaAddInt" (formula "23") (term "1,0,0,2,1"))
                           (rule "translateJavaAddInt" (formula "23") (term "1,1,2,1"))
                           (rule "translateJavaAddInt" (formula "9") (term "1,1,1"))
                           (rule "translateJavaSubInt" (formula "10") (term "1,0,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "0"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "23"))
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "polySimp_elimSub" (formula "31") (term "1,0,1"))
                           (rule "mul_literals" (formula "31") (term "1,1,0,1"))
                           (rule "polySimp_addLiterals" (formula "31") (term "1,0,1"))
                           (rule "add_zero_right" (formula "31") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "31") (term "5,1,1"))
                           (rule "mul_literals" (formula "31") (term "1,5,1,1"))
                           (rule "polySimp_addLiterals" (formula "31") (term "5,1,1"))
                           (rule "add_zero_right" (formula "31") (term "5,1,1"))
                           (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,2,1,0,0"))
                           (rule "polySimp_addLiterals" (formula "26") (term "2,1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "2,1,0,0"))
                           (rule "polySimp_elimSub" (formula "26") (term "2,1,1,0"))
                           (rule "mul_literals" (formula "26") (term "1,2,1,1,0"))
                           (rule "polySimp_addLiterals" (formula "26") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "26") (term "2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "25") (term "2,1,1"))
                           (rule "mul_literals" (formula "25") (term "1,2,1,1"))
                           (rule "polySimp_addLiterals" (formula "25") (term "2,1,1"))
                           (rule "add_zero_right" (formula "25") (term "2,1,1"))
                           (rule "polySimp_elimSub" (formula "25") (term "2,1,0"))
                           (rule "mul_literals" (formula "25") (term "1,2,1,0"))
                           (rule "polySimp_addLiterals" (formula "25") (term "2,1,0"))
                           (rule "add_zero_right" (formula "25") (term "2,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "0"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,0,1"))
                           (rule "mul_literals" (formula "10") (term "1,1,0,1"))
                           (rule "polySimp_homoEq" (formula "11"))
                           (rule "polySimp_elimSub" (formula "21") (term "1"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "2") (term "1"))
                           (rule "polySimp_addComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,1,1"))
                           (rule "polySimp_addComm0" (formula "23") (term "1,1,2,0"))
                           (rule "polySimp_addComm0" (formula "23") (term "1,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "1"))
                           (rule "polySimp_addComm0" (formula "22") (term "0"))
                           (rule "polySimp_addComm0" (formula "10") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "21") (term "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                           (rule "inEqSimp_ltRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "castedGetAny" (formula "22") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "inEqSimp_commuteLeq" (formula "22"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_ltRight" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,2,0"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "times_zero_2" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1"))
                           (rule "polySimp_elimOne" (formula "25") (term "1"))
                           (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "25"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "25"))
                           (rule "polySimp_sepNegMonomial" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "14"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0"))
                           (rule "applyEq" (formula "26") (term "2,2,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "14"))
                           (rule "polySimp_addAssoc" (formula "31") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                           (rule "add_literals" (formula "31") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "31") (term "0,1,0"))
                           (rule "add_zero_left" (formula "31") (term "1,0"))
                           (rule "applyEq" (formula "26") (term "0,0,2,0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "0,2,0"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "14"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "15"))
                           (rule "polySimp_homoEq" (formula "31"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                           (rule "add_literals" (formula "31") (term "1,1,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                           (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_invertInEq0" (formula "4"))
                           (rule "times_zero_2" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
                           (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "eqSymm" (formula "25"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "Empty Sum"
                            (builtin "One Step Simplification" (formula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeTrue" (formula "25"))
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "0 < iv_0 + 1 FALSE"
         (rule "translateJavaSubInt" (formula "13") (term "0"))
         (rule "translateJavaCastInt" (formula "13") (term "1"))
         (rule "translateJavaAddInt" (formula "19") (term "3,0"))
         (rule "translateJavaAddInt" (formula "4") (term "3,0"))
         (rule "add_zero_right" (formula "19") (term "1"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "4"))
         (rule "eqSymm" (formula "19"))
         (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_elimSub" (formula "13") (term "1"))
         (rule "polySimp_elimSub" (formula "19") (term "1,0"))
         (rule "mul_literals" (formula "19") (term "1,1,0"))
         (rule "polySimp_addLiterals" (formula "19") (term "1,0"))
         (rule "add_zero_right" (formula "19") (term "1,0"))
         (rule "polySimp_addComm0" (formula "18") (term "1"))
         (rule "polySimp_addComm0" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "1"))
         (rule "polySimp_addComm0" (formula "19") (term "1,1,1,3,1"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,3,1"))
         (rule "polySimp_addComm0" (formula "13") (term "1"))
         (rule "castedGetAny" (formula "13") (term "0"))
         (rule "inEqSimp_ltRight" (formula "18"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_rightDist" (formula "1") (term "0"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,3,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,3,1"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0,1,3,1"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,3,1"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,3,1"))
         (rule "polySimp_addComm1" (formula "19") (term "0,0,1,3,1"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "times_zero_2" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "applyEq" (formula "19") (term "0") (ifseqformula "5"))
         (rule "eqSymm" (formula "19"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,3,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,3,1"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0,1,3,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,3,1"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,3,1"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0,1,3,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,3,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,3,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0,1,3,0"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
   )
)
(branch "Step Case (negative)"
   (rule "true_left" (formula "5"))
   (rule "translateJavaCastInt" (formula "14") (term "1,0,1,1,0"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0,0,1,1,0"))
   (rule "translateJavaAddInt" (formula "14") (term "3,0,0,1,1"))
   (rule "translateJavaCastInt" (formula "14") (term "1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0"))
   (rule "translateJavaCastInt" (formula "9") (term "1"))
   (rule "impRight" (formula "14"))
   (rule "andLeft" (formula "1"))
   (rule "impRight" (formula "16"))
   (rule "andLeft" (formula "1"))
   (rule "allRight" (formula "18") (inst "sk=element_0"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "4") (term "0,1"))
   (rule "eqSymm" (formula "18"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_elimSub" (formula "2") (term "0"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,1,3,1"))
   (rule "mul_literals" (formula "18") (term "1,1,1,1,3,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,0,0,1,3,1"))
   (rule "mul_literals" (formula "18") (term "1,1,0,0,1,3,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,0"))
   (rule "mul_literals" (formula "18") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "polySimp_addComm0" (formula "13") (term "1"))
   (rule "polySimp_addComm0" (formula "18") (term "1,1,1,3,1"))
   (rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,3,1"))
   (rule "polySimp_addComm0" (formula "18") (term "1,0"))
   (rule "castedGetAny" (formula "13") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,3,1,0,1"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,3,1,0,1"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,1,3,1,0,1"))
   (rule "bsum_induction_upper2_concrete" (formula "18") (term "0"))
   (rule "polySimp_elimSub" (formula "18") (term "5,1,1,0"))
   (rule "mul_literals" (formula "18") (term "1,5,1,1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "0"))
   (rule "polySimp_homoEq" (formula "18"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "5,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,3,1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,3,1,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,0,1,3,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "times_zero_2" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "18"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0"))
   (rule "polySimp_elimOne" (formula "18") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,3,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,3,1,0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "0,0,1,3,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1"))
   (rule "replace_known_left" (formula "18") (term "0,0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,3,1,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,3,1,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,1,3,1,1"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
