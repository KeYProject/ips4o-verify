\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 28 13:38:33 CET 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Thu Dec 28 13:38:33 CET 2023
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "mattias" ) (keyVersion "e1a85b31e7"))

(autoModeTime "146950")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_decrement_read,savedHeapBefore_decrement_read"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationFinalAssign" (formula "11") (term "1"))
(rule "variableDeclarationFinal" (formula "11") (term "1") (newnames "read_pos"))
(rule "assignmentMultiplicationInt" (formula "11") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "read"))
   (rule "eval_order_array_access4" (formula "11") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this_final" (formula "11"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "assignment_array2" (formula "11"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "11"))
      (rule "compound_assignment_op_minus" (formula "11") (term "1"))
      (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
      (rule "remove_parentheses_right" (formula "11") (term "1"))
      (rule "compound_subtraction_2" (formula "11") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
      (rule "assignment" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
      (rule "remove_parentheses_right" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "assignmentSubtractionInt" (formula "11") (term "1"))
      (branch "Overflow check"
          (builtin "One Step Simplification" (formula "11"))
         (rule "closeTrue" (formula "11"))
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "11") (term "1"))
         (rule "assignment" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "eval_order_array_access1" (formula "11") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr_1"))
         (rule "assignment_read_attribute_this_final" (formula "11"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "assignment_to_primitive_array_component" (formula "11"))
         (branch "Normal Execution (x_arr_1 != null)"
             (builtin "One Step Simplification" (formula "11"))
            (rule "methodCallReturn" (formula "11") (term "1"))
            (rule "assignment" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "methodCallEmpty" (formula "11") (term "1"))
            (rule "tryEmpty" (formula "11") (term "1"))
            (rule "emptyModality" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "10") (term "0"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "3")) (ifInst ""  (formula "10")) (ifInst ""  (formula "6")) (ifInst ""  (formula "9")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "12"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "false_right" (formula "12"))
            (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaMulInt" (formula "10") (term "1,0,0,0,0,0"))
            (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0"))
            (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0"))
            (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0"))
            (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0,0,0"))
            (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_mulComm0" (formula "11") (term "0"))
            (rule "polySimp_addComm0" (formula "16") (term "1"))
            (rule "castedGetAny" (formula "17") (term "0"))
            (rule "castedGetAny" (formula "14") (term "0"))
            (rule "castedGetAny" (formula "13") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "14"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "11"))
            (rule "greater_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "inEqSimp_exactShadow2" (formula "11") (ifseqformula "12"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1,0,0"))
            (rule "times_zero_1" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "24"))
            (rule "notRight" (formula "24"))
            (rule "close" (formula "23") (ifseqformula "1"))
         )
         (branch "Null Reference (x_arr_1 = null)"
            (rule "false_right" (formula "12"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
            (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,0,0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
            (rule "translateJavaMulInt" (formula "9") (term "0,1,0,0,0,0"))
            (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_mulComm0" (formula "10") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "1"))
            (rule "castedGetAny" (formula "16") (term "0"))
            (rule "castedGetAny" (formula "13") (term "0"))
            (rule "castedGetAny" (formula "12") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "10"))
            (rule "greater_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "14"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
            (rule "greater_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "times_zero_1" (formula "10") (term "0,0"))
            (rule "add_zero_left" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
            (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "23") (term "0"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "26"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "1"))
            (rule "times_zero_1" (formula "26") (term "1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0"))
            (rule "leq_literals" (formula "26") (term "0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "false_right" (formula "26"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "24") (ifseqformula "4"))
         )
         (branch "Index Out of Bounds (x_arr_1 != null, but read_pos Out of Bounds!)"
             (builtin "One Step Simplification" (formula "12"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "false_right" (formula "12"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "7"))
            (rule "greater_literals" (formula "1") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "translateJavaMulInt" (formula "9") (term "0,1,0,0,0,0"))
            (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,0,0"))
            (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_mulComm0" (formula "10") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "1"))
            (rule "castedGetAny" (formula "16") (term "0"))
            (rule "castedGetAny" (formula "13") (term "0"))
            (rule "castedGetAny" (formula "12") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0"))
            (rule "polySimp_elimOne" (formula "12") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "10"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
            (rule "greater_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "times_zero_1" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "11"))
            (rule "greater_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_zero_right" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
      )
   )
   (branch "Null Reference (x_arr = null)"
      (rule "false_right" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "9") (ifseqformula "1"))
   )
   (branch "Index Out of Bounds (x_arr != null, but read_pos Out of Bounds!)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "false_right" (formula "12"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "7"))
      (rule "greater_literals" (formula "1") (term "0,0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (inst "b=b"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaCastInt" (formula "8") (term "1,1,0,0,1,0,0,0"))
      (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0"))
      (rule "translateJavaCastInt" (formula "8") (term "0,0,1,0"))
      (rule "translateJavaCastInt" (formula "8") (term "0,1,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "8") (term "1,0,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "8") (term "0,1,0,0,0,0"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "polySimp_mulComm0" (formula "9") (term "0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1"))
      (rule "polySimp_addComm0" (formula "14") (term "1"))
      (rule "castedGetAny" (formula "15") (term "0"))
      (rule "castedGetAny" (formula "12") (term "0"))
      (rule "castedGetAny" (formula "11") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,1,0"))
      (rule "leq_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "9"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
      (rule "greater_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "times_zero_1" (formula "8") (term "0,0"))
      (rule "add_zero_left" (formula "8") (term "0"))
      (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "10"))
      (rule "greater_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1"))
      (rule "polySimp_rightDist" (formula "7") (term "1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "0,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
