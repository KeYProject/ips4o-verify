\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu May 05 18:19:35 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Thu May 05 18:19:35 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "112735")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "0,1,0,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,0,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,1,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "eqSymm" (formula "14") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "14") (term "2,0,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "14") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "14") (term "1,2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "0,0"))
(rule "polySimp_elimSub" (formula "9") (term "0"))
(rule "polySimp_elimSub" (formula "8") (term "1"))
(rule "polySimp_addComm0" (formula "14") (term "2,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "14") (term "2,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0"))
(rule "polySimp_addComm0" (formula "8") (term "1"))
(rule "disjointDefinition" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "elementOfUnion" (formula "14") (term "0,0,0,0,1,0,1"))
(rule "elementOfArrayRange" (formula "14") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "commuteIntersection" (formula "11") (term "0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_sample,savedHeapBefore_sample"))
 (builtin "One Step Simplification" (formula "14"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "parameters"))
(rule "instanceCreationAssignmentUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
(rule "assignmentSubtractionInt" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
(rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
 (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_SampleParameters,self,exc_0,heapAfter_SampleParameters,anon_heap_SampleParameters") (contract "de.wiesler.SampleParameters[de.wiesler.SampleParameters::SampleParameters(int)].JML normal_behavior operation contract.0"))
(branch "Post (SampleParameters)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "13"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1,0,0,1,0") (ifseqformula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "blockEmpty" (formula "23") (term "1"))
    (builtin "Block Contract (Internal)" (formula "23") (newnames "result_0,exc_1,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
   (branch "Validity"
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "translateJavaSubInt" (formula "19") (term "0,0,0"))
      (rule "andLeft" (formula "19"))
      (rule "eqSymm" (formula "25") (term "0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "19") (term "0,0"))
      (rule "polySimp_addComm0" (formula "19") (term "0,0"))
      (rule "variableDeclarationAssign" (formula "24") (term "1"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "exc_1_1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "emptyStatement" (formula "24") (term "1"))
      (rule "emptyStatement" (formula "24") (term "1"))
      (rule "tryEmpty" (formula "24") (term "1"))
      (rule "blockEmptyLabel" (formula "24") (term "1"))
      (rule "blockEmpty" (formula "24") (term "1"))
      (rule "methodCallEmpty" (formula "24") (term "1"))
      (rule "emptyModality" (formula "24") (term "1"))
      (rule "andRight" (formula "24"))
      (branch "Case 1"
         (rule "andRight" (formula "24"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "24"))
            (rule "closeTrue" (formula "24"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "24") (userinteraction))
            (rule "eqTermCut" (formula "24") (term "1") (inst "s=seqDef{int j;}(begin,
               end,
               any::select(heapAfter_SampleParameters,
                           values,
                           arr(j)))") (userinteraction))
            (branch "Assume seqDef{int j;}(begin, end, any::select(heap, values, arr(j))) = seqDef{int j;}(begin, end, any::select(heapAfter_SampleParameters, values, arr(j)))"
               (rule "seqPermReflRightSecond" (formula "25") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "closeTrue" (formula "25"))
            )
            (branch "Assume seqDef{int j;}(begin, end, any::select(heap, values, arr(j))) != seqDef{int j;}(begin, end, any::select(heapAfter_SampleParameters, values, arr(j)))"
               (rule "notLeft" (formula "1"))
               (rule "eqSymm" (formula "20"))
               (rule "narrowSelectArrayType" (formula "25") (term "2,1") (ifseqformula "1") (ifseqformula "24"))
               (rule "narrowSelectArrayType" (formula "20") (term "2,0") (ifseqformula "19") (ifseqformula "24"))
               (rule "eqSymm" (formula "20"))
               (rule "narrowSelectArrayType" (formula "25") (term "2,0") (ifseqformula "19") (ifseqformula "24"))
               (rule "narrowSelectArrayType" (formula "20") (term "2,0") (ifseqformula "1") (ifseqformula "24"))
               (rule "eqSymm" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "19") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "19") (term "0,1,0,1"))
               (rule "castDel" (formula "19") (term "2,0,1,0,1"))
               (rule "castDel" (formula "19") (term "1,0,1,0,1"))
               (rule "eqSymm" (formula "19") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,2,1,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,0,1,1,0,1"))
               (rule "lenOfSeqDef" (formula "19") (term "1,0"))
               (rule "polySimp_elimSub" (formula "19") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,0"))
               (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,0,1"))
               (rule "lenOfSeqDef" (formula "19") (term "0,0"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "allRight" (formula "19") (inst "sk=iv_0"))
               (rule "impRight" (formula "19"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_left" (formula "21") (term "0,0,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "getOfSeqDef" (formula "21") (term "0"))
               (rule "castDel" (formula "21") (term "2,0"))
               (rule "castDel" (formula "21") (term "1,0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,2,1,0"))
               (rule "polySimp_addComm0" (formula "21") (term "1,0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1"))
               (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1"))
               (rule "mul_literals" (formula "21") (term "0,0,1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1"))
               (rule "mul_literals" (formula "21") (term "0,0,1,0,1"))
               (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "2") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")))
               (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "closeTrue" (formula "22"))
            )
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "24"))
         (rule "closeTrue" (formula "24"))
      )
   )
   (branch "Precondition"
      (rule "andRight" (formula "23"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "23"))
         (rule "translateJavaSubInt" (formula "23") (term "0,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,0"))
         (rule "close" (formula "23") (ifseqformula "4"))
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "23"))
         (rule "wellFormedAnonEQ" (formula "23") (ifseqformula "13"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "12")))
         (rule "closeTrue" (formula "23"))
      )
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,1") (ifseqformula "13"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,1") (ifseqformula "13"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "narrowSelectArrayType" (formula "20") (term "2,1") (ifseqformula "1") (ifseqformula "25"))
      (rule "shift_paren_or" (formula "21"))
      (rule "ifUnfold" (formula "26") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "26") (term "1") (newnames "x"))
      (rule "inequality_comparison_simple" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "replace_known_left" (formula "26") (term "0,0,1,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "arrayLengthNotNegative" (formula "7") (term "0"))
      (rule "arrayLengthIsAShort" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "ifSplit" (formula "27"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockEmpty" (formula "27") (term "1"))
         (rule "methodCallUnfoldArguments" (formula "27") (term "1"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "var_1"))
         (rule "assignment" (formula "27") (term "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "var_2"))
         (rule "assignment" (formula "27") (term "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "var_3"))
         (rule "assignment" (formula "27") (term "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "var_4"))
         (rule "assignment_read_attribute_final" (formula "27"))
         (branch "Normal Execution (parameters != null)"
             (builtin "One Step Simplification" (formula "27"))
             (builtin "Use Operation Contract" (formula "27") (newnames "heapBefore_select_n,exc_2,heapAfter_select_n,anon_heap_select_n") (contract "de.wiesler.Functions[de.wiesler.Functions::select_n([I,int,int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (select_n)"
                (builtin "One Step Simplification" (formula "24"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "26"))
               (rule "polySimp_elimSub" (formula "24") (term "2,1,0"))
               (rule "mul_literals" (formula "24") (term "1,2,1,0"))
               (rule "polySimp_addComm0" (formula "24") (term "2,1,0"))
               (rule "blockEmpty" (formula "31") (term "1"))
                (builtin "Block Contract (Internal)" (formula "31") (newnames "result_1,exc_3,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
               (branch "Validity"
                   (builtin "One Step Simplification" (formula "27"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "translateJavaSubInt" (formula "27") (term "0,0,0"))
                  (rule "andLeft" (formula "27"))
                  (rule "eqSymm" (formula "33") (term "0,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                  (rule "narrowSelectArrayType" (formula "26") (term "2,0") (ifseqformula "27") (ifseqformula "31"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "exc_3_1"))
                  (rule "assignment" (formula "32") (term "1"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "emptyStatement" (formula "32") (term "1"))
                  (rule "emptyStatement" (formula "32") (term "1"))
                  (rule "tryEmpty" (formula "32") (term "1"))
                  (rule "blockEmptyLabel" (formula "32") (term "1"))
                  (rule "blockEmpty" (formula "32") (term "1"))
                  (rule "methodCallEmpty" (formula "32") (term "1"))
                  (rule "emptyModality" (formula "32") (term "1"))
                  (rule "andRight" (formula "32"))
                  (branch "Case 1"
                     (rule "andRight" (formula "32"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "closeTrue" (formula "32"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "narrowSelectArrayType" (formula "32") (term "2,1") (ifseqformula "1") (ifseqformula "31"))
                        (rule "narrowSelectArrayType" (formula "32") (term "2,0") (ifseqformula "27") (ifseqformula "31"))
                        (rule "seqPermTransRight" (formula "32") (ifseqformula "26") (ifseqformula "21"))
                        (rule "close" (formula "33") (ifseqformula "1"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
               )
               (branch "Precondition"
                  (rule "andRight" (formula "31"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "translateJavaSubInt" (formula "31") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "31") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                     (rule "close" (formula "31") (ifseqformula "4"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "wellFormedAnonEQ" (formula "31") (ifseqformula "24"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "wellFormedAnonEQ" (formula "31") (ifseqformula "14"))
                     (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "13")))
                     (rule "closeTrue" (formula "31"))
                  )
               )
               (branch "Usage"
                   (builtin "One Step Simplification" (formula "32"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,1,1") (ifseqformula "24"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,0,1") (ifseqformula "24"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0,1") (ifseqformula "14"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,1,1") (ifseqformula "14"))
                  (rule "andLeft" (formula "27"))
                  (rule "andLeft" (formula "27"))
                  (rule "andLeft" (formula "29"))
                  (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "narrowSelectArrayType" (formula "28") (term "2,1") (ifseqformula "1") (ifseqformula "33"))
                  (rule "shift_paren_or" (formula "29"))
                  (rule "shift_paren_or" (formula "29") (term "0"))
                  (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_1"))
                  (rule "inequality_comparison_simple" (formula "34") (term "1"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "replace_known_left" (formula "34") (term "0,0,1,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "ifSplit" (formula "34"))
                  (branch "if x_1 true"
                      (builtin "One Step Simplification" (formula "35"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_1 false"
                      (builtin "One Step Simplification" (formula "35"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "blockEmpty" (formula "34") (term "1"))
                     (rule "variableDeclarationGhostAssign" (formula "34") (term "1"))
                     (rule "variableDeclarationGhost" (formula "34") (term "1") (newnames "before_sort"))
                     (rule "assignment" (formula "34") (term "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "methodCallUnfoldArguments" (formula "34") (term "1"))
                     (rule "variableDeclarationAssign" (formula "34") (term "1"))
                     (rule "variableDeclaration" (formula "34") (term "1") (newnames "var_5"))
                     (rule "assignment" (formula "34") (term "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "variableDeclarationAssign" (formula "34") (term "1"))
                     (rule "variableDeclaration" (formula "34") (term "1") (newnames "var_6"))
                     (rule "assignment" (formula "34") (term "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "variableDeclarationAssign" (formula "34") (term "1"))
                     (rule "variableDeclaration" (formula "34") (term "1") (newnames "var_7"))
                     (rule "compound_addition_2" (formula "34") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
                     (rule "variableDeclarationAssign" (formula "34") (term "1"))
                     (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_2"))
                     (rule "assignment" (formula "34") (term "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "variableDeclarationAssign" (formula "34") (term "1"))
                     (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_3"))
                     (rule "assignment_read_attribute_final" (formula "34"))
                     (branch "Normal Execution (parameters != null)"
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "assignmentAdditionInt" (formula "34") (term "1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "translateJavaAddInt" (formula "34") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "34") (term "1"))
                        (rule "variableDeclaration" (formula "34") (term "1") (newnames "var_8"))
                        (rule "assignment" (formula "34") (term "1"))
                         (builtin "One Step Simplification" (formula "34"))
                         (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_sort,exc_4,heapAfter_sort,anon_heap_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
                        (branch "Post (sort)"
                            (builtin "One Step Simplification" (formula "36"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "translateJavaSubInt" (formula "31") (term "2,0,1,0,0"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "andLeft" (formula "34"))
                           (rule "polySimp_elimSub" (formula "31") (term "2,0,1,0"))
                           (rule "mul_literals" (formula "31") (term "1,2,0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "2,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,2,0,1,0"))
                           (rule "blockEmpty" (formula "40") (term "1"))
                            (builtin "Block Contract (Internal)" (formula "40") (newnames "result_2,exc_5,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                           (branch "Validity"
                               (builtin "One Step Simplification" (formula "36"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "translateJavaSubInt" (formula "36") (term "0,0,0"))
                              (rule "andLeft" (formula "36"))
                              (rule "eqSymm" (formula "42") (term "0,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "36") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                              (rule "narrowSelectArrayType" (formula "33") (term "2,0") (ifseqformula "36") (ifseqformula "40"))
                              (rule "variableDeclarationAssign" (formula "41") (term "1"))
                              (rule "variableDeclaration" (formula "41") (term "1") (newnames "exc_5_1"))
                              (rule "assignment" (formula "41") (term "1"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "emptyStatement" (formula "41") (term "1"))
                              (rule "emptyStatement" (formula "41") (term "1"))
                              (rule "commuteUnion" (formula "31") (term "1,0"))
                              (rule "tryEmpty" (formula "41") (term "1"))
                              (rule "blockEmptyLabel" (formula "41") (term "1"))
                              (rule "blockEmpty" (formula "41") (term "1"))
                              (rule "methodCallEmpty" (formula "41") (term "1"))
                              (rule "emptyModality" (formula "41") (term "1"))
                              (rule "andRight" (formula "41"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "41"))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "closeTrue" (formula "41"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "pullOut" (formula "34") (term "1,3,0") (inst "sk=intfinal_0") (userinteraction))
                                    (rule "cut" (inst "cutFormula=seqPerm(seqDef{int j;}(add(begin, intfinal_0),
                       end,
                       int::select(heapAfter_sort,
                                   values,
                                   arr(j))),
        seqDef{int j;}(add(begin, intfinal_0),
                       end,
                       any::select(heapAfter_select_n,
                                   values,
                                   arr(j))))<<origin(\"User_Interaction @ node 23036 (cut)\",\"[]\")>>") (userinteraction))
                                    (branch "CUT: seqPerm(seqDef{int j;}(begin + intfinal_0, end, values[j]@heapAfter_sort), seqDef{int j;}(begin + intfinal_0, end, any::select(heapAfter_select_n, values, arr(j)))) TRUE"
                                       (rule "seqPermConcatFW" (formula "34") (ifseqformula "1") (userinteraction))
                                       (rule "seqDef_split" (formula "44") (term "0") (inst "idx=add(begin, intfinal_0)") (inst "uSub1=uSub1") (userinteraction))
                                       (rule "seqDef_split" (formula "44") (term "1") (inst "idx=add(begin, intfinal_0)") (inst "uSub1=uSub1") (userinteraction))
                                       (rule "narrowSelectArrayType" (formula "44") (term "2,0,1,0") (ifseqformula "39") (ifseqformula "43"))
                                       (rule "narrowSelectArrayType" (formula "44") (term "2,2,0") (ifseqformula "39") (ifseqformula "43"))
                                       (rule "narrowSelectArrayType" (formula "44") (term "2,1,1,0") (ifseqformula "39") (ifseqformula "43"))
                                       (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "44") (term "0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "10"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "44") (term "0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "44") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "44") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "44") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "44") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "44") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "44") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "44") (term "0,0,0,0,1"))
                                       (rule "add_literals" (formula "44") (term "1,0,0,0,0,1"))
                                       (rule "times_zero_1" (formula "44") (term "0,0,0,0,1"))
                                       (rule "add_zero_left" (formula "44") (term "0,0,0,1"))
                                       (rule "applyEq" (formula "35") (term "1,1,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "32") (term "1,2,1,1,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "34") (term "1,1,1,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "36"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "44") (term "1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "44") (term "0,1,1,0,1"))
                                       (rule "mul_literals" (formula "44") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "44") (term "0,1,1,0,0"))
                                       (rule "mul_literals" (formula "44") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "7") (term "0,0"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "17") (term "0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0,0") (ifseqformula "14"))
                                       (rule "wellFormedAnonEQ" (formula "17") (term "1,0,0,0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")) (ifInst ""  (formula "13")) (ifInst ""  (formula "40")) (ifInst ""  (formula "15")) (ifInst ""  (formula "41")) (ifInst ""  (formula "19")))
                                       (rule "true_left" (formula "17"))
                                       (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaMod" (formula "17") (term "0,1,0"))
                                       (rule "translateJavaDivInt" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "translateJavaSubInt" (formula "17") (term "0,1"))
                                       (rule "translateJavaMulInt" (formula "17") (term "0,0,1"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "polySimp_elimSub" (formula "24") (term "0"))
                                       (rule "mul_literals" (formula "24") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "24") (term "0"))
                                       (rule "translateJavaShiftLeftIntConstant" (formula "22") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "19"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "17"))
                                       (rule "inEqSimp_homoInEq0" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                       (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "42"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "42"))
                                       (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "42"))
                                       (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "42"))
                                       (rule "jmod_axiom" (formula "23") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "23"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "0,1"))
                                       (rule "mul_literals" (formula "19") (term "0,0,1"))
                                       (rule "replace_known_left" (formula "50") (term "1,0,0") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "19")))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "50") (term "0,0") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "50") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "inEqSimp_subsumption1" (formula "50") (term "0,1") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "50") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "seqPermConcatBW" (formula "50") (ifseqformula "41"))
                                       (rule "close" (formula "50") (ifseqformula "1"))
                                    )
                                    (branch "CUT: seqPerm(seqDef{int j;}(begin + intfinal_0, end, values[j]@heapAfter_sort), seqDef{int j;}(begin + intfinal_0, end, any::select(heapAfter_select_n, values, arr(j)))) FALSE"
                                       (rule "eqTermCut" (formula "38") (term "1") (inst "s=seqDef{int j;}(add(begin, intfinal_0),
               end,
               int::select(heapAfter_sort,
                           values,
                           arr(j)))") (userinteraction))
                                       (branch "Assume seqDef{int j;}(begin + intfinal_0, end, any::select(heapAfter_select_n, values, arr(j))) = seqDef{int j;}(begin + intfinal_0, end, values[j]@heapAfter_sort)"
                                          (rule "seqPermReflRightSecond" (formula "39") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "closeTrue" (formula "39"))
                                       )
                                       (branch "Assume seqDef{int j;}(begin + intfinal_0, end, any::select(heapAfter_select_n, values, arr(j))) != seqDef{int j;}(begin + intfinal_0, end, values[j]@heapAfter_sort)"
                                          (rule "notLeft" (formula "1"))
                                          (rule "narrowSelectArrayType" (formula "44") (term "2,0") (ifseqformula "37") (ifseqformula "43"))
                                          (rule "inEqSimp_ltToLeq" (formula "9"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "10"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                          (rule "applyEq" (formula "33") (term "1,1,1") (ifseqformula "34"))
                                          (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "31") (term "1,2,1,1,0") (ifseqformula "34"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "37") (inst "iv=iv"))
                                          (rule "lenOfSeqDef" (formula "37") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "1,1,0"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,1,1,0"))
                                          (rule "getOfSeqDef" (formula "37") (term "1,1,0,1"))
                                          (rule "castDel" (formula "37") (term "1,1,1,0,1"))
                                          (rule "castDel" (formula "37") (term "2,1,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,2,1,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,1,0,1,1,0,1"))
                                          (rule "getOfSeqDef" (formula "37") (term "0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "1,0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "2,0,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "37") (term "1,0,1"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,2,1,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,1,0,1,1,0,1"))
                                          (rule "eqSymm" (formula "37") (term "1,0,1"))
                                          (rule "lenOfSeqDef" (formula "37") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,1,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,1,1,0,0,1"))
                                          (rule "lenOfSeqDef" (formula "37") (term "0,0"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                          (rule "eqSymm" (formula "37") (term "0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "eqSymm" (formula "37") (term "1,0,1"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,1,1,0,0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,1,1,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "1,1,0"))
                                          (rule "eqSymm" (formula "37") (term "0"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "allRight" (formula "37") (inst "sk=iv_0"))
                                          (rule "impRight" (formula "37"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                          (rule "polySimp_addAssoc" (formula "39") (term "1,0,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_addComm0" (formula "39") (term "0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "39") (term "0,0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0,0,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "0,0,1,0,0,0,0"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,0,1,0,1"))
                                          (rule "mul_literals" (formula "39") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,0,1,0,0"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "polySimp_rightDist" (formula "39") (term "0,0,1,0,1"))
                                          (rule "mul_literals" (formula "39") (term "0,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "2") (term "0,0,1,0,0"))
                                          (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "25") (ifseqformula "45"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
                                          (rule "pullOutSelect" (formula "40") (term "1,1") (inst "selectSK=arr_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "27"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfUnion" (formula "1") (term "0,0"))
                                          (rule "disjointAllFields" (formula "1") (term "0,0,0") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
                                          (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "5") (ifseqformula "46"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "41") (term "1,1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "closeTrue" (formula "41"))
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "closeTrue" (formula "41"))
                              )
                           )
                           (branch "Precondition"
                              (rule "andRight" (formula "40"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "translateJavaSubInt" (formula "40") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "40") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                                 (rule "close" (formula "40") (ifseqformula "4"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "wellFormedAnonEQ" (formula "40") (ifseqformula "31"))
                                 (rule "wellFormedAnonEQ" (formula "40") (term "0") (ifseqformula "24"))
                                 (rule "wellFormedAnonEQ" (formula "40") (term "0,0") (ifseqformula "14"))
                                 (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")) (ifInst ""  (formula "13")) (ifInst ""  (formula "23")))
                                 (rule "closeTrue" (formula "40"))
                              )
                           )
                           (branch "Usage"
                               (builtin "One Step Simplification" (formula "41"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0,1") (ifseqformula "31"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,1,1") (ifseqformula "31"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,1,1") (ifseqformula "24"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,1") (ifseqformula "24"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1,0,1") (ifseqformula "14"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1,1,1") (ifseqformula "14"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "37"))
                              (rule "andLeft" (formula "36"))
                              (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "commuteUnion" (formula "31") (term "1,0"))
                              (rule "shift_paren_or" (formula "38"))
                              (rule "shift_paren_or" (formula "38") (term "0"))
                              (rule "shift_paren_or" (formula "38") (term "0,0"))
                              (rule "ifUnfold" (formula "43") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_4"))
                              (rule "inequality_comparison_simple" (formula "43") (term "1"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "replace_known_left" (formula "43") (term "0,0,1,0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "ifSplit" (formula "43"))
                              (branch "if x_4 true"
                                  (builtin "One Step Simplification" (formula "44"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_4 false"
                                  (builtin "One Step Simplification" (formula "44"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockEmpty" (formula "43") (term "1"))
                                 (rule "methodCallReturn" (formula "43") (term "1"))
                                 (rule "assignment" (formula "43") (term "1"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "methodCallEmpty" (formula "43") (term "1"))
                                 (rule "tryEmpty" (formula "43") (term "1"))
                                 (rule "emptyModality" (formula "43") (term "1"))
                                 (rule "andRight" (formula "43"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "43"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "43"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "narrowSelectArrayType" (formula "43") (term "2,1") (ifseqformula "1") (ifseqformula "42"))
                                          (rule "seqPermTransRight" (formula "43") (ifseqformula "37") (ifseqformula "28"))
                                          (rule "close" (formula "44") (ifseqformula "1"))
                                       )
                                       (branch "Case 2"
                                          (rule "andRight" (formula "43"))
                                          (branch "Case 1"
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "inEqSimp_ltToLeq" (formula "9"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "10"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                             (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0"))
                                             (rule "qeq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "33") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "translateJavaSubInt" (formula "33") (term "1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "33") (term "0,2,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "33") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "33") (term "0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,0,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,0,1,1,0,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "10"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "11"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "notLeft" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "notLeft" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "10"))
                                             (rule "notLeft" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "notLeft" (formula "10"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "disjointDefinition" (formula "46"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "notLeft" (formula "46"))
                                             (rule "disjointDefinition" (formula "45"))
                                              (builtin "One Step Simplification" (formula "45"))
                                             (rule "notLeft" (formula "45"))
                                             (rule "disjointDefinition" (formula "44"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "notLeft" (formula "44"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "disjointDefinition" (formula "43"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "notLeft" (formula "43"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "disjointDefinition" (formula "42"))
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "notLeft" (formula "42"))
                                             (rule "eqSymm" (formula "69"))
                                             (rule "disjointDefinition" (formula "41"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "notLeft" (formula "41"))
                                             (rule "eqSymm" (formula "68"))
                                             (rule "disjointDefinition" (formula "40"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "notLeft" (formula "40"))
                                             (rule "eqSymm" (formula "67"))
                                             (rule "disjointDefinition" (formula "39"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "notLeft" (formula "39"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "disjointDefinition" (formula "38"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "eqSymm" (formula "65"))
                                             (rule "disjointDefinition" (formula "37"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "notLeft" (formula "37"))
                                             (rule "eqSymm" (formula "64"))
                                             (rule "disjointDefinition" (formula "36"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "eqSymm" (formula "63"))
                                             (rule "disjointDefinition" (formula "35"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "notLeft" (formula "35"))
                                             (rule "eqSymm" (formula "62"))
                                             (rule "disjointDefinition" (formula "34"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "notLeft" (formula "34"))
                                             (rule "eqSymm" (formula "61"))
                                             (rule "disjointDefinition" (formula "33"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "notLeft" (formula "33"))
                                             (rule "eqSymm" (formula "60"))
                                             (rule "disjointDefinition" (formula "32"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "eqSymm" (formula "59"))
                                             (rule "disjointDefinition" (formula "31"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "disjointDefinition" (formula "30"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "eqSymm" (formula "57"))
                                             (rule "disjointDefinition" (formula "29"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "notLeft" (formula "29"))
                                             (rule "eqSymm" (formula "56"))
                                             (rule "disjointDefinition" (formula "28"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "notLeft" (formula "28"))
                                             (rule "disjointDefinition" (formula "27"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "notLeft" (formula "27"))
                                             (rule "disjointDefinition" (formula "26"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "notLeft" (formula "26"))
                                             (rule "disjointDefinition" (formula "25"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "disjointDefinition" (formula "24"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "disjointDefinition" (formula "23"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "disjointDefinition" (formula "22"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "notLeft" (formula "22"))
                                             (rule "disjointDefinition" (formula "21"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "notLeft" (formula "21"))
                                             (rule "disjointDefinition" (formula "20"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "notLeft" (formula "20"))
                                             (rule "disjointDefinition" (formula "19"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "18"))
                                             (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "18"))
                                             (rule "distributeIntersection" (formula "19") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "distributeIntersection" (formula "19") (term "0"))
                                             (rule "distributeIntersection" (formula "20") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "unionEqualsEmpty" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "distributeIntersection" (formula "20") (term "0"))
                                             (rule "distributeIntersection" (formula "19") (term "0"))
                                             (rule "distributeIntersection" (formula "21") (term "0"))
                                             (rule "distributeIntersection" (formula "22") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "20"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "notLeft" (formula "20"))
                                             (rule "notLeft" (formula "20"))
                                             (rule "eqSymm" (formula "49"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "unionEqualsEmpty" (formula "19"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "notLeft" (formula "20"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "unionEqualsEmpty" (formula "19"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "eqSymm" (formula "46"))
                                             (rule "unionEqualsEmpty" (formula "19"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "eqSymm" (formula "46"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "commuteUnion_2" (formula "18") (term "0,1"))
                                             (rule "commuteUnion" (formula "18") (term "1,1,1"))
                                             (rule "commuteUnion" (formula "37") (term "1,1,0,1,0"))
                                             (rule "commuteUnion_2" (formula "37") (term "0,0,1,0"))
                                             (rule "commuteUnion" (formula "18") (term "0,0,1"))
                                             (rule "commuteUnion" (formula "37") (term "0,0,0,1,0"))
                                             (rule "commuteUnion_2" (formula "18") (term "0,1"))
                                             (rule "commuteUnion_2" (formula "37") (term "0,0,1,0"))
                                             (rule "commuteUnion_2" (formula "18") (term "1"))
                                             (rule "commuteUnion_2" (formula "37") (term "0,1,0"))
                                             (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "93") (term "0"))
                                              (builtin "One Step Simplification" (formula "93"))
                                             (rule "translateJavaSubInt" (formula "93") (term "0,1"))
                                             (rule "translateJavaMod" (formula "93") (term "0,1,0"))
                                             (rule "translateJavaDivInt" (formula "93") (term "1,1,0,0,0,0,0"))
                                             (rule "translateJavaMulInt" (formula "93") (term "0,0,1"))
                                             (rule "polySimp_elimSub" (formula "93") (term "0,1"))
                                             (rule "mul_literals" (formula "93") (term "1,0,1"))
                                             (rule "polySimp_addComm0" (formula "93") (term "0,1"))
                                             (rule "translateJavaShiftLeftIntConstant" (formula "93") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "93") (term "1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "93") (term "1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "93") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "93") (term "0,0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "93") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "93") (term "0,0,1,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "93") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "93") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "93") (term "1,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "93") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "93") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "93") (term "1,0,1"))
                                             (rule "mul_literals" (formula "93") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "93") (term "0,1"))
                                             (rule "polySimp_addComm0" (formula "93") (term "0,0,1"))
                                             (rule "jmod_axiom" (formula "93") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "1,0,1,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "93") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "93") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "93") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "93") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "1,1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "93") (term "1,1,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "93") (term "0,1,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "93") (term "0,0,1,1,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "93") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "93") (term "0,1"))
                                             (rule "javaShiftLeftIntConstantDef" (formula "93") (term "1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "93") (term "1,1,0,1,1,1,0,0"))
                                             (rule "div_literals" (formula "93") (term "0,1,1,0,1,1,1,0,0"))
                                             (rule "mul_literals" (formula "93") (term "1,1,0,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "93") (term "1,0,1,1,1,0,0"))
                                             (rule "shiftleft_literals" (formula "93") (term "0,1,1,1,0,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "23") (term "0"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "translateJavaDivInt" (formula "23") (term "1,1,0,0,0,0,0"))
                                             (rule "translateJavaMod" (formula "23") (term "0,1,0"))
                                             (rule "translateJavaSubInt" (formula "23") (term "0,1"))
                                             (rule "translateJavaMulInt" (formula "23") (term "0,0,1"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "replace_known_left" (formula "99") (term "1,0,0,0,0,0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "polySimp_elimSub" (formula "30") (term "0"))
                                             (rule "mul_literals" (formula "30") (term "1,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "0"))
                                             (rule "translateJavaShiftLeftIntConstant" (formula "28") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "25"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27"))
                                             (rule "replace_known_left" (formula "99") (term "0,1,0,0") (ifseqformula "27"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_commuteLeq" (formula "26"))
                                             (rule "replace_known_left" (formula "99") (term "1,0,0,0") (ifseqformula "26"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "replace_known_left" (formula "99") (term "0,0,0,0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_homoInEq0" (formula "30"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                                             (rule "jmod_axiom" (formula "29") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "29"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                             (rule "replace_known_left" (formula "99") (term "1,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                                             (rule "mul_literals" (formula "25") (term "0,0,1"))
                                             (rule "replace_known_left" (formula "99") (term "0,0") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "0"))
                                             (rule "replace_known_left" (formula "99") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "99"))
                                             (rule "inEqSimp_leqRight" (formula "99"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "javaShiftLeftIntDef" (formula "29") (term "1"))
                                             (rule "mod_axiom" (formula "29") (term "1,0,1"))
                                             (rule "div_literals" (formula "29") (term "0,0,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                                             (rule "times_zero_2" (formula "29") (term "1,1,0,1"))
                                             (rule "add_zero_right" (formula "29") (term "1,0,1"))
                                             (rule "shiftleft_literals" (formula "29") (term "0,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "inEqSimp_homoInEq1" (formula "29"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0"))
                                             (rule "add_zero_right" (formula "29") (term "0"))
                                             (rule "leq_literals" (formula "29"))
                                             (rule "closeFalse" (formula "29"))
                                          )
                                          (branch "Case 2"
                                             (rule "andRight" (formula "43"))
                                             (branch "Case 1"
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "34")))
                                                (rule "closeTrue" (formula "43"))
                                             )
                                             (branch "Case 2"
                                                (rule "andRight" (formula "43"))
                                                (branch "Case 1"
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "35")))
                                                   (rule "closeTrue" (formula "43"))
                                                )
                                                (branch "Case 2"
                                                   (rule "andRight" (formula "43"))
                                                   (branch "Case 1"
                                                       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "39")))
                                                      (rule "closeTrue" (formula "43"))
                                                   )
                                                   (branch "Case 2"
                                                       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "40")))
                                                      (rule "closeTrue" (formula "43"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "closeTrue" (formula "43"))
                                    )
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "allRight" (formula "43") (inst "sk=f_0"))
                                    (rule "allRight" (formula "43") (inst "sk=o_0"))
                                    (rule "orRight" (formula "43"))
                                    (rule "orRight" (formula "43"))
                                    (rule "orRight" (formula "43"))
                                    (rule "eqSymm" (formula "46"))
                                    (rule "eqSymm" (formula "44") (term "0,0,0,1"))
                                    (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=f_0_0"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "25"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "15"))
                                    (rule "eqSymm" (formula "47"))
                                    (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
                                    (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_SampleParameters<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "42"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "41")))
                                       (rule "replace_known_right" (formula "49") (term "0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "41")))
                                       (rule "closeTrue" (formula "49"))
                                    )
                                    (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_SampleParameters<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " o_0 = values & exists int iv; ( arr(iv) = f_0 & iv >= begin & iv <= -1 + begin + self.num_samples) & !f_0 = java.lang.Object::<created> | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_SampleParameters<<anonHeapFunction>> = TRUE | o_0.<created>@anon_heap_select_n<<anonHeapFunction>> = TRUE) TRUE"
                                          (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "orLeft" (formula "1"))
                                          (branch " o_0 = values & exists int iv; ( arr(iv) = f_0 & iv >= begin & iv <= -1 + begin + self.num_samples) & !f_0 = java.lang.Object::<created>"
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "replace_known_left" (formula "50") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "applyEq" (formula "51") (term "0,0,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "notRight" (formula "51"))
                                             (rule "replace_known_left" (formula "45") (term "0,0,1") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "45"))
                                             (rule "false_right" (formula "45"))
                                             (rule "applyEq" (formula "51") (term "2,0") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "44") (term "0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "false_right" (formula "44"))
                                             (rule "applyEq" (formula "48") (term "0") (ifseqformula "2"))
                                             (rule "disjointAllFields" (formula "48") (ifseqformula "17"))
                                             (rule "false_right" (formula "48"))
                                             (rule "applyEq" (formula "49") (term "1,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "2"))
                                             (rule "narrowSelectArrayType" (formula "49") (term "0") (ifseqformula "35") (ifseqformula "47"))
                                             (rule "eqSymm" (formula "49"))
                                             (rule "applyEq" (formula "48") (term "1,0,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "48") (term "2,0") (ifseqformula "2"))
                                             (rule "narrowSelectArrayType" (formula "48") (term "0") (ifseqformula "5") (ifseqformula "46"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                                             (rule "mul_literals" (formula "4") (term "0,0,1"))
                                             (rule "nnf_ex2all" (formula "47"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                             (rule "commute_or" (formula "1") (term "0,0"))
                                             (rule "commute_or_2" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "leq_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                              (builtin "Use Dependency Contract" (formula "22") (term "0") (ifInst ""  (formula "19") (term "0")) (ifInst ""  (formula "19")) (contract "de.wiesler.SampleParameters[de.wiesler.SampleParameters::isValidForLen(int)].JML accessible clause.0"))
                                              (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "46")) (ifInst ""  (formula "45")) (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "44"))
                                             (rule "inEqSimp_ltToLeq" (formula "14"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "14") (term "0"))
                                             (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "15"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "14"))
                                             (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0"))
                                             (rule "qeq_literals" (formula "11") (term "0"))
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "15"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "translateJavaMulInt" (formula "15") (term "1,1,0,0,0,0,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "15") (term "1,1,0,0,0,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0,1,0,0"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "22"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "25"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "disjointDefinition" (formula "51"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "notLeft" (formula "51"))
                                             (rule "disjointDefinition" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "disjointDefinition" (formula "49"))
                                              (builtin "One Step Simplification" (formula "49"))
                                             (rule "notLeft" (formula "49"))
                                             (rule "eqSymm" (formula "76"))
                                             (rule "disjointDefinition" (formula "48"))
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "notLeft" (formula "48"))
                                             (rule "eqSymm" (formula "75"))
                                             (rule "disjointDefinition" (formula "47"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "notLeft" (formula "47"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "disjointDefinition" (formula "46"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "notLeft" (formula "46"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "disjointDefinition" (formula "45"))
                                              (builtin "One Step Simplification" (formula "45"))
                                             (rule "notLeft" (formula "45"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "disjointDefinition" (formula "44"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "notLeft" (formula "44"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "disjointDefinition" (formula "43"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "notLeft" (formula "43"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "disjointDefinition" (formula "42"))
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "notLeft" (formula "42"))
                                             (rule "eqSymm" (formula "69"))
                                             (rule "disjointDefinition" (formula "41"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "notLeft" (formula "41"))
                                             (rule "eqSymm" (formula "68"))
                                             (rule "disjointDefinition" (formula "40"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "notLeft" (formula "40"))
                                             (rule "eqSymm" (formula "67"))
                                             (rule "disjointDefinition" (formula "39"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "notLeft" (formula "39"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "disjointDefinition" (formula "38"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "eqSymm" (formula "65"))
                                             (rule "disjointDefinition" (formula "37"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "notLeft" (formula "37"))
                                             (rule "eqSymm" (formula "64"))
                                             (rule "disjointDefinition" (formula "36"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "disjointDefinition" (formula "35"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "notLeft" (formula "35"))
                                             (rule "eqSymm" (formula "62"))
                                             (rule "disjointDefinition" (formula "34"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "notLeft" (formula "34"))
                                             (rule "eqSymm" (formula "61"))
                                             (rule "disjointDefinition" (formula "33"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "notLeft" (formula "33"))
                                             (rule "disjointDefinition" (formula "32"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "disjointDefinition" (formula "31"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "disjointDefinition" (formula "30"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "disjointDefinition" (formula "29"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "notLeft" (formula "29"))
                                             (rule "disjointDefinition" (formula "28"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "notLeft" (formula "28"))
                                             (rule "disjointDefinition" (formula "27"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "notLeft" (formula "27"))
                                             (rule "disjointDefinition" (formula "26"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "notLeft" (formula "26"))
                                             (rule "disjointDefinition" (formula "24"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "disjointDefinition" (formula "24"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "23"))
                                             (rule "distributeIntersection" (formula "24") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "distributeIntersection" (formula "25") (term "0"))
                                             (rule "distributeIntersection" (formula "24") (term "0"))
                                             (rule "distributeIntersection" (formula "25") (term "1,0"))
                                             (rule "distributeIntersection" (formula "25") (term "0,0"))
                                             (rule "unionEqualsEmpty" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "unionEqualsEmpty" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "distributeIntersection" (formula "25") (term "0"))
                                             (rule "distributeIntersection" (formula "24") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "27"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "andLeft" (formula "27"))
                                             (rule "notLeft" (formula "27"))
                                             (rule "notLeft" (formula "27"))
                                             (rule "eqSymm" (formula "54"))
                                             (rule "eqSymm" (formula "53"))
                                             (rule "unionEqualsEmpty" (formula "26"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "notLeft" (formula "27"))
                                             (rule "notLeft" (formula "26"))
                                             (rule "eqSymm" (formula "53"))
                                             (rule "eqSymm" (formula "52"))
                                             (rule "unionEqualsEmpty" (formula "25"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "andLeft" (formula "25"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "eqSymm" (formula "52"))
                                             (rule "eqSymm" (formula "51"))
                                             (rule "unionEqualsEmpty" (formula "24"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "eqSymm" (formula "51"))
                                             (rule "eqSymm" (formula "50"))
                                             (rule "commuteUnion" (formula "23") (term "0,0,1"))
                                             (rule "commuteUnion" (formula "23") (term "1,1,1"))
                                             (rule "commuteUnion_2" (formula "42") (term "0,0,1,0"))
                                             (rule "commuteUnion" (formula "42") (term "1,1,0,1,0"))
                                             (rule "commuteUnion_2" (formula "23") (term "0,1"))
                                             (rule "commuteUnion" (formula "42") (term "0,0,0,1,0"))
                                             (rule "commuteUnion_2" (formula "23") (term "1"))
                                             (rule "commuteUnion_2" (formula "42") (term "0,0,1,0"))
                                             (rule "commuteUnion" (formula "23") (term "0,0,1"))
                                             (rule "commuteUnion_2" (formula "42") (term "0,1,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "46"))
                                              (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "86")) (ifInst ""  (formula "87")) (ifInst ""  (formula "88")) (ifInst ""  (formula "89")) (ifInst ""  (formula "90")) (ifInst ""  (formula "91")) (ifInst ""  (formula "92")) (ifInst ""  (formula "93")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                                             (rule "translateJavaMulInt" (formula "46") (term "1,1,0,0"))
                                             (rule "translateJavaMulInt" (formula "46") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "46") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                             (rule "andLeft" (formula "46"))
                                             (rule "andLeft" (formula "46"))
                                             (rule "andLeft" (formula "48"))
                                             (rule "andLeft" (formula "46"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "disjointDefinition" (formula "74"))
                                              (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "113")))
                                             (rule "true_left" (formula "74"))
                                             (rule "disjointDefinition" (formula "73"))
                                              (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "111")))
                                             (rule "true_left" (formula "73"))
                                             (rule "disjointDefinition" (formula "72"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "notLeft" (formula "72"))
                                             (rule "eqSymm" (formula "75"))
                                             (rule "disjointDefinition" (formula "71"))
                                              (builtin "One Step Simplification" (formula "71"))
                                             (rule "notLeft" (formula "71"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "disjointDefinition" (formula "70"))
                                              (builtin "One Step Simplification" (formula "70"))
                                             (rule "notLeft" (formula "70"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "disjointDefinition" (formula "69"))
                                              (builtin "One Step Simplification" (formula "69"))
                                             (rule "notLeft" (formula "69"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "disjointDefinition" (formula "68"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "notLeft" (formula "68"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "disjointDefinition" (formula "67"))
                                              (builtin "One Step Simplification" (formula "67"))
                                             (rule "notLeft" (formula "67"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "disjointDefinition" (formula "66"))
                                              (builtin "One Step Simplification" (formula "66"))
                                             (rule "notLeft" (formula "66"))
                                             (rule "eqSymm" (formula "69"))
                                             (rule "disjointDefinition" (formula "65"))
                                              (builtin "One Step Simplification" (formula "65"))
                                             (rule "notLeft" (formula "65"))
                                             (rule "eqSymm" (formula "68"))
                                             (rule "disjointDefinition" (formula "64"))
                                              (builtin "One Step Simplification" (formula "64"))
                                             (rule "notLeft" (formula "64"))
                                             (rule "eqSymm" (formula "67"))
                                             (rule "disjointDefinition" (formula "63"))
                                              (builtin "One Step Simplification" (formula "63"))
                                             (rule "notLeft" (formula "63"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "disjointDefinition" (formula "62"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "notLeft" (formula "62"))
                                             (rule "eqSymm" (formula "65"))
                                             (rule "disjointDefinition" (formula "61"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "notLeft" (formula "61"))
                                             (rule "eqSymm" (formula "64"))
                                             (rule "disjointDefinition" (formula "60"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "notLeft" (formula "60"))
                                             (rule "eqSymm" (formula "63"))
                                             (rule "disjointDefinition" (formula "59"))
                                              (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "83")))
                                             (rule "true_left" (formula "59"))
                                             (rule "disjointDefinition" (formula "58"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "notLeft" (formula "58"))
                                             (rule "eqSymm" (formula "61"))
                                             (rule "disjointDefinition" (formula "57"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "notLeft" (formula "57"))
                                             (rule "eqSymm" (formula "60"))
                                             (rule "disjointDefinition" (formula "56"))
                                              (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "77")))
                                             (rule "true_left" (formula "56"))
                                             (rule "disjointDefinition" (formula "55"))
                                              (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "75")))
                                             (rule "true_left" (formula "55"))
                                             (rule "disjointDefinition" (formula "54"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "73")))
                                             (rule "true_left" (formula "54"))
                                             (rule "disjointDefinition" (formula "53"))
                                              (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "71")))
                                             (rule "true_left" (formula "53"))
                                             (rule "disjointDefinition" (formula "52"))
                                              (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "69")))
                                             (rule "true_left" (formula "52"))
                                             (rule "disjointDefinition" (formula "51"))
                                              (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "67")))
                                             (rule "true_left" (formula "51"))
                                             (rule "disjointDefinition" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "65")))
                                             (rule "true_left" (formula "50"))
                                             (rule "disjointDefinition" (formula "49"))
                                              (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "63")))
                                             (rule "true_left" (formula "49"))
                                             (rule "disjointDefinition" (formula "48"))
                                              (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "60")))
                                             (rule "true_left" (formula "48"))
                                             (rule "disjointDefinition" (formula "47"))
                                              (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "60")))
                                             (rule "true_left" (formula "47"))
                                             (rule "applyEq" (formula "46") (term "0") (ifseqformula "23"))
                                             (rule "eqSymm" (formula "46"))
                                             (rule "commuteUnion" (formula "46") (term "0,0,0"))
                                             (rule "commuteUnion" (formula "46") (term "1,1,0"))
                                             (rule "commuteUnion_2" (formula "46") (term "0,0"))
                                             (rule "commuteUnion_2" (formula "46") (term "0"))
                                             (rule "commuteUnion" (formula "46") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "28") (term "0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "translateJavaDivInt" (formula "28") (term "1,1,0,0,0,0,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "0,1"))
                                             (rule "translateJavaMod" (formula "28") (term "0,1,0"))
                                             (rule "translateJavaMulInt" (formula "28") (term "0,0,1"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "polySimp_elimSub" (formula "35") (term "0"))
                                             (rule "mul_literals" (formula "35") (term "1,0"))
                                             (rule "polySimp_addComm0" (formula "35") (term "0"))
                                             (rule "translateJavaShiftLeftIntConstant" (formula "33") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "30"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31"))
                                             (rule "inEqSimp_commuteLeq" (formula "32"))
                                             (rule "inEqSimp_commuteLeq" (formula "28"))
                                             (rule "inEqSimp_homoInEq0" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                             (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                             (rule "jmod_axiom" (formula "34") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "34"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "30") (term "0,1"))
                                             (rule "mul_literals" (formula "30") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0"))
                                             (rule "javaShiftLeftIntDef" (formula "33") (term "1"))
                                             (rule "mod_axiom" (formula "33") (term "1,0,1"))
                                             (rule "div_literals" (formula "33") (term "0,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "33") (term "0,1,1,0,1"))
                                             (rule "mul_literals" (formula "33") (term "1,1,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "1,0,1"))
                                             (rule "shiftleft_literals" (formula "33") (term "0,1"))
                                             (rule "newSym_eq" (formula "34") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                             (rule "times_zero_1" (formula "34") (term "1,1"))
                                             (rule "add_zero_right" (formula "34") (term "1"))
                                             (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "34"))
                                             (rule "eqSymm" (formula "35"))
                                             (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                                             (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "35"))
                                             (rule "polySimp_mulAssoc" (formula "36") (term "0"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                                             (rule "inEqSimp_commuteLeq" (formula "33"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                             (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                                             (rule "leq_literals" (formula "32") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0"))
                                             (rule "leq_literals" (formula "32") (term "0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "29"))
                                             (rule "mul_literals" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                             (rule "mul_literals" (formula "28") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "31"))
                                             (rule "mul_literals" (formula "29") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                             (rule "mul_literals" (formula "29") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                                             (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "13"))
                                             (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0"))
                                             (rule "qeq_literals" (formula "29") (term "0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "31"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_SampleParameters<<anonHeapFunction>> = TRUE | o_0.<created>@anon_heap_select_n<<anonHeapFunction>> = TRUE)"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "39"))
                                             (rule "orRight" (formula "39"))
                                             (rule "replace_known_right" (formula "50") (term "0,0") (ifseqformula "42"))
                                              (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "39")))
                                             (rule "closeTrue" (formula "50"))
                                          )
                                       )
                                       (branch " o_0 = values & exists int iv; ( arr(iv) = f_0 & iv >= begin & iv <= -1 + begin + self.num_samples) & !f_0 = java.lang.Object::<created> | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_SampleParameters<<anonHeapFunction>> = TRUE | o_0.<created>@anon_heap_select_n<<anonHeapFunction>> = TRUE) FALSE"
                                          (rule "close" (formula "49") (ifseqformula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Exceptional Post (sort)"
                            (builtin "One Step Simplification" (formula "36"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "translateJavaSubInt" (formula "31") (term "2,0,1,0,0"))
                           (rule "andLeft" (formula "31"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,0") (ifseqformula "24"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,0") (ifseqformula "14"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "34"))
                           (rule "notLeft" (formula "32"))
                           (rule "close" (formula "35") (ifseqformula "34"))
                        )
                        (branch "Pre (sort)"
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "33")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "32")))
                           (rule "andRight" (formula "34"))
                           (branch "Case 1"
                              (rule "andRight" (formula "34"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "34"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "34"))
                                    (branch
                                       (rule "andRight" (formula "34"))
                                       (branch
                                          (rule "inEqSimp_leqRight" (formula "34"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "11"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch
                                          (rule "inEqSimp_leqRight" (formula "34"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "11"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                          (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "translateJavaDivInt" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "translateJavaSubInt" (formula "17") (term "0,1"))
                                          (rule "translateJavaMod" (formula "17") (term "0,1,0"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0,0,1"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "polySimp_elimSub" (formula "24") (term "0"))
                                          (rule "mul_literals" (formula "24") (term "1,0"))
                                          (rule "polySimp_addComm0" (formula "24") (term "0"))
                                          (rule "translateJavaShiftLeftIntConstant" (formula "22") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "19"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_commuteLeq" (formula "21"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_homoInEq0" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                          (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                                          (rule "jmod_axiom" (formula "23") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "23"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "19") (term "0,1"))
                                          (rule "mul_literals" (formula "19") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "closeFalse" (formula "17"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "inEqSimp_leqRight" (formula "34"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                       (rule "mul_literals" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "11"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,0,1,0,0"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "disjointDefinition" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "disjointDefinition" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "disjointDefinition" (formula "45"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "eqSymm" (formula "63"))
                                       (rule "disjointDefinition" (formula "44"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "notLeft" (formula "44"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "disjointDefinition" (formula "43"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "notLeft" (formula "43"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "disjointDefinition" (formula "42"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "eqSymm" (formula "60"))
                                       (rule "disjointDefinition" (formula "41"))
                                        (builtin "One Step Simplification" (formula "41"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "disjointDefinition" (formula "40"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "disjointDefinition" (formula "39"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "disjointDefinition" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "disjointDefinition" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "disjointDefinition" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "disjointDefinition" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "53"))
                                       (rule "disjointDefinition" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "eqSymm" (formula "52"))
                                       (rule "disjointDefinition" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "eqSymm" (formula "51"))
                                       (rule "disjointDefinition" (formula "32"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "disjointDefinition" (formula "31"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "disjointDefinition" (formula "30"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "disjointDefinition" (formula "29"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "disjointDefinition" (formula "28"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "disjointDefinition" (formula "27"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "notLeft" (formula "27"))
                                       (rule "disjointDefinition" (formula "26"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "disjointDefinition" (formula "25"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "disjointDefinition" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "disjointDefinition" (formula "23"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "disjointDefinition" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "disjointDefinition" (formula "21"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "disjointDefinition" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "19"))
                                       (rule "distributeIntersection" (formula "20") (term "0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,0,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,0,0"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "unionEqualsEmpty" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "unionEqualsEmpty" (formula "23"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "eqSymm" (formula "41"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "unionEqualsEmpty" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "commuteUnion_2" (formula "19") (term "0,1"))
                                       (rule "commuteUnion" (formula "19") (term "1,1,1"))
                                       (rule "commuteUnion" (formula "19") (term "0,0,1"))
                                       (rule "commuteUnion_2" (formula "19") (term "0,1"))
                                       (rule "commuteUnion_2" (formula "19") (term "1"))
                                       (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "translateJavaMod" (formula "24") (term "0,1,0"))
                                       (rule "translateJavaMulInt" (formula "24") (term "0,0,1"))
                                       (rule "translateJavaDivInt" (formula "24") (term "1,1,0,0,0,0,0"))
                                       (rule "translateJavaSubInt" (formula "24") (term "0,1"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "25"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "polySimp_elimSub" (formula "31") (term "0"))
                                       (rule "mul_literals" (formula "31") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0"))
                                       (rule "translateJavaShiftLeftIntConstant" (formula "29") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "26"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28"))
                                       (rule "inEqSimp_commuteLeq" (formula "27"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "inEqSimp_homoInEq0" (formula "31"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                                       (rule "jmod_axiom" (formula "30") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "30"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "0,1"))
                                       (rule "mul_literals" (formula "26") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0"))
                                       (rule "javaShiftLeftIntConstantDef" (formula "29") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                                       (rule "div_literals" (formula "29") (term "0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "29") (term "1,1,0,1"))
                                       (rule "add_zero_right" (formula "29") (term "1,0,1"))
                                       (rule "shiftleft_literals" (formula "29") (term "0,1"))
                                       (rule "newSym_eq" (formula "30") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                       (rule "times_zero_1" (formula "30") (term "1,1"))
                                       (rule "add_zero_right" (formula "30") (term "1"))
                                       (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "30"))
                                       (rule "eqSymm" (formula "31"))
                                       (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "31"))
                                       (rule "polySimp_mulAssoc" (formula "32") (term "0"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                                       (rule "inEqSimp_commuteLeq" (formula "29"))
                                       (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "28") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0"))
                                       (rule "leq_literals" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                                       (rule "mul_literals" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                       (rule "mul_literals" (formula "24") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "27"))
                                       (rule "mul_literals" (formula "25") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                       (rule "mul_literals" (formula "25") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0"))
                                       (rule "qeq_literals" (formula "25") (term "0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "26"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "2"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "10"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                       (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0"))
                                       (rule "add_zero_right" (formula "10") (term "0"))
                                       (rule "leq_literals" (formula "10"))
                                       (rule "closeFalse" (formula "10"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "34"))
                                    (branch "Case 1"
                                       (rule "translateJavaSubInt" (formula "34") (term "0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "0"))
                                       (rule "polySimp_addComm1" (formula "34") (term "0"))
                                       (rule "polySimp_pullOutFactor1" (formula "34") (term "0,0"))
                                       (rule "add_literals" (formula "34") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "34"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "11"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0,0,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "disjointDefinition" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "disjointDefinition" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "disjointDefinition" (formula "45"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "eqSymm" (formula "63"))
                                       (rule "disjointDefinition" (formula "44"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "notLeft" (formula "44"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "disjointDefinition" (formula "43"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "notLeft" (formula "43"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "disjointDefinition" (formula "42"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "eqSymm" (formula "60"))
                                       (rule "disjointDefinition" (formula "41"))
                                        (builtin "One Step Simplification" (formula "41"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "disjointDefinition" (formula "40"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "disjointDefinition" (formula "39"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "disjointDefinition" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "disjointDefinition" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "disjointDefinition" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "disjointDefinition" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "53"))
                                       (rule "disjointDefinition" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "eqSymm" (formula "52"))
                                       (rule "disjointDefinition" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "eqSymm" (formula "51"))
                                       (rule "disjointDefinition" (formula "32"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "disjointDefinition" (formula "31"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "disjointDefinition" (formula "30"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "disjointDefinition" (formula "29"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "disjointDefinition" (formula "28"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "disjointDefinition" (formula "27"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "notLeft" (formula "27"))
                                       (rule "disjointDefinition" (formula "26"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "disjointDefinition" (formula "25"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "disjointDefinition" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "disjointDefinition" (formula "23"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "disjointDefinition" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "disjointDefinition" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "disjointDefinition" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "19"))
                                       (rule "distributeIntersection" (formula "20") (term "0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "20") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "20") (term "1,0,0"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "unionEqualsEmpty" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "unionEqualsEmpty" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "eqSymm" (formula "41"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "unionEqualsEmpty" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "eqSymm" (formula "40"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "unionEqualsEmpty" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "commuteUnion_2" (formula "19") (term "0,1"))
                                       (rule "commuteUnion" (formula "19") (term "1,1,1"))
                                       (rule "commuteUnion" (formula "19") (term "0,0,1"))
                                       (rule "commuteUnion_2" (formula "19") (term "0,1"))
                                       (rule "commuteUnion_2" (formula "19") (term "1"))
                                       (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "24") (term "0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,0,0") (ifseqformula "21"))
                                       (rule "wellFormedAnonEQ" (formula "24") (term "1,0,0,0") (ifseqformula "21"))
                                       (rule "replace_known_right" (formula "24") (term "0,1,0") (ifseqformula "83"))
                                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "2")) (ifInst ""  (formula "20")) (ifInst ""  (formula "82")) (ifInst ""  (formula "22")) (ifInst ""  (formula "26")))
                                       (rule "true_left" (formula "24"))
                                       (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "translateJavaMod" (formula "24") (term "0,1,0"))
                                       (rule "translateJavaDivInt" (formula "24") (term "1,1,0,0,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "24") (term "0,0,1"))
                                       (rule "translateJavaSubInt" (formula "24") (term "0,1"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "25"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "polySimp_elimSub" (formula "31") (term "0"))
                                       (rule "mul_literals" (formula "31") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0"))
                                       (rule "translateJavaShiftLeftIntConstant" (formula "29") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "26"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28"))
                                       (rule "inEqSimp_commuteLeq" (formula "27"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "inEqSimp_homoInEq0" (formula "31"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                                       (rule "jmod_axiom" (formula "30") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "30"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "0,1"))
                                       (rule "mul_literals" (formula "26") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "javaShiftLeftIntConstantDef" (formula "28") (term "1"))
                                       (rule "div_literals" (formula "28") (term "0,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                                       (rule "times_zero_2" (formula "28") (term "1,1,0,1"))
                                       (rule "add_zero_right" (formula "28") (term "1,0,1"))
                                       (rule "shiftleft_literals" (formula "28") (term "0,1"))
                                       (rule "newSym_eq" (formula "29") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                       (rule "times_zero_1" (formula "29") (term "1,1"))
                                       (rule "add_zero_right" (formula "29") (term "1"))
                                       (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "30"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
                                       (rule "inEqSimp_commuteLeq" (formula "28"))
                                       (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "30"))
                                       (rule "polySimp_mulAssoc" (formula "31") (term "0"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "30"))
                                       (rule "elimGcdGeq_antec" (formula "27") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                       (rule "leq_literals" (formula "27") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "27") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0"))
                                       (rule "leq_literals" (formula "27") (term "0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "25"))
                                       (rule "mul_literals" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "11"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0"))
                                       (rule "add_zero_right" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "closeFalse" (formula "11"))
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "34"))
                                       (branch "Case 1"
                                           (builtin "Use Dependency Contract" (formula "34") (ifInst ""  (formula "11")) (ifInst ""  (formula "24")) (ifInst ""  (formula "14")) (contract "de.wiesler.Storage[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
                                          (rule "wellFormedAnonEQ" (formula "30") (term "1,1,0,0,0") (ifseqformula "24"))
                                          (rule "wellFormedAnonEQ" (formula "30") (term "0,1,1,0,0,0") (ifseqformula "14"))
                                          (rule "replace_known_left" (formula "30") (term "0,1,0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "33")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "13")) (ifInst ""  (formula "23")) (ifInst ""  (formula "11")) (ifInst ""  (formula "35")) (ifInst ""  (formula "11")))
                                          (rule "notLeft" (formula "30"))
                                          (rule "disjointDefinition" (formula "30"))
                                          (rule "disjointArrayRangeAllFields2" (formula "30"))
                                          (rule "notRight" (formula "30"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "sortsDisjointModuloNull" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "close" (formula "36") (ifseqformula "2"))
                                       )
                                       (branch
                                          (rule "disjointDefinition" (formula "34"))
                                          (rule "inEqSimp_ltToLeq" (formula "9"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "10"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commuteIntersection" (formula "33") (term "0"))
                                          (rule "close" (formula "33") (ifseqformula "11"))
                                       )
                                    )
                                 )
                              )
                              (branch
                                 (rule "andRight" (formula "34"))
                                 (branch
                                    (rule "andRight" (formula "34"))
                                    (branch
                                       (rule "wellFormedAnonEQ" (formula "34") (ifseqformula "24"))
                                       (rule "wellFormedAnonEQ" (formula "34") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")) (ifInst ""  (formula "13")))
                                       (rule "closeTrue" (formula "34"))
                                    )
                                    (branch
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (ifseqformula "24"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0") (ifseqformula "14"))
                                       (rule "orRight" (formula "34"))
                                       (rule "orRight" (formula "34"))
                                       (rule "close" (formula "34") (ifseqformula "2"))
                                    )
                                 )
                                 (branch
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (ifseqformula "24"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0") (ifseqformula "14"))
                                    (rule "orRight" (formula "34"))
                                    (rule "orRight" (formula "34"))
                                    (rule "close" (formula "34") (ifseqformula "3"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "translateJavaSubInt" (formula "34") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "34") (term "0,0,0"))
                              (rule "add_literals" (formula "34") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0"))
                              (rule "measuredByCheck" (formula "34") (ifseqformula "4"))
                              (rule "precOfPair" (formula "34"))
                              (rule "orRight" (formula "34"))
                              (rule "precOfInt" (formula "34"))
                              (rule "precOfInt" (formula "35") (term "1"))
                              (rule "less_literals" (formula "35") (term "1,1"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "false_right" (formula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1"))
                              (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "0,1,1"))
                              (rule "mul_literals" (formula "34") (term "0,0,1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "qeq_literals" (formula "6") (term "0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "16") (term "0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0,0") (ifseqformula "13"))
                              (rule "wellFormedAnonEQ" (formula "16") (term "1,0,0,0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")) (ifInst ""  (formula "12")) (ifInst ""  (formula "30")) (ifInst ""  (formula "14")) (ifInst ""  (formula "18")))
                              (rule "true_left" (formula "16"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "10"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                              (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "15"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "17"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "19"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "10"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "disjointDefinition" (formula "46"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "notLeft" (formula "46"))
                              (rule "disjointDefinition" (formula "45"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "notLeft" (formula "45"))
                              (rule "disjointDefinition" (formula "44"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "notLeft" (formula "44"))
                              (rule "eqSymm" (formula "62"))
                              (rule "disjointDefinition" (formula "43"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "notLeft" (formula "43"))
                              (rule "eqSymm" (formula "61"))
                              (rule "disjointDefinition" (formula "42"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "notLeft" (formula "42"))
                              (rule "eqSymm" (formula "60"))
                              (rule "disjointDefinition" (formula "41"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "notLeft" (formula "41"))
                              (rule "eqSymm" (formula "59"))
                              (rule "disjointDefinition" (formula "40"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "notLeft" (formula "40"))
                              (rule "eqSymm" (formula "58"))
                              (rule "disjointDefinition" (formula "39"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "notLeft" (formula "39"))
                              (rule "eqSymm" (formula "57"))
                              (rule "disjointDefinition" (formula "38"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "notLeft" (formula "38"))
                              (rule "eqSymm" (formula "56"))
                              (rule "disjointDefinition" (formula "37"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "notLeft" (formula "37"))
                              (rule "eqSymm" (formula "55"))
                              (rule "disjointDefinition" (formula "36"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "eqSymm" (formula "54"))
                              (rule "disjointDefinition" (formula "35"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "eqSymm" (formula "53"))
                              (rule "disjointDefinition" (formula "34"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "eqSymm" (formula "52"))
                              (rule "disjointDefinition" (formula "33"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "notLeft" (formula "33"))
                              (rule "eqSymm" (formula "51"))
                              (rule "disjointDefinition" (formula "32"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "notLeft" (formula "32"))
                              (rule "eqSymm" (formula "50"))
                              (rule "disjointDefinition" (formula "31"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "disjointDefinition" (formula "30"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notLeft" (formula "30"))
                              (rule "eqSymm" (formula "48"))
                              (rule "disjointDefinition" (formula "29"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "eqSymm" (formula "47"))
                              (rule "disjointDefinition" (formula "28"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "disjointDefinition" (formula "27"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "disjointDefinition" (formula "26"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "disjointDefinition" (formula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "disjointDefinition" (formula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "notLeft" (formula "24"))
                              (rule "disjointDefinition" (formula "23"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "notLeft" (formula "23"))
                              (rule "disjointDefinition" (formula "22"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "disjointDefinition" (formula "21"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "notLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "20"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "disjointDefinition" (formula "19"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "18"))
                              (rule "distributeIntersection" (formula "19") (term "0"))
                              (rule "distributeIntersection" (formula "19") (term "1,0"))
                              (rule "distributeIntersection" (formula "19") (term "0,0"))
                              (rule "distributeIntersection" (formula "19") (term "0,1,0"))
                              (rule "distributeIntersection" (formula "19") (term "1,1,0"))
                              (rule "distributeIntersection" (formula "19") (term "1,0,0"))
                              (rule "distributeIntersection" (formula "19") (term "0,0,0"))
                              (rule "unionEqualsEmpty" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "unionEqualsEmpty" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "unionEqualsEmpty" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "unionEqualsEmpty" (formula "19"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "eqSymm" (formula "40"))
                              (rule "eqSymm" (formula "39"))
                              (rule "unionEqualsEmpty" (formula "19"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "19"))
                              (rule "eqSymm" (formula "39"))
                              (rule "eqSymm" (formula "38"))
                              (rule "unionEqualsEmpty" (formula "20"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "eqSymm" (formula "38"))
                              (rule "eqSymm" (formula "37"))
                              (rule "unionEqualsEmpty" (formula "19"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "19"))
                              (rule "eqSymm" (formula "37"))
                              (rule "eqSymm" (formula "36"))
                              (rule "commuteUnion" (formula "18") (term "1,1,1"))
                              (rule "commuteUnion_2" (formula "18") (term "0,1"))
                              (rule "commuteUnion" (formula "18") (term "0,0,1"))
                              (rule "commuteUnion_2" (formula "18") (term "0,1"))
                              (rule "commuteUnion_2" (formula "18") (term "1"))
                              (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "23") (term "0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0,0") (ifseqformula "20"))
                              (rule "wellFormedAnonEQ" (formula "23") (term "1,0,0,0") (ifseqformula "20"))
                              (rule "replace_known_right" (formula "23") (term "0,1,0") (ifseqformula "81"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "19")) (ifInst ""  (formula "80")) (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "23"))
                              (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "translateJavaSubInt" (formula "23") (term "0,1"))
                              (rule "translateJavaMod" (formula "23") (term "0,1,0"))
                              (rule "translateJavaDivInt" (formula "23") (term "1,1,0,0,0,0,0"))
                              (rule "translateJavaMulInt" (formula "23") (term "0,0,1"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "24"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "polySimp_elimSub" (formula "30") (term "0"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0"))
                              (rule "translateJavaShiftLeftIntConstant" (formula "28") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "25"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27"))
                              (rule "inEqSimp_commuteLeq" (formula "26"))
                              (rule "inEqSimp_commuteLeq" (formula "23"))
                              (rule "inEqSimp_homoInEq0" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                              (rule "jmod_axiom" (formula "29") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                              (rule "mul_literals" (formula "25") (term "0,0,1"))
                              (rule "replace_known_left" (formula "90") (term "1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "90"))
                              (rule "inEqSimp_geqRight" (formula "90"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                              (rule "polySimp_elimOne" (formula "31") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "24") (term "0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                        )
                     )
                     (branch "Null Reference (parameters = null)"
                        (rule "false_right" (formula "35"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch "Exceptional Post (select_n)"
                (builtin "One Step Simplification" (formula "24"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0"))
               (rule "andLeft" (formula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0") (ifseqformula "14"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "27"))
               (rule "notLeft" (formula "25"))
               (rule "close" (formula "28") (ifseqformula "27"))
            )
            (branch "Pre (select_n)"
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "26")) (ifInst ""  (formula "26")))
               (rule "wellFormedAnonEQ" (formula "27") (term "0,1") (ifseqformula "14"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,1") (ifseqformula "14"))
               (rule "translateJavaSubInt" (formula "27") (term "1,1,1,0"))
               (rule "replace_known_left" (formula "27") (term "0,1,1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")) (ifInst ""  (formula "13")))
               (rule "polySimp_elimSub" (formula "27") (term "1,1,1"))
               (rule "polySimp_addComm0" (formula "27") (term "1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0"))
               (rule "replace_known_left" (formula "27") (term "1,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0"))
               (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
               (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_homoInEq0" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,1"))
               (rule "translateJavaDivInt" (formula "16") (term "1,1,0,0,0,0,0"))
               (rule "translateJavaMod" (formula "16") (term "0,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "0,0,1"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "polySimp_elimSub" (formula "23") (term "0"))
               (rule "mul_literals" (formula "23") (term "1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0"))
               (rule "translateJavaShiftLeftIntConstant" (formula "21") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "18"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "inEqSimp_homoInEq0" (formula "23"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,0"))
               (rule "jmod_axiom" (formula "22") (term "0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "22"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1"))
               (rule "polySimp_rightDist" (formula "18") (term "1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1"))
               (rule "polySimp_rightDist" (formula "18") (term "0,1"))
               (rule "mul_literals" (formula "18") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "33") (term "0") (ifseqformula "16"))
               (rule "leq_literals" (formula "33") (term "0,0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "inEqSimp_leqRight" (formula "33"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "19"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (parameters = null)"
            (rule "false_right" (formula "28"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Exceptional Post (SampleParameters)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "13"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0,0") (ifseqformula "13"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1,0,0,1,0") (ifseqformula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "14"))
   (rule "close" (formula "19") (ifseqformula "18"))
)
(branch "Pre (SampleParameters)"
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "9"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
