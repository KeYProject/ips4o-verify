\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu May 05 18:16:06 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Thu May 05 18:16:06 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "5601")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "array2seqDef" (formula "6") (term "0,0,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "6") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "storage"))
 (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_Storage,self_25,exc_25,heapAfter_Storage,anon_heap_Storage") (contract "de.wiesler.Storage[de.wiesler.Storage::Storage()].JML normal_behavior operation contract.0"))
(branch "Post (Storage)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "assignment" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
    (builtin "Block Contract (Internal)" (formula "15") (newnames "exc_26,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
   (branch "Validity"
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "3")))
       (builtin "One Step Simplification" (formula "16"))
      (rule "eqSymm" (formula "16") (term "0,0,1,0,1"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "exc_26_1"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "emptyStatement" (formula "16") (term "1"))
      (rule "emptyStatement" (formula "16") (term "1"))
      (rule "tryEmpty" (formula "16") (term "1"))
      (rule "blockEmptyLabel" (formula "16") (term "1"))
      (rule "blockEmpty" (formula "16") (term "1"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "emptyModality" (formula "16") (term "1"))
      (rule "andRight" (formula "16"))
      (branch
          (builtin "One Step Simplification" (formula "16"))
         (rule "closeTrue" (formula "16"))
      )
      (branch
          (builtin "One Step Simplification" (formula "16"))
         (rule "closeTrue" (formula "16"))
      )
   )
   (branch "Precondition"
      (rule "andRight" (formula "15"))
      (branch
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
         (rule "closeTrue" (formula "15"))
      )
      (branch
          (builtin "One Step Simplification" (formula "15"))
         (rule "wellFormedAnonEQ" (formula "15") (ifseqformula "6"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "15"))
      )
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "12"))
      (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "elim_double_block_2" (formula "16") (term "1"))
      (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
      (rule "inequality_comparison_simple" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "replace_known_left" (formula "16") (term "0,0,1,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "ifSplit" (formula "16"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "methodCallUnfoldArguments" (formula "16") (term "1"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "var"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_1"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_2"))
         (rule "assignment_read_length" (formula "16"))
         (branch "Normal Execution (_values != null)"
             (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
             (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_sort_0,exc_27,heapAfter_sort,anon_heap_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
            (branch "Post (sort)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaSubInt" (formula "14") (term "2,0,1,0,0"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "polySimp_elimSub" (formula "14") (term "2,0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "2,0,1,0"))
               (rule "commuteUnion" (formula "14") (term "1,0"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "tryEmpty" (formula "22") (term "1"))
               (rule "emptyModality" (formula "22") (term "1"))
               (rule "andRight" (formula "22"))
               (branch "Case 1"
                  (rule "andRight" (formula "22"))
                  (branch "Case 1"
                     (rule "andRight" (formula "22"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "22") (userinteraction))
                        (rule "eqTermCut" (formula "22") (term "1") (inst "s=seqDef{int j;}(Z(0(#)),
               length(values),
               any::select(heapAfter_Storage,
                           values,
                           arr(j)))") (userinteraction))
                        (branch "Assume seqDef{int u;}(0, values.length, any::select(heap, values, arr(u))) = seqDef{int j;}(0, values.length, any::select(heapAfter_Storage, values, arr(j)))"
                           (rule "narrowSelectArrayType" (formula "23") (term "2,1") (ifseqformula "2") (ifseqformula "22"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "2") (ifseqformula "22"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                           (rule "close" (formula "23") (ifseqformula "17"))
                        )
                        (branch "Assume seqDef{int u;}(0, values.length, any::select(heap, values, arr(u))) != seqDef{int j;}(0, values.length, any::select(heapAfter_Storage, values, arr(j)))"
                           (rule "notLeft" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "23") (term "2,1") (ifseqformula "1") (ifseqformula "22"))
                           (rule "narrowSelectArrayType" (formula "19") (term "2,0") (ifseqformula "1") (ifseqformula "22"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "19") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "19") (term "0,0"))
                           (rule "eqSymm" (formula "19") (term "0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "19") (term "1,1,0,1"))
                           (rule "castDel" (formula "19") (term "2,1,1,0,1"))
                           (rule "castDel" (formula "19") (term "1,1,1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0,1"))
                           (rule "getOfSeqDef" (formula "19") (term "0,1,0,1"))
                           (rule "castDel" (formula "19") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "19") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "allRight" (formula "19") (inst "sk=iv_0"))
                           (rule "impRight" (formula "19"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                           (rule "eqSymm" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1"))
                           (rule "eqSymm" (formula "21"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                           (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "21") (term "1,0") (ifseqformula "3") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "17")))
                        (rule "closeTrue" (formula "22"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "closeTrue" (formula "22"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "22") (userinteraction))
                  (rule "allRight" (formula "22") (inst "sk=f_0"))
                  (rule "allRight" (formula "22") (inst "sk=o_0"))
                  (rule "orRight" (formula "22"))
                  (rule "orRight" (formula "22"))
                  (rule "eqSymm" (formula "24"))
                  (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "7"))
                  (rule "eqSymm" (formula "25"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " !f_0 = java.lang.Object::<created> & (o_0, f_0) in self_25.allArrays | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_Storage<<anonHeapFunction>> = TRUE) TRUE"
                     (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "25"))
                     (rule "orLeft" (formula "1"))
                     (branch " !f_0 = java.lang.Object::<created> & (o_0, f_0) in self_25.allArrays"
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfSubsetImpliesElementOfSuperset" (formula "1") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_Storage<<anonHeapFunction>> = TRUE)"
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "19"))
                        (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "19")))
                        (rule "closeTrue" (formula "26"))
                     )
                  )
                  (branch " !f_0 = java.lang.Object::<created> & (o_0, f_0) in self_25.allArrays | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_Storage<<anonHeapFunction>> = TRUE) FALSE"
                     (rule "close" (formula "26") (ifseqformula "1"))
                  )
               )
            )
            (branch "Exceptional Post (sort)"
                (builtin "One Step Simplification" (formula "14"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaSubInt" (formula "14") (term "2,0,1,0,0"))
               (rule "andLeft" (formula "14"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1,0") (ifseqformula "6"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "15"))
               (rule "close" (formula "18") (ifseqformula "17"))
            )
            (branch "Pre (sort)"
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "10")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (userinteraction))
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                     (rule "andRight" (formula "16"))
                     (branch "Case 1"
                        (rule "andRight" (formula "16"))
                        (branch "Case 1"
                           (rule "andRight" (formula "16"))
                           (branch
                              (rule "leq_literals" (formula "16"))
                              (rule "closeTrue" (formula "16"))
                           )
                           (branch "Case 2"
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
                              (rule "leq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "10"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                              (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "16"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "11"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "disjointDefinition" (formula "46"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "notLeft" (formula "46"))
                              (rule "disjointDefinition" (formula "45"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "notLeft" (formula "45"))
                              (rule "disjointDefinition" (formula "44"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "notLeft" (formula "44"))
                              (rule "eqSymm" (formula "46"))
                              (rule "disjointDefinition" (formula "43"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "notLeft" (formula "43"))
                              (rule "eqSymm" (formula "45"))
                              (rule "disjointDefinition" (formula "42"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "notLeft" (formula "42"))
                              (rule "eqSymm" (formula "44"))
                              (rule "disjointDefinition" (formula "41"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "notLeft" (formula "41"))
                              (rule "eqSymm" (formula "43"))
                              (rule "disjointDefinition" (formula "40"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "notLeft" (formula "40"))
                              (rule "eqSymm" (formula "42"))
                              (rule "disjointDefinition" (formula "39"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "notLeft" (formula "39"))
                              (rule "eqSymm" (formula "41"))
                              (rule "disjointDefinition" (formula "38"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "notLeft" (formula "38"))
                              (rule "eqSymm" (formula "40"))
                              (rule "disjointDefinition" (formula "37"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "notLeft" (formula "37"))
                              (rule "eqSymm" (formula "39"))
                              (rule "disjointDefinition" (formula "36"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "eqSymm" (formula "38"))
                              (rule "disjointDefinition" (formula "35"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "eqSymm" (formula "37"))
                              (rule "disjointDefinition" (formula "34"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "eqSymm" (formula "36"))
                              (rule "disjointDefinition" (formula "33"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "notLeft" (formula "33"))
                              (rule "eqSymm" (formula "35"))
                              (rule "disjointDefinition" (formula "32"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "notLeft" (formula "32"))
                              (rule "eqSymm" (formula "34"))
                              (rule "disjointDefinition" (formula "31"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "disjointDefinition" (formula "30"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notLeft" (formula "30"))
                              (rule "eqSymm" (formula "32"))
                              (rule "disjointDefinition" (formula "29"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "eqSymm" (formula "31"))
                              (rule "disjointDefinition" (formula "28"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "disjointDefinition" (formula "27"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "disjointDefinition" (formula "26"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "disjointDefinition" (formula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "disjointDefinition" (formula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "notLeft" (formula "24"))
                              (rule "disjointDefinition" (formula "23"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "notLeft" (formula "23"))
                              (rule "disjointDefinition" (formula "22"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "disjointDefinition" (formula "21"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "notLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "20"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "disjointDefinition" (formula "19"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "18"))
                              (rule "subsetUnionLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "subsetUnionLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "subsetUnionLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "subsetUnionLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "subsetUnionLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "subsetUnionLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "subsetUnionLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "commuteUnion" (formula "25") (term "0,1"))
                              (rule "commuteUnion" (formula "25") (term "1,1,1"))
                              (rule "commuteUnion" (formula "25") (term "1,0,1"))
                              (rule "associativeLawUnion" (formula "25") (term "1"))
                              (rule "associativeLawUnion" (formula "25") (term "1"))
                              (rule "associativeLawUnion" (formula "25") (term "0,0,1"))
                              (rule "commuteUnion_2" (formula "25") (term "0,1"))
                              (rule "commuteUnion_2" (formula "25") (term "0,0,0,1"))
                              (rule "commuteUnion_2" (formula "25") (term "0,0,1"))
                              (rule "associativeLawUnion" (formula "25") (term "0,0,1"))
                              (rule "commuteUnion_2" (formula "25") (term "0,1"))
                              (rule "commuteUnion_2" (formula "25") (term "1"))
                              (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "16"))
                        (branch
                           (rule "translateJavaSubInt" (formula "16") (term "0"))
                           (rule "polySimp_elimSub" (formula "16") (term "0"))
                           (rule "mul_literals" (formula "16") (term "1,0"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "close" (formula "16") (ifseqformula "4"))
                        )
                        (branch "Case 2"
                           (rule "disjointDefinition" (formula "16"))
                           (rule "commuteIntersection" (formula "16") (term "0"))
                           (rule "equalityToElementOfRight" (formula "16") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "allRight" (formula "16") (inst "sk=ov_0"))
                           (rule "allRight" (formula "16") (inst "sk=fv_0"))
                           (rule "notRight" (formula "16"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSubsetImpliesElementOfSuperset" (formula "2") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
                  (branch
                     (rule "andRight" (formula "16"))
                     (branch
                        (rule "andRight" (formula "16"))
                        (branch
                           (rule "wellFormedAnonEQ" (formula "16") (ifseqformula "6"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "5")))
                           (rule "closeTrue" (formula "16"))
                        )
                        (branch
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (ifseqformula "6"))
                           (rule "orRight" (formula "16"))
                           (rule "close" (formula "16") (ifseqformula "2"))
                        )
                     )
                     (branch
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (ifseqformula "6"))
                        (rule "orRight" (formula "16"))
                        (rule "close" (formula "16") (ifseqformula "7"))
                     )
                  )
               )
               (branch
                  (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0"))
                  (rule "measuredByCheckEmpty" (formula "16") (ifseqformula "3"))
                  (rule "closeTrue" (formula "16"))
               )
            )
         )
         (branch "Null Reference (_values = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Exceptional Post (Storage)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0,0") (ifseqformula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (Storage)"
    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "6"))
)
)
}
