\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 07 16:00:51 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java-overflow";

\proofObligation "#Proof Obligation Settings
#Thu Apr 07 16:00:51 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isClassifiedBlocksRange([I,int,int)].JML accessible clause.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isClassifiedBlocksRange([I,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "7740")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self_259,values_0,begin,end,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "13") (term "0") (inst "block=block") (userinteraction))
(rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "13") (term "1,1") (inst "block=block") (userinteraction))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "12"))
(rule "equiv_right" (formula "12") (userinteraction))
(branch "Case '->'"
   (rule "allRight" (formula "13") (inst "sk=block_0") (userinteraction))
   (rule "instAll" (formula "13") (term "1,0,0") (ifseqformula "1") (userinteraction))
    (builtin "Use Dependency Contract" (formula "14") (term "0,1") (ifInst ""  (formula "1") (term "0,1")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::isClassifiedBlock([I,int,int)].JML accessible clause.0") (userinteraction))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "7")) (ifInst ""  (formula "11")) (ifInst ""  (formula "14")) (userinteraction))
   (rule "impLeft" (formula "12") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "12") (userinteraction))
      (branch "Case 1"
         (rule "true_left" (formula "8"))
         (rule "wellFormedAnon" (formula "11"))
         (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
         (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1"))
         (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
         (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
         (rule "translateJavaSubInt" (formula "9") (term "0,0"))
         (rule "translateJavaDivInt" (formula "1") (term "1,1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "3,0,1"))
         (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
         (rule "translateJavaDivInt" (formula "2") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "2") (term "3,0,1,0"))
         (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
         (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
         (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
         (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
         (rule "translateJavaSubInt" (formula "1") (term "0,1,1,0"))
         (rule "translateJavaMulInt" (formula "1") (term "1,3,0,1"))
         (rule "translateJavaMulInt" (formula "1") (term "1,4,0,1"))
         (rule "translateJavaSubInt" (formula "2") (term "0,1,1,0,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,3,0,1,0"))
         (rule "translateJavaMulInt" (formula "2") (term "1,4,0,1,0"))
         (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
         (rule "translateJavaAddInt" (formula "1") (term "0,1,4,0,1"))
         (rule "translateJavaAddInt" (formula "2") (term "0,1,4,0,1,0"))
         (rule "impRight" (formula "14"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "13"))
      )
      (branch "Case 2"
         (rule "translateJavaSubInt" (formula "12") (term "2,1,1,0"))
         (rule "translateJavaAddInt" (formula "12") (term "1,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,1"))
         (rule "translateJavaMulInt" (formula "12") (term "1,1,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1"))
         (rule "translateJavaMulInt" (formula "12") (term "1,0,2,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,1,0,2,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "2,1,1,0"))
         (rule "mul_literals" (formula "12") (term "1,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "12") (term "2,1,1"))
         (rule "polySimp_elimOneLeft0" (formula "12") (term "1,2,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,2,1,1"))
         (rule "polySimp_addComm0" (formula "12") (term "2,1,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,2,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,2,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,2,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,2,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "2,1,1"))
         (rule "polySimp_addLiterals" (formula "12") (term "0,2,1,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1"))
         (rule "disjointDefinition" (formula "12"))
         (rule "distributeIntersection" (formula "12") (term "0"))
         (rule "unionEqualsEmpty" (formula "12"))
         (rule "distributeIntersection" (formula "12") (term "0,0"))
         (rule "unionEqualsEmpty" (formula "12") (term "0"))
         (rule "commuteIntersection" (formula "12") (term "0,0,0"))
         (rule "commuteIntersection" (formula "12") (term "0,1,0"))
         (rule "cut_direct" (formula "12") (term "0,0"))
         (branch "CUT: self_259.sorted_splitters.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "cut_direct" (formula "13") (term "0"))
            (branch "CUT: self_259.tree.tree.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
                (builtin "One Step Simplification" (formula "14"))
               (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "allRight" (formula "14") (inst "sk=ov_0"))
               (rule "allRight" (formula "14") (inst "sk=fv_0"))
               (rule "notRight" (formula "14"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
               (rule "andLeft" (formula "2"))
               (rule "exLeft" (formula "3") (inst "sk=iv_0"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "elementOfSetMinus" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "elementOfUnion" (formula "18"))
               (rule "orRight" (formula "18"))
               (rule "elementOfArrayRangeConcrete" (formula "19"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
               (rule "elementOfUnion" (formula "18"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "orRight" (formula "18"))
               (rule "eqSymm" (formula "19"))
               (rule "eqSymm" (formula "18"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,1,0,1,1,0") (ifseqformula "9") (ifseqformula "11"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "10") (ifseqformula "12"))
               (rule "cut_direct" (formula "22") (term "0"))
               (branch "CUT: iv_0 >= begin TRUE"
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_leqRight" (formula "23"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=block_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "cut_direct" (formula "10") (term "0"))
                  (branch "CUT: self_259.tree = null TRUE"
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "9") (term "0,0,1,0,1,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "12") (term "0,0,1,0,1,1,0") (ifseqformula "10"))
                     (rule "cut_direct" (formula "11") (term "0"))
                     (branch "CUT: self_259.sorted_splitters = null TRUE"
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "applyEq" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "9") (term "0,0,0,1,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "24"))
                        (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                        (rule "true_left" (formula "20"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                        (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                        (rule "translateJavaDivInt" (formula "26") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "26") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "26") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "26") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                        (rule "translateJavaSubInt" (formula "26") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "26") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "26") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "26") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "impRight" (formula "26"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                        (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "28") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "28") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,4,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "applyEq" (formula "27") (term "0,0,1,0,1,1,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
                        (rule "closeFalse" (formula "23"))
                     )
                     (branch "CUT: self_259.sorted_splitters = null FALSE"
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "20"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                        (rule "translateJavaDivInt" (formula "28") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "28") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "3,0,1"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                        (rule "translateJavaSubInt" (formula "28") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,3,0,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                        (rule "impRight" (formula "28"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                        (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "30") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "30") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,4,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,4,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0,1,1,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "11")) (ifInst ""  (formula "24")))
                        (rule "closeFalse" (formula "23"))
                     )
                  )
                  (branch "CUT: self_259.tree = null FALSE"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cut_direct" (formula "11") (term "0"))
                     (branch "CUT: self_259.sorted_splitters = null TRUE"
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "25"))
                        (rule "applyEq" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "9") (term "0,0,0,1,1,0") (ifseqformula "11"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "0") (ifseqformula "15") (ifseqformula "10"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: self_259.tree.tree = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "26"))
                           (rule "applyEq" (formula "13") (term "0,1,0,1,1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                           (rule "true_left" (formula "20"))
                           (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                           (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                           (rule "translateJavaDivInt" (formula "26") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "26") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "26") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "26") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                           (rule "translateJavaSubInt" (formula "26") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "26") (term "1,3,0,1"))
                           (rule "translateJavaAddInt" (formula "26") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "26") (term "1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                           (rule "impRight" (formula "26"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "28") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,4,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,4,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "nnf_imp2or" (formula "15") (term "0"))
                           (rule "nnf_notAnd" (formula "15") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")) (ifInst ""  (formula "12")))
                           (rule "closeFalse" (formula "23"))
                        )
                        (branch "CUT: self_259.tree.tree = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "21"))
                           (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                           (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                           (rule "translateJavaDivInt" (formula "29") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                           (rule "translateJavaSubInt" (formula "29") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "29") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "impRight" (formula "29"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,4,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,4,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,1,1,0,0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "13")))
                           (rule "closeFalse" (formula "24"))
                        )
                     )
                     (branch "CUT: self_259.sorted_splitters = null FALSE"
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "0") (ifseqformula "15") (ifseqformula "10"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: self_259.tree.tree = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "13") (term "0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "commuteUnion" (formula "10") (term "0,1,1,0"))
                           (rule "commuteUnion" (formula "13") (term "0,1,1,0"))
                           (rule "true_left" (formula "21"))
                           (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                           (rule "translateJavaDivInt" (formula "29") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                           (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "impRight" (formula "29"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                           (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,4,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,4,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "30") (term "0,1,0,1,1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "commuteUnion" (formula "30") (term "0,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
                           (rule "translateJavaMulInt" (formula "24") (term "1,1,1,0,0,0,0"))
                           (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "26"))
                           (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "inEqSimp_commuteLeq" (formula "24"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "translateJavaMod" (formula "23") (term "0"))
                           (rule "jmod_axiom" (formula "23") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "23"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                           (rule "newSym_eq" (formula "23") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(end, Z(0(#))))"))
                           (rule "times_zero_1" (formula "23") (term "1,1,1"))
                           (rule "times_zero_1" (formula "23") (term "0,1,1"))
                           (rule "add_zero_left" (formula "23") (term "1,1"))
                           (rule "add_zero_right" (formula "23") (term "1"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "23"))
                           (rule "polySimp_homoEq" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                           (rule "applyEq" (formula "11") (term "1,2,1,1,1,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "11") (term "2,1,1,1,0"))
                           (rule "applyEq" (formula "37") (term "1,2,1,1,1,0,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "37") (term "2,1,1,1,0,0"))
                           (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                           (rule "add_literals" (formula "23") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0"))
                           (rule "applyEq" (formula "14") (term "1,2,1,1,1,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "14") (term "2,1,1,1,0"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "24"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_contradInEq3" (formula "3") (ifseqformula "1"))
                           (rule "greater_literals" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: self_259.tree.tree = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "21"))
                           (rule "translateJavaDivInt" (formula "31") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                           (rule "translateJavaSubInt" (formula "31") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "31") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "31") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "31") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "31") (term "1,3,0,1"))
                           (rule "translateJavaAddInt" (formula "31") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "31") (term "1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                           (rule "impRight" (formula "31"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "33") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,4,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,4,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,4,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
                           (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0"))
                           (rule "translateJavaMulInt" (formula "24") (term "1,1,1,0,0,0,0"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "26"))
                           (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "inEqSimp_commuteLeq" (formula "24"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "translateJavaMod" (formula "23") (term "0"))
                           (rule "jmod_axiom" (formula "23") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "23"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                           (rule "newSym_eq" (formula "23") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(end, Z(0(#))))"))
                           (rule "times_zero_1" (formula "23") (term "0,1,1"))
                           (rule "times_zero_1" (formula "23") (term "1,1,1"))
                           (rule "add_zero_right" (formula "23") (term "1,1"))
                           (rule "add_zero_right" (formula "23") (term "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "23"))
                           (rule "polySimp_homoEq" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "24"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "14") (term "1,2,1,1,1,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "14") (term "2,1,1,1,0"))
                           (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                           (rule "add_literals" (formula "23") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0"))
                           (rule "applyEq" (formula "11") (term "1,2,1,1,1,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "11") (term "2,1,1,1,0"))
                           (rule "applyEq" (formula "39") (term "1,2,1,1,1,0,0") (ifseqformula "24"))
                           (rule "polySimp_addAssoc" (formula "39") (term "2,1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_contradInEq3" (formula "3") (ifseqformula "1"))
                           (rule "greater_literals" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
               )
               (branch "CUT: iv_0 >= begin FALSE"
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_geqRight" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=block_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "cut_direct" (formula "8") (term "0"))
                  (branch "CUT: self_259.tree = null TRUE"
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "7") (term "0,0,1,0,1,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "10") (term "0,0,1,0,1,1,0") (ifseqformula "8"))
                     (rule "cut_direct" (formula "9") (term "0"))
                     (branch "CUT: self_259.sorted_splitters = null TRUE"
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "9"))
                        (rule "eqSymm" (formula "22"))
                        (rule "applyEq" (formula "10") (term "0,0,0,1,1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "9"))
                        (rule "true_left" (formula "18"))
                        (rule "translateJavaSubInt" (formula "19") (term "0,0"))
                        (rule "translateJavaDivInt" (formula "11") (term "1,1,0"))
                        (rule "translateJavaAddInt" (formula "11") (term "3,0,1"))
                        (rule "translateJavaDivInt" (formula "24") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "24") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,3,0,1"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "24") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "24") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,4,0,1"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1,0"))
                        (rule "impRight" (formula "24"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                        (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "26") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,4,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "applyEq" (formula "26") (term "0,0,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "26") (term "0,0,0,1,1,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                     (branch "CUT: self_259.sorted_splitters = null FALSE"
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "18"))
                        (rule "translateJavaSubInt" (formula "19") (term "0,0"))
                        (rule "translateJavaDivInt" (formula "11") (term "1,1,0"))
                        (rule "translateJavaDivInt" (formula "26") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "26") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "26") (term "3,0,1"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "26") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,1,1,0"))
                        (rule "translateJavaSubInt" (formula "26") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "26") (term "1,3,0,1"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "26") (term "1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "26") (term "0,1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1,0"))
                        (rule "impRight" (formula "26"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                        (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "28") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "28") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "applyEq" (formula "28") (term "0,0,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "CUT: self_259.tree = null FALSE"
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "cut_direct" (formula "9") (term "0"))
                     (branch "CUT: self_259.sorted_splitters = null TRUE"
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEq" (formula "10") (term "0,0,0,1,1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "9"))
                        (rule "eqSymm" (formula "23"))
                        (rule "applyEq" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "9"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0") (ifseqformula "13") (ifseqformula "8"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: self_259.tree.tree = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "11") (term "0,1,0,1,1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "24"))
                           (rule "true_left" (formula "19"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                           (rule "translateJavaDivInt" (formula "25") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "25") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "25") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "25") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                           (rule "translateJavaSubInt" (formula "25") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "25") (term "1,3,0,1"))
                           (rule "translateJavaAddInt" (formula "25") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "25") (term "1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                           (rule "impRight" (formula "25"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "2")))
                           (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "27") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,4,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "CUT: self_259.tree.tree = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "19"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                           (rule "translateJavaDivInt" (formula "27") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "27") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "27") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "27") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "27") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "27") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "27") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "27") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                           (rule "impRight" (formula "27"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "29") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,4,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "29") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                     (branch "CUT: self_259.sorted_splitters = null FALSE"
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "0") (ifseqformula "13") (ifseqformula "8"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: self_259.tree.tree = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "26"))
                           (rule "applyEq" (formula "11") (term "0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "8") (term "0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "commuteUnion" (formula "11") (term "0,1,1,0"))
                           (rule "commuteUnion" (formula "8") (term "0,1,1,0"))
                           (rule "true_left" (formula "19"))
                           (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                           (rule "translateJavaDivInt" (formula "27") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "27") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "27") (term "3,0,1"))
                           (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "translateJavaAddInt" (formula "27") (term "4,0,1"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "27") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "27") (term "1,3,0,1"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "27") (term "1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "27") (term "0,1,4,0,1"))
                           (rule "impRight" (formula "27"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "29") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,4,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "3"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: self_259.tree.tree = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "19"))
                           (rule "translateJavaDivInt" (formula "29") (term "1,1,0"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "2,1,1,1,0,0,1"))
                           (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                           (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "3,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "4,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                           (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                           (rule "translateJavaSubInt" (formula "29") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,3,0,1"))
                           (rule "translateJavaAddInt" (formula "29") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "29") (term "1,4,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                           (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                           (rule "impRight" (formula "29"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                           (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,2,1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "2,1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                  )
               )
            )
            (branch "CUT: self_259.tree.tree.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
                (builtin "One Step Simplification" (formula "14"))
               (rule "false_right" (formula "14"))
               (rule "equalityToElementOfRight" (formula "13") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "allRight" (formula "13") (inst "sk=ov_0"))
               (rule "allRight" (formula "13") (inst "sk=fv_0"))
               (rule "notRight" (formula "13"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "14"))
               (rule "orRight" (formula "14"))
               (rule "elementOfUnion" (formula "14"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
         )
         (branch "CUT: self_259.sorted_splitters.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "false_right" (formula "13"))
            (rule "equalityToElementOfRight" (formula "12") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "allRight" (formula "12") (inst "sk=ov_0"))
            (rule "allRight" (formula "12") (inst "sk=fv_0"))
            (rule "notRight" (formula "12"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "13"))
            (rule "orRight" (formula "13"))
            (rule "elementOfArrayRange" (formula "14") (inst "iv=iv"))
            (rule "eqSymm" (formula "14") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
            (rule "elementOfUnion" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "closeTrue" (formula "13"))
         )
      )
   )
   (branch "Case 2"
      (rule "true_left" (formula "8"))
      (rule "translateJavaSubInt" (formula "9") (term "0,0"))
      (rule "translateJavaSubInt" (formula "11") (term "2,1,1,1,0,0"))
      (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0"))
      (rule "translateJavaDivInt" (formula "1") (term "1,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "4,0"))
      (rule "translateJavaAddInt" (formula "11") (term "3,1"))
      (rule "translateJavaAddInt" (formula "1") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "4,1"))
      (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
      (rule "translateJavaDivInt" (formula "2") (term "1,1,0,0"))
      (rule "translateJavaAddInt" (formula "2") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "2") (term "4,0,1,0"))
      (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
      (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
      (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
      (rule "translateJavaMulInt" (formula "11") (term "1,3,0"))
      (rule "translateJavaSubInt" (formula "1") (term "0,1,1,0"))
      (rule "translateJavaMulInt" (formula "11") (term "1,4,0"))
      (rule "translateJavaMulInt" (formula "11") (term "1,3,1"))
      (rule "translateJavaMulInt" (formula "1") (term "1,3,0,1"))
      (rule "translateJavaMulInt" (formula "11") (term "1,4,1"))
      (rule "translateJavaMulInt" (formula "1") (term "1,4,0,1"))
      (rule "translateJavaSubInt" (formula "2") (term "0,1,1,0,0"))
      (rule "translateJavaMulInt" (formula "2") (term "1,3,0,1,0"))
      (rule "translateJavaMulInt" (formula "2") (term "1,4,0,1,0"))
      (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0"))
      (rule "translateJavaAddInt" (formula "11") (term "0,1,4,1"))
      (rule "translateJavaAddInt" (formula "1") (term "0,1,4,0,1"))
      (rule "translateJavaAddInt" (formula "2") (term "0,1,4,0,1,0"))
      (rule "impRight" (formula "14"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "11") (term "0,0"))
      (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "16") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "2") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,4,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,4,0,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,4,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,4,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0"))
      (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,1"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,4,1"))
      (rule "polySimp_addComm0" (formula "4") (term "1,1,4,0,1,0"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0"))
      (rule "polySimp_addComm0" (formula "3") (term "1,1,4,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
      (rule "mul_literals" (formula "13") (term "0,1,4,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,4,1"))
      (rule "mul_literals" (formula "13") (term "0,1,4,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,4,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,4,0,1,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,4,0"))
      (rule "mul_literals" (formula "16") (term "0,1,4,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,4,0"))
      (rule "mul_literals" (formula "3") (term "0,1,4,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "4,1"))
      (rule "polySimp_addComm0" (formula "13") (term "0,4,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "4,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,4,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "4,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,4,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "4,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,4,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "applyEq" (formula "13") (term "1") (ifseqformula "3"))
      (rule "close" (formula "16") (ifseqformula "13"))
   )
)
(branch "Case '<-'"
   (rule "allRight" (formula "13") (inst "sk=block_0") (userinteraction))
   (rule "impRight" (formula "13") (userinteraction))
   (rule "instAll" (formula "1") (term "1,0") (ifseqformula "2") (userinteraction))
    (builtin "Use Dependency Contract" (formula "1") (term "0,1") (ifInst ""  (formula "15") (term "0")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::isClassifiedBlock([I,int,int)].JML accessible clause.0") (userinteraction))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "8")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")) (userinteraction))
   (rule "impLeft" (formula "13") (userinteraction))
   (branch "Case 1"
      (rule "wellFormedAnon" (formula "13") (term "0"))
      (rule "translateJavaSubInt" (formula "13") (term "2,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "1,1,1,1"))
      (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1"))
      (rule "translateJavaMulInt" (formula "13") (term "1,1,1,1,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,1"))
      (rule "translateJavaMulInt" (formula "13") (term "1,0,2,1,1,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,1,0,2,1,1,1"))
      (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "4")))
      (rule "polySimp_elimSub" (formula "13") (term "2,1,1,0"))
      (rule "mul_literals" (formula "13") (term "1,2,1,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "2,1,1"))
      (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,2,1,1"))
      (rule "polySimp_addComm0" (formula "13") (term "2,1,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,0,2,1,1"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,2,1,1"))
      (rule "mul_literals" (formula "13") (term "0,1,0,2,1,1"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,2,1,1"))
      (rule "polySimp_addComm0" (formula "13") (term "0,0,2,1,1"))
      (rule "polySimp_addComm1" (formula "13") (term "2,1,1"))
      (rule "polySimp_addComm1" (formula "13") (term "0,2,1,1"))
      (rule "add_literals" (formula "13") (term "0,0,2,1,1"))
      (rule "disjointDefinition" (formula "13"))
      (rule "distributeIntersection" (formula "13") (term "0"))
      (rule "unionEqualsEmpty" (formula "13"))
      (rule "distributeIntersection" (formula "13") (term "0,0"))
      (rule "unionEqualsEmpty" (formula "13") (term "0"))
      (rule "commuteIntersection" (formula "13") (term "0,1,0"))
      (rule "commuteIntersection" (formula "13") (term "0,0,0"))
      (rule "cut_direct" (formula "13") (term "0,0"))
      (branch "CUT: self_259.sorted_splitters.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
          (builtin "One Step Simplification" (formula "14"))
         (rule "cut_direct" (formula "14") (term "0"))
         (branch "CUT: self_259.tree.tree.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
             (builtin "One Step Simplification" (formula "15"))
            (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "allRight" (formula "15") (inst "sk=ov_0"))
            (rule "allRight" (formula "15") (inst "sk=fv_0"))
            (rule "notRight" (formula "15"))
            (rule "elementOfIntersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
            (rule "andLeft" (formula "2"))
            (rule "exLeft" (formula "3") (inst "sk=iv_0"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "elementOfSetMinus" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "elementOfUnion" (formula "19"))
            (rule "orRight" (formula "19"))
            (rule "elementOfArrayRangeConcrete" (formula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0"))
            (rule "elementOfUnion" (formula "19"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "orRight" (formula "19"))
            (rule "eqSymm" (formula "20"))
            (rule "eqSymm" (formula "19"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "6") (term "0,0,1,0,1,1,0") (ifseqformula "10") (ifseqformula "12"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "11") (ifseqformula "13"))
            (rule "cut_direct" (formula "23") (term "0"))
            (branch "CUT: iv_0 >= begin TRUE"
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=block_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
               (rule "leq_literals" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "cut_direct" (formula "10") (term "0"))
               (branch "CUT: self_259.tree = null TRUE"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "applyEq" (formula "12") (term "0,0,1,0,1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "9") (term "0,0,1,0,1,1,0") (ifseqformula "10"))
                  (rule "cut_direct" (formula "11") (term "0"))
                  (branch "CUT: self_259.sorted_splitters = null TRUE"
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "11"))
                     (rule "eqSymm" (formula "25"))
                     (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "9") (term "0,0,0,1,1,0") (ifseqformula "11"))
                     (rule "true_left" (formula "21"))
                     (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                     (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "27") (term "3,0"))
                     (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "27") (term "4,0"))
                     (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                     (rule "translateJavaDivInt" (formula "14") (term "1,1"))
                     (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "27") (term "1,3,0"))
                     (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                     (rule "translateJavaMulInt" (formula "27") (term "1,4,0"))
                     (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "14") (term "0,1,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                     (rule "translateJavaAddInt" (formula "27") (term "0,1,4,0"))
                     (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                     (rule "andLeft" (formula "14"))
                     (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "2,1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "16") (term "1,2,1,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,4,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "applyEq" (formula "13") (term "0,0,1,0,1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "0,0,0,1,1,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "15") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "15") (term "0,0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                     (rule "closeFalse" (formula "23"))
                  )
                  (branch "CUT: self_259.sorted_splitters = null FALSE"
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "21"))
                     (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                     (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "29") (term "3,0"))
                     (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "29") (term "4,0"))
                     (rule "translateJavaDivInt" (formula "14") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                     (rule "translateJavaMulInt" (formula "29") (term "1,3,0"))
                     (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                     (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "29") (term "1,4,0"))
                     (rule "translateJavaSubInt" (formula "14") (term "0,1,1"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                     (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "29") (term "0,1,4,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                     (rule "andLeft" (formula "14"))
                     (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "2,1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "16") (term "1,2,1,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,4,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "30") (term "1,1,4,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,4,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,4,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,4,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "30") (term "0,4,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "applyEq" (formula "15") (term "0,0,1,0,1,1,0,0,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "0,0,1,0,1,1,0,0") (ifseqformula "10"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "10")) (ifInst ""  (formula "24")))
                     (rule "closeFalse" (formula "23"))
                  )
               )
               (branch "CUT: self_259.tree = null FALSE"
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "cut_direct" (formula "11") (term "0"))
                  (branch "CUT: self_259.sorted_splitters = null TRUE"
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "11"))
                     (rule "eqSymm" (formula "26"))
                     (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "9") (term "0,0,0,1,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "0") (ifseqformula "16") (ifseqformula "10"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: self_259.tree.tree = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "27"))
                        (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEq" (formula "13") (term "0,1,0,1,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                        (rule "true_left" (formula "21"))
                        (rule "translateJavaDivInt" (formula "15") (term "1,1,0,0"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "3,0,1"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1"))
                        (rule "translateJavaSubInt" (formula "22") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "3,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "15") (term "4,0,1,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "15") (term "0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "15") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "4,0,1"))
                        (rule "translateJavaMulInt" (formula "27") (term "1,3,0"))
                        (rule "translateJavaMulInt" (formula "27") (term "1,4,0"))
                        (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,1,4,0"))
                        (rule "translateJavaMulInt" (formula "15") (term "1,4,0,1,0"))
                        (rule "andLeft" (formula "14"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "polySimp_elimSub" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "applyEq" (formula "13") (term "0,0,0,1,1,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "15") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "15") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "applyEq" (formula "13") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")) (ifInst ""  (formula "11")))
                        (rule "closeFalse" (formula "23"))
                     )
                     (branch "CUT: self_259.tree.tree = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "22"))
                        (rule "translateJavaDivInt" (formula "16") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "23") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "3,0"))
                        (rule "translateJavaDivInt" (formula "15") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "16") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "30") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,3,0"))
                        (rule "translateJavaSubInt" (formula "15") (term "0,1,1"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,4,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,1,4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                        (rule "andLeft" (formula "15"))
                        (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "applyEq" (formula "14") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "16") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "12")))
                        (rule "closeFalse" (formula "24"))
                     )
                  )
                  (branch "CUT: self_259.sorted_splitters = null FALSE"
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "0") (ifseqformula "16") (ifseqformula "10"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: self_259.tree.tree = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "13") (term "0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "29"))
                        (rule "commuteUnion" (formula "10") (term "0,1,1,0"))
                        (rule "commuteUnion" (formula "13") (term "0,1,1,0"))
                        (rule "true_left" (formula "22"))
                        (rule "translateJavaDivInt" (formula "16") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "23") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "3,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                        (rule "translateJavaDivInt" (formula "15") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "30") (term "4,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "16") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,3,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                        (rule "translateJavaSubInt" (formula "15") (term "0,1,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,4,0"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,1,4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "andLeft" (formula "15"))
                        (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "commuteUnion" (formula "16") (term "0,1,1,0,0,1,0"))
                        (rule "commuteUnion" (formula "14") (term "0,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                        (rule "translateJavaMulInt" (formula "24") (term "1,1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSymm" (formula "26"))
                        (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "translateJavaMod" (formula "23") (term "0"))
                        (rule "jmod_axiom" (formula "23") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "23"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                        (rule "newSym_eq" (formula "23") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(end, Z(0(#))))"))
                        (rule "times_zero_1" (formula "23") (term "0,1,1"))
                        (rule "times_zero_1" (formula "23") (term "1,1,1"))
                        (rule "add_zero_left" (formula "23") (term "1,1"))
                        (rule "add_zero_right" (formula "23") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "23"))
                        (rule "polySimp_homoEq" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "15"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
                        (rule "polySimp_sepPosMonomial" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                        (rule "applyEq" (formula "13") (term "1,2,1,1,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "13") (term "2,1,1,1,0"))
                        (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "applyEq" (formula "10") (term "1,2,1,1,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "10") (term "2,1,1,1,0"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "24"))
                        (rule "applyEq" (formula "16") (term "1,2,1,1,1,0,0,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "applyEq" (formula "14") (term "1,2,1,1,1,0,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "15"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "0"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: self_259.tree.tree = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "22"))
                        (rule "translateJavaDivInt" (formula "16") (term "1,1,0,0"))
                        (rule "translateJavaDivInt" (formula "15") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1"))
                        (rule "translateJavaSubInt" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "32") (term "3,0"))
                        (rule "translateJavaAddInt" (formula "32") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "23") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "16") (term "3,0,1,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "15") (term "0,1,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "32") (term "1,3,0"))
                        (rule "translateJavaMulInt" (formula "32") (term "1,4,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "16") (term "4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "16") (term "1,3,0,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0"))
                        (rule "translateJavaAddInt" (formula "32") (term "0,1,4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "16") (term "0,1,4,0,1,0"))
                        (rule "andLeft" (formula "15"))
                        (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "polySimp_elimSub" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,4,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
                        (rule "translateJavaMulInt" (formula "24") (term "1,1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSymm" (formula "26"))
                        (rule "polySimp_elimSub" (formula "29") (term "0,2,1"))
                        (rule "mul_literals" (formula "29") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "29") (term "0,2,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "translateJavaMod" (formula "23") (term "0"))
                        (rule "jmod_axiom" (formula "23") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "23"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                        (rule "newSym_eq" (formula "23") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(end, Z(0(#))))"))
                        (rule "times_zero_1" (formula "23") (term "0,1,1"))
                        (rule "times_zero_1" (formula "23") (term "1,1,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1"))
                        (rule "add_zero_right" (formula "23") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "23"))
                        (rule "polySimp_homoEq" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "15"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "23"))
                        (rule "polySimp_sepPosMonomial" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                        (rule "applyEq" (formula "16") (term "1,2,1,1,1,0,0,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "16") (term "2,1,1,1,0,0,1,0"))
                        (rule "applyEq" (formula "13") (term "1,2,1,1,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "13") (term "2,1,1,1,0"))
                        (rule "applyEq" (formula "10") (term "1,2,1,1,1,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "10") (term "2,1,1,1,0"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "applyEq" (formula "14") (term "1,2,1,1,1,0,0") (ifseqformula "24"))
                        (rule "polySimp_addAssoc" (formula "14") (term "2,1,1,1,0,0"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "24"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "15"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "0"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
            )
            (branch "CUT: iv_0 >= begin FALSE"
                (builtin "One Step Simplification" (formula "24"))
               (rule "false_right" (formula "24"))
               (rule "inEqSimp_geqRight" (formula "23"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=block_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
               (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "cut_direct" (formula "8") (term "0"))
               (branch "CUT: self_259.tree = null TRUE"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "7") (term "0,0,1,0,1,1,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "10") (term "0,0,1,0,1,1,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "8"))
                  (rule "cut_direct" (formula "9") (term "0"))
                  (branch "CUT: self_259.sorted_splitters = null TRUE"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "9"))
                     (rule "eqSymm" (formula "23"))
                     (rule "applyEq" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "10") (term "0,0,0,1,1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                     (rule "true_left" (formula "19"))
                     (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                     (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "25") (term "3,0"))
                     (rule "translateJavaAddInt" (formula "25") (term "4,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                     (rule "translateJavaDivInt" (formula "12") (term "1,1"))
                     (rule "translateJavaDivInt" (formula "11") (term "1,1,0"))
                     (rule "translateJavaSubInt" (formula "11") (term "2,1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "11") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "25") (term "1,3,0"))
                     (rule "translateJavaMulInt" (formula "25") (term "1,4,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "12") (term "0,1,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,1,1,0"))
                     (rule "translateJavaMulInt" (formula "11") (term "1,3,0,1"))
                     (rule "translateJavaMulInt" (formula "11") (term "1,4,0,1"))
                     (rule "translateJavaAddInt" (formula "25") (term "0,1,4,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0,1"))
                     (rule "andLeft" (formula "12"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
                     (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "11") (term "2,1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,2,1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,4,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,4,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "2,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "1,1,4,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,4,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,4,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,4,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,4,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,4,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,4,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,4,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,4,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,4,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,4,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "applyEq" (formula "11") (term "0,0,1,0,1,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "14") (term "0,0,1,0,1,1,0,0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "11") (term "0,0,0,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "14") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "9"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
                  (branch "CUT: self_259.sorted_splitters = null FALSE"
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "19"))
                     (rule "translateJavaDivInt" (formula "11") (term "1,1,0"))
                     (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "27") (term "3,0"))
                     (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "27") (term "4,0"))
                     (rule "translateJavaDivInt" (formula "12") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "2,1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "11") (term "3,0,1"))
                     (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,1,1,0"))
                     (rule "translateJavaMulInt" (formula "27") (term "1,3,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                     (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "27") (term "1,4,0"))
                     (rule "translateJavaSubInt" (formula "12") (term "0,1,1"))
                     (rule "translateJavaMulInt" (formula "11") (term "1,3,0,1"))
                     (rule "translateJavaMulInt" (formula "11") (term "1,4,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                     (rule "translateJavaAddInt" (formula "27") (term "0,1,4,0"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0,1"))
                     (rule "andLeft" (formula "12"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "12")))
                     (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "11") (term "2,1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,2,1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,4,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,4,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,4,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "2,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "1,1,4,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,4,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,4,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,4,0,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,4,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,4,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,4,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,4,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,4,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "0,4,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "4,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,4,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "applyEq" (formula "11") (term "0,0,1,0,1,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "14") (term "0,0,1,0,1,1,0,0,1,0") (ifseqformula "8"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "CUT: self_259.tree = null FALSE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "cut_direct" (formula "9") (term "0"))
                  (branch "CUT: self_259.sorted_splitters = null TRUE"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "9"))
                     (rule "eqSymm" (formula "24"))
                     (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "7") (term "0,0,0,1,1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "10") (term "0,0,0,1,1,0") (ifseqformula "9"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0") (ifseqformula "14") (ifseqformula "8"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: self_259.tree.tree = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "24"))
                        (rule "applyEq" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "19"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1,0,0"))
                        (rule "translateJavaDivInt" (formula "11") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "3,0,1"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,4,0,1"))
                        (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "25") (term "3,0"))
                        (rule "translateJavaAddInt" (formula "25") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "13") (term "4,0,1,0"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,3,0,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "4,0,1"))
                        (rule "translateJavaMulInt" (formula "25") (term "1,3,0"))
                        (rule "translateJavaMulInt" (formula "25") (term "1,4,0"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "25") (term "0,1,4,0"))
                        (rule "translateJavaMulInt" (formula "13") (term "1,4,0,1,0"))
                        (rule "andLeft" (formula "12"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
                        (rule "polySimp_elimSub" (formula "14") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "11") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "11") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,4,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,4,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "applyEq" (formula "11") (term "0,0,0,1,1,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "applyEq" (formula "14") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch "CUT: self_259.tree.tree = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "20"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "3,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "4,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,3,0"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,4,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,1,4,0"))
                        (rule "andLeft" (formula "13"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "polySimp_elimSub" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,4,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,4,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "applyEq" (formula "15") (term "0,0,0,1,1,0,0,1,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "12") (term "0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "13"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
                  (branch "CUT: self_259.sorted_splitters = null FALSE"
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "0") (ifseqformula "14") (ifseqformula "8"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: self_259.tree.tree = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "27"))
                        (rule "applyEq" (formula "8") (term "0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "11") (term "0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "commuteUnion" (formula "8") (term "0,1,1,0"))
                        (rule "commuteUnion" (formula "11") (term "0,1,1,0"))
                        (rule "true_left" (formula "20"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "3,0"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "28") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,3,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                        (rule "translateJavaMulInt" (formula "28") (term "1,4,0"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,1,4,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                        (rule "andLeft" (formula "13"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,4,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,4,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "applyEq" (formula "15") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "closeFalse" (formula "13"))
                     )
                     (branch "CUT: self_259.tree.tree = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "20"))
                        (rule "translateJavaDivInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaDivInt" (formula "13") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "3,0,1"))
                        (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "3,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "4,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "4,0,1"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "4,0,1,0"))
                        (rule "translateJavaDivInt" (formula "12") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "0,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,1"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,3,0,1"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,3,0"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,1,4,0"))
                        (rule "translateJavaMulInt" (formula "12") (term "1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,3,0,1,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,1,4,0,1,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0"))
                        (rule "translateJavaMulInt" (formula "30") (term "1,4,0"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0,1"))
                        (rule "translateJavaMulInt" (formula "14") (term "1,4,0,1,0"))
                        (rule "andLeft" (formula "13"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "polySimp_elimSub" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,2,1,1,1,0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,1"))
                        (rule "polySimp_elimSub" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,2,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,4,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,4,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,1,4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,4,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,4,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,4,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,4,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,4,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,4,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,4,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,4,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "4,0,1,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,4,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "4,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,4,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "13"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "13"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
               )
            )
         )
         (branch "CUT: self_259.tree.tree.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
             (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "allRight" (formula "14") (inst "sk=ov_0"))
            (rule "allRight" (formula "14") (inst "sk=fv_0"))
            (rule "notRight" (formula "14"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "15"))
            (rule "orRight" (formula "15"))
            (rule "elementOfUnion" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "CUT: self_259.sorted_splitters.* cap allLocs setMinus self_259.sorted_splitters.* cup self_259.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
          (builtin "One Step Simplification" (formula "14"))
         (rule "false_right" (formula "14"))
         (rule "equalityToElementOfRight" (formula "13") (inst "ov=ov") (inst "fv=fv"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "allRight" (formula "13") (inst "sk=ov_0"))
         (rule "allRight" (formula "13") (inst "sk=fv_0"))
         (rule "notRight" (formula "13"))
         (rule "elementOfIntersect" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "elementOfSetMinus" (formula "2"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "elementOfUnion" (formula "14"))
         (rule "orRight" (formula "14"))
         (rule "elementOfArrayRange" (formula "15") (inst "iv=iv"))
         (rule "eqSymm" (formula "15") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
         (rule "elementOfUnion" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "Case 2"
      (rule "true_left" (formula "9"))
      (rule "translateJavaAddInt" (formula "15") (term "3,0"))
      (rule "translateJavaAddInt" (formula "15") (term "4,0"))
      (rule "translateJavaSubInt" (formula "10") (term "0,0"))
      (rule "translateJavaDivInt" (formula "3") (term "1,1,0,0"))
      (rule "translateJavaSubInt" (formula "3") (term "2,1,1,1,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "3") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "3") (term "4,0,1,0"))
      (rule "translateJavaDivInt" (formula "2") (term "1,1"))
      (rule "translateJavaDivInt" (formula "1") (term "1,1,0"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "1") (term "3,0,1"))
      (rule "translateJavaAddInt" (formula "1") (term "4,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "12") (term "3,0"))
      (rule "translateJavaAddInt" (formula "12") (term "4,0"))
      (rule "translateJavaAddInt" (formula "12") (term "3,1"))
      (rule "translateJavaAddInt" (formula "12") (term "4,1"))
      (rule "translateJavaMulInt" (formula "15") (term "1,3,0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,1,4,0"))
      (rule "translateJavaSubInt" (formula "3") (term "0,1,1,0,0"))
      (rule "translateJavaMulInt" (formula "3") (term "1,3,0,1,0"))
      (rule "translateJavaMulInt" (formula "3") (term "1,4,0,1,0"))
      (rule "translateJavaSubInt" (formula "2") (term "0,1,1"))
      (rule "translateJavaSubInt" (formula "1") (term "0,1,1,0"))
      (rule "translateJavaMulInt" (formula "1") (term "1,3,0,1"))
      (rule "translateJavaMulInt" (formula "1") (term "1,4,0,1"))
      (rule "translateJavaMulInt" (formula "12") (term "1,3,0"))
      (rule "translateJavaMulInt" (formula "12") (term "1,4,0"))
      (rule "translateJavaMulInt" (formula "12") (term "1,3,1"))
      (rule "translateJavaMulInt" (formula "12") (term "1,4,1"))
      (rule "translateJavaMulInt" (formula "15") (term "1,4,0"))
      (rule "translateJavaAddInt" (formula "3") (term "0,1,4,0,1,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,1,4,0,1"))
      (rule "translateJavaAddInt" (formula "12") (term "0,1,4,0"))
      (rule "translateJavaAddInt" (formula "12") (term "0,1,4,1"))
      (rule "andLeft" (formula "2"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
      (rule "polySimp_elimSub" (formula "11") (term "0,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "3") (term "0,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,4,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,4,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,4,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,4,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,4,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1,4,0"))
      (rule "polySimp_addComm0" (formula "4") (term "1,1,4,0,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,4,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,4,1"))
      (rule "polySimp_addComm0" (formula "1") (term "1,1,4,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,4,0"))
      (rule "mul_literals" (formula "16") (term "0,1,4,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,4,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,4,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,4,0"))
      (rule "mul_literals" (formula "13") (term "0,1,4,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,4,1"))
      (rule "mul_literals" (formula "13") (term "0,1,4,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,4,0"))
      (rule "mul_literals" (formula "1") (term "0,1,4,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "4,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,4,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "4,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,4,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "4,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,4,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "4,1"))
      (rule "polySimp_addComm0" (formula "13") (term "0,4,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "4,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,4,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
      (rule "close" (formula "16") (ifseqformula "1"))
   )
)
)
}
