\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 07 12:00:18 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:onHeap , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../main/java-constr";

\proofObligation "#Proof Obligation Settings
#Thu Apr 07 12:00:18 CEST 2022
contract=de.wiesler.Storage[de.wiesler.Storage\\:\\:createArray(int)].JML normal_behavior operation contract.0
name=de.wiesler.Storage[de.wiesler.Storage\\:\\:createArray(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "349")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "4") (term "1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_createArray,savedHeapBefore_createArray"))
 (builtin "One Step Simplification" (formula "4"))
(rule "returnUnfold" (formula "4") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "4") (term "1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x_arr"))
(rule "arrayCreation" (formula "4") (term "1") (inst "#v0=x_arr_1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x_arr_1"))
(rule "variableDeclarationAssign" (formula "4") (term "1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "dim0"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "ifSplit" (formula "4"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "blockThrow" (formula "5") (term "1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "throwUnfold" (formula "5") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "n"))
   (rule "instanceCreationAssignment" (formula "5") (term "1") (inst "#v0=n_1"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "n_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=n_2"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "n_2"))
   (rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=n_3"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "n_3"))
   (rule "allocateInstance" (formula "5"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_write_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallWithinClass" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment_write_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_write_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "8") (term "1"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallSuper" (formula "8") (term "1"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment_write_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_write_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment_write_attribute" (formula "8"))
   (branch "Normal Execution (n_1 != null)"
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignment" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallParamThrow" (formula "8") (term "1"))
      (rule "tryCatchThrow" (formula "8") (term "1"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
      (rule "equality_comparison_simple" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "replace_known_right" (formula "8") (term "0,0,1,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "ifElseSplit" (formula "8"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block" (formula "8") (term "1"))
         (rule "ifElseSplit" (formula "8"))
         (branch "if n instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "emptyModality" (formula "8") (term "1"))
            (rule "andRight" (formula "8"))
            (branch
               (rule "andRight" (formula "8"))
               (branch
                  (rule "andRight" (formula "8"))
                  (branch
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch
                     (rule "andRight" (formula "8"))
                     (branch
                        (rule "andRight" (formula "8"))
                        (branch
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "notRight" (formula "8"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "notRight" (formula "8"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch
                        (rule "andRight" (formula "8"))
                        (branch
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "allRight" (formula "8") (inst "sk=i_0"))
                           (rule "impRight" (formula "8"))
                           (rule "andLeft" (formula "1"))
                           (rule "dismissNonSelectedField" (formula "10") (term "0"))
                           (rule "dismissNonSelectedField" (formula "10") (term "0"))
                           (rule "dismissNonSelectedField" (formula "10") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "notRight" (formula "8"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                  (rule "false_right" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "8"))
               (rule "allRight" (formula "8") (inst "sk=f_0"))
               (rule "allRight" (formula "8") (inst "sk=o_0"))
               (rule "orRight" (formula "8"))
               (rule "eqSymm" (formula "9"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "if n instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (n_1 = null)"
      (rule "false_right" (formula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=x_arr_2"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_arr_2"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "5") (term "1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=x_arr_3"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_arr_3"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "5") (term "1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "allocateInstanceWithLength" (formula "5"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCall" (formula "9"))
   (branch "Normal Execution (newObject != null )"
      (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "assignment_write_attribute_this" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallWithinClass" (formula "9") (term "1"))
      (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "arrayInitialisation" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "polySimp_elimSub" (formula "9") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "2,1,0,1,0"))
      (rule "applyEq" (formula "9") (term "1,2,1,0,1,0") (ifseqformula "1"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "assignment_write_attribute_this" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallReturnIgnoreResult" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (rule "andRight" (formula "9"))
      (branch
         (rule "andRight" (formula "9"))
         (branch
            (rule "andRight" (formula "9"))
            (branch
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "9"))
            )
            (branch
               (rule "andRight" (formula "9"))
               (branch
                  (rule "andRight" (formula "9"))
                  (branch
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "6")))
                     (rule "closeTrue" (formula "9"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
                     (rule "closeTrue" (formula "9"))
                  )
               )
               (branch
                  (rule "andRight" (formula "9"))
                  (branch
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "allRight" (formula "9") (inst "sk=i_0"))
                     (rule "impRight" (formula "9"))
                     (rule "andLeft" (formula "1"))
                     (rule "dismissNonSelectedField" (formula "11") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "10"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfMemset" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                     (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "closeTrue" (formula "11"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
                     (rule "closeTrue" (formula "9"))
                  )
               )
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "9"))
         (rule "allRight" (formula "9") (inst "sk=f_0"))
         (rule "allRight" (formula "9") (inst "sk=o_0"))
         (rule "orRight" (formula "9"))
         (rule "eqSymm" (formula "10"))
         (rule "inEqSimp_ltRight" (formula "8"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "10"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
         (rule "simplifySelectOfMemset" (formula "1"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
         (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_and" (formula "6") (term "0,0"))
         (rule "commute_and" (formula "4") (term "0,0"))
         (rule "commute_and" (formula "3") (term "0,0"))
         (rule "commute_and" (formula "2") (term "0,0"))
         (rule "commute_and" (formula "1") (term "0,0"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 TRUE"
            (rule "andLeft" (formula "1"))
            (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
            (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
            (rule "hideAuxiliaryEq" (formula "6"))
            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "14") (term "2,0") (ifseqformula "1"))
            (rule "narrowSelectType" (formula "14") (term "0") (ifseqformula "8"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "notRight" (formula "13"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "eqSymm" (formula "11"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
            (rule "close" (formula "9") (ifseqformula "1"))
         )
         (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 FALSE"
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
               (rule "applyEqRigid" (formula "14") (term "2,0") (ifseqformula "1"))
               (rule "narrowSelectType" (formula "14") (term "0") (ifseqformula "7"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "2"))
               (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "notRight" (formula "13"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "12"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "false_right" (formula "9"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
               (rule "close" (formula "10") (ifseqformula "1"))
            )
            (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "applyEqRigid" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "false_right" (formula "9"))
                  (rule "applyEq" (formula "12") (term "1,0,0,1") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "notRight" (formula "12"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "3"))
                  (rule "applyEqRigid" (formula "11") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "11") (term "0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "notRight" (formula "11"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                  (rule "close" (formula "11") (ifseqformula "2"))
               )
               (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "false_right" (formula "9"))
                     (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "false_right" (formula "9"))
                     (rule "applyEqRigid" (formula "12") (term "2,0") (ifseqformula "1"))
                     (rule "narrowSelectType" (formula "12") (term "0") (ifseqformula "6"))
                     (rule "applyEqRigid" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEq" (formula "10") (term "1,0,0,1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "notRight" (formula "10"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3"))
                     (rule "close" (formula "10") (ifseqformula "3"))
                  )
                  (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + length) & !f_0 = java.lang.Object::<created> TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "3"))
                        (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "eqSymm" (formula "2"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
                        (rule "false_right" (formula "14"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "notRight" (formula "13"))
                        (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "3"))
                        (rule "narrowSelectArrayType" (formula "13") (term "0") (ifseqformula "8") (ifseqformula "12"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "close" (formula "12") (ifseqformula "2"))
                     )
                     (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + length) & !f_0 = java.lang.Object::<created> FALSE"
                        (rule "close" (formula "15") (ifseqformula "1"))
                     )
                  )
               )
            )
         )
      )
   )
   (branch "Null Reference (newObject = null)"
      (rule "false_right" (formula "10"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
