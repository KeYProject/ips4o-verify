\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 07 15:53:41 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../main/java";

\proofObligation "#Proof Obligation Settings
#Thu Apr 07 15:53:41 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isClassOfSlice([I,int,int,int)].JML accessible clause.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:isClassOfSlice([I,int,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "16241")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self_77,values_0,begin,end,bucket,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "13") (term "0") (inst "i=i") (userinteraction))
(rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "13") (term "1,1") (inst "i=i") (userinteraction))
 (builtin "One Step Simplification" (formula "13") (userinteraction))
(rule "equiv_right" (formula "13") (userinteraction))
(branch "Case '->'"
   (rule "allRight" (formula "14") (inst "sk=i_0") (userinteraction))
   (rule "impRight" (formula "14") (userinteraction))
   (rule "instAll" (formula "1") (term "1,0") (ifseqformula "2") (userinteraction))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2") (userinteraction))
    (builtin "One Step Simplification" (formula "1") (userinteraction))
   (rule "eqTermCut" (formula "16") (term "2,0") (inst "s=int::select(heap, values_0, arr(i_0))") (userinteraction))
   (branch "Assume values_0[i_0]@heap[anon( allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, javaSubInt(end, 1)))] = values_0[i_0]"
      (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "1") (userinteraction))
       (builtin "Use Dependency Contract" (formula "17") (term "0") (ifInst ""  (formula "2") (term "0")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::classOf(int)].JML accessible clause.0") (userinteraction))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")) (ifInst ""  (formula "7")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")) (userinteraction))
      (rule "impLeft" (formula "15") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "15"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "12"))
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "wellFormedAnon" (formula "13"))
            (rule "true_left" (formula "10"))
            (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0"))
            (rule "andLeft" (formula "3"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "7")))
            (rule "closeTrue" (formula "13"))
         )
         (branch "Case 2"
            (rule "translateJavaSubInt" (formula "15") (term "2,1,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "2,1,1,0"))
            (rule "mul_literals" (formula "15") (term "1,2,1,1,0"))
            (rule "polySimp_addComm0" (formula "15") (term "2,1,1,0"))
            (rule "disjointDefinition" (formula "15"))
            (rule "distributeIntersection" (formula "15") (term "0"))
            (rule "unionEqualsEmpty" (formula "15"))
            (rule "commuteIntersection" (formula "15") (term "0,0"))
            (rule "commuteIntersection" (formula "15") (term "0,1"))
            (rule "cut_direct" (formula "15") (term "0"))
            (branch "CUT: self_77.sorted_splitters.* cap allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
                (builtin "One Step Simplification" (formula "16"))
               (rule "equalityToElementOfRight" (formula "16") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "allRight" (formula "16") (inst "sk=ov_0"))
               (rule "allRight" (formula "16") (inst "sk=fv_0"))
               (rule "notRight" (formula "16"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "17"))
               (rule "orRight" (formula "17"))
               (rule "elementOfUnion" (formula "17"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "closeTrue" (formula "17"))
            )
            (branch "CUT: self_77.sorted_splitters.* cap allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "allRight" (formula "15") (inst "sk=ov_0"))
               (rule "allRight" (formula "15") (inst "sk=fv_0"))
               (rule "notRight" (formula "15"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfArrayRange" (formula "17") (inst "iv=iv"))
               (rule "eqSymm" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,1"))
               (rule "elementOfUnion" (formula "16"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0"))
         (rule "andLeft" (formula "3"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_elimSub" (formula "16") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "1") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "13"))
         (rule "close" (formula "16") (ifseqformula "2"))
      )
   )
   (branch "Assume values_0[i_0]@heap[anon( allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, javaSubInt(end, 1)))] != values_0[i_0]"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,1,1,0,2,0"))
      (rule "andLeft" (formula "3"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "polySimp_elimSub" (formula "15") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "15") (term "2,1,1,1,0,2,0"))
      (rule "mul_literals" (formula "15") (term "1,2,1,1,1,0,2,0"))
      (rule "polySimp_elimSub" (formula "12") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,2,0"))
      (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "pullOutSelect" (formula "15") (term "2,0") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "13"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Case '<-'"
   (rule "allRight" (formula "14") (inst "sk=i_0") (userinteraction))
   (rule "instAll" (formula "14") (term "1,0,0") (ifseqformula "1") (userinteraction))
   (rule "eqTermCut" (formula "1") (term "2,0,1") (inst "s=int::select(heap, values_0, arr(i_0))") (userinteraction))
   (branch "Assume values_0[i_0]@heap[anon( allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, javaSubInt(end, 1)))] = values_0[i_0]"
      (rule "applyEq" (formula "2") (term "2,0,1") (ifseqformula "1") (userinteraction))
       (builtin "Use Dependency Contract" (formula "2") (term "0,1") (ifInst ""  (formula "16") (term "0,1")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::classOf(int)].JML accessible clause.0") (userinteraction))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "13")) (userinteraction))
      (rule "impLeft" (formula "14") (userinteraction))
      (branch "Case 1"
         (rule "wellFormedAnon" (formula "14") (term "0"))
         (rule "translateJavaSubInt" (formula "14") (term "2,1,1,0,1"))
         (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")))
         (rule "polySimp_elimSub" (formula "14") (term "2,1,1,0"))
         (rule "mul_literals" (formula "14") (term "1,2,1,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "2,1,1,0"))
         (rule "disjointDefinition" (formula "14"))
         (rule "distributeIntersection" (formula "14") (term "0"))
         (rule "unionEqualsEmpty" (formula "14"))
         (rule "commuteIntersection" (formula "14") (term "0,0"))
         (rule "commuteIntersection" (formula "14") (term "0,1"))
         (rule "cut_direct" (formula "14") (term "0"))
         (branch "CUT: self_77.sorted_splitters.* cap allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} TRUE"
             (builtin "One Step Simplification" (formula "15"))
            (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "allRight" (formula "15") (inst "sk=ov_0"))
            (rule "allRight" (formula "15") (inst "sk=fv_0"))
            (rule "notRight" (formula "15"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "16"))
            (rule "orRight" (formula "16"))
            (rule "elementOfUnion" (formula "16"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
         (branch "CUT: self_77.sorted_splitters.* cap allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, -1 + end) = {} FALSE"
             (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "allRight" (formula "14") (inst "sk=ov_0"))
            (rule "allRight" (formula "14") (inst "sk=fv_0"))
            (rule "notRight" (formula "14"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "15"))
            (rule "orRight" (formula "15"))
            (rule "elementOfArrayRange" (formula "16") (inst "iv=iv"))
            (rule "eqSymm" (formula "16") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
            (rule "elementOfUnion" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,1,1,1,0,0,1"))
         (rule "translateJavaSubInt" (formula "3") (term "2,1,1,1,0,0,1,0"))
         (rule "translateJavaSubInt" (formula "11") (term "2,1,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "3") (term "2,1,1,1,0,2,0,1,0"))
         (rule "impRight" (formula "14"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
         (rule "polySimp_elimSub" (formula "3") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "3") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "5") (term "2,1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "5") (term "1,2,1,1,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "5") (term "2,1,1,1,0,2,0,1,0"))
         (rule "mul_literals" (formula "5") (term "1,2,1,1,1,0,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "2,1,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "1,2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "3") (term "2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "5") (term "2,1,1,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "5") (term "2,1,1,1,0,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "2,1,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
         (rule "close" (formula "16") (ifseqformula "4"))
      )
   )
   (branch "Assume values_0[i_0]@heap[anon( allLocs setMinus self_77.sorted_splitters.* cup self_77.tree.tree.* cup arrayRange(values_0, begin, javaSubInt(end, 1)))] != values_0[i_0]"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "translateJavaSubInt" (formula "3") (term "2,1,1,1,0,0,1,0"))
      (rule "translateJavaSubInt" (formula "3") (term "2,1,1,1,0,2,0,1,0"))
      (rule "translateJavaSubInt" (formula "2") (term "2,1,1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "2") (term "2,1,1,1,0,2,0,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,0,0,0"))
      (rule "impRight" (formula "13"))
      (rule "notLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,1,1,0,2,0,1,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,1,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "12") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,1,1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "1,2,1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "3") (term "2,1,1,1,0,2,0"))
      (rule "mul_literals" (formula "3") (term "1,2,1,1,1,0,2,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,1,1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "2,1,1,1,0,2,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "4") (term "2,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "13"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
