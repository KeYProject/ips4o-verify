\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 29 16:56:21 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Fri Sep 29 16:56:21 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:from_sorted_samples([I,[I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:from_sorted_samples([I,[I,int,int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "4" (keyUser "weigl" ) (keyVersion "e1a85b31e7"))

(autoModeTime "123863")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,1,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "eqSymm" (formula "17") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "17") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "17") (term "1,0,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "17") (term "0,0,1,1,1,1,1,0,0,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
(rule "mul_literals" (formula "7") (term "1,1,1,0,0"))
(rule "polySimp_elimSub" (formula "10") (term "1"))
(rule "mul_literals" (formula "10") (term "1,1"))
(rule "polySimp_addComm0" (formula "7") (term "0,2,1,1,0"))
(rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_addComm0" (formula "10") (term "1"))
(rule "disjointDefinition" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "14"))
(rule "translateJavaShiftLeftIntConstant" (formula "11") (term "1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "assignment" (formula "17") (term "1"))
 (builtin "One Step Simplification" (formula "17"))
(rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
(rule "inEqSimp_commuteGeq" (formula "6"))
(rule "javaShiftLeftIntDef" (formula "11") (term "0"))
(rule "elementOfUnion" (formula "17") (term "0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "17"))
(rule "shiftLeftDef" (formula "11") (term "0,0"))
(rule "polySimp_elimNeg" (formula "11") (term "1,1,0,0"))
(rule "shiftLeftPositiveShiftDef" (formula "11") (term "2,0,0"))
(rule "polySimp_elimOneLeft0" (formula "11") (term "2,0,0"))
(rule "shiftRightPositiveShiftDef" (formula "11") (term "1,0,0"))
(rule "expand_moduloInteger" (formula "11") (term "0"))
(rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0"))
(rule "replace_int_RANGE" (formula "11") (term "1,1,0"))
(rule "replace_int_MIN" (formula "11") (term "0,0"))
(rule "commute_and" (formula "7") (term "0,0"))
(rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_from_sorted_samples,savedHeapBefore_from_sorted_samples,_num_bucketsBefore_from_sorted_samples,_num_splittersBefore_from_sorted_samples,_splittersBefore_from_sorted_samples,_treeBefore_from_sorted_samples"))
 (builtin "One Step Simplification" (formula "17"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "use_equal_buckets"))
(rule "compound_greater_equal_than_comparison_1" (formula "17") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
(rule "remove_parentheses_right" (formula "17") (term "1"))
(rule "compound_subtraction_1" (formula "17") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
(rule "assignmentSubtractionInt" (formula "17") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "17"))
   (rule "closeTrue" (formula "17"))
)
(branch "Usage"
    (opengoal " ")
)
)
}
