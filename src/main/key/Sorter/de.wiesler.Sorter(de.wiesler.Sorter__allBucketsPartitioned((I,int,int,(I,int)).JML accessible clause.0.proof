\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 14 13:32:33 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Thu Apr 14 13:32:33 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:allBucketsPartitioned([I,int,int,[I,int)].JML accessible clause.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:allBucketsPartitioned([I,int,int,[I,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "3884")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "values_0,begin,end,bucket_starts,num_buckets,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "16") (userinteraction))
(rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "16") (term "1") (inst "b=b") (userinteraction))
(rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "16") (term "0") (inst "b=b") (userinteraction))
 (builtin "One Step Simplification" (formula "16") (userinteraction))
(rule "equivAllRight" (formula "16") (userinteraction))
(rule "allRight" (formula "16") (inst "sk=b_0") (userinteraction))
(rule "eqTermCut" (formula "16") (term "4,0,1,1") (inst "s=int::select(heap, bucket_starts, arr(b_0))") (userinteraction))
(branch "Assume bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))] = bucket_starts[b_0]"
   (rule "eqTermCut" (formula "17") (term "5,0,1,1") (inst "s=int::select(heap,
            bucket_starts,
            arr(javaAddInt(b_0, Z(1(#)))))") (userinteraction))
   (branch "Assume bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))] = bucket_starts[javaAddInt(b_0, 1)]"
      (rule "applyEq" (formula "18") (term "4,0,1,1") (ifseqformula "2") (userinteraction))
      (rule "applyEq" (formula "18") (term "5,0,1,1") (ifseqformula "1") (userinteraction))
      (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "18") (term "0,1,1") (inst "i=i") (inst "j=j") (userinteraction))
      (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "18") (term "0,1,0") (inst "i=i") (inst "j=j") (userinteraction))
       (builtin "One Step Simplification" (formula "18") (userinteraction))
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "7"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,1,0,0,0,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "12") (term "0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,0,1,0,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,0,1,0,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,1,1,0,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,1,1,0,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,1"))
      (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,1,1,1,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,1,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,1,0,0,0,0,1,0,1,1"))
      (rule "eqSymm" (formula "12"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,0,1,0,1,0,1,1"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,0,1,0,1,0,1,1"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,1,1,0,1,0,1,1"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,1,1,0,1,0,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0,1,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,1,1,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "2") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,0,0,0,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,0,0,0,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,0,1,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,1,1,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0,1,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,0,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "15") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,0,1,1,0,0,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0,1,1"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "2"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
      (rule "times_zero_2" (formula "1") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
      (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
      (rule "simplifySelectOfAnon" (formula "2"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "3"))
      (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "elementOfSetMinus" (formula "2") (term "0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfUnion" (formula "2") (term "0"))
      (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
      (rule "eqSymm" (formula "2") (term "0,0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "2") (term "1,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "2") (term "1,1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,1,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
      (rule "commuteUnion" (formula "15") (term "1,1,0,1,1,1,0,1,0,1,1"))
      (rule "commuteUnion" (formula "15") (term "1,1,0,0,1,0,1,0,1,1"))
      (rule "nnf_imp2or" (formula "15") (term "0,1,0"))
      (rule "nnf_imp2or" (formula "15") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "15") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "15") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0,1,1"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,1,1"))
      (rule "add_zero_left" (formula "15") (term "0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "15") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,1,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,0,0,1,1"))
      (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "0,1,0,0"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "polySimp_addComm0" (formula "13") (term "3,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "nnf_imp2or" (formula "18") (term "0,1,0,1,0"))
      (rule "nnf_imp2or" (formula "18") (term "0,1,0,1,1"))
      (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "18") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,1,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0,0,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "18") (term "0,0,1,0,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0,0,1,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,1,1"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,1,1"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0,1,1"))
      (rule "commute_or_2" (formula "1"))
      (rule "commute_or_2" (formula "2"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "commute_or" (formula "1") (term "0"))
      (rule "commute_or" (formula "2") (term "0"))
      (rule "arrayLengthIsAShort" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "arrayLengthNotNegative" (formula "10") (term "0"))
      (rule "equiv_right" (formula "19"))
      (branch "Case '->'"
         (rule "impRight" (formula "20"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "22") (inst "sk=i_0"))
         (rule "orRight" (formula "22"))
         (rule "orRight" (formula "22"))
         (rule "allRight" (formula "24") (inst "sk=j_0"))
         (rule "orRight" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "26"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_leqRight" (formula "25"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "26"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,1") (ifseqformula "6"))
         (rule "leq_literals" (formula "9") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "10") (term "0,0,1"))
         (rule "qeq_literals" (formula "10") (term "0,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "qeq_literals" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
         (rule "simplifySelectOfAnon" (formula "3"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "12")))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "elementOfSetMinus" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "ifthenelse_negated" (formula "3") (term "0"))
         (rule "elementOfUnion" (formula "3") (term "0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
         (rule "polySimp_rightDist" (formula "5") (term "0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
         (rule "simplifySelectOfAnon" (formula "4"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "27")) (ifInst ""  (formula "14")))
         (rule "elementOfSetMinus" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "ifthenelse_negated" (formula "4") (term "0"))
         (rule "elementOfUnion" (formula "4") (term "0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "4") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "4") (term "1,1,0,0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,1,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
         (rule "qeq_literals" (formula "4") (term "0,1,1,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "commute_or" (formula "24") (term "0,0,1,0"))
         (rule "commute_or" (formula "12") (term "0,0,1,0"))
         (rule "commute_or" (formula "3") (term "0,0"))
         (rule "commute_or" (formula "4") (term "0,0"))
         (rule "arrayLengthNotNegative" (formula "23") (term "0"))
         (rule "arrayLengthIsAShort" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "cnf_rightDist" (formula "3") (term "0,0"))
         (rule "commute_or" (formula "3") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "4") (term "0,0"))
         (rule "commute_or" (formula "4") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
         (rule "commute_or" (formula "3") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
         (rule "commute_or" (formula "4") (term "0,0,0,0"))
         (rule "all_pull_out3" (formula "25") (term "0"))
         (rule "shift_paren_or" (formula "25") (term "0,0"))
         (rule "shift_paren_or" (formula "25") (term "0,0,0"))
         (rule "all_pull_out3" (formula "12") (term "0"))
         (rule "shift_paren_or" (formula "12") (term "0,0"))
         (rule "shift_paren_or" (formula "12") (term "0,0,0"))
         (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
         (rule "leq_literals" (formula "25") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0,0"))
         (rule "times_zero_2" (formula "25") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
         (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "27"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0,0") (ifseqformula "22"))
         (rule "qeq_literals" (formula "25") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "commute_or" (formula "25") (term "0,0"))
         (rule "allLeft" (formula "12") (inst "t=i_0"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0,0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0"))
         (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq0" (formula "12") (term "0,0,0,0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "allLeft" (formula "27") (inst "t=add(Z(1(#)), b_0)"))
         (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0"))
         (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "27") (term "1,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,0,0,0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,0,0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "27") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0"))
         (rule "leq_literals" (formula "27") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "commute_or" (formula "27") (term "0,0"))
         (rule "allLeft" (formula "28") (inst "t=b_0"))
         (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0,0,0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "28") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0,0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
         (rule "leq_literals" (formula "28") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "commute_or" (formula "28") (term "0,0"))
         (rule "ifthenelse_split" (formula "3") (term "0"))
         (branch " (values_0 = bucket_starts | j_0 >= begin) & (j_0 >= 0 | j_0 >= begin) & (j_0 >= begin | num_buckets >= -1 + j_0) TRUE"
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "applyEqReverse" (formula "8") (term "1") (ifseqformula "6"))
            (rule "hideAuxiliaryEq" (formula "6"))
            (rule "inEqSimp_commuteGeq" (formula "7"))
            (rule "ifthenelse_split" (formula "6") (term "0"))
            (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) TRUE"
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "9"))
               (rule "hideAuxiliaryEq" (formula "9"))
               (rule "allLeft" (formula "16") (inst "t=j_0"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,0,1,1,0"))
               (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0,0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
               (rule "andLeft" (formula "16"))
               (rule "inEqSimp_homoInEq1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
               (rule "add_literals" (formula "16") (term "1,1,0"))
               (rule "times_zero_1" (formula "16") (term "1,0"))
               (rule "add_zero_right" (formula "16") (term "0"))
               (rule "leq_literals" (formula "16"))
               (rule "closeFalse" (formula "16"))
            )
            (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) FALSE"
               (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "allLeft" (formula "27") (inst "t=num_buckets"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,1,0"))
               (rule "add_literals" (formula "27") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "27") (term "0,1,0"))
               (rule "leq_literals" (formula "27") (term "1,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "33"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1"))
               (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "allLeft" (formula "27") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "0"))
               (rule "mul_literals" (formula "27") (term "1,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0"))
               (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "32"))
               (rule "qeq_literals" (formula "27") (term "1"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "allLeft" (formula "27") (inst "t=b_0"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
               (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "11"))
               (rule "qeq_literals" (formula "27") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
               (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0"))
               (rule "leq_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "10"))
               (rule "mul_literals" (formula "27") (term "0,0"))
               (rule "add_zero_left" (formula "27") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1"))
               (rule "polySimp_elimOne" (formula "27") (term "1"))
               (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
               (rule "closeTrue" (formula "35"))
            )
         )
         (branch " (values_0 = bucket_starts | j_0 >= begin) & (j_0 >= 0 | j_0 >= begin) & (j_0 >= begin | num_buckets >= -1 + j_0) FALSE"
            (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) TRUE"
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "allLeft" (formula "27") (inst "t=num_buckets"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,1,0"))
               (rule "add_literals" (formula "27") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "27") (term "0,1,0"))
               (rule "leq_literals" (formula "27") (term "1,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "33"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1"))
               (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "allLeft" (formula "27") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "0"))
               (rule "mul_literals" (formula "27") (term "1,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0"))
               (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "32"))
               (rule "qeq_literals" (formula "27") (term "1"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "allLeft" (formula "27") (inst "t=b_0"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
               (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0"))
               (rule "polySimp_addComm1" (formula "27") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
               (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
               (rule "leq_literals" (formula "27") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "11"))
               (rule "qeq_literals" (formula "27") (term "0,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "10"))
               (rule "mul_literals" (formula "27") (term "0,0"))
               (rule "add_zero_left" (formula "27") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1"))
               (rule "polySimp_elimOne" (formula "27") (term "1"))
               (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0"))
               (rule "polySimp_addComm0" (formula "24") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24"))
               (rule "polySimp_mulComm0" (formula "24") (term "1"))
               (rule "polySimp_rightDist" (formula "24") (term "1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
               (rule "mul_literals" (formula "24") (term "0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "24"))
               (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
               (rule "add_literals" (formula "18") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0"))
               (rule "qeq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "allLeft" (formula "26") (inst "t=add(Z(1(#)), b_0)"))
               (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "26") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
               (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0"))
               (rule "leq_literals" (formula "26") (term "0,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "2"))
               (rule "mul_literals" (formula "26") (term "0,0"))
               (rule "add_zero_left" (formula "26") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1"))
               (rule "polySimp_elimOne" (formula "26") (term "1"))
               (rule "replace_known_left" (formula "34") (term "1,1,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "26")) (ifInst ""  (formula "26")))
               (rule "closeTrue" (formula "34"))
            )
            (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) FALSE"
               (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "allLeft" (formula "24") (inst "t=num_buckets"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,0"))
               (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "24") (term "0,1,0"))
               (rule "leq_literals" (formula "24") (term "1,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "30"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1"))
               (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "0"))
               (rule "mul_literals" (formula "24") (term "1,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0"))
               (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "29"))
               (rule "qeq_literals" (formula "24") (term "1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "24") (inst "t=b_0"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "24") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
               (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0"))
               (rule "leq_literals" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "7"))
               (rule "mul_literals" (formula "24") (term "0,0"))
               (rule "add_zero_left" (formula "24") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1"))
               (rule "polySimp_elimOne" (formula "24") (term "1"))
               (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
               (rule "closeTrue" (formula "32"))
            )
         )
      )
      (branch "Case '<-'"
         (rule "impRight" (formula "20"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "22") (inst "sk=i_0"))
         (rule "orRight" (formula "22"))
         (rule "orRight" (formula "22"))
         (rule "allRight" (formula "24") (inst "sk=j_0"))
         (rule "orRight" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "26"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "26"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "26"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "10") (term "0,0,1"))
         (rule "qeq_literals" (formula "10") (term "0,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,1") (ifseqformula "6"))
         (rule "leq_literals" (formula "9") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "qeq_literals" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "4") (term "0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
         (rule "polySimp_rightDist" (formula "4") (term "0,0"))
         (rule "mul_literals" (formula "4") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "commute_or" (formula "22") (term "0,0,1,0"))
         (rule "commute_or" (formula "10") (term "0,0,1,0"))
         (rule "arrayLengthNotNegative" (formula "21") (term "0"))
         (rule "arrayLengthIsAShort" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "all_pull_out3" (formula "23") (term "0"))
         (rule "shift_paren_or" (formula "23") (term "0,0"))
         (rule "shift_paren_or" (formula "23") (term "0,0,0"))
         (rule "all_pull_out3" (formula "10") (term "0"))
         (rule "shift_paren_or" (formula "10") (term "0,0"))
         (rule "shift_paren_or" (formula "10") (term "0,0,0"))
         (rule "allLeft" (formula "10") (inst "t=i_0"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0,0,0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_contradInEq0" (formula "10") (term "0,0,0,0") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "pullOutSelect" (formula "10") (term "1,1,1,0") (inst "selectSK=arr_2"))
         (rule "simplifySelectOfAnon" (formula "10"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "29")) (ifInst ""  (formula "15")))
         (rule "elementOfSetMinus" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "ifthenelse_negated" (formula "10") (term "0"))
         (rule "elementOfUnion" (formula "10") (term "0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "10") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "elementOfArrayRangeConcrete" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_subsumption0" (formula "10") (term "1,1,0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
         (rule "qeq_literals" (formula "10") (term "0,1,1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "commute_or" (formula "10") (term "0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0"))
         (rule "commute_or" (formula "10") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
         (rule "commute_or" (formula "10") (term "0,0,0,0"))
         (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
         (rule "leq_literals" (formula "25") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0,0"))
         (rule "times_zero_2" (formula "25") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
         (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "27"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0,0") (ifseqformula "22"))
         (rule "qeq_literals" (formula "25") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "commute_or" (formula "25") (term "0,0"))
         (rule "allLeft" (formula "26") (inst "t=add(Z(1(#)), b_0)"))
         (rule "polySimp_addAssoc" (formula "26") (term "1,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "26") (term "1,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0,0,0,0") (ifseqformula "8"))
         (rule "qeq_literals" (formula "26") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0,0,0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
         (rule "leq_literals" (formula "26") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "commute_or" (formula "26") (term "0,0"))
         (rule "allLeft" (formula "27") (inst "t=b_0"))
         (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0,0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "27") (term "0,0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0,0"))
         (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,0,0") (ifseqformula "8"))
         (rule "qeq_literals" (formula "27") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "commute_or" (formula "27") (term "0,0"))
         (rule "ifthenelse_split" (formula "10") (term "0"))
         (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) TRUE"
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "applyEqReverse" (formula "14") (term "1,1,1,0") (ifseqformula "13"))
            (rule "hideAuxiliaryEq" (formula "13"))
            (rule "allLeft" (formula "27") (inst "t=num_buckets"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,1,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "27") (term "0,1,0"))
            (rule "leq_literals" (formula "27") (term "1,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "33"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1"))
            (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "allLeft" (formula "27") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "27") (term "0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "0"))
            (rule "times_zero_2" (formula "27") (term "1,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0"))
            (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "32"))
            (rule "qeq_literals" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "allLeft" (formula "27") (inst "t=b_0"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "27") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,0"))
            (rule "leq_literals" (formula "27") (term "0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "7"))
            (rule "times_zero_1" (formula "27") (term "0,0"))
            (rule "add_zero_left" (formula "27") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1"))
            (rule "polySimp_elimOne" (formula "27") (term "1"))
            (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "4"))
            (rule "polySimp_mulComm0" (formula "24") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0"))
            (rule "polySimp_addComm0" (formula "24") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24"))
            (rule "polySimp_mulComm0" (formula "24") (term "1"))
            (rule "polySimp_rightDist" (formula "24") (term "1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
            (rule "mul_literals" (formula "24") (term "0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "24"))
            (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "qeq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "allLeft" (formula "26") (inst "t=add(Z(1(#)), b_0)"))
            (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,1,0"))
            (rule "add_zero_left" (formula "26") (term "0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
            (rule "leq_literals" (formula "26") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "26") (term "0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "1"))
            (rule "times_zero_1" (formula "26") (term "0,0"))
            (rule "add_zero_left" (formula "26") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1"))
            (rule "polySimp_elimOne" (formula "26") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "26") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0"))
            (rule "polySimp_addComm0" (formula "26") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26"))
            (rule "polySimp_mulComm0" (formula "26") (term "1"))
            (rule "polySimp_rightDist" (formula "26") (term "1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
            (rule "mul_literals" (formula "26") (term "0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0"))
            (rule "qeq_literals" (formula "26") (term "0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "allLeft" (formula "30") (inst "t=num_buckets"))
            (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,1,0"))
            (rule "add_literals" (formula "30") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "30") (term "0,1,0"))
            (rule "leq_literals" (formula "30") (term "1,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "34"))
            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "30") (term "0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
            (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "30") (term "0,0,0"))
            (rule "leq_literals" (formula "30") (term "0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "30"))
            (rule "times_zero_1" (formula "25") (term "0,0"))
            (rule "add_zero_left" (formula "25") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1"))
            (rule "polySimp_elimOne" (formula "25") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
            (rule "add_literals" (formula "25") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0"))
            (rule "qeq_literals" (formula "25") (term "0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "allLeft" (formula "29") (inst "t=num_buckets"))
            (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,1,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "29") (term "0,1,0"))
            (rule "leq_literals" (formula "29") (term "1,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "35"))
            (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0,0"))
            (rule "leq_literals" (formula "29") (term "0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "29"))
            (rule "times_zero_1" (formula "27") (term "0,0"))
            (rule "add_zero_left" (formula "27") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1"))
            (rule "polySimp_elimOne" (formula "27") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0"))
            (rule "qeq_literals" (formula "27") (term "0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "29"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "allLeft" (formula "32") (inst "t=add(Z(1(#)), b_0)"))
            (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
            (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "32") (term "0,0,0,0"))
            (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0,0"))
            (rule "qeq_literals" (formula "32") (term "0,0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,0"))
            (rule "mul_literals" (formula "32") (term "0,1,0,0"))
            (rule "polySimp_addComm1" (formula "32") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
            (rule "add_literals" (formula "32") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "32") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0"))
            (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
            (rule "polySimp_elimOne" (formula "32") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0,0"))
            (rule "leq_literals" (formula "32") (term "0,0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
            (rule "polySimp_addComm0" (formula "32") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "32"))
            (rule "polySimp_mulLiterals" (formula "32") (term "0"))
            (rule "polySimp_elimOne" (formula "32") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "29"))
            (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
            (rule "polySimp_addComm0" (formula "33") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "33"))
            (rule "polySimp_mulLiterals" (formula "33") (term "0"))
            (rule "polySimp_elimOne" (formula "33") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "32"))
            (rule "times_zero_1" (formula "25") (term "0,0"))
            (rule "add_zero_left" (formula "25") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1"))
            (rule "polySimp_elimOne" (formula "25") (term "1"))
            (rule "allLeft" (formula "10") (inst "t=j_0"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0"))
            (rule "mul_literals" (formula "10") (term "0,0,1,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "10") (term "0,0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
            (rule "leq_literals" (formula "10") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_contradInEq0" (formula "10") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0"))
            (rule "leq_literals" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=arr_3"))
            (rule "simplifySelectOfAnon" (formula "10"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "41")) (ifInst ""  (formula "16")))
            (rule "inEqSimp_homoInEq1" (formula "11"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1"))
            (rule "polySimp_rightDist" (formula "11") (term "1"))
            (rule "mul_literals" (formula "11") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1"))
            (rule "elementOfSetMinus" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "ifthenelse_negated" (formula "10") (term "0"))
            (rule "elementOfUnion" (formula "10") (term "0,0"))
            (rule "elementOfArrayRangeConcrete" (formula "10") (term "0,0,0"))
            (rule "elementOfArrayRangeConcrete" (formula "10") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
            (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEqReverse" (formula "11") (term "1,1") (ifseqformula "10"))
            (rule "hideAuxiliaryEq" (formula "10"))
            (rule "inEqSimp_homoInEq0" (formula "10"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "mul_literals" (formula "10") (term "0,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "3"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_homoInEq1" (formula "10"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "1,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0"))
            (rule "add_zero_right" (formula "10") (term "0"))
            (rule "leq_literals" (formula "10"))
            (rule "closeFalse" (formula "10"))
         )
         (branch " (values_0 = bucket_starts | i_0 >= begin) & (i_0 >= 0 | i_0 >= begin) & (i_0 >= begin | num_buckets >= -1 + i_0) FALSE"
            (rule "applyEqReverse" (formula "11") (term "1,1,1,0") (ifseqformula "10"))
            (rule "hideAuxiliaryEq" (formula "10"))
            (rule "allLeft" (formula "24") (inst "t=num_buckets"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,0"))
            (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "24") (term "0,1,0"))
            (rule "leq_literals" (formula "24") (term "1,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "30"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1"))
            (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "24") (term "0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "0"))
            (rule "times_zero_2" (formula "24") (term "1,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0"))
            (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "29"))
            (rule "qeq_literals" (formula "24") (term "1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "allLeft" (formula "24") (inst "t=b_0"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
            (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "24") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
            (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,0"))
            (rule "leq_literals" (formula "24") (term "0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "7"))
            (rule "times_zero_1" (formula "24") (term "0,0"))
            (rule "add_zero_left" (formula "24") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1"))
            (rule "polySimp_elimOne" (formula "24") (term "1"))
            (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
            (rule "closeTrue" (formula "32"))
         )
      )
   )
   (branch "Assume bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))] != bucket_starts[javaAddInt(b_0, 1)]"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "7"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,5,0,1,0"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,0,1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,5,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,5,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,5,0,1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "2,0,1,1,0,4,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "2,1,1,1,0,4,0,1,1"))
      (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "12") (term "0"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "11"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,0,1,1"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,5,0,1,1"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,5,0,1,1"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,4,0,1,1"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,4,0,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "2,0,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,2,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,5,0,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,5,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,5,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,4,0,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "2,1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,5,0,1,1"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,4,0,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "2,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1"))
      (rule "pullOutSelect" (formula "15") (term "5,0,1,1") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "13"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,1,0,0"))
      (rule "pullOutSelect" (formula "16") (term "4,0,1,1") (inst "selectSK=arr_1"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "3"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "17") (term "4,0,1,1") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "commuteUnion" (formula "16") (term "1,1,0,0,1,1"))
      (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaAddInt" (formula "11") (term "0,1,0,0"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,1,0"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "polySimp_addComm0" (formula "13") (term "3,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "19") (term "0,1,0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "translateJavaAddInt" (formula "19") (term "0,0,0,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "19") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "19") (term "0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "19") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "19") (term "0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,1,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "19") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0,1,0,1,0"))
      (rule "commute_or_2" (formula "1"))
      (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
      (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "14")))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
      (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "20") (term "0,1,1") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "20") (term "1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,1,0,1,1"))
      (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0,1,1"))
      (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,0,1,1,0,0,1,1"))
      (rule "nnf_imp2or" (formula "20") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "20") (term "0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,0,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0,1,1"))
      (rule "add_zero_left" (formula "20") (term "0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "20") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "0,1,1,0,0,1,1"))
      (rule "nnf_imp2or" (formula "20") (term "0,1,0,1,1"))
      (rule "nnf_notAnd" (formula "20") (term "0,0,1,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0,1,1"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0,1,1"))
      (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,0,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "20") (term "0,0,1,0,0,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,0,1,0,1,1"))
      (rule "cnf_rightDist" (formula "2") (term "0,0"))
      (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "13") (term "0"))
      (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "19")) (ifInst ""  (formula "14")))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
      (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "1,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "commute_or" (formula "1") (term "0"))
      (rule "commute_or" (formula "15") (term "0,0,1,0"))
      (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
      (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "14")))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
      (rule "arrayLengthNotNegative" (formula "10") (term "0"))
      (rule "arrayLengthIsAShort" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "1,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "commute_or" (formula "2") (term "0,0,0"))
      (rule "arrayLengthNotNegative" (formula "13") (term "0"))
      (rule "arrayLengthIsAShort" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "cnf_rightDist" (formula "1") (term "0"))
      (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
      (rule "equiv_right" (formula "23"))
      (branch "Case '->'"
         (rule "impRight" (formula "24"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "26") (inst "sk=i_0"))
         (rule "orRight" (formula "26"))
         (rule "orRight" (formula "26"))
         (rule "allRight" (formula "28") (inst "sk=j_0"))
         (rule "orRight" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_leqRight" (formula "29"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
         (rule "mul_literals" (formula "5") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,0,0"))
         (rule "qeq_literals" (formula "10") (term "0,0,0,1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "qeq_literals" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0,0") (ifseqformula "6"))
         (rule "leq_literals" (formula "9") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "27")))
         (rule "closeFalse" (formula "9"))
      )
      (branch "Case '<-'"
         (rule "impRight" (formula "24"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "26") (inst "sk=i_0"))
         (rule "orRight" (formula "26"))
         (rule "orRight" (formula "26"))
         (rule "allRight" (formula "28") (inst "sk=j_0"))
         (rule "orRight" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_leqRight" (formula "29"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,0,0"))
         (rule "qeq_literals" (formula "10") (term "0,0,0,1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "qeq_literals" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0,0") (ifseqformula "6"))
         (rule "leq_literals" (formula "9") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "27")))
         (rule "closeFalse" (formula "9"))
      )
   )
)
(branch "Assume bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))] != bucket_starts[b_0]"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "6"))
   (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,0,0"))
   (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,0,0"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,5,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,5,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "0,2,5,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "0,2,5,0,1,0"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "14") (term "2,0,1,1,0,4,0,1,1"))
   (rule "translateJavaAddInt" (formula "14") (term "2,1,1,1,0,4,0,1,1"))
   (rule "translateJavaSubInt" (formula "11") (term "0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "10"))
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,5,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,5,0,1,1"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,4,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,4,0,1,1"))
   (rule "polySimp_elimSub" (formula "11") (term "2,0,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "1,2,0,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "10") (term "1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,5,0,1,1"))
   (rule "polySimp_addComm0" (formula "14") (term "0,2,5,0,1,1"))
   (rule "polySimp_addComm0" (formula "14") (term "0,2,5,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,4,0,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "2,1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,1,0,5,0,1,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,1,0,4,0,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "2,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0"))
   (rule "pullOutSelect" (formula "14") (term "5,0,1,1") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "5")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
   (rule "times_zero_2" (formula "1") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,1,0,0"))
   (rule "pullOutSelect" (formula "15") (term "4,0,1,1") (inst "selectSK=arr_1"))
   (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "6")))
   (rule "eqSymm" (formula "13"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "commuteUnion" (formula "16") (term "1,1,0,0,1,1"))
   (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaAddInt" (formula "11") (term "0,1,0,0"))
   (rule "translateJavaAddInt" (formula "11") (term "3,0,1,0"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "polySimp_addComm0" (formula "13") (term "3,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "19") (term "0,1,0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "19") (term "0,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "19") (term "0,0,0,0,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0,1,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,1,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0,1,0,1,0"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
   (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "14")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
   (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "20") (term "0,1,1") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "20") (term "1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,1,0,1,1"))
   (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0,1,1"))
   (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,0,1,1,0,0,1,1"))
   (rule "nnf_imp2or" (formula "20") (term "0,1,1"))
   (rule "nnf_notAnd" (formula "20") (term "0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0,1,1"))
   (rule "add_zero_left" (formula "20") (term "0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_mulAssoc" (formula "20") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "0,1,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,0,1,1"))
   (rule "nnf_imp2or" (formula "20") (term "0,1,0,1,1"))
   (rule "nnf_notAnd" (formula "20") (term "0,0,1,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,0,0,1,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,0,1,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,0,1,0,0,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,0,1,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0,1,1"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0,1,1"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0,1,1"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0,1,1"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0,1,1"))
   (rule "cnf_rightDist" (formula "2") (term "0,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
   (rule "polySimp_addComm1" (formula "13") (term "1,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "add_zero_left" (formula "13") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "13") (term "0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "commute_or" (formula "14") (term "0,0,1,0"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "arrayLengthIsAShort" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "commute_or" (formula "2") (term "0,0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0"))
   (rule "arrayLengthNotNegative" (formula "13") (term "0"))
   (rule "arrayLengthIsAShort" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
   (rule "equiv_right" (formula "22"))
   (branch "Case '->'"
      (rule "impRight" (formula "23"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "25") (inst "sk=i_0"))
      (rule "orRight" (formula "25"))
      (rule "orRight" (formula "25"))
      (rule "allRight" (formula "27") (inst "sk=j_0"))
      (rule "orRight" (formula "27"))
      (rule "orRight" (formula "27"))
      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "inEqSimp_leqRight" (formula "25"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_geqRight" (formula "26"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "inEqSimp_geqRight" (formula "29"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_leqRight" (formula "28"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_geqRight" (formula "29"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "polySimp_mulComm0" (formula "5") (term "1"))
      (rule "polySimp_rightDist" (formula "5") (term "1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "polySimp_rightDist" (formula "4") (term "0,1"))
      (rule "mul_literals" (formula "4") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1"))
      (rule "polySimp_elimOne" (formula "3") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "0,1"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,0,0") (ifseqformula "6"))
      (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
      (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "27")))
      (rule "closeFalse" (formula "9"))
   )
   (branch "Case '<-'"
      (rule "impRight" (formula "23"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "25") (inst "sk=i_0"))
      (rule "orRight" (formula "25"))
      (rule "orRight" (formula "25"))
      (rule "allRight" (formula "27") (inst "sk=j_0"))
      (rule "orRight" (formula "27"))
      (rule "orRight" (formula "27"))
      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "inEqSimp_geqRight" (formula "26"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "26"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_geqRight" (formula "29"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_geqRight" (formula "29"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_leqRight" (formula "29"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "add_zero_left" (formula "3") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0"))
      (rule "polySimp_elimOne" (formula "5") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1"))
      (rule "polySimp_elimOne" (formula "3") (term "1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,0,0") (ifseqformula "6"))
      (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
      (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "27")))
      (rule "closeFalse" (formula "9"))
   )
)
)
}
