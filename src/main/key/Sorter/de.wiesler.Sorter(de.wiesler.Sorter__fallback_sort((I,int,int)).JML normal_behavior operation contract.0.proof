\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Oct 25 16:20:54 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "../../java";

\proofObligation "#Proof Obligation Settings
#Wed Oct 25 16:20:54 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:fallback_sort([I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:fallback_sort([I,int,int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "Wolfram" ) (keyVersion "e1a85b31e7"))

(autoModeTime "41646")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "2,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "8") (term "1,2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "elementOfArrayRange" (formula "8") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_fallback_sort,savedHeapBefore_fallback_sort"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_insertion_sort,exc_77,heapAfter_insertion_sort,anon_heap_insertion_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::insertion_sort([I,int,int)].JML normal_behavior operation contract.0"))
(branch "Post (insertion_sort)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "polySimp_elimSub" (formula "8") (term "2,1,0"))
   (rule "mul_literals" (formula "8") (term "1,2,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "2,1,0"))
   (rule "narrowSelectArrayType" (formula "10") (term "2,1") (ifseqformula "1") (ifseqformula "12"))
   (rule "methodCallEmpty" (formula "13") (term "1"))
   (rule "tryEmpty" (formula "13") (term "1"))
   (rule "emptyModality" (formula "13") (term "1"))
   (rule "andRight" (formula "13"))
   (branch "Case 1"
      (rule "andRight" (formula "13"))
      (branch "Case 1"
         (rule "andRight" (formula "13"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "13") (userinteraction))
            (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "12") (userinteraction))
            (rule "close" (formula "13") (ifseqformula "10") (userinteraction))
         )
         (branch "Case 2"
            (rule "andRight" (formula "13"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "13") (userinteraction))
               (rule "allRight" (formula "13") (inst "sk=element_0") (userinteraction))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i") (userinteraction))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "13") (term "1") (inst "i=i") (userinteraction))
               (rule "seqPermCountsInt" (formula "10") (inst "element=element") (inst "iv=iv") (userinteraction))
               (rule "lenOfSeqDef" (formula "10") (term "1,0,0") (userinteraction))
               (rule "lenOfSeqDef" (formula "10") (term "1,1,0") (userinteraction))
               (rule "ifthenelse_split" (formula "10") (term "1,1,0") (userinteraction))
               (branch "begin < end TRUE"
                  (rule "replace_known_left" (formula "11") (term "0,1,0,0") (ifseqformula "10") (userinteraction))
                   (builtin "One Step Simplification" (formula "11") (userinteraction))
                  (rule "instAll" (formula "14") (term "1,0,2,0") (ifseqformula "11") (userinteraction))
                  (rule "hide_left" (formula "12") (userinteraction))
                  (rule "bsum_shift_index" (formula "14") (term "0") (inst "uSub1=uSub1") (userinteraction))
                  (rule "bsum_shift_index" (formula "14") (term "1") (inst "uSub1=uSub1") (userinteraction))
                  (rule "eqTermCut" (formula "14") (term "0") (inst "s=bsum{int iv;}(Z(0(#)),
              sub(end, begin),
              \\if ((  any::seqGet(seqDef{int j;}(begin,
                                                 end,
                                                 int::select(heap,
                                                             values,
                                                             arr(j))),
                                  iv)
                    = element_0)<<origin(\"ensures @ file Sorter.java @ line 587\",\"[]\")>>)
                  \\then (Z(1(#)))
                  \\else (Z(0(#)))<<origin(\"ensures @ file Sorter.java @ line 587\",\"[ensures @ file Sorter.java @ line 587]\")>>)") (userinteraction))
                  (branch "Assume bsum{int uSub1;}(0, end - begin, if (values[uSub1 + begin] = element_0) then (1) else (0)) = bsum{int iv;}(0, end - begin, if ( seqDef{int j;}(begin, end, values[j])[iv] = element_0) then (1) else (0))"
                     (rule "eqTermCut" (formula "15") (term "1") (inst "s=bsum{int iv;}(Z(0(#)),
              sub(end, begin),
              \\if ((  any::seqGet(seqDef{int j;}(begin,
                                                 end,
                                                 any::select(heapAfter_insertion_sort,
                                                             values,
                                                             arr(j))),
                                  iv)
                    = element_0)<<origin(\"ensures @ file Sorter.java @ line 587\",\"[]\")>>)
                  \\then (Z(1(#)))
                  \\else (Z(0(#)))<<origin(\"ensures @ file Sorter.java @ line 587\",\"[ensures @ file Sorter.java @ line 587]\")>>)") (userinteraction))
                     (branch "Assume bsum{int uSub1;}(0, end - begin, if ( values[uSub1 + begin]@heapAfter_insertion_sort = element_0) then (1) else (0)) = bsum{int iv;}(0, end - begin, if ( seqDef{int j;}(begin, end, any::select(heapAfter_insertion_sort, values, arr(j)))[iv] = element_0) then (1) else (0))"
                        (rule "eqSymm" (formula "16"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1"))
                        (rule "getOfSeqDef" (formula "3") (term "0,0,2,1"))
                        (rule "castDel" (formula "3") (term "2,0,0,2,1"))
                        (rule "castDel" (formula "3") (term "1,0,0,2,1"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,0,2,1"))
                        (rule "getOfSeqDef" (formula "2") (term "0,0,2,1"))
                        (rule "castDel" (formula "2") (term "2,0,0,2,1"))
                        (rule "castDel" (formula "2") (term "1,0,0,2,1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "getOfSeqDef" (formula "3") (term "0,0,2,0"))
                        (rule "castDel" (formula "3") (term "2,0,0,2,0"))
                        (rule "castDel" (formula "3") (term "1,0,0,2,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,2,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,0,2,0"))
                        (rule "getOfSeqDef" (formula "1") (term "0,0,2,1"))
                        (rule "castDel" (formula "1") (term "1,0,0,2,1"))
                        (rule "castDel" (formula "1") (term "2,0,0,2,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "3"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "3"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,2,1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,2,0"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,2,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "3"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "16") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "13") (term "0"))
                        (rule "wellFormedAnonEQ" (formula "13") (term "1,0") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "9")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
                        (rule "wellFormedAnonEQ" (formula "13") (term "1,0") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "13") (term "0"))
                        (rule "wellFormedAnonEQ" (formula "13") (term "1,0") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
                        (rule "wellFormedAnonEQ" (formula "13") (term "1,0") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "13") (term "0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "commute_or" (formula "13") (term "0,0,1,0"))
                        (rule "bsum_equal_split3" (formula "16"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "bsum_lower_equals_upper" (formula "16") (term "0,1,1"))
                        (rule "bsum_lower_equals_upper" (formula "16") (term "1,2,1"))
                        (rule "less_literals" (formula "16") (term "0,1"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_elimSub" (formula "16") (term "2,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                        (rule "times_zero_2" (formula "16") (term "1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                        (rule "inEqSimp_subsumption1" (formula "16") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0"))
                        (rule "qeq_literals" (formula "16") (term "0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "equal_bsum1" (formula "17"))
                        (rule "allRight" (formula "17") (inst "sk=uSub1_0"))
                        (rule "impRight" (formula "17"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "19"))
                        (rule "replace_known_left" (formula "19") (term "0,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1"))
                        (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "eqSymm" (formula "19"))
                        (rule "pullOutSelect" (formula "19") (term "0,0,0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "20") (term "0,0"))
                        (rule "eqSymm" (formula "20"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "20") (term "1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "eqSymm" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "bsum_equal_split1" (formula "20"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "bsum_lower_equals_upper" (formula "20") (term "1,1,1"))
                        (rule "bsum_lower_equals_upper" (formula "20") (term "0,2,1"))
                        (rule "eqSymm" (formula "20") (term "2,1"))
                        (rule "polySimp_elimSub" (formula "20") (term "2,0,1,1"))
                        (rule "replace_known_right" (formula "20") (term "1,1") (ifseqformula "18"))
                        (rule "polySimp_elimSub" (formula "20") (term "2,0,2,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "2,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1"))
                        (rule "leq_literals" (formula "20") (term "0,1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "0"))
                        (rule "times_zero_2" (formula "20") (term "1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                        (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0"))
                        (rule "qeq_literals" (formula "20") (term "0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "arrayLengthIsAShort" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                        (rule "equal_bsum2" (formula "22") (ifseqformula "4"))
                        (rule "allRight" (formula "22") (inst "sk=uSub1_1"))
                        (rule "impRight" (formula "22"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1"))
                        (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "10")))
                        (rule "eqSymm" (formula "25") (term "0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "24") (term "0,1"))
                        (rule "eqSymm" (formula "24"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "equal_bsum2" (formula "25") (ifseqformula "7"))
                        (rule "allRight" (formula "25") (inst "sk=iv_0"))
                        (rule "impRight" (formula "25"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "pullOutSelect" (formula "27") (term "0,0,1") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                        (rule "eqSymm" (formula "28") (term "0,1"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "28") (term "1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "27") (term "0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "27") (term "0,0,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "11") (ifseqformula "23"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "17") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "closeTrue" (formula "28"))
                     )
                     (branch "Assume bsum{int uSub1;}(0, end - begin, if ( values[uSub1 + begin]@heapAfter_insertion_sort = element_0) then (1) else (0)) != bsum{int iv;}(0, end - begin, if ( seqDef{int j;}(begin, end, any::select(heapAfter_insertion_sort, values, arr(j)))[iv] = element_0) then (1) else (0))"
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "16"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1"))
                        (rule "getOfSeqDef" (formula "1") (term "0,0,2,1"))
                        (rule "castDel" (formula "1") (term "1,0,0,2,1"))
                        (rule "castDel" (formula "1") (term "2,0,0,2,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "getOfSeqDef" (formula "2") (term "0,0,2,0"))
                        (rule "castDel" (formula "2") (term "1,0,0,2,0"))
                        (rule "castDel" (formula "2") (term "2,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "getOfSeqDef" (formula "14") (term "0,0,2,1"))
                        (rule "castDel" (formula "14") (term "2,0,0,2,1"))
                        (rule "castDel" (formula "14") (term "1,0,0,2,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,1,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "getOfSeqDef" (formula "2") (term "0,0,2,0"))
                        (rule "castDel" (formula "2") (term "1,0,0,2,0"))
                        (rule "castDel" (formula "2") (term "2,0,0,2,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,0,0,0,2,1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,2,1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,2,1"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,2,0"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,2,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "14") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,2,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,2,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,2,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,2,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0,2,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0,2,1"))
                        (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "equal_bsum1" (formula "13"))
                        (rule "allRight" (formula "13") (inst "sk=uSub1_0"))
                        (rule "impRight" (formula "13"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "15"))
                        (rule "replace_known_left" (formula "15") (term "0,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                        (rule "mul_literals" (formula "2") (term "0,0,1"))
                        (rule "replace_known_left" (formula "15") (term "0,0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "pullOutSelect" (formula "15") (term "0,0,1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "7")))
                        (rule "eqSymm" (formula "16") (term "0,1"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "16") (term "1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "15") (term "0,0,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "7")))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "11") (ifseqformula "18"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "6") (ifseqformula "18"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "16") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeTrue" (formula "16"))
                     )
                  )
                  (branch "Assume bsum{int uSub1;}(0, end - begin, if (values[uSub1 + begin] = element_0) then (1) else (0)) != bsum{int iv;}(0, end - begin, if ( seqDef{int j;}(begin, end, values[j])[iv] = element_0) then (1) else (0))"
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "15"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,2,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,2,0,0,2,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,2,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1"))
                     (rule "getOfSeqDef" (formula "1") (term "0,0,2,0"))
                     (rule "castDel" (formula "1") (term "1,0,0,2,0"))
                     (rule "castDel" (formula "1") (term "2,0,0,2,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0,2,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                     (rule "getOfSeqDef" (formula "13") (term "0,0,2,1"))
                     (rule "castDel" (formula "13") (term "2,0,0,2,1"))
                     (rule "castDel" (formula "13") (term "1,0,0,2,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,2,1,0,0,2,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0,2,1"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "getOfSeqDef" (formula "1") (term "0,0,2,0"))
                     (rule "castDel" (formula "1") (term "1,0,0,2,0"))
                     (rule "castDel" (formula "1") (term "2,0,0,2,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0,2,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,2,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,0,0,2,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,2,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,2,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,2,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,0,0,2,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,0,0,2,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,0,0,2,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,2,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,2,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,2,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,2,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,2,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,2,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,0,2,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,0,2,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,2,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,2,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,2,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,2,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0,2,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0,2,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,2,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,2,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,2,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,2,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0,2,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0,2,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "qeq_literals" (formula "6") (term "0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
                     (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "equal_bsum1" (formula "14"))
                     (rule "allRight" (formula "14") (inst "sk=uSub1_0"))
                     (rule "impRight" (formula "14"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1"))
                     (rule "pullOutSelect" (formula "16") (term "0,0,0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
                     (rule "eqSymm" (formula "17") (term "0,0"))
                     (rule "eqSymm" (formula "17"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "17") (term "1,0,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "16") (term "0,1"))
                     (rule "eqSymm" (formula "16"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "bsum_equal_split3" (formula "17"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "bsum_lower_equals_upper" (formula "17") (term "1,2,1"))
                     (rule "bsum_lower_equals_upper" (formula "17") (term "0,1,1"))
                     (rule "less_literals" (formula "17") (term "0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_elimSub" (formula "17") (term "2,0,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "2,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                     (rule "times_zero_2" (formula "17") (term "1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                     (rule "inEqSimp_subsumption1" (formula "17") (term "0") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0"))
                     (rule "qeq_literals" (formula "17") (term "0,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "bsum_equal_split1" (formula "18"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "bsum_lower_equals_upper" (formula "18") (term "0,2,1"))
                     (rule "bsum_lower_equals_upper" (formula "18") (term "1,1,1"))
                     (rule "eqSymm" (formula "18") (term "2,1"))
                     (rule "polySimp_elimSub" (formula "18") (term "2,0,1,1"))
                     (rule "polySimp_elimSub" (formula "18") (term "2,0,2,1"))
                     (rule "polySimp_addComm0" (formula "18") (term "2,0,1,1"))
                     (rule "replace_known_right" (formula "18") (term "1,1") (ifseqformula "17"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
                     (rule "times_zero_2" (formula "18") (term "1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                     (rule "inEqSimp_subsumption1" (formula "18") (term "0") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "equal_bsum1" (formula "14"))
                     (rule "allRight" (formula "14") (inst "sk=uSub1_1"))
                     (rule "impRight" (formula "14"))
                     (rule "andLeft" (formula "1"))
                     (rule "eqSymm" (formula "16"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "closeTrue" (formula "16"))
                  )
               )
               (branch "begin < end FALSE"
                  (rule "bsum_lower_equals_upper" (formula "10") (term "1,0"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "10") (term "0,2,0,0"))
                  (rule "replace_known_right" (formula "10") (term "0,1,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "bsum_lower_equals_upper" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_ltRight" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                  (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,0"))
                  (rule "times_zero_1" (formula "7") (term "0"))
                  (rule "leq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "5"))
                  (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "1,2,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "5"))
                  (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "closeTrue" (formula "12"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
               (rule "closeTrue" (formula "13"))
            )
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "13"))
         (rule "closeTrue" (formula "13"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "13"))
      (rule "allRight" (formula "13") (inst "sk=f_0"))
      (rule "allRight" (formula "13") (inst "sk=o_0"))
      (rule "orRight" (formula "13"))
      (rule "orRight" (formula "13"))
      (rule "selectOfAnonEQ" (formula "10") (term "2,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "2")))
      (rule "elementOfArrayRange" (formula "10") (term "0,2,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "selectOfAnonEQ" (formula "15") (term "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
      (rule "elementOfArrayRange" (formula "15") (term "0,0,1") (inst "iv=iv"))
       (builtin "SMTRule")
   )
)
(branch "Exceptional Post (insertion_sort)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "2,1,0,0"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (insertion_sort)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "2")))
    (builtin "SMTRule")
)
)
}
