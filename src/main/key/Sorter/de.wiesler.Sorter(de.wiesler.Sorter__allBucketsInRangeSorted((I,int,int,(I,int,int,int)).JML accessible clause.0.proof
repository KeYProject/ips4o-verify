\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 14 13:29:57 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Apr 14 13:29:57 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:allBucketsInRangeSorted([I,int,int,[I,int,int,int)].JML accessible clause.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:allBucketsInRangeSorted([I,int,int,[I,int,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "29973")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "values_0,begin,end,bucket_starts,num_buckets,lower,upper,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "17"))
(rule "notLeft" (formula "16"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "9"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "One Step Simplification" (formula "17"))
(rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "17") (term "0") (inst "b=b") (userinteraction))
(rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "17") (term "1") (inst "b=b") (userinteraction))
 (builtin "One Step Simplification" (formula "17") (userinteraction))
(rule "equivAllRight" (formula "17") (userinteraction))
(rule "allRight" (formula "17") (inst "sk=b_0") (userinteraction))
(rule "eqTermCut" (formula "17") (term "2,0,1,1") (inst "s=javaAddInt(begin,
           int::select(heap, bucket_starts, arr(b_0)))") (userinteraction))
(branch "Assume javaAddInt(begin, bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))]) = javaAddInt(begin, bucket_starts[b_0])"
   (rule "eqTermCut" (formula "18") (term "3,0,1,1") (inst "s=javaAddInt(begin,
           int::select(heap,
                       bucket_starts,
                       arr(javaAddInt(b_0, Z(1(#))))))") (userinteraction))
   (branch "Assume javaAddInt(begin, bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))]) = javaAddInt(begin, bucket_starts[javaAddInt(b_0, 1)])"
      (rule "applyEq" (formula "19") (term "2,0,1,1") (ifseqformula "2") (userinteraction))
      (rule "applyEq" (formula "19") (term "3,0,1,1") (ifseqformula "1") (userinteraction))
       (builtin "Use Dependency Contract" (formula "19") (term "0,1,1") (ifInst ""  (formula "19") (term "0,1,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::isSortedSlice([I,int,int)].JML accessible clause.0") (userinteraction))
      (rule "impLeft" (formula "17") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "17"))
         (branch
            (rule "andRight" (formula "17"))
            (branch
               (rule "andRight" (formula "17"))
               (branch
                  (rule "andRight" (formula "17"))
                  (branch
                     (rule "andRight" (formula "17"))
                     (branch
                        (rule "andRight" (formula "17"))
                        (branch
                           (rule "close" (formula "17") (ifseqformula "3"))
                        )
                        (branch
                           (rule "true_left" (formula "7"))
                           (rule "wellFormedAnon" (formula "16"))
                           (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "15") (term "0"))
                           (rule "translateJavaAddInt" (formula "2") (term "0"))
                           (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,0"))
                           (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "19") (term "2,1,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
                           (rule "translateJavaAddInt" (formula "19") (term "3,0,1,1"))
                           (rule "translateJavaAddInt" (formula "2") (term "1"))
                           (rule "translateJavaAddInt" (formula "1") (term "0"))
                           (rule "translateJavaAddInt" (formula "1") (term "1"))
                           (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
                           (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
                           (rule "translateJavaAddInt" (formula "19") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,1"))
                           (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
                           (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
                           (rule "eqSymm" (formula "15"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "4")))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "17"))
                        (rule "true_left" (formula "7"))
                        (rule "translateJavaSubInt" (formula "15") (term "0"))
                        (rule "translateJavaAddInt" (formula "19") (term "3,0,1,0"))
                        (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,0,1,1"))
                        (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
                        (rule "translateJavaAddInt" (formula "19") (term "2,1,1,1,0,0,1,1"))
                        (rule "translateJavaAddInt" (formula "2") (term "0"))
                        (rule "translateJavaAddInt" (formula "2") (term "1"))
                        (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
                        (rule "translateJavaAddInt" (formula "19") (term "3,0,1,1"))
                        (rule "translateJavaAddInt" (formula "1") (term "0"))
                        (rule "translateJavaAddInt" (formula "1") (term "1"))
                        (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,0"))
                        (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,1"))
                        (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
                        (rule "eqSymm" (formula "15"))
                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
                  (branch
                     (rule "true_left" (formula "7"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "closeTrue" (formula "16"))
                  )
               )
               (branch
                  (rule "true_left" (formula "7"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch
               (rule "true_left" (formula "7"))
               (rule "translateJavaAddInt" (formula "19") (term "3,0,1,1"))
               (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "19") (term "3,0,1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "19") (term "2,1,1,1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "15") (term "0"))
               (rule "translateJavaAddInt" (formula "2") (term "0"))
               (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
               (rule "translateJavaAddInt" (formula "2") (term "1"))
               (rule "translateJavaAddInt" (formula "1") (term "0"))
               (rule "translateJavaAddInt" (formula "1") (term "1"))
               (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,1"))
               (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,0"))
               (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
               (rule "notRight" (formula "16"))
               (rule "close" (formula "17") (ifseqformula "1"))
            )
         )
         (branch "Case 2"
            (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "15") (term "0") (userinteraction))
             (builtin "One Step Simplification" (formula "15") (userinteraction))
            (rule "true_left" (formula "7"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "16") (term "0") (inst "i=i") (inst "j=j") (userinteraction))
             (builtin "One Step Simplification" (formula "16") (userinteraction))
            (rule "allLeft" (formula "16") (inst "t=Z(0(#))") (userinteraction))
            (rule "impLeft" (formula "16") (userinteraction))
            (branch "Case 1"
               (rule "translateJavaAddInt" (formula "23") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "3,0,1,0"))
               (rule "translateJavaSubInt" (formula "23") (term "2,0,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "2") (term "1"))
               (rule "translateJavaAddInt" (formula "19") (term "1,1"))
               (rule "translateJavaAddInt" (formula "1") (term "0"))
               (rule "translateJavaAddInt" (formula "23") (term "2,1,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1"))
               (rule "translateJavaAddInt" (formula "2") (term "0"))
               (rule "translateJavaAddInt" (formula "23") (term "2,0,1,1"))
               (rule "translateJavaSubInt" (formula "20") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "20") (term "2,1,1,0"))
               (rule "translateJavaAddInt" (formula "20") (term "1,1"))
               (rule "translateJavaSubInt" (formula "20") (term "2,1"))
               (rule "translateJavaAddInt" (formula "23") (term "3,0,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "0"))
               (rule "translateJavaAddInt" (formula "15") (term "0"))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,0,0"))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,0,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,2,1,3,0,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
               (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
               (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "20") (term "0,2,1"))
               (rule "translateJavaAddInt" (formula "23") (term "0,2,1,3,0,1,1"))
               (rule "translateJavaAddInt" (formula "20") (term "0,2,1,0,2,1"))
               (rule "leq_literals" (formula "19") (term "0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "eqSymm" (formula "18"))
               (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_elimSub" (formula "23") (term "2,0,1,1,0,0,1,1"))
               (rule "mul_literals" (formula "23") (term "1,2,0,1,1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "20") (term "2,0,1,0"))
               (rule "mul_literals" (formula "20") (term "1,2,0,1,0"))
               (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "20") (term "2,1"))
               (rule "mul_literals" (formula "20") (term "1,2,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1"))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_homoEq" (formula "2"))
               (rule "polySimp_addComm0" (formula "23") (term "2,1,1,1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_addComm0" (formula "20") (term "2,1,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,1,3,0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,1,3,0,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1"))
               (rule "polySimp_addComm0" (formula "23") (term "2,0,1,1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "20") (term "2,0,1,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,2,1,0,2,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "2,1,1,1,0,1,1,1,0"))
               (rule "polySimp_addComm1" (formula "20") (term "2,1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,2,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0"))
               (rule "inEqSimp_ltRight" (formula "19"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "1") (term "0"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "disjointDefinition" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "polySimp_sepNegMonomial" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
               (rule "qeq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "closeFalse" (formula "15"))
            )
            (branch "Case 2"
               (rule "allLeftHide" (formula "16") (inst "t=b_0") (userinteraction))
               (rule "impLeft" (formula "16") (userinteraction))
               (branch "Case 1"
                  (rule "translateJavaAddInt" (formula "23") (term "2,0,1,0"))
                  (rule "translateJavaAddInt" (formula "23") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "23") (term "0,2,1,3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "2") (term "1"))
                  (rule "translateJavaSubInt" (formula "23") (term "2,0,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "23") (term "2,1,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "23") (term "2,0,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "0"))
                  (rule "translateJavaAddInt" (formula "1") (term "1"))
                  (rule "translateJavaSubInt" (formula "20") (term "2,0,1,0"))
                  (rule "translateJavaAddInt" (formula "15") (term "0"))
                  (rule "translateJavaAddInt" (formula "20") (term "2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "18") (term "0"))
                  (rule "translateJavaAddInt" (formula "16") (term "1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "1,1"))
                  (rule "translateJavaSubInt" (formula "20") (term "2,1"))
                  (rule "translateJavaAddInt" (formula "2") (term "0"))
                  (rule "translateJavaAddInt" (formula "23") (term "0,2,1,3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "23") (term "3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
                  (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,1"))
                  (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
                  (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,1,0,2,1"))
                  (rule "eqSymm" (formula "18"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "polySimp_elimSub" (formula "23") (term "2,0,1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "23") (term "1,2,0,1,1,0,0,1,1"))
                  (rule "polySimp_elimSub" (formula "20") (term "2,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,1,0"))
                  (rule "polySimp_homoEq" (formula "2"))
                  (rule "polySimp_elimSub" (formula "20") (term "2,1"))
                  (rule "mul_literals" (formula "20") (term "1,2,1"))
                  (rule "polySimp_elimSub" (formula "18") (term "1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "2,1,1,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "15") (term "0"))
                  (rule "polySimp_addComm0" (formula "20") (term "2,1,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,2,1,3,0,1,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,2,1,3,0,1,1"))
                  (rule "polySimp_addComm0" (formula "23") (term "2,0,1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,2,1,0,2,1"))
                  (rule "polySimp_addComm0" (formula "18") (term "1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "2,1,1,1,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "2,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,2,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "0,0,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0"))
                  (rule "disjointDefinition" (formula "20"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "polySimp_sepNegMonomial" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
                  (rule "times_zero_2" (formula "1") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfArrayRangeConcrete" (formula "2") (term "1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
                  (rule "eqSymm" (formula "2") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1"))
                  (rule "commuteUnion" (formula "24") (term "1,1,0,0,1,1"))
                  (rule "commuteUnion" (formula "21") (term "1,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "24") (term "0,1,0"))
                  (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0,1,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0,1,0"))
                  (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,1,0"))
                  (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,1,0"))
                  (rule "commute_or_2" (formula "2"))
                  (rule "commute_or_2" (formula "3"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0"))
                  (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "25") (term "0,1,1"))
                  (rule "wellFormedAnon" (formula "1") (term "1,0"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "6")))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "26") (term "0,1,1") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "translateJavaAddInt" (formula "26") (term "0,2,1,1,0,1,1"))
                  (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0,1,1"))
                  (rule "polySimp_addComm1" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,1,1,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,1"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,1,1"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,0,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,0,1,1"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,1,0,1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,1"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,1,0,1"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,1"))
                  (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,0,1"))
                  (rule "commute_or" (formula "19") (term "0,0,1,0"))
                  (rule "commute_or" (formula "3") (term "0"))
                  (rule "commute_or" (formula "4") (term "0"))
                  (rule "equalityToElementOfRight" (formula "23") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "allRight" (formula "23") (inst "sk=ov_0"))
                  (rule "allRight" (formula "23") (inst "sk=fv_0"))
                  (rule "notRight" (formula "23"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                  (rule "andLeft" (formula "2"))
                  (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                  (rule "mul_literals" (formula "5") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "elementOfUnion" (formula "26"))
                  (rule "orRight" (formula "26"))
                  (rule "elementOfArrayRangeConcrete" (formula "27"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "elementOfArrayRangeConcrete" (formula "26"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                  (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "5") (term "0,0"))
                  (rule "wellFormedAnon" (formula "5") (term "1,0"))
                  (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "30")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                  (rule "true_left" (formula "5"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "5") (term "0,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "translateJavaAddInt" (formula "5") (term "0,2,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,2,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0,1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,0,0,0"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "cut_direct" (formula "30") (term "1"))
                  (branch "CUT: num_buckets >= b_0 TRUE"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "replace_known_left" (formula "8") (term "1,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "equiv_right" (formula "34"))
                     (branch "Case '->'"
                        (rule "impRight" (formula "35"))
                        (rule "andLeft" (formula "1"))
                        (rule "allRight" (formula "37") (inst "sk=i_0"))
                        (rule "orRight" (formula "37"))
                        (rule "orRight" (formula "37"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                        (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "39"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")) (ifInst ""  (formula "20")))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "elementOfUnion" (formula "3") (term "0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "30"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                        (rule "mul_literals" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "closeFalse" (formula "27"))
                     )
                     (branch "Case '<-'"
                        (rule "impRight" (formula "35"))
                        (rule "andLeft" (formula "1"))
                        (rule "allRight" (formula "37") (inst "sk=i_0"))
                        (rule "orRight" (formula "37"))
                        (rule "orRight" (formula "37"))
                        (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                        (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "38"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "29"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0"))
                        (rule "qeq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "26") (term "0,0"))
                        (rule "add_zero_left" (formula "26") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "26"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
                  (branch "CUT: num_buckets >= b_0 FALSE"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "false_right" (formula "31"))
                     (rule "replace_known_right" (formula "7") (term "1,1") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_geqRight" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                     (rule "mul_literals" (formula "23") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                     (rule "mul_literals" (formula "23") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "0,1") (ifseqformula "23"))
                     (rule "leq_literals" (formula "9") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "35") (term "0,0,0") (ifseqformula "20"))
                     (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                     (rule "qeq_literals" (formula "35") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_subsumption0" (formula "35") (term "0,0,1") (ifseqformula "20"))
                     (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,1"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "35") (term "0,0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,1"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0,1"))
                     (rule "qeq_literals" (formula "35") (term "0,0,0,1"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "20"))
                     (rule "times_zero_1" (formula "19") (term "0,0"))
                     (rule "add_zero_left" (formula "19") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "mul_literals" (formula "19") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "25"))
                     (rule "leq_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "6") (term "0,1") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "nnf_imp2or" (formula "6") (term "0,1"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "6") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "6") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulAssoc" (formula "6") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,1"))
                     (rule "impLeft" (formula "7"))
                     (branch
                        (rule "allRight" (formula "30") (inst "sk=i_0"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "inEqSimp_geqRight" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_geqRight" (formula "32"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "32"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "commute_or_2" (formula "11"))
                        (rule "cnf_rightDist" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "all_pull_out3" (formula "31") (term "0"))
                        (rule "equiv_right" (formula "38"))
                        (branch "Case '->'"
                           (rule "impRight" (formula "39"))
                           (rule "allRight" (formula "40") (inst "sk=i_1"))
                           (rule "orRight" (formula "40"))
                           (rule "orRight" (formula "40"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "42"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "42")) (ifInst ""  (formula "21")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "32"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "5"))
                           (rule "andLeft" (formula "11"))
                           (rule "inEqSimp_homoInEq1" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "1,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0"))
                           (rule "add_zero_right" (formula "11") (term "0"))
                           (rule "leq_literals" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "Case '<-'"
                           (rule "impRight" (formula "39"))
                           (rule "allRight" (formula "40") (inst "sk=i_1"))
                           (rule "orRight" (formula "40"))
                           (rule "orRight" (formula "40"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "41"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "31"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "10"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                     (branch
                        (rule "commute_or_2" (formula "9"))
                        (rule "cnf_rightDist" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "all_pull_out3" (formula "29") (term "0"))
                        (rule "equiv_right" (formula "36"))
                        (branch "Case '->'"
                           (rule "impRight" (formula "37"))
                           (rule "allRight" (formula "38") (inst "sk=i_0"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")) (ifInst ""  (formula "19")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "30"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "8"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                        (branch "Case '<-'"
                           (rule "impRight" (formula "37"))
                           (rule "allRight" (formula "38") (inst "sk=i_0"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "29"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "16") (term "1,0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                           (rule "qeq_literals" (formula "16") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "4"))
                           (rule "andLeft" (formula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,1,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "leq_literals" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "instAll" (formula "20") (term "0,2,1,0,2,1") (ifseqformula "17") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch "Case 1"
                     (rule "translateJavaAddInt" (formula "24") (term "2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "1"))
                     (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,1"))
                     (rule "translateJavaSubInt" (formula "24") (term "2,0,1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "24") (term "2,1,1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "24") (term "2,0,1,1"))
                     (rule "translateJavaSubInt" (formula "21") (term "2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "21") (term "2,1,1,0"))
                     (rule "translateJavaAddInt" (formula "21") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "21") (term "2,1"))
                     (rule "translateJavaAddInt" (formula "15") (term "0"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0"))
                     (rule "translateJavaSubInt" (formula "19") (term "0"))
                     (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "1"))
                     (rule "translateJavaAddInt" (formula "2") (term "0"))
                     (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "24") (term "3,0,1,1"))
                     (rule "translateJavaAddInt" (formula "21") (term "0,2,1"))
                     (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
                     (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
                     (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "21") (term "0,2,1,0,2,1"))
                     (rule "eqSymm" (formula "19"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "polySimp_elimSub" (formula "24") (term "2,0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "24") (term "1,2,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "2,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,2,0,1,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "2,1"))
                     (rule "mul_literals" (formula "21") (term "1,2,1"))
                     (rule "polySimp_elimSub" (formula "19") (term "1"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_homoEq" (formula "2"))
                     (rule "polySimp_addComm0" (formula "24") (term "2,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "2,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,1"))
                     (rule "polySimp_addComm0" (formula "24") (term "2,0,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,2,1,0,2,1"))
                     (rule "polySimp_addComm0" (formula "19") (term "1"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "2,1,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "2,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,2,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "disjointDefinition" (formula "21"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0"))
                     (rule "add_literals" (formula "2") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "2") (term "0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "20") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "20") (term "0"))
                     (rule "times_zero_2" (formula "20") (term "1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "18"))
                     (rule "polySimp_sepNegMonomial" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "polySimp_sepNegMonomial" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0"))
                     (rule "mul_literals" (formula "20") (term "1,0"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "7")))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
                     (rule "times_zero_2" (formula "1") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnon" (formula "2"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")) (ifInst ""  (formula "7")))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfUnion" (formula "2") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "2") (term "1,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
                     (rule "eqSymm" (formula "2") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,1,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1"))
                     (rule "commuteUnion" (formula "25") (term "1,1,0,0,1,1"))
                     (rule "commuteUnion" (formula "22") (term "1,0,0"))
                     (rule "nnf_imp2or" (formula "18") (term "0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "18") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0,1,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0,1,0"))
                     (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,0,1,0"))
                     (rule "commute_or_2" (formula "1"))
                     (rule "commute_or_2" (formula "2"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "25") (term "0,1,1"))
                     (rule "wellFormedAnon" (formula "1") (term "1,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "26") (term "0,1,1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "translateJavaAddInt" (formula "26") (term "0,2,1,1,0,1,1"))
                     (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0,1,1"))
                     (rule "polySimp_addComm1" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,1,1,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
                     (rule "nnf_imp2or" (formula "26") (term "0,1,1"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0,1,1"))
                     (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,0,1,1"))
                     (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0"))
                     (rule "commute_or" (formula "19") (term "0,0,1,0"))
                     (rule "commute_or" (formula "3") (term "0"))
                     (rule "equalityToElementOfRight" (formula "23") (inst "ov=ov") (inst "fv=fv"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "allRight" (formula "23") (inst "sk=ov_0"))
                     (rule "allRight" (formula "23") (inst "sk=fv_0"))
                     (rule "notRight" (formula "23"))
                     (rule "elementOfIntersect" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                     (rule "andLeft" (formula "2"))
                     (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                     (rule "mul_literals" (formula "5") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "elementOfSetMinus" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "elementOfUnion" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "elementOfArrayRangeConcrete" (formula "26"))
                     (rule "elementOfArrayRangeConcrete" (formula "27"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "22") (term "0,0"))
                     (rule "add_zero_left" (formula "22") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1"))
                     (rule "polySimp_elimOne" (formula "22") (term "1"))
                     (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "6") (term "0,1"))
                     (rule "wellFormedAnon" (formula "6") (term "1,0"))
                     (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0,1") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "nnf_imp2or" (formula "7") (term "0,1"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "7") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "0,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "7") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "add_zero_left" (formula "7") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "0,1,1,0,0,1,0,1"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "cut_direct" (formula "32") (term "0"))
                     (branch "CUT: b_0 >= -1 TRUE"
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "1"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "25"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "0,1") (ifseqformula "24"))
                        (rule "leq_literals" (formula "10") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "21")))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
                        (rule "times_zero_1" (formula "20") (term "0,0"))
                        (rule "add_zero_left" (formula "20") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "26"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0,0"))
                        (rule "wellFormedAnon" (formula "7") (term "1,0"))
                        (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "36")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "7"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0,0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "0,0"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0,0"))
                        (rule "commute_or_2" (formula "9"))
                        (rule "commute_or_2" (formula "10"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "7") (term "0,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0,1"))
                        (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,2,1,1,0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "7") (term "0,1"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0,0,1"))
                        (rule "all_pull_out3" (formula "31") (term "0"))
                        (rule "impLeft" (formula "8"))
                        (branch
                           (rule "allRight" (formula "33") (inst "sk=i_0"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")) (ifInst ""  (formula "16")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "33") (term "0,0"))
                           (rule "add_zero_left" (formula "33") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                           (rule "polySimp_elimOne" (formula "33") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "3") (term "0,1,0,0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "40")) (ifInst ""  (formula "17")))
                           (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "ifthenelse_negated" (formula "4") (term "0"))
                           (rule "elementOfUnion" (formula "4") (term "0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "4") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,0,0"))
                           (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "equiv_right" (formula "42"))
                           (branch "Case '->'"
                              (rule "impRight" (formula "43"))
                              (rule "allRight" (formula "44") (inst "sk=i_1"))
                              (rule "orRight" (formula "44"))
                              (rule "orRight" (formula "44"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "23")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                              (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "34"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "21") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "21") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "21") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "5"))
                              (rule "andLeft" (formula "13"))
                              (rule "inEqSimp_homoInEq1" (formula "13"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                              (rule "add_literals" (formula "13") (term "1,1,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0"))
                              (rule "add_literals" (formula "13") (term "0"))
                              (rule "leq_literals" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                           (branch "Case '<-'"
                              (rule "impRight" (formula "43"))
                              (rule "allRight" (formula "44") (inst "sk=i_1"))
                              (rule "orRight" (formula "44"))
                              (rule "orRight" (formula "44"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "39") (term "0,0"))
                              (rule "add_zero_left" (formula "39") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "32"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "19") (term "1,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "19") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "1,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "18") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "4"))
                              (rule "andLeft" (formula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "12"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,1,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0"))
                              (rule "add_literals" (formula "12") (term "0"))
                              (rule "leq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch
                           (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "impRight" (formula "37"))
                           (rule "allRight" (formula "38") (inst "sk=i_0"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "34") (term "0,0"))
                           (rule "add_zero_left" (formula "34") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "28"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "15") (term "1,0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                           (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                           (rule "qeq_literals" (formula "15") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "4"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0"))
                           (rule "add_literals" (formula "6") (term "0"))
                           (rule "leq_literals" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                     )
                     (branch "CUT: b_0 >= -1 FALSE"
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "false_right" (formula "33"))
                        (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_geqRight" (formula "32"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "10") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "equiv_right" (formula "35"))
                        (branch "Case '->'"
                           (rule "impRight" (formula "36"))
                           (rule "andLeft" (formula "1"))
                           (rule "allRight" (formula "38") (inst "sk=i_0"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")) (ifInst ""  (formula "20")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "30"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "5"))
                           (rule "mul_literals" (formula "28") (term "0,0"))
                           (rule "add_zero_left" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "closeFalse" (formula "9"))
                        )
                        (branch "Case '<-'"
                           (rule "impRight" (formula "36"))
                           (rule "andLeft" (formula "1"))
                           (rule "allRight" (formula "38") (inst "sk=i_0"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                           (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "4"))
                           (rule "mul_literals" (formula "26") (term "0,0"))
                           (rule "add_zero_left" (formula "26") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "instAll" (formula "21") (term "0,2,1,1,0") (ifseqformula "1") (userinteraction))
                     (rule "translateJavaAddInt" (formula "25") (term "2,0,1,0"))
                     (rule "translateJavaSubInt" (formula "22") (term "2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "17") (term "0"))
                     (rule "translateJavaSubInt" (formula "21") (term "0"))
                     (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "22") (term "2,1,1,0"))
                     (rule "translateJavaAddInt" (formula "22") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "22") (term "2,1"))
                     (rule "translateJavaAddInt" (formula "25") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "1"))
                     (rule "translateJavaSubInt" (formula "25") (term "2,0,1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "25") (term "2,1,1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,0,0,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "25") (term "2,0,1,1"))
                     (rule "translateJavaAddInt" (formula "25") (term "3,0,1,1"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,2,0,1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,1,0"))
                     (rule "translateJavaAddInt" (formula "3") (term "0"))
                     (rule "translateJavaAddInt" (formula "3") (term "1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,0,1"))
                     (rule "translateJavaAddInt" (formula "4") (term "0"))
                     (rule "translateJavaAddInt" (formula "22") (term "0,2,1"))
                     (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,1"))
                     (rule "translateJavaAddInt" (formula "3") (term "0,2,1,0"))
                     (rule "translateJavaAddInt" (formula "3") (term "2,1,1,1,0,1,0"))
                     (rule "translateJavaSubInt" (formula "3") (term "2,0,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "3") (term "0,2,1,1"))
                     (rule "translateJavaSubInt" (formula "4") (term "2,0,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "2,1,1,1,0,1,0"))
                     (rule "translateJavaAddInt" (formula "22") (term "0,2,1,0,2,1"))
                     (rule "eqSymm" (formula "21"))
                     (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_elimSub" (formula "22") (term "2,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "1,2,0,1,0"))
                     (rule "polySimp_elimSub" (formula "25") (term "2,0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "25") (term "1,2,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "2,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "3") (term "1,2,0,1,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "4") (term "2,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "1,2,0,1,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "2,1"))
                     (rule "mul_literals" (formula "22") (term "1,2,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1"))
                     (rule "polySimp_homoEq" (formula "3"))
                     (rule "polySimp_homoEq" (formula "4"))
                     (rule "polySimp_addComm0" (formula "17") (term "0"))
                     (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "22") (term "2,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "2,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "2,0,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "0,2,1,0,2,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "1"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,2,1,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "2,1,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,2,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "2,0,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "2,0,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "2,1,1,1,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "2,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "0,2,1"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "0,0,0"))
                     (rule "add_zero_left" (formula "3") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0"))
                     (rule "add_literals" (formula "4") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "4") (term "0,0,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "disjointDefinition" (formula "22"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_pullOutFactor2" (formula "1") (term "0,1,0"))
                     (rule "add_literals" (formula "1") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "1") (term "0,1,0"))
                     (rule "leq_literals" (formula "1") (term "1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1"))
                     (rule "applyEq" (formula "18") (term "1") (ifseqformula "20"))
                     (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "21"))
                     (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                     (rule "polySimp_sepNegMonomial" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "polySimp_sepNegMonomial" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnon" (formula "3"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "elementOfUnion" (formula "3") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                     (rule "eqSymm" (formula "3") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,1,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "3") (term "0,0,1,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0"))
                     (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnon" (formula "4"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                     (rule "eqSymm" (formula "5"))
                     (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "elementOfUnion" (formula "4") (term "0"))
                     (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
                     (rule "eqSymm" (formula "4") (term "0,0,0,0"))
                     (rule "elementOfArrayRangeConcrete" (formula "4") (term "1,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,0"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1"))
                     (rule "polySimp_elimOne" (formula "14") (term "1"))
                     (rule "commuteUnion" (formula "26") (term "1,1,0,0,1,1"))
                     (rule "commuteUnion" (formula "23") (term "1,0,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "nnf_imp2or" (formula "2") (term "0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "26") (term "0,1,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0,1,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0,1,0"))
                     (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0,1,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,1,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,1,0,0,1,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,1,0,0,1,0"))
                     (rule "commute_or_2" (formula "4"))
                     (rule "commute_or_2" (formula "5"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0,1,1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0,1,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0,1,1"))
                     (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,1,1,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,1"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,1,0,0,1,1"))
                     (rule "nnf_imp2or" (formula "27") (term "0,1,1"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0,1,1"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,0,1,1"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,1"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,1,1,0,0,1,1"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "1") (term "0,1") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
                     (rule "nnf_imp2or" (formula "1") (term "0,1"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "1") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1,0,1"))
                     (rule "commute_or" (formula "4") (term "0"))
                     (rule "commute_or" (formula "5") (term "0"))
                     (rule "equalityToElementOfRight" (formula "24") (inst "ov=ov") (inst "fv=fv"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "allRight" (formula "24") (inst "sk=ov_0"))
                     (rule "allRight" (formula "24") (inst "sk=fv_0"))
                     (rule "notRight" (formula "24"))
                     (rule "elementOfIntersect" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "elementOfArrayRange" (formula "2") (inst "iv=iv"))
                     (rule "andLeft" (formula "2"))
                     (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                     (rule "mul_literals" (formula "5") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "elementOfSetMinus" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "elementOfUnion" (formula "28"))
                     (rule "orRight" (formula "28"))
                     (rule "elementOfArrayRangeConcrete" (formula "29"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "elementOfArrayRangeConcrete" (formula "28"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                     (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                     (rule "mul_literals" (formula "28") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "24") (term "0,0"))
                     (rule "add_zero_left" (formula "24") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1"))
                     (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "commute_or" (formula "27") (term "0,0,1,0"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "cut_direct" (formula "7") (term "0"))
                     (branch "CUT: num_buckets >= 1 + b_0 TRUE"
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_subsumption1" (formula "11") (term "1,1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,1,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1,1"))
                        (rule "qeq_literals" (formula "11") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "1,1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,1"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1,1"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1,1"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,1"))
                        (rule "qeq_literals" (formula "10") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "8"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
                        (rule "andLeft" (formula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "1,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "leq_literals" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch "CUT: num_buckets >= 1 + b_0 FALSE"
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "inEqSimp_geqRight" (formula "31"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "21")))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "1"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "0,1") (ifseqformula "25"))
                        (rule "leq_literals" (formula "10") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_subsumption1" (formula "9") (term "0,1") (ifseqformula "25"))
                        (rule "leq_literals" (formula "9") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
                        (rule "times_zero_1" (formula "20") (term "0,0"))
                        (rule "add_zero_left" (formula "20") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "26"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "impLeft" (formula "7"))
                        (branch
                           (rule "allRight" (formula "33") (inst "sk=i_0"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "32") (term "0,0"))
                           (rule "add_zero_left" (formula "32") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1"))
                           (rule "commute_or_2" (formula "12"))
                           (rule "commute_or_2" (formula "11"))
                           (rule "commute_or" (formula "12") (term "0"))
                           (rule "commute_or" (formula "11") (term "0"))
                           (rule "equiv_right" (formula "40"))
                           (branch "Case '->'"
                              (rule "impRight" (formula "41"))
                              (rule "allRight" (formula "42") (inst "sk=i_1"))
                              (rule "orRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")) (ifInst ""  (formula "21")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                              (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "32"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "18") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "18") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "11"))
                              (rule "andLeft" (formula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0"))
                              (rule "add_literals" (formula "5") (term "0"))
                              (rule "leq_literals" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "Case '<-'"
                              (rule "impRight" (formula "41"))
                              (rule "allRight" (formula "42") (inst "sk=i_1"))
                              (rule "orRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "43"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "38") (term "0,0"))
                              (rule "add_zero_left" (formula "38") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1"))
                              (rule "polySimp_elimOne" (formula "38") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "31"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "4"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                        )
                        (branch
                           (rule "commute_or_2" (formula "10"))
                           (rule "commute_or_2" (formula "9"))
                           (rule "commute_or" (formula "10") (term "0"))
                           (rule "commute_or" (formula "9") (term "0"))
                           (rule "cnf_rightDist" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "shift_paren_or" (formula "11"))
                           (rule "cnf_rightDist" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "shift_paren_or" (formula "10"))
                           (rule "cnf_rightDist" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "commute_or_2" (formula "11"))
                           (rule "shift_paren_or" (formula "12"))
                           (rule "commute_or" (formula "11") (term "0"))
                           (rule "cnf_rightDist" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "commute_or_2" (formula "9"))
                           (rule "shift_paren_or" (formula "10"))
                           (rule "commute_or" (formula "9") (term "0"))
                           (rule "commute_or" (formula "7") (term "0,0,1,0"))
                           (rule "equiv_right" (formula "41"))
                           (branch "Case '->'"
                              (rule "impRight" (formula "42"))
                              (rule "allRight" (formula "43") (inst "sk=i_0"))
                              (rule "orRight" (formula "43"))
                              (rule "orRight" (formula "43"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_leqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "23")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
                              (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "34"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "19") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "19") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_subsumption1" (formula "20") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                              (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "20") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_subsumption1" (formula "19") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "19") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "1,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                              (rule "qeq_literals" (formula "18") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "8"))
                              (rule "andLeft" (formula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0"))
                              (rule "add_literals" (formula "5") (term "0"))
                              (rule "leq_literals" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "Case '<-'"
                              (rule "impRight" (formula "42"))
                              (rule "allRight" (formula "43") (inst "sk=i_0"))
                              (rule "orRight" (formula "43"))
                              (rule "orRight" (formula "43"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "39") (term "0,0"))
                              (rule "add_zero_left" (formula "39") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "33"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "4"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_literals" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Case 2"
         (rule "true_left" (formula "7"))
         (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,0"))
         (rule "translateJavaAddInt" (formula "19") (term "0,2,1,3,0,1,1"))
         (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
         (rule "translateJavaSubInt" (formula "19") (term "2,0,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "19") (term "2,1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0"))
         (rule "translateJavaAddInt" (formula "2") (term "0"))
         (rule "translateJavaAddInt" (formula "2") (term "1"))
         (rule "translateJavaAddInt" (formula "1") (term "0"))
         (rule "translateJavaAddInt" (formula "1") (term "1"))
         (rule "translateJavaSubInt" (formula "16") (term "2,0,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "16") (term "2,1,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "16") (term "2,0"))
         (rule "translateJavaAddInt" (formula "16") (term "3,0"))
         (rule "translateJavaAddInt" (formula "16") (term "2,1"))
         (rule "translateJavaAddInt" (formula "16") (term "3,1"))
         (rule "translateJavaAddInt" (formula "19") (term "3,0,1,0"))
         (rule "translateJavaAddInt" (formula "19") (term "3,0,1,1"))
         (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
         (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0"))
         (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0"))
         (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1"))
         (rule "translateJavaAddInt" (formula "16") (term "0,2,1,3,0"))
         (rule "translateJavaAddInt" (formula "16") (term "0,2,1,3,1"))
         (rule "eqSymm" (formula "15"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "19") (term "2,0,1,1,0,0,1,1"))
         (rule "mul_literals" (formula "19") (term "1,2,0,1,1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "16") (term "2,0,1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "1,2,0,1,1,0,0"))
         (rule "polySimp_homoEq" (formula "2"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "15") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "2,0,1,1,0,1,0,1,0"))
         (rule "mul_literals" (formula "2") (term "1,2,0,1,1,0,1,0,1,0"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_addComm0" (formula "19") (term "2,1,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "16") (term "2,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,2,1,3,0,1,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,2,1,3,0,1,1"))
         (rule "polySimp_addComm0" (formula "16") (term "0,2,1,3,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,2,1,3,1"))
         (rule "polySimp_addComm0" (formula "19") (term "2,0,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "16") (term "2,0,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "2,0,1,1,0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "2") (term "2,1,1,1,0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1"))
         (rule "polySimp_addComm1" (formula "19") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "2") (term "0,0,0"))
         (rule "add_zero_left" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "closeTrue" (formula "19"))
      )
   )
   (branch "Assume javaAddInt(begin, bucket_starts[javaAddInt(b_0, 1)]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))]) != javaAddInt(begin, bucket_starts[javaAddInt(b_0, 1)])"
      (rule "true_left" (formula "7"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,1,3,0,1,1"))
      (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "2,1,1,1,0,1,3,0,1,1"))
      (rule "translateJavaAddInt" (formula "18") (term "0,2,1,3,0,1,1"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "18") (term "2,1,1,1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "0"))
      (rule "translateJavaAddInt" (formula "2") (term "0"))
      (rule "translateJavaAddInt" (formula "2") (term "1"))
      (rule "translateJavaAddInt" (formula "1") (term "0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "0,2,1,3,0,1,0"))
      (rule "translateJavaAddInt" (formula "18") (term "3,0,1,1"))
      (rule "translateJavaSubInt" (formula "18") (term "2,0,1,1,0,1,2,0,1,1"))
      (rule "translateJavaAddInt" (formula "18") (term "2,1,1,1,0,1,2,0,1,1"))
      (rule "translateJavaSubInt" (formula "2") (term "2,0,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "2") (term "2,1,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,1,0,0"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "14"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_elimSub" (formula "18") (term "2,0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "18") (term "1,2,0,1,1,0,0,1,1"))
      (rule "polySimp_elimSub" (formula "18") (term "2,0,1,1,0,1,3,0,1,1"))
      (rule "mul_literals" (formula "18") (term "1,2,0,1,1,0,1,3,0,1,1"))
      (rule "polySimp_elimSub" (formula "18") (term "2,0,1,1,0,1,2,0,1,1"))
      (rule "mul_literals" (formula "18") (term "1,2,0,1,1,0,1,2,0,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "1,2,0,1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "15") (term "1,2,0,1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "1"))
      (rule "polySimp_homoEq" (formula "1"))
      (rule "polySimp_homoEq" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "2,1,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "0,2,1,3,0,1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "2,1,1,1,0,1,3,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "0,2,1,3,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "2,1,1,1,0,1,2,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "2,0,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "2,0,1,1,0,1,3,0,1,1"))
      (rule "polySimp_addComm0" (formula "18") (term "2,0,1,1,0,1,2,0,1,1"))
      (rule "polySimp_addComm0" (formula "14") (term "1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "2,0,1,1,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "1") (term "2,1,1,1,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "2,0,1,1,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "2,1,1,1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "18") (term "0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0"))
      (rule "polySimp_addComm1" (formula "15") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "15") (term "0,0,0"))
      (rule "add_literals" (formula "15") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "15") (term "0,0,0"))
      (rule "add_zero_left" (formula "15") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "15"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0"))
      (rule "polySimp_elimOne" (formula "15") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,1"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
      (rule "pullOutSelect" (formula "18") (term "1,3,0,1,1") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "16"))
      (rule "polySimp_addComm0" (formula "19") (term "3,0,1,1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
      (rule "pullOutSelect" (formula "19") (term "1,2,0,1,1") (inst "selectSK=arr_1"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "3"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "20") (term "1,2,0,1,1") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
      (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1"))
      (rule "polySimp_elimOne" (formula "12") (term "1"))
      (rule "commuteUnion" (formula "20") (term "1,1,0,0,1,1"))
      (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "translateJavaAddInt" (formula "15") (term "0,1,0,0"))
      (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "polySimp_addComm0" (formula "17") (term "3,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "23") (term "0,1,0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "translateJavaAddInt" (formula "23") (term "0,2,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,2,1,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,0,0,1,0"))
      (rule "commute_or_2" (formula "1"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "17") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
      (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "23") (term "0,1,1"))
      (rule "wellFormedAnon" (formula "1") (term "1,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "24") (term "0,1,1") (inst "i=i"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "24") (term "0,2,1,1,0,1,1"))
      (rule "polySimp_addComm1" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,1,1"))
      (rule "nnf_imp2or" (formula "24") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "24") (term "0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "0,0,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,1,1"))
      (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,1,1"))
      (rule "cnf_rightDist" (formula "3") (term "0,0"))
      (rule "commute_or" (formula "2") (term "0"))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "1") (term "0,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,0"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "1") (term "0,1") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1"))
      (rule "nnf_imp2or" (formula "1") (term "0,1"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1"))
      (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1"))
      (rule "nnf_imp2or" (formula "1") (term "0,1,0,1"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1,0,1"))
      (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1,0,1"))
      (rule "commute_or" (formula "18") (term "0,0,1,0"))
      (rule "commute_or" (formula "3") (term "0,0,0"))
      (rule "arrayLengthIsAShort" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "arrayLengthNotNegative" (formula "11") (term "0"))
      (rule "cnf_rightDist" (formula "2") (term "0"))
      (rule "cnf_rightDist" (formula "3") (term "1,0,0"))
      (rule "commute_or" (formula "1") (term "0,0,0"))
      (rule "equiv_right" (formula "25"))
      (branch "Case '->'"
         (rule "impRight" (formula "26"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "28") (inst "sk=i_0"))
         (rule "orRight" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "29"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1"))
         (rule "mul_literals" (formula "1") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
         (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
         (rule "simplifySelectOfAnon" (formula "3"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")) (ifInst ""  (formula "13")))
         (rule "inEqSimp_homoInEq0" (formula "4"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "elementOfSetMinus" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "ifthenelse_negated" (formula "3") (term "0"))
         (rule "elementOfUnion" (formula "3") (term "0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
         (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
         (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "23"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1"))
         (rule "polySimp_rightDist" (formula "6") (term "1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
         (rule "mul_literals" (formula "6") (term "0,1"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "11") (term "1,1,1,0,0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,1,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,1,1,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,1,1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,1,1,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,1,1,1,0,0"))
         (rule "qeq_literals" (formula "11") (term "0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "1,1") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,1"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,1"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,1"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,1"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1"))
         (rule "qeq_literals" (formula "10") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "11") (term "0,1,0,0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,1,0,0"))
         (rule "qeq_literals" (formula "11") (term "0,0,1,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "5"))
         (rule "times_zero_1" (formula "21") (term "0,0"))
         (rule "add_zero_left" (formula "21") (term "0"))
         (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,0") (ifseqformula "20"))
         (rule "leq_literals" (formula "10") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "30")))
         (rule "closeFalse" (formula "10"))
      )
      (branch "Case '<-'"
         (rule "impRight" (formula "26"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "28") (inst "sk=i_0"))
         (rule "orRight" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_leqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "4"))
         (rule "times_zero_1" (formula "19") (term "0,0"))
         (rule "add_zero_left" (formula "19") (term "0"))
         (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0,0") (ifseqformula "19"))
         (rule "leq_literals" (formula "9") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "23"))
         (rule "polySimp_rightDist" (formula "5") (term "0,0"))
         (rule "mul_literals" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "1,1,0,0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
         (rule "qeq_literals" (formula "10") (term "0,1,1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "qeq_literals" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0,0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
         (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "29")))
         (rule "closeFalse" (formula "9"))
      )
   )
)
(branch "Assume javaAddInt(begin, bucket_starts[b_0]@heap[anon( allLocs setMinus arrayRange(values_0, begin, javaSubInt(end, 1)) cup arrayRange(bucket_starts, 0, javaAddInt(num_buckets, 1)))]) != javaAddInt(begin, bucket_starts[b_0])"
   (rule "true_left" (formula "6"))
   (rule "translateJavaSubInt" (formula "17") (term "2,0,1,1,0,1,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "17") (term "2,0,1,0"))
   (rule "translateJavaAddInt" (formula "17") (term "3,0,1,0"))
   (rule "translateJavaAddInt" (formula "17") (term "2,1,1,1,0,1,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "17") (term "0,2,1,3,0,1,1"))
   (rule "translateJavaSubInt" (formula "17") (term "2,0,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "17") (term "2,1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "17") (term "2,0,1,1"))
   (rule "translateJavaSubInt" (formula "14") (term "0"))
   (rule "translateJavaAddInt" (formula "1") (term "0,0"))
   (rule "translateJavaAddInt" (formula "1") (term "1,0"))
   (rule "translateJavaAddInt" (formula "17") (term "0,2,1,3,0,1,0"))
   (rule "translateJavaAddInt" (formula "17") (term "3,0,1,1"))
   (rule "translateJavaSubInt" (formula "17") (term "2,0,1,1,0,1,2,0,1,1"))
   (rule "translateJavaAddInt" (formula "17") (term "2,1,1,1,0,1,2,0,1,1"))
   (rule "translateJavaAddInt" (formula "1") (term "2,1,1,1,0,1,0,0"))
   (rule "translateJavaSubInt" (formula "1") (term "2,0,1,1,0,1,0,0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "13"))
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "17") (term "1,2,0,1,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,0,1,3,0,1,1"))
   (rule "mul_literals" (formula "17") (term "1,2,0,1,1,0,1,3,0,1,1"))
   (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,0,1,2,0,1,1"))
   (rule "mul_literals" (formula "17") (term "1,2,0,1,1,0,1,2,0,1,1"))
   (rule "polySimp_homoEq" (formula "14"))
   (rule "polySimp_elimSub" (formula "13") (term "1"))
   (rule "polySimp_elimSub" (formula "14") (term "2,0,1,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "14") (term "1,2,0,1,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
   (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "0,2,1,3,0,1,0"))
   (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,1,3,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "0,2,1,3,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "2,1,1,1,0,1,2,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "2,0,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "2,0,1,1,0,1,3,0,1,1"))
   (rule "polySimp_addComm0" (formula "17") (term "2,0,1,1,0,1,2,0,1,1"))
   (rule "polySimp_addComm0" (formula "13") (term "1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,1,0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,1,0,1,1,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,0"))
   (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0"))
   (rule "add_literals" (formula "14") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "14") (term "0,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "polySimp_sepNegMonomial" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0"))
   (rule "polySimp_elimOne" (formula "14") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1"))
   (rule "pullOutSelect" (formula "17") (term "1,3,0,1,1") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "5")))
   (rule "polySimp_addComm0" (formula "18") (term "3,0,1,1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "pullOutSelect" (formula "18") (term "1,2,0,1,1") (inst "selectSK=arr_1"))
   (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
   (rule "eqSymm" (formula "16"))
   (rule "polySimp_addComm0" (formula "19") (term "2,0,1,1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1"))
   (rule "polySimp_elimOne" (formula "12") (term "1"))
   (rule "commuteUnion" (formula "20") (term "1,1,0,0,1,1"))
   (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "translateJavaAddInt" (formula "15") (term "0,1,0,0"))
   (rule "translateJavaAddInt" (formula "15") (term "3,0,1,0"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "polySimp_addComm0" (formula "17") (term "3,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "15"))
   (rule "inEqSimp_commuteLeq" (formula "16"))
   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "23") (term "0,1,0"))
   (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "24") (term "0,1,0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,1,0"))
   (rule "translateJavaSubInt" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "24") (term "0,2,1,1,0,1,0"))
   (rule "polySimp_addComm1" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,0,1,0"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "18") (term "0"))
   (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,0"))
   (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
   (rule "true_left" (formula "1"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "1") (term "0,1"))
   (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,1,0,1"))
   (rule "nnf_imp2or" (formula "2") (term "0,1"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "2") (term "0,1,0,1"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,1"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,0,1"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,0,1"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "26") (term "0,1,1") (inst "i=i"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "translateJavaAddInt" (formula "26") (term "0,2,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0,1,1"))
   (rule "polySimp_addComm1" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "26") (term "0,1,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
   (rule "nnf_imp2or" (formula "26") (term "0,1,1"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "26") (term "0,0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,0,1,1"))
   (rule "cnf_rightDist" (formula "4") (term "0,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "19") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,2,1,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "1,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "add_zero_left" (formula "19") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,1") (inst "i=i"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "1") (term "1,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "1") (term "0,1"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0,1"))
   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "2") (term "0,0"))
   (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "25"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "6")))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "3") (term "0,0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,1,1,0,0"))
   (rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "commute_or" (formula "21") (term "0,0,1,0"))
   (rule "arrayLengthIsAShort" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "arrayLengthNotNegative" (formula "13") (term "0"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "27"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "2") (term "0,0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,0,0"))
   (rule "commute_or" (formula "6") (term "0,0,0"))
   (rule "arrayLengthIsAShort" (formula "21") (term "0"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "true_left" (formula "21"))
   (rule "arrayLengthNotNegative" (formula "21") (term "0"))
   (rule "commute_or" (formula "5") (term "0,0,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "3") (term "0,0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,1,1,0,0"))
   (rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,0,0"))
   (rule "cnf_rightDist" (formula "6") (term "1,0,0"))
   (rule "equiv_right" (formula "30"))
   (branch "Case '->'"
      (rule "impRight" (formula "31"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "33") (inst "sk=i_0"))
      (rule "orRight" (formula "33"))
      (rule "orRight" (formula "33"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
      (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_geqRight" (formula "34"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_geqRight" (formula "34"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_leqRight" (formula "34"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1"))
      (rule "mul_literals" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1"))
      (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
      (rule "simplifySelectOfAnon" (formula "3"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")) (ifInst ""  (formula "15")))
      (rule "inEqSimp_homoInEq0" (formula "4"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "elementOfSetMinus" (formula "3") (term "0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "ifthenelse_negated" (formula "3") (term "0"))
      (rule "elementOfUnion" (formula "3") (term "0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0,0"))
      (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0,0,0"))
      (rule "times_zero_2" (formula "3") (term "1,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "25"))
      (rule "polySimp_rightDist" (formula "6") (term "0,0"))
      (rule "mul_literals" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6"))
      (rule "polySimp_mulComm0" (formula "6") (term "1"))
      (rule "polySimp_rightDist" (formula "6") (term "1"))
      (rule "mul_literals" (formula "6") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "0,0,1,0,0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_subsumption1" (formula "12") (term "0,1,0,0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "12") (term "0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "1,1,0,0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,1,1,0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "5"))
      (rule "mul_literals" (formula "23") (term "0,0"))
      (rule "add_zero_left" (formula "23") (term "0"))
      (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "35")))
      (rule "closeFalse" (formula "12"))
   )
   (branch "Case '<-'"
      (rule "impRight" (formula "31"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "33") (inst "sk=i_0"))
      (rule "orRight" (formula "33"))
      (rule "orRight" (formula "33"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
      (rule "inEqSimp_geqRight" (formula "35"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_geqRight" (formula "35"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_leqRight" (formula "35"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "25"))
      (rule "polySimp_rightDist" (formula "5") (term "0,0"))
      (rule "mul_literals" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "polySimp_mulComm0" (formula "5") (term "1"))
      (rule "polySimp_rightDist" (formula "5") (term "1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
      (rule "mul_literals" (formula "5") (term "0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "1,1,1,0,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,1,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,1,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,1,1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,1,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,1,1,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_subsumption1" (formula "12") (term "0,1,0,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "12") (term "0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "0,1,0,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "4"))
      (rule "times_zero_1" (formula "23") (term "0,0"))
      (rule "add_zero_left" (formula "23") (term "0"))
      (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "35")))
      (rule "closeFalse" (formula "12"))
   )
)
)
}
