\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Apr 08 13:27:10 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../java/main";

\proofObligation "#Proof Obligation Settings
#Fri Apr 08 13:27:10 CEST 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isBlockAlignedSub(int,int)].JML model_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:isBlockAlignedSub(int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "151")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,heapBefore,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "polySimp_elimSub" (formula "7") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
(rule "times_zero_1" (formula "3") (term "0,0"))
(rule "add_zero_left" (formula "3") (term "0"))
(rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "translateJavaMod" (formula "7") (term "0"))
(rule "jmod_axiom" (formula "7") (term "0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "newSym_eq" (formula "7") (inst "l=l_0") (inst "newSymDef=mul(j, Z(0(#)))"))
(rule "times_zero_1" (formula "7") (term "1,1"))
(rule "add_zero_right" (formula "7") (term "1"))
(rule "applyEq" (formula "8") (term "0,0") (ifseqformula "7"))
(rule "eqSymm" (formula "8"))
(rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
(rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "8"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,0"))
(rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
(rule "leq_literals" (formula "4") (term "0,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
(rule "add_literals" (formula "4") (term "1,1,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "leq_literals" (formula "4") (term "0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "translateJavaMod" (formula "6") (term "0"))
(rule "jmod_axiom" (formula "6") (term "0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "newSym_eq" (formula "6") (inst "l=l_1") (inst "newSymDef=mul(i, Z(0(#)))"))
(rule "times_zero_1" (formula "6") (term "1,1"))
(rule "add_zero_right" (formula "6") (term "1"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
(rule "eqSymm" (formula "7"))
(rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
(rule "applyEq" (formula "5") (term "0") (ifseqformula "7"))
(rule "inEqSimp_commuteGeq" (formula "5"))
(rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "7"))
(rule "polySimp_addComm0" (formula "10") (term "0,0"))
(rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
(rule "elimGcdLeq_antec" (formula "5") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
(rule "neg_literal" (formula "5") (term "0,0,0,0,0,1,0"))
(rule "leq_literals" (formula "5") (term "0,0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
(rule "add_literals" (formula "5") (term "1,1,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
(rule "add_literals" (formula "5") (term "1,1,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "qeq_literals" (formula "5") (term "0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
(rule "add_zero_right" (formula "3") (term "0,0,0,1,0"))
(rule "leq_literals" (formula "3") (term "0,0"))
 (builtin "One Step Simplification" (formula "3"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
(rule "add_literals" (formula "3") (term "1,1,0,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "leq_literals" (formula "3") (term "0"))
 (builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
(rule "times_zero_1" (formula "4") (term "0,0"))
(rule "add_zero_left" (formula "4") (term "0"))
(rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "translateJavaMod" (formula "10") (term "0"))
(rule "jmod_axiom" (formula "10") (term "0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "10"))
(rule "polySimp_mulLiterals" (formula "10") (term "0"))
(rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(l_1, mul(l_0, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=jdiv(add(mul(l_1, Z(6(5(2(#))))),
         mul(l_0, Z(neglit(6(5(2(#))))))),
     Z(6(5(2(#)))))") (inst "elimGcd=Z(6(5(2(#))))"))
 (builtin "One Step Simplification" (formula "10"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
(rule "add_literals" (formula "10") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
(rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,0,0,1"))
(rule "add_literals" (formula "10") (term "1,0,0,0,0,1"))
(rule "times_zero_1" (formula "10") (term "0,0,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,0,1"))
(rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,1"))
(rule "add_literals" (formula "10") (term "1,0,0,1"))
(rule "times_zero_1" (formula "10") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
(rule "add_literals" (formula "10") (term "1,1,0,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0"))
(rule "polySimp_pullOutFactor0" (formula "10") (term "0,0,0"))
(rule "add_literals" (formula "10") (term "1,0,0,0"))
(rule "times_zero_1" (formula "10") (term "0,0,0"))
(rule "leq_literals" (formula "10") (term "0,0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
(rule "add_literals" (formula "10") (term "1,1,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0"))
(rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
(rule "add_literals" (formula "10") (term "1,0,0"))
(rule "times_zero_1" (formula "10") (term "0,0"))
(rule "qeq_literals" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "jdiv_axiom" (formula "8") (term "0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,2,1"))
(rule "eqSymm" (formula "8"))
(rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
(rule "inEqSimp_subsumption6" (formula "8") (term "0,0") (ifseqformula "4"))
(rule "times_zero_1" (formula "8") (term "1,1,0,0,0"))
(rule "greater_literals" (formula "8") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "leq_literals" (formula "8") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "polyDiv_pullOut" (formula "8") (term "0") (inst "polyDivCoeff=l_0"))
(rule "equal_literals" (formula "8") (term "0,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
(rule "polySimp_homoEq" (formula "8"))
(rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0,1,0"))
(rule "add_literals" (formula "8") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "8") (term "0,0,0,1,0"))
(rule "div_literals" (formula "8") (term "0,0,1,0"))
(rule "add_zero_left" (formula "8") (term "0,1,0"))
(rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
(rule "add_literals" (formula "8") (term "1,0"))
(rule "times_zero_1" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "jdiv_axiom" (formula "6") (term "0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,2,1"))
(rule "eqSymm" (formula "6"))
(rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "7"))
(rule "inEqSimp_subsumption6" (formula "6") (term "0,0") (ifseqformula "3"))
(rule "greater_literals" (formula "6") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0"))
(rule "leq_literals" (formula "6") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=l_1"))
(rule "equal_literals" (formula "6") (term "0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
(rule "polySimp_homoEq" (formula "6"))
(rule "polySimp_pullOutFactor0" (formula "6") (term "0,0,0,1,0"))
(rule "add_literals" (formula "6") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "6") (term "0,0,0,1,0"))
(rule "div_literals" (formula "6") (term "0,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,1,0"))
(rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
(rule "add_literals" (formula "6") (term "1,0"))
(rule "times_zero_1" (formula "6") (term "0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "true_left" (formula "6"))
(rule "jdiv_axiom" (formula "10") (term "0"))
(rule "eqSymm" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
(rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,0,0,2,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0,2,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,2,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
(rule "inEqSimp_subsumption4" (formula "1") (term "0,0") (ifseqformula "6"))
(rule "greater_literals" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
(rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
(rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
(rule "add_literals" (formula "1") (term "1,0,0,0,0"))
(rule "times_zero_1" (formula "1") (term "0,0,0,0"))
(rule "qeq_literals" (formula "1") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSymm" (formula "1"))
(rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "1"))
(rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0"))
(rule "equal_literals" (formula "11") (term "0,0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
(rule "add_literals" (formula "11") (term "1,1,0,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0"))
(rule "polySimp_homoEq" (formula "11"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0"))
(rule "polySimp_addComm0" (formula "11") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0"))
(rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
(rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0"))
(rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0"))
(rule "add_literals" (formula "11") (term "1,1,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0"))
(rule "polySimp_sepNegMonomial" (formula "11"))
(rule "polySimp_mulLiterals" (formula "11") (term "0"))
(rule "polySimp_elimOne" (formula "11") (term "0"))
(rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
(rule "equal_literals" (formula "1") (term "0,1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
(rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
(rule "add_literals" (formula "1") (term "1,1,0,0,1"))
(rule "times_zero_1" (formula "1") (term "1,0,0,1"))
(rule "add_zero_right" (formula "1") (term "0,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "polyDiv_pullOut" (formula "1") (term "1,1") (inst "polyDivCoeff=l_1"))
(rule "equal_literals" (formula "1") (term "0,1,1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1"))
(rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,1"))
(rule "add_literals" (formula "1") (term "1,0,0,1,1"))
(rule "times_zero_1" (formula "1") (term "0,0,1,1"))
(rule "div_literals" (formula "1") (term "0,1,1"))
(rule "add_zero_left" (formula "1") (term "1,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=l_1"))
(rule "equal_literals" (formula "11") (term "0,0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
(rule "polySimp_pullOutFactor0" (formula "11") (term "0,0,0"))
(rule "add_literals" (formula "11") (term "1,0,0,0"))
(rule "times_zero_1" (formula "11") (term "0,0,0"))
(rule "div_literals" (formula "11") (term "0,0"))
(rule "add_zero_left" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "closeTrue" (formula "11"))
)
}
