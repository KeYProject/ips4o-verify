\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu May 05 18:32:56 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../main/java";

\proofObligation "#Proof Obligation Settings
#Thu May 05 18:32:56 CEST 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:bufferLen(int)].JML accessible clause.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:bufferLen(int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "1461")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,bucket,anon_heap"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "10"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8") (inst "b=b"))
 (builtin "One Step Simplification" (formula "8"))
(rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "15"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
(rule "polySimp_rightDist" (formula "7") (term "0,0"))
(rule "mul_literals" (formula "7") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "add_literals" (formula "7") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "13") (term "0"))
(rule "nnf_notAnd" (formula "13") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
(rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
(rule "mul_literals" (formula "13") (term "1,0,0,0"))
(rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "18") (term "0"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "4")))
(rule "wellFormedAnon" (formula "1") (term "1,0"))
(rule "replace_known_left" (formula "1") (term "1,1,0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
(rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "1"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "19") (term "0"))
(rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_0"))
(rule "simplifySelectOfAnon" (formula "1"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
(rule "eqSymm" (formula "20"))
(rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "ifthenelse_negated" (formula "1") (term "0"))
(rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "2") (term "0,1,0,1"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
(rule "wellFormedAnon" (formula "2") (term "1,0"))
(rule "replace_known_left" (formula "2") (term "1,1,0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "4")))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
(rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
(rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
(rule "true_left" (formula "2"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "2") (term "0,0,0,1"))
(rule "replaceKnownSelect_taclet_0" (formula "2") (term "0,0,0,1"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "2") (term "0,1,0,1"))
(rule "replaceKnownSelect_taclet_0" (formula "2") (term "0,1,0,1"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "2") (term "0") (inst "b=b"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")) (ifInst ""  (formula "12")) (ifInst ""  (formula "14")))
(rule "translateJavaMulInt" (formula "2") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,1,0,0,0"))
(rule "eqSymm" (formula "2") (term "0,0,0,0,0"))
(rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
(rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "2") (term "0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
(rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "20") (term "0"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
(rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "1"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "21") (term "0"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "3") (term "1,1") (inst "b=b"))
 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")) (ifInst ""  (formula "13")) (ifInst ""  (formula "15")))
(rule "translateJavaMulInt" (formula "3") (term "1,1,0,0,1,1"))
(rule "mul_literals" (formula "3") (term "1,1,0,0,1,1"))
(rule "eqSymm" (formula "3") (term "0,0,0,0,1,1"))
(rule "replace_known_left" (formula "3") (term "1,0,0,1,1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "19")))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1"))
(rule "replace_known_left" (formula "3") (term "0,1,1") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,1"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,1"))
(rule "nnf_imp2or" (formula "3") (term "0,1,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,1"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,1"))
(rule "add_literals" (formula "3") (term "0,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,1"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,1"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,1"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,1"))
(rule "cnf_rightDist" (formula "16") (term "0"))
(rule "distr_forallAnd" (formula "16"))
(rule "andLeft" (formula "16"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,1,0,1"))
(rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "1") (term "0,0,0,1"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "1") (term "1,1") (inst "b=b"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")) (ifInst ""  (formula "13")) (ifInst ""  (formula "15")))
(rule "translateJavaMulInt" (formula "1") (term "1,1,0,0,1,1"))
(rule "mul_literals" (formula "1") (term "1,1,0,0,1,1"))
(rule "eqSymm" (formula "1") (term "0,0,0,0,1,1"))
(rule "replace_known_left" (formula "1") (term "1,0,0,1,1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1"))
(rule "replace_known_left" (formula "1") (term "0,1,1") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,1"))
(rule "nnf_imp2or" (formula "1") (term "0,1,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,1"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,1"))
(rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "1") (term "0") (inst "b=b"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")) (ifInst ""  (formula "13")) (ifInst ""  (formula "15")))
(rule "translateJavaMulInt" (formula "1") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
(rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
(rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "1") (term "0,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
(rule "commute_or" (formula "17") (term "0"))
(rule "cnf_rightDist" (formula "3") (term "0,0"))
(rule "cnf_rightDist" (formula "3") (term "0,1,1"))
(rule "commute_or" (formula "3") (term "1,0,0"))
(rule "commute_or" (formula "3") (term "1,0,1,1"))
(rule "impLeft" (formula "1"))
(branch
   (rule "allRight" (formula "17") (inst "sk=b_0"))
   (rule "orRight" (formula "17"))
   (rule "orRight" (formula "17"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "impLeft" (formula "5"))
   (branch
      (rule "allRight" (formula "19") (inst "sk=b_1"))
      (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0"))
      (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,1"))
      (rule "pullOutSelect" (formula "19") (term "0,1,0") (inst "selectSK=arr_1"))
      (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "20") (term "0"))
      (rule "commute_or_2" (formula "20") (term "1"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "20") (term "0,0"))
      (rule "commute_or" (formula "20") (term "0,1"))
      (rule "ifthenelse_split" (formula "5") (term "0"))
      (branch "self.indices.<created> = TRUE TRUE"
         (rule "close" (formula "27") (ifseqformula "6"))
      )
      (branch "self.indices.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "5"))
         (rule "hideAuxiliaryEq" (formula "5"))
         (rule "eqSymm" (formula "26"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "20") (term "0,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "commute_or" (formula "19") (term "0,0"))
         (rule "commute_or_2" (formula "19") (term "0"))
         (rule "commute_or" (formula "19") (term "0,1"))
         (rule "commute_or_2" (formula "19") (term "1"))
         (rule "arrayLengthIsAShort" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "arrayLengthNotNegative" (formula "13") (term "0"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "arrayLengthNotNegative" (formula "12") (term "0"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
         (rule "qeq_literals" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthIsAShort" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "allLeft" (formula "16") (inst "t=bucket<<origin(\"accessible @ file Buffers.java @ line 105\",\"[]\")>>"))
         (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "9"))
         (rule "qeq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0"))
         (rule "leq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "allLeft" (formula "17") (inst "t=b_0"))
         (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
         (rule "leq_literals" (formula "17") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "1"))
         (rule "leq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "allLeft" (formula "19") (inst "t=b_0"))
         (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "19") (term "0,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
         (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "19") (term "0,0,1"))
         (rule "leq_literals" (formula "19") (term "0,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "4"))
         (rule "qeq_literals" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "closeFalse" (formula "19"))
      )
   )
   (branch
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "ifthenelse_split" (formula "4") (term "0"))
      (branch "self.indices.<created> = TRUE TRUE"
         (rule "close" (formula "29") (ifseqformula "5"))
      )
      (branch "self.indices.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
         (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "4"))
         (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "eqSymm" (formula "28"))
         (rule "arrayLengthNotNegative" (formula "17") (term "0"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
         (rule "qeq_literals" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthIsAShort" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
         (rule "qeq_literals" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "allLeft" (formula "20") (inst "t=bucket<<origin(\"accessible @ file Buffers.java @ line 105\",\"[]\")>>"))
         (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "15"))
         (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
         (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
         (rule "leq_literals" (formula "20") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "13"))
         (rule "qeq_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "allLeft" (formula "21") (inst "t=b_0"))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
         (rule "leq_literals" (formula "21") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_leqRight" (formula "25"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "1"))
         (rule "leq_literals" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "allLeft" (formula "23") (inst "t=b_0"))
         (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "23") (term "0,1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "23"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
)
(branch
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "cnf_rightDist" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "3") (term "0"))
   (rule "impLeft" (formula "4"))
   (branch
      (rule "allRight" (formula "18") (inst "sk=b_0"))
      (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0"))
      (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,1"))
      (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=arr_1"))
      (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "commute_or_2" (formula "19") (term "1"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "19") (term "0,0"))
      (rule "commute_or" (formula "19") (term "0,1"))
      (rule "ifthenelse_split" (formula "4") (term "0"))
      (branch "self.indices.<created> = TRUE TRUE"
         (rule "close" (formula "25") (ifseqformula "5"))
      )
      (branch "self.indices.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "eqSymm" (formula "24"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "19") (term "0,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "commute_or" (formula "18") (term "0,0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or" (formula "18") (term "0,1"))
         (rule "commute_or_2" (formula "18") (term "1"))
         (rule "arrayLengthIsAShort" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "12") (term "0"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
         (rule "qeq_literals" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthIsAShort" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthNotNegative" (formula "11") (term "0"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
         (rule "qeq_literals" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "andRight" (formula "18"))
         (branch
            (rule "orRight" (formula "18"))
            (rule "orRight" (formula "18"))
            (rule "inEqSimp_geqRight" (formula "20"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "19"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "20"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "allLeft" (formula "19") (inst "t=b_0"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "19") (term "0,0,1,0"))
            (rule "leq_literals" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "19") (term "0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "allLeft" (formula "21") (inst "t=b_0"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
            (rule "leq_literals" (formula "21") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0,0") (ifseqformula "7") (ifseqformula "9"))
            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "24")))
            (rule "closeFalse" (formula "16"))
         )
         (branch
            (rule "orRight" (formula "18"))
            (rule "orRight" (formula "18"))
            (rule "inEqSimp_leqRight" (formula "20"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "20"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_leqRight" (formula "20"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "allLeft" (formula "19") (inst "t=b_0"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
            (rule "leq_literals" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "19") (term "0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "allLeft" (formula "21") (inst "t=b_0"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
            (rule "leq_literals" (formula "21") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0,0") (ifseqformula "7") (ifseqformula "9"))
            (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "25")))
            (rule "closeFalse" (formula "16"))
         )
      )
   )
   (branch
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "4"))
      (rule "distr_forallAnd" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "ifthenelse_split" (formula "3") (term "0"))
      (branch "self.indices.<created> = TRUE TRUE"
         (rule "close" (formula "27") (ifseqformula "4"))
      )
      (branch "self.indices.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "eqSymm" (formula "26"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
         (rule "qeq_literals" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthIsAShort" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "arrayLengthNotNegative" (formula "15") (term "0"))
         (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
         (rule "qeq_literals" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "allLeft" (formula "5") (inst "t=bucket"))
         (rule "replaceKnownSelect_taclet_0" (formula "5") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet111_1" (formula "5") (term "0,1"))
         (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "allLeft" (formula "6") (inst "t=bucket"))
         (rule "replaceKnownSelect_taclet_0" (formula "6") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet111_1" (formula "6") (term "0,1"))
         (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "allLeft" (formula "6") (inst "t=bucket<<origin(\"accessible @ file Buffers.java @ line 105\",\"[]\")>>"))
         (rule "replaceKnownSelect_taclet_0" (formula "6") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet111_1" (formula "6") (term "0,1"))
         (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "allLeft" (formula "5") (inst "t=bucket<<origin(\"accessible @ file Buffers.java @ line 105\",\"[]\")>>"))
         (rule "replaceKnownSelect_taclet_0" (formula "5") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet111_1" (formula "5") (term "0,1"))
         (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0,0") (ifseqformula "7") (ifseqformula "9"))
         (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "23")))
         (rule "closeFalse" (formula "16"))
      )
   )
)
)
}
