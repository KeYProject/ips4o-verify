\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Apr 10 23:11:55 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../main/java";

\proofObligation "#Proof Obligation Settings
#Sun Apr 10 23:11:55 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:writtenElementsOfBucketCountElement([I,int,int,[I,int,int)].JML accessible clause.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:writtenElementsOfBucketCountElement([I,int,int,[I,int,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "82c4308ea5"))

(autoModeTime "21013")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "Definition_axiom_for_writtenElementsOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "19") (term "0") (userinteraction))
(rule "Definition_axiom_for_writtenElementsOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "19") (term "1,1") (userinteraction))
 (builtin "One Step Simplification" (formula "19") (userinteraction))
 (builtin "Use Dependency Contract" (formula "19") (term "1,0,0,1") (ifInst ""  (formula "19") (term "1,0,2,0,0,1,1,0,1,3,2,1")) (contract "de.wiesler.BucketPointers[de.wiesler.BucketPointers::nextWriteOf(int)].JML accessible clause.0") (userinteraction))
(rule "impLeft" (formula "16") (userinteraction))
(branch "Case 1"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "12")))
   (rule "true_left" (formula "7"))
   (rule "wellFormedAnon" (formula "12") (term "0"))
   (rule "translateJavaSubInt" (formula "16") (term "0,0,0,0"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,1,3,2,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0"))
   (rule "translateJavaAddInt" (formula "16") (term "2,2,0"))
   (rule "translateJavaAddInt" (formula "16") (term "3,2,0"))
   (rule "translateJavaSubInt" (formula "16") (term "0,0,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,2,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,2,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,2,1"))
   (rule "translateJavaAddInt" (formula "16") (term "2,2,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,1,3,2,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,1,3,2,1"))
   (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,1,3,2,1"))
   (rule "translateJavaSubInt" (formula "16") (term "3,0,1,0"))
   (rule "translateJavaAddInt" (formula "16") (term "2,0,1,0"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,1,0,0,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,1,1,0,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "2,0,1,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "16") (term "3,0,1,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,2,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,2,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,1,3,2,1"))
   (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,3,0,1,0"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,1,0,3,0,1,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,1,0,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1,0,1,0,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,1,1,0,0,1,1"))
   (rule "translateJavaMulInt" (formula "16") (term "0,0,1,1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "3,2,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,0,0,1,1,0,1,0,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,1,0,1,0,3,0,1,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,3,0,1,1"))
   (rule "eqSymm" (formula "16"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
   (rule "polySimp_elimSub" (formula "16") (term "0,0,0,1"))
   (rule "polySimp_elimSub" (formula "16") (term "3,0,1,0"))
   (rule "mul_literals" (formula "16") (term "1,3,0,1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "16") (term "0,0,0,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,1,3,2,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,1,3,2,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,1,0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "16") (term "3,0,1,1"))
   (rule "mul_literals" (formula "16") (term "1,3,0,1,1"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,2,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,2,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "2,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "1,2,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,0,1,1,0,1,0,3,0,1,0"))
   (rule "mul_literals" (formula "16") (term "1,2,0,0,1,1,0,1,0,3,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,1,3,2,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,2,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0,1,0,3,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,1,3,2,0"))
   (rule "inEqSimp_ltToLeq" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "16") (term "1,1"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,2,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "2,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,0,1,1,0,1,0,3,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1,3,2,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,2,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1,0,3,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,1,3,2,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "3,1,1,1"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,2,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,1,1,0,1,0,3,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "polySimp_addComm0" (formula "16") (term "0,3,1,1,1"))
   (rule "polySimp_addComm0" (formula "16") (term "1,0"))
   (rule "polySimp_addComm1" (formula "16") (term "3,1,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,3,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1"))
   (rule "disjointDefinition" (formula "12"))
   (rule "disjointWithSingleton1" (formula "12"))
   (rule "notRight" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0"))
   (rule "elementOfSetMinus" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "elementOfUnion" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "elementOfSingleton" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "closeTrue" (formula "13"))
)
(branch "Case 2"
   (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "20") (term "1,1,0,1") (userinteraction))
   (rule "applyEq" (formula "20") (term "0,1,1,0,1") (ifseqformula "16") (userinteraction))
   (rule "applyEq" (formula "20") (term "1,0,0,1") (ifseqformula "16") (userinteraction))
   (rule "applyEq" (formula "20") (term "1,0,3,0,1,1") (ifseqformula "16") (userinteraction))
   (rule "applyEq" (formula "20") (term "1,3,2,1") (ifseqformula "16") (userinteraction))
    (builtin "Use Dependency Contract" (formula "20") (term "2,1") (ifInst ""  (formula "20") (term "2,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
    (builtin "Use Dependency Contract" (formula "21") (term "0,1,1") (ifInst ""  (formula "21") (term "0,1,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
   (rule "impLeft" (formula "18") (userinteraction))
   (branch "Case 1"
      (rule "impLeft" (formula "17") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "17"))
         (branch "Case 1"
            (rule "andRight" (formula "17"))
            (branch "Case 1"
               (rule "andRight" (formula "17"))
               (branch "Case 1"
                  (rule "andRight" (formula "17"))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                           (branch "Case 2"
                              (rule "wellFormedAnon" (formula "17"))
                               (builtin "One Step Simplification" (formula "14"))
                               (builtin "One Step Simplification" (formula "10"))
                               (builtin "One Step Simplification" (formula "9"))
                               (builtin "One Step Simplification" (formula "7"))
                               (builtin "One Step Simplification" (formula "6"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "17")))
                              (rule "true_left" (formula "7"))
                              (rule "wellFormedAnon" (formula "14") (term "0"))
                              (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
                              (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,1"))
                              (rule "translateJavaMulInt" (formula "14") (term "0,0,1,1,1,0,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "1,0,0,1,0,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "1,1,1"))
                              (rule "translateJavaSubInt" (formula "14") (term "2,0,0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
                              (rule "translateJavaSubInt" (formula "14") (term "2,1,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,0,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,2,0,0,1,0,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaSubInt" (formula "14") (term "0,2,1,1"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                              (rule "closeTrue" (formula "13"))
                           )
                        )
                        (branch "Case 2"
                           (rule "orRight" (formula "17"))
                            (builtin "One Step Simplification" (formula "14"))
                            (builtin "One Step Simplification" (formula "10"))
                            (builtin "One Step Simplification" (formula "9"))
                            (builtin "One Step Simplification" (formula "7"))
                            (builtin "One Step Simplification" (formula "6"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "7"))
                           (rule "wellFormedAnon" (formula "14") (term "0"))
                           (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
                           (rule "translateJavaMulInt" (formula "14") (term "0,0,1,1,1,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "1,1,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "1,0,0,1,0,1"))
                           (rule "translateJavaSubInt" (formula "14") (term "2,0,0,1,0,1"))
                           (rule "translateJavaSubInt" (formula "14") (term "2,1,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,0,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,2,0,0,1,0,1"))
                           (rule "translateJavaSubInt" (formula "14") (term "0,2,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,0,2,1,1"))
                           (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "14"))
                         (builtin "One Step Simplification" (formula "10"))
                         (builtin "One Step Simplification" (formula "9"))
                         (builtin "One Step Simplification" (formula "7"))
                         (builtin "One Step Simplification" (formula "6"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")) (ifInst ""  (formula "17")))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "closeTrue" (formula "14"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "14"))
                      (builtin "One Step Simplification" (formula "10"))
                      (builtin "One Step Simplification" (formula "9"))
                      (builtin "One Step Simplification" (formula "7"))
                      (builtin "One Step Simplification" (formula "6"))
                      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "17")))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "closeTrue" (formula "14"))
                  )
               )
               (branch "Case 2"
                  (rule "close" (formula "17") (ifseqformula "10"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "14"))
                (builtin "One Step Simplification" (formula "10"))
                (builtin "One Step Simplification" (formula "9"))
                (builtin "One Step Simplification" (formula "7"))
                (builtin "One Step Simplification" (formula "6"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
               (rule "true_left" (formula "7"))
               (rule "false_right" (formula "14"))
               (rule "translateJavaSubInt" (formula "17") (term "0,0,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0"))
               (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "2,2,0"))
               (rule "translateJavaAddInt" (formula "17") (term "3,2,0"))
               (rule "translateJavaSubInt" (formula "17") (term "0,0,0,1"))
               (rule "translateJavaSubInt" (formula "17") (term "1,1,0,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,0,1,1,0,2,1"))
               (rule "translateJavaSubInt" (formula "17") (term "2,0,0,1,1,0,2,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,1,1,1,1,0,2,1"))
               (rule "translateJavaAddInt" (formula "17") (term "2,2,1"))
               (rule "translateJavaAddInt" (formula "17") (term "3,2,1"))
               (rule "translateJavaAddInt" (formula "17") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "17") (term "0,3,0,1,0"))
               (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
               (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,0,1,1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "2,0,0,1,1,0,0,1,1"))
               (rule "translateJavaMulInt" (formula "17") (term "0,0,1,1,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,1,1,1,1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "2,0,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "3,0,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "2,0,0,1,1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,0,1,1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0,0,1,1,0,2,1"))
               (rule "translateJavaMulInt" (formula "17") (term "0,0,1,1,1,1,0,2,1"))
               (rule "translateJavaSubInt" (formula "17") (term "3,0,1,0"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0,0,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,1,1,1,1,0,0,1,1"))
               (rule "translateJavaMulInt" (formula "17") (term "0,0,1,1,1,1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,3,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0,0,1,1,0,1,1,1"))
               (rule "notRight" (formula "13"))
               (rule "close" (formula "15") (ifseqformula "1"))
            )
         )
         (branch "Case 2"
            (rule "translateJavaAddInt" (formula "17") (term "1,0,0,1,0"))
            (rule "translateJavaSubInt" (formula "17") (term "2,0,0,1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "1,1"))
            (rule "translateJavaSubInt" (formula "17") (term "2,1"))
            (rule "translateJavaAddInt" (formula "17") (term "0,2,0,0,1,0"))
            (rule "translateJavaMulInt" (formula "17") (term "0,0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,2,1"))
            (rule "polySimp_elimSub" (formula "17") (term "2,0,0,1,0"))
            (rule "mul_literals" (formula "17") (term "1,2,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "17") (term "2,1"))
            (rule "polySimp_elimOneLeft0" (formula "17") (term "1,2,1"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "17") (term "2,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "17") (term "2,1"))
            (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,2,1"))
            (rule "disjointDefinition" (formula "17"))
            (rule "commuteUnion" (formula "17") (term "0,1,0,0"))
            (rule "commuteUnion_2" (formula "17") (term "1,0,0"))
            (rule "commuteIntersection" (formula "17") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "17") (term "1,2,1,1,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "17") (term "1,2,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "4")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "23") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")) (ifInst ""  (formula "26")) (ifInst ""  (formula "20")))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "1,1,1,1,1,0"))
            (rule "translateJavaCastInt" (formula "24") (term "0,1,1,1,1,1,0"))
            (rule "castedGetAny" (formula "24") (term "0,1,1,1,1,1,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "1,1,0,0"))
            (rule "commuteIntersection" (formula "24") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "7") (term "0,0"))
            (rule "translateJavaAddInt" (formula "7") (term "0,2,0,0"))
            (rule "translateJavaMulInt" (formula "7") (term "0,0,2,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,2,0,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
            (rule "translateJavaAddInt" (formula "5") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "23")) (ifInst ""  (formula "27")))
            (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "5") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "5") (term "1,0,0,1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "5") (term "1,1,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,1"))
            (rule "castedGetAny" (formula "6") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0"))
            (rule "translateJavaCastInt" (formula "2") (term "0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "24")) (ifInst ""  (formula "28")) (ifInst ""  (formula "22")))
            (rule "translateJavaAddInt" (formula "4") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "4") (term "0,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "5") (term "0"))
            (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "5") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "5") (term "1,1,1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "25")) (ifInst ""  (formula "11")) (ifInst ""  (formula "13")) (ifInst ""  (formula "29")))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "polySimp_addComm0" (formula "8") (term "1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "replace_known_left" (formula "4") (term "0,0,0,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "5"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1"))
            (rule "polySimp_elimOne" (formula "7") (term "1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1"))
            (rule "translateJavaCastInt" (formula "7") (term "0,1"))
            (rule "castedGetAny" (formula "7") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "7"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "replace_known_left" (formula "10") (term "0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
            (rule "translateJavaCastInt" (formula "12") (term "0,0"))
            (rule "castedGetAny" (formula "12") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "29")) (ifInst ""  (formula "33")))
            (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "12") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "12") (term "0,0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "12") (term "1,1,1,1,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1"))
            (rule "castedGetAny" (formula "13") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
            (rule "translateJavaCastInt" (formula "5") (term "0,0"))
            (rule "castedGetAny" (formula "5") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1"))
            (rule "castedGetAny" (formula "5") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "30")) (ifInst ""  (formula "34")) (ifInst ""  (formula "28")))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "translateJavaMod" (formula "2") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "2") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "32") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,0"))
            (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,0,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "castedGetAny" (formula "1") (term "1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,1"))
            (rule "castedGetAny" (formula "1") (term "1,0,1,1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,1,1"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "33") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "33") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "translateJavaSubInt" (formula "33") (term "0,1,1,1,1,0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "33") (term "1,1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "33") (term "0,0,1,1,1,1,0,0"))
            (rule "neg_literal" (formula "33") (term "1,1,1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "33") (term "0,1,1,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,0,1,1,1,1,0,0"))
            (rule "polySimp_addLiterals" (formula "33") (term "0,1,1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "33") (term "0,1,1,1,1,0,0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaMod" (formula "16") (term "0"))
            (rule "jmod_axiom" (formula "16") (term "0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "newSym_eq" (formula "16") (inst "l=l_0") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(bucket, Z(2(#)))))),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "16") (term "1,1"))
            (rule "add_zero_right" (formula "16") (term "1"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "16"))
            (rule "eqSymm" (formula "17"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "17"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaSubInt" (formula "13") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "14") (term "1,0"))
            (rule "translateJavaAddInt" (formula "14") (term "0,0,0"))
            (rule "neg_literal" (formula "14") (term "1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "14") (term "0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,0"))
            (rule "neg_literal" (formula "6") (term "1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "0,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,2,0,0"))
            (rule "translateJavaMulInt" (formula "10") (term "0,0,2,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,2,0,0"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "18"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
            (rule "translateJavaAddInt" (formula "9") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,2,0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "18"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "31")) (ifInst ""  (formula "34")) (ifInst ""  (formula "38")) (ifInst ""  (formula "32")))
            (rule "translateJavaAddInt" (formula "8") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "8") (term "0,0,0,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
            (rule "translateJavaCastInt" (formula "8") (term "0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "11"))
            (rule "mul_literals" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,1"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,1,1"))
            (rule "mul_literals" (formula "11") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "11") (term "1"))
            (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "11") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "11") (term "1,1,1") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "31")) (ifInst ""  (formula "32")) (ifInst ""  (formula "34")) (ifInst ""  (formula "20")) (ifInst ""  (formula "22")) (ifInst ""  (formula "38")))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "replace_known_left" (formula "20") (term "0,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")))
            (rule "true_left" (formula "20"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1"))
            (rule "polySimp_elimOne" (formula "12") (term "1"))
            (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "0,0"))
            (rule "add_zero_left" (formula "5") (term "0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaSubInt" (formula "17") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,0,0"))
            (rule "neg_literal" (formula "17") (term "1,0"))
            (rule "polySimp_elimSub" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "17") (term "0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "17"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "add_zero_left" (formula "6") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
            (rule "translateJavaAddInt" (formula "5") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "23"))
            (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
            (rule "translateJavaCastInt" (formula "4") (term "0,0"))
            (rule "castedGetAny" (formula "4") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "39")) (ifInst ""  (formula "43")))
            (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaMod" (formula "19") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "19") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "19") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "translateJavaSubInt" (formula "22") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "22") (term "1,0"))
            (rule "translateJavaAddInt" (formula "22") (term "0,0,0"))
            (rule "neg_literal" (formula "22") (term "1,0"))
            (rule "polySimp_elimSub" (formula "22") (term "0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "22") (term "0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,1"))
            (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "7") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,1,1"))
            (rule "mul_literals" (formula "7") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0"))
            (rule "neg_literal" (formula "7") (term "1,0"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "3") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "1") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaMod" (formula "1") (term "0,0,1"))
            (rule "jmod_axiom" (formula "1") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "41") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "translateJavaSubInt" (formula "41") (term "0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "41") (term "0,0,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "41") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "41") (term "0,0,1,1,1,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0,0,0,1"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "20") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "20") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaMod" (formula "10") (term "0"))
            (rule "jmod_axiom" (formula "10") (term "0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
            (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "23"))
            (rule "polySimp_pullOutFactor0" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "1,0"))
            (rule "times_zero_1" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "39")) (ifInst ""  (formula "43")))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "9") (term "1,0,0,1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "9") (term "1,1,1,1,1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
            (rule "translateJavaCastInt" (formula "10") (term "0,0"))
            (rule "castedGetAny" (formula "10") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaSubInt" (formula "8") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0"))
            (rule "translateJavaAddInt" (formula "8") (term "0,0,0"))
            (rule "neg_literal" (formula "8") (term "1,0"))
            (rule "polySimp_elimSub" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "8") (term "0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaMod" (formula "15") (term "0"))
            (rule "jmod_axiom" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "newSym_eq" (formula "15") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                           self,
                                           bucket),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "15") (term "1,1"))
            (rule "add_zero_right" (formula "15") (term "1"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
            (rule "eqSymm" (formula "16"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "41") (term "1,2,1,0") (ifseqformula "16"))
            (rule "polySimp_addComm1" (formula "41") (term "2,1,0"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
            (rule "inEqSimp_commuteGeq" (formula "12"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "17"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "add_zero_left" (formula "6") (term "0"))
            (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "6") (term "0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_literals" (formula "6") (term "0,0"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "13"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "11") (ifseqformula "6"))
            (rule "greater_literals" (formula "11") (term "0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1,0"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "0"))
            (rule "translateJavaCastInt" (formula "11") (term "0,0"))
            (rule "castedGetAny" (formula "11") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "1"))
            (rule "translateJavaCastInt" (formula "15") (term "0,1"))
            (rule "castedGetAny" (formula "15") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "15"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "15"))
            (rule "polySimp_mulAssoc" (formula "10") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "16"))
            (rule "mul_literals" (formula "4") (term "0,0"))
            (rule "add_zero_left" (formula "4") (term "0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "17"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1"))
            (rule "polySimp_elimOne" (formula "14") (term "1"))
            (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "1"))
            (rule "translateJavaCastInt" (formula "15") (term "0,1"))
            (rule "castedGetAny" (formula "15") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "18"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "15"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "add_zero_left" (formula "13") (term "0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,0"))
            (rule "neg_literal" (formula "6") (term "1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,0,0,0,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,0,0,0,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,0,0,0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "24") (term "0,1,0,0,1"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "46")) (ifInst ""  (formula "50")))
            (rule "translateJavaAddInt" (formula "24") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "24") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "24") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "24") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "24") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "24") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "24") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1,1,1"))
            (rule "add_zero_right" (formula "24") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "24") (term "0,0,0,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0,0,1"))
            (rule "add_literals" (formula "24") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "24") (term "0,0,0,1"))
            (rule "qeq_literals" (formula "24") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
            (rule "add_literals" (formula "24") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "24") (term "0,1,0"))
            (rule "qeq_literals" (formula "24") (term "1,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "24") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "24") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "24") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "25") (term "1,1,0,0,1"))
             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "47")) (ifInst ""  (formula "51")))
            (rule "translateJavaAddInt" (formula "25") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "25") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "25") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "25") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "25") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "25") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "25") (term "0,1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "0,1,0,0,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,0,1,0,0,1"))
            (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,0,0,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,1,1,0,0,1"))
            (rule "castedGetAny" (formula "26") (term "0,1,1,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "0,1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,0,1,0,1,1,1"))
            (rule "castedGetAny" (formula "26") (term "0,0,1,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,1,1,0,1,1,1"))
            (rule "castedGetAny" (formula "26") (term "0,1,1,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "0,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "26") (term "0,0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "26") (term "0,1,1,1,1,1,1"))
            (rule "castedGetAny" (formula "26") (term "0,1,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "27") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "27") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "27") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteGeq" (formula "27") (term "1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "27") (term "0,0,1"))
            (rule "translateJavaCastInt" (formula "27") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "27") (term "0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "27") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "27") (term "0,1,0,1,1"))
            (rule "eqSymm" (formula "27") (term "0,1,1"))
            (rule "castedGetAny" (formula "27") (term "0,0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "30") (term "1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaSubInt" (formula "30") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "30") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "30") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "1,1,1"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "30") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,1,1"))
            (rule "mul_literals" (formula "30") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "30") (term "1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaSubInt" (formula "30") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "30") (term "1,1"))
            (rule "translateJavaAddInt" (formula "30") (term "0,0,1"))
            (rule "neg_literal" (formula "30") (term "1,1"))
            (rule "polySimp_elimSub" (formula "30") (term "0,1"))
            (rule "mul_literals" (formula "30") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "30") (term "0,1"))
            (rule "polySimp_addComm0" (formula "30") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
            (rule "neg_literal" (formula "10") (term "1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,1"))
            (rule "mul_literals" (formula "10") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1,0,1,1"))
            (rule "eqSymm" (formula "3") (term "0,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "52")))
            (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,1,1,1,0,1,1,1"))
            (rule "add_zero_left" (formula "3") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,1,1"))
            (rule "add_zero_left" (formula "3") (term "0,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "1,0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,1,1,1,1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "46")) (ifInst ""  (formula "49")) (ifInst ""  (formula "53")) (ifInst ""  (formula "47")))
            (rule "translateJavaAddInt" (formula "4") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "4") (term "1,0,0,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "5") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "5") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "5") (term "0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1,0,0,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1,0,0,1"))
            (rule "castedGetAny" (formula "5") (term "0,1,0,0,1"))
            (rule "jdiv_axiom" (formula "33") (term "0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "0,0,2,1"))
            (rule "eqSymm" (formula "33"))
            (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "34"))
            (rule "inEqSimp_subsumption6" (formula "33") (term "0,0") (ifseqformula "9"))
            (rule "greater_literals" (formula "33") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "mul_literals" (formula "33") (term "1,0,0,0"))
            (rule "leq_literals" (formula "33") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "polyDiv_pullOut" (formula "33") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,2,0"))
            (rule "equal_literals" (formula "33") (term "0,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "polySimp_homoEq" (formula "33"))
            (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "33") (term "1,0,0,0,1,0"))
            (rule "times_zero_1" (formula "33") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "33") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "33") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
            (rule "add_literals" (formula "33") (term "1,0"))
            (rule "times_zero_1" (formula "33") (term "0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "true_left" (formula "33"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "1") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "30") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaSubInt" (formula "30") (term "0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "30") (term "1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "30") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "30") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "30") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "30") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "30") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "13") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1,1"))
            (rule "mul_literals" (formula "15") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "15") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "15") (term "1,0"))
            (rule "translateJavaAddInt" (formula "15") (term "0,0,0"))
            (rule "neg_literal" (formula "15") (term "1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "15") (term "0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "23") (term "0"))
            (rule "translateJavaAddInt" (formula "23") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "23") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "23") (term "1,0,0,0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")) (ifInst ""  (formula "49")) (ifInst ""  (formula "37")) (ifInst ""  (formula "53")) (ifInst ""  (formula "49")))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "polySimp_addComm0" (formula "26") (term "1,0"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "inEqSimp_commuteLeq" (formula "23"))
            (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "26"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "28"))
            (rule "inEqSimp_commuteGeq" (formula "24"))
            (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "27"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "19"))
            (rule "mul_literals" (formula "23") (term "0,0"))
            (rule "add_zero_left" (formula "23") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "10"))
            (rule "greater_literals" (formula "23") (term "0,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "mul_literals" (formula "23") (term "1,0"))
            (rule "leq_literals" (formula "23") (term "0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "26") (term "0"))
            (rule "translateJavaAddInt" (formula "26") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "26") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "26") (term "0,2,0"))
            (rule "applyEq" (formula "26") (term "0") (ifseqformula "36"))
            (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "26"))
            (rule "applyEqRigid" (formula "35") (term "0,0") (ifseqformula "26"))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "26"))
            (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "35"))
            (rule "applyEqRigid" (formula "26") (term "0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "22"))
            (rule "apply_eq_monomials" (formula "34") (term "1") (ifseqformula "21"))
            (rule "polySimp_rightDist" (formula "34") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "34") (term "1"))
            (rule "add_literals" (formula "34") (term "1,1,1"))
            (rule "times_zero_1" (formula "34") (term "1,1"))
            (rule "add_zero_right" (formula "34") (term "1"))
            (rule "polySimp_mulComm0" (formula "34") (term "1"))
            (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "21"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "47")) (ifInst ""  (formula "50")) (ifInst ""  (formula "54")) (ifInst ""  (formula "48")))
            (rule "translateJavaAddInt" (formula "18") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "18") (term "0,0,0,1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1"))
            (rule "replace_known_left" (formula "18") (term "0,0,1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0"))
            (rule "translateJavaCastInt" (formula "18") (term "0,0"))
            (rule "castedGetAny" (formula "18") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "18"))
            (rule "mul_literals" (formula "14") (term "0,0"))
            (rule "add_zero_left" (formula "14") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "9"))
            (rule "greater_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "mul_literals" (formula "14") (term "1,0"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "50")) (ifInst ""  (formula "54")))
            (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "19") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "19") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "19") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "19") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "19") (term "1,0,0,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_invertInEq0" (formula "19") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "19") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0"))
            (rule "castedGetAny" (formula "20") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
            (rule "polySimp_mulAssoc" (formula "20") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1"))
            (rule "seqGetAlphaCast" (formula "32") (term "1,0,0"))
            (rule "castedGetAny" (formula "32") (term "0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "seqGetAlphaCast" (formula "10") (term "1,0,0"))
            (rule "castedGetAny" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "14") (term "1,0"))
            (rule "translateJavaAddInt" (formula "14") (term "0,0,0"))
            (rule "neg_literal" (formula "14") (term "1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "14") (term "0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "50")) (ifInst ""  (formula "54")))
            (rule "translateJavaAddInt" (formula "20") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "20") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "20") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "20") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "20") (term "0,0,0,1") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "20") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "20") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "20") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "20") (term "0,0,0,1"))
            (rule "add_literals" (formula "20") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "20") (term "0,0,0,1"))
            (rule "qeq_literals" (formula "20") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
            (rule "add_literals" (formula "20") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "20") (term "0,1,0"))
            (rule "qeq_literals" (formula "20") (term "1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
            (rule "translateJavaAddInt" (formula "20") (term "0,0,0"))
            (rule "neg_literal" (formula "20") (term "1,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "20") (term "0,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "20"))
            (rule "polySimp_mulAssoc" (formula "31") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "31"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "20"))
            (rule "mul_literals" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "20"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
            (rule "mul_literals" (formula "10") (term "0,0"))
            (rule "add_zero_left" (formula "10") (term "0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "51")) (ifInst ""  (formula "55")))
            (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "14") (term "0,0,0,1") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
            (rule "add_literals" (formula "14") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "14") (term "0,1,0"))
            (rule "qeq_literals" (formula "14") (term "1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0,1"))
            (rule "add_literals" (formula "14") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "0,0,0,1"))
            (rule "qeq_literals" (formula "14") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0"))
            (rule "translateJavaCastInt" (formula "6") (term "0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,1"))
            (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "17") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,1,1"))
            (rule "mul_literals" (formula "17") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaSubInt" (formula "17") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "0,0,0"))
            (rule "neg_literal" (formula "17") (term "1,0"))
            (rule "polySimp_elimSub" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "17") (term "0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "21"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
            (rule "polySimp_elimOne" (formula "17") (term "0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0"))
            (rule "translateJavaCastInt" (formula "15") (term "0,0"))
            (rule "castedGetAny" (formula "15") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "48")) (ifInst ""  (formula "51")) (ifInst ""  (formula "55")) (ifInst ""  (formula "49")))
            (rule "translateJavaAddInt" (formula "15") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "15") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1"))
            (rule "translateJavaCastInt" (formula "16") (term "0,1"))
            (rule "castedGetAny" (formula "16") (term "0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")) (ifInst ""  (formula "56")))
            (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "2") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,1,1,1,0,1,1,1"))
            (rule "add_zero_left" (formula "2") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1"))
            (rule "add_zero_left" (formula "2") (term "0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")) (ifInst ""  (formula "56")))
            (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "2") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "2") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "2") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "2") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "2") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "2") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1,0"))
            (rule "add_literals" (formula "2") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "2") (term "0,1,0"))
            (rule "qeq_literals" (formula "2") (term "1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "1"))
            (rule "translateJavaCastInt" (formula "18") (term "0,1"))
            (rule "castedGetAny" (formula "18") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "8") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,1"))
            (rule "mul_literals" (formula "8") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "8") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,1,1"))
            (rule "mul_literals" (formula "8") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaSubInt" (formula "8") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "8") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "30") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaSubInt" (formula "30") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "30") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "30") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "1,1,1"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "30") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "30") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "31") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "translateJavaUnaryMinusInt" (formula "31") (term "1,0,0,0,1,1"))
            (rule "translateJavaSubInt" (formula "31") (term "0,0,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "31") (term "0,0,0,0,0,1,1"))
            (rule "neg_literal" (formula "31") (term "1,0,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "31") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "31") (term "0,0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "31") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "28") (term "0,0,1"))
            (rule "translateJavaCastInt" (formula "28") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "28") (term "0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "28") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "28") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "28") (term "0,0,0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "28") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "53")) (ifInst ""  (formula "57")))
            (rule "translateJavaAddInt" (formula "28") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "28") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "28") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "28") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "28") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "28") (term "0,1,1,1,0,1,1,1"))
            (rule "add_zero_left" (formula "28") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "28") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "28") (term "0,1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,1,1"))
            (rule "add_zero_left" (formula "28") (term "0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "28") (term "1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "28") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "28") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "28") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
            (rule "mul_literals" (formula "28") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "28") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
            (rule "mul_literals" (formula "28") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "28") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,1,0"))
            (rule "add_literals" (formula "28") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "28") (term "1,0,1,0"))
            (rule "add_literals" (formula "28") (term "0,1,0"))
            (rule "qeq_literals" (formula "28") (term "1,0"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0,1,1,1,1"))
            (rule "mul_literals" (formula "28") (term "0,1,0,1,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,1,0,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "28") (term "0,0,1,0,1,1,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,1,0,1,1,1,1"))
            (rule "add_literals" (formula "28") (term "1,1,0,1,0,1,1,1,1"))
            (rule "times_zero_1" (formula "28") (term "1,0,1,0,1,1,1,1"))
            (rule "add_literals" (formula "28") (term "0,1,0,1,1,1,1"))
            (rule "qeq_literals" (formula "28") (term "1,0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0"))
            (rule "mul_literals" (formula "28") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "28") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "29") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "29") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "29") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "29") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "29") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "29") (term "0,1,1,1,1,1"))
            (rule "equalityToElementOfRight" (formula "55") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "translateJavaAddInt" (formula "55") (term "0,2,1,2,1,1,0,2,0,0,0"))
            (rule "translateJavaCastInt" (formula "55") (term "1,0,0,1,1,1,2,0,0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "55") (term "1,1,1,1,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "55") (term "0,0,2,1,2,1,1,0,2,0,0,0"))
            (rule "mul_literals" (formula "55") (term "1,0,1,1,1,2,0,0,0"))
            (rule "neg_literal" (formula "55") (term "1,1,1,1,2,0,0,0"))
            (rule "allRight" (formula "55") (inst "sk=ov_0"))
            (rule "allRight" (formula "55") (inst "sk=fv_0"))
            (rule "notRight" (formula "55"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,1,1,0,2"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,1,1,2"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,1,1,0,2"))
            (rule "castedGetAny" (formula "1") (term "1,0,1,1,1,2"))
            (rule "applyEq" (formula "1") (term "1,2,1,1,0,2") (ifseqformula "39"))
            (rule "polySimp_addComm1" (formula "1") (term "2,1,1,0,2"))
            (rule "elementOfIntersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfSetMinus" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
            (rule "andLeft" (formula "1"))
            (rule "exLeft" (formula "2") (inst "sk=iv_0"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "applyEq" (formula "59") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "elementOfUnion" (formula "59"))
            (rule "orRight" (formula "59"))
            (rule "elementOfArrayRangeConcrete" (formula "60"))
             (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "4")))
            (rule "inEqSimp_leqRight" (formula "60"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "4") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "1,1,0"))
            (rule "times_zero_1" (formula "4") (term "1,0"))
            (rule "add_literals" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "10")) (ifInst ""  (formula "20")) (userinteraction))
         (rule "andRight" (formula "18") (userinteraction))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "wellFormedAnon" (formula "17"))
             (builtin "One Step Simplification" (formula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "7"))
            (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
            (rule "translateJavaAddInt" (formula "18") (term "1,0"))
            (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
            (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "13") (term "2,0"))
            (rule "translateJavaAddInt" (formula "13") (term "3,0"))
            (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
            (rule "translateJavaAddInt" (formula "13") (term "2,1"))
            (rule "translateJavaAddInt" (formula "13") (term "3,1"))
            (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
            (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
            (rule "translateJavaAddInt" (formula "18") (term "1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
            (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
            (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
            (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
            (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
            (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
            (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
            (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
            (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "14"))
         )
         (branch "Case 2"
            (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,0"))
            (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "2,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,0"))
            (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,0"))
            (rule "translateJavaSubInt" (formula "18") (term "0,2,1"))
            (rule "polySimp_elimSub" (formula "18") (term "2,0,0,1,0"))
            (rule "mul_literals" (formula "18") (term "1,2,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "2,1"))
            (rule "polySimp_elimSub" (formula "18") (term "0,2,1"))
            (rule "mul_literals" (formula "18") (term "1,0,2,1"))
            (rule "polySimp_elimOneLeft0" (formula "18") (term "1,2,1"))
            (rule "polySimp_addLiterals" (formula "18") (term "2,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "18") (term "2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "2,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,0,0,1,0"))
            (rule "disjointDefinition" (formula "18"))
            (rule "commuteUnion" (formula "18") (term "0,1,0,0"))
            (rule "commuteUnion_2" (formula "18") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "1,1,1,0"))
            (rule "translateJavaCastInt" (formula "18") (term "0,1,1,1,0"))
            (rule "castedGetAny" (formula "18") (term "0,1,1,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "18") (term "1,1,2,1,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "4")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "24") (term "1,1,2,1,0"))
            (rule "translateJavaAddInt" (formula "24") (term "1,2,1,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "2,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "24") (term "1,2,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "26")) (ifInst ""  (formula "7")) (ifInst ""  (formula "22")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "1,1,1,1,0,0"))
            (rule "commuteIntersection" (formula "24") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "6") (term "0,0"))
            (rule "translateJavaAddInt" (formula "6") (term "0,2,0,0"))
            (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,2,0,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "4") (term "0"))
            (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "4") (term "1,0,0,0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "26")) (ifInst ""  (formula "22")))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
            (rule "translateJavaAddInt" (formula "5") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1"))
            (rule "castedGetAny" (formula "5") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "20")) (ifInst ""  (formula "23")) (ifInst ""  (formula "27")) (ifInst ""  (formula "21")))
            (rule "translateJavaAddInt" (formula "3") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "3") (term "0,0,0,1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "3") (term "0,1,1,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1"))
            (rule "translateJavaCastInt" (formula "4") (term "0,1"))
            (rule "castedGetAny" (formula "4") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "24")) (ifInst ""  (formula "28")) (ifInst ""  (formula "22")))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "25")) (ifInst ""  (formula "29")))
            (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "8") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "8") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "8") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "8") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0"))
            (rule "add_literals" (formula "8") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "8") (term "0,1,0"))
            (rule "qeq_literals" (formula "8") (term "1,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "8") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "8") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "8") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,0"))
            (rule "castedGetAny" (formula "9") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "26")) (ifInst ""  (formula "30")))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "9") (term "1,1,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1"))
            (rule "translateJavaCastInt" (formula "10") (term "0,1"))
            (rule "castedGetAny" (formula "10") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1"))
            (rule "castedGetAny" (formula "3") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "29") (term "1,1,1,1,1,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,1,1,0"))
            (rule "translateJavaUnaryMinusInt" (formula "29") (term "1,1,1,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "29") (term "0,0,1,1,1,1,1,0"))
            (rule "neg_literal" (formula "29") (term "1,1,1,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "29") (term "0,1,1,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,1,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,1,1,1,1,0"))
            (rule "polySimp_addLiterals" (formula "29") (term "0,1,1,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "29") (term "0,1,1,1,1,1,0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "translateJavaMod" (formula "11") (term "0"))
            (rule "jmod_axiom" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "newSym_eq" (formula "11") (inst "l=l_0") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(bucket, Z(2(#)))))),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "11") (term "1,1"))
            (rule "add_zero_right" (formula "11") (term "1"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "7") (term "1") (ifseqformula "12"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "6") (term "0,0"))
            (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "6") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "32")) (ifInst ""  (formula "7")) (ifInst ""  (formula "28")))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "replace_known_left" (formula "13") (term "1,0,0,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "14") (term "0,0,1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1"))
            (rule "polySimp_elimOne" (formula "8") (term "1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaMod" (formula "12") (term "0"))
            (rule "jmod_axiom" (formula "12") (term "0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0"))
            (rule "newSym_eq" (formula "12") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                           self,
                                           bucket),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "12") (term "1,1"))
            (rule "add_zero_right" (formula "12") (term "1"))
            (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "37") (term "1,2,1,1,1,0") (ifseqformula "13"))
            (rule "polySimp_addComm1" (formula "37") (term "2,1,1,1,0"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "6") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_commuteGeq" (formula "9"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
            (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
            (rule "mul_literals" (formula "3") (term "0,0"))
            (rule "add_zero_left" (formula "3") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "3") (ifseqformula "2"))
            (rule "greater_literals" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1,0"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
            (rule "mul_literals" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "2"))
            (rule "greater_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1,0"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,1"))
            (rule "mul_literals" (formula "14") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "15") (term "1,0"))
            (rule "translateJavaAddInt" (formula "15") (term "0,0,0"))
            (rule "neg_literal" (formula "15") (term "1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "15") (term "0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "1,1,1,1,1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "40")) (ifInst ""  (formula "34")))
            (rule "translateJavaAddInt" (formula "5") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "5") (term "0,0,0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "5") (term "0,1,1,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "5") (term "0,0,1,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "40")) (ifInst ""  (formula "34")))
            (rule "translateJavaAddInt" (formula "5") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "5") (term "0,0,0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "5") (term "0,1,1,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "41")))
            (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "6") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "6") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "6") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "6") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "6") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "6") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0"))
            (rule "add_literals" (formula "6") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "6") (term "0,1,0"))
            (rule "qeq_literals" (formula "6") (term "1,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "1,0,0,1"))
            (rule "translateJavaCastInt" (formula "6") (term "0,1,0,0,1"))
            (rule "castedGetAny" (formula "6") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "6") (term "0,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0"))
            (rule "neg_literal" (formula "7") (term "1,0"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0"))
            (rule "neg_literal" (formula "4") (term "1,0"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0"))
            (rule "mul_literals" (formula "4") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "8"))
            (rule "mul_literals" (formula "4") (term "0,0"))
            (rule "add_zero_left" (formula "4") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "2"))
            (rule "greater_literals" (formula "4") (term "0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1,0"))
            (rule "leq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "18") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaMod" (formula "18") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "18") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "18") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
            (rule "translateJavaAddInt" (formula "20") (term "0,0,0"))
            (rule "neg_literal" (formula "20") (term "1,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "20") (term "0,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0"))
            (rule "neg_literal" (formula "5") (term "1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "40") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "35")) (ifInst ""  (formula "38")) (ifInst ""  (formula "42")) (ifInst ""  (formula "36")))
            (rule "translateJavaAddInt" (formula "9") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "9") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "9") (term "0,0,0,1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "9") (term "0,1,1,1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
            (rule "translateJavaCastInt" (formula "9") (term "0,0"))
            (rule "castedGetAny" (formula "9") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "1"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "38")) (ifInst ""  (formula "42")))
            (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "13") (term "0,0,0,1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
            (rule "replace_known_left" (formula "13") (term "0,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "13") (term "1,1,1,1,1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "38")) (ifInst ""  (formula "42")))
            (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "13") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
            (rule "add_literals" (formula "13") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "13") (term "0,1,0"))
            (rule "qeq_literals" (formula "13") (term "1,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "13") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "13") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "13") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "13") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "13") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1"))
            (rule "translateJavaCastInt" (formula "14") (term "0,1"))
            (rule "castedGetAny" (formula "14") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,0,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "39")) (ifInst ""  (formula "43")))
            (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "10") (term "1,1,1,1,1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "0"))
            (rule "translateJavaCastInt" (formula "11") (term "0,0"))
            (rule "castedGetAny" (formula "11") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "1"))
            (rule "translateJavaCastInt" (formula "11") (term "0,1"))
            (rule "castedGetAny" (formula "11") (term "0,1"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "17") (term "0"))
            (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "17") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "37")) (ifInst ""  (formula "40")) (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "44")) (ifInst ""  (formula "40")))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "replace_known_left" (formula "10") (term "1,0,0,1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "22"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "21"))
            (rule "inEqSimp_commuteGeq" (formula "18"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "12"))
            (rule "mul_literals" (formula "17") (term "0,0"))
            (rule "add_zero_left" (formula "17") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "2"))
            (rule "greater_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1,0"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "20") (term "0"))
            (rule "translateJavaAddInt" (formula "20") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "20") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,2,0"))
            (rule "applyEq" (formula "20") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
            (rule "applyEqRigid" (formula "26") (term "0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "26"))
            (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "applyEqRigid" (formula "26") (term "0,1") (ifseqformula "16"))
            (rule "applyEqRigid" (formula "25") (term "1") (ifseqformula "16"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "42")) (ifInst ""  (formula "46")))
            (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "13") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "13") (term "1,0,0,1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_invertInEq0" (formula "13") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
            (rule "translateJavaCastInt" (formula "12") (term "0,0"))
            (rule "castedGetAny" (formula "12") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "12"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "2"))
            (rule "greater_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1,0"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "21") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "translateJavaSubInt" (formula "21") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "21") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,1,1"))
            (rule "mul_literals" (formula "21") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "21") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,1,1"))
            (rule "mul_literals" (formula "21") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "21") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "translateJavaSubInt" (formula "21") (term "0,0,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "21") (term "1,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "21") (term "0,0,0,0,0,1"))
            (rule "neg_literal" (formula "21") (term "1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "21") (term "0,0,0,0,1"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1"))
            (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0,1,1,1,1"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0,1,1,1,1"))
            (rule "neg_literal" (formula "7") (term "1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,1,1,1,1"))
            (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,1,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "40")) (ifInst ""  (formula "43")) (ifInst ""  (formula "47")) (ifInst ""  (formula "41")))
            (rule "translateJavaAddInt" (formula "6") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "6") (term "0,0,0,1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "7") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1,0,0,1"))
            (rule "translateJavaCastInt" (formula "7") (term "0,1,0,0,1"))
            (rule "castedGetAny" (formula "7") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "7") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "7") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaMod" (formula "7") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "7") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "7") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "3") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "3") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "24") (term "0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "24") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "24") (term "0,1,0,1,1"))
            (rule "eqSymm" (formula "24") (term "0,1,1"))
            (rule "castedGetAny" (formula "24") (term "0,0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "26") (term "1"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "translateJavaSubInt" (formula "26") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "26") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "26") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,1,1"))
            (rule "mul_literals" (formula "26") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "26") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,1,1"))
            (rule "mul_literals" (formula "26") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "translateJavaSubInt" (formula "27") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "27") (term "1,1"))
            (rule "translateJavaAddInt" (formula "27") (term "0,0,1"))
            (rule "neg_literal" (formula "27") (term "1,1"))
            (rule "polySimp_elimSub" (formula "27") (term "0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "27") (term "0,1"))
            (rule "polySimp_addComm0" (formula "27") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,1"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,1"))
            (rule "neg_literal" (formula "5") (term "1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1"))
            (rule "mul_literals" (formula "5") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0"))
            (rule "neg_literal" (formula "10") (term "1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0"))
            (rule "cut_direct" (formula "24") (term "0,0"))
            (branch "CUT: bucket >= -1 TRUE"
                (builtin "One Step Simplification" (formula "25"))
               (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "15") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "15") (term "0,1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "45")) (ifInst ""  (formula "49")))
               (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "15") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "15") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "15") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "15") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "15") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "15") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "15") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "15") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0"))
               (rule "add_literals" (formula "15") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "15") (term "0,1,0"))
               (rule "qeq_literals" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "16") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "16") (term "0,0,0,0,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0,1"))
               (rule "translateJavaCastInt" (formula "16") (term "0,0,0,0,1"))
               (rule "castedGetAny" (formula "16") (term "0,0,0,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,1,0,1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")) (ifInst ""  (formula "50")))
               (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "16") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "16") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "16") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "16") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
               (rule "add_literals" (formula "16") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "16") (term "0,1,0"))
               (rule "qeq_literals" (formula "16") (term "1,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "16") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "16") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "16") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "16") (term "0,0,1,0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
               (rule "neg_literal" (formula "18") (term "1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "translateJavaSubInt" (formula "1") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "0,0,0"))
               (rule "neg_literal" (formula "1") (term "1,0"))
               (rule "polySimp_elimSub" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "equalityToElementOfRight" (formula "49") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "translateJavaSubInt" (formula "49") (term "0,1,1,0,2,0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "49") (term "1,1,1,0,2,0,0,0"))
               (rule "translateJavaAddInt" (formula "49") (term "0,2,1,2,0,2,0,0,0"))
               (rule "translateJavaCastInt" (formula "49") (term "1,0,1,1,1,1,1,2,0,0,0"))
               (rule "translateJavaAddInt" (formula "49") (term "0,0,1,1,0,2,0,0,0"))
               (rule "translateJavaMulInt" (formula "49") (term "0,0,2,1,2,0,2,0,0,0"))
               (rule "neg_literal" (formula "49") (term "1,1,1,0,2,0,0,0"))
               (rule "allRight" (formula "49") (inst "sk=ov_0"))
               (rule "allRight" (formula "49") (inst "sk=fv_0"))
               (rule "notRight" (formula "49"))
               (rule "polySimp_elimSub" (formula "1") (term "0,1,1,0,2"))
               (rule "mul_literals" (formula "1") (term "1,0,1,1,0,2"))
               (rule "polySimp_addLiterals" (formula "1") (term "0,1,1,0,2"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,0,2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,0,2"))
               (rule "castedGetAny" (formula "1") (term "1,0,1,1,1,1,1,2"))
               (rule "applyEq" (formula "1") (term "1,2,0,2") (ifseqformula "32"))
               (rule "polySimp_addComm1" (formula "1") (term "2,0,2"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
               (rule "andLeft" (formula "1"))
               (rule "exLeft" (formula "2") (inst "sk=iv_0"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "elementOfSetMinus" (formula "5"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "notLeft" (formula "5"))
               (rule "elementOfUnion" (formula "53"))
               (rule "orRight" (formula "53"))
               (rule "elementOfArrayRangeConcrete" (formula "54"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "inEqSimp_homoInEq0" (formula "54") (term "0"))
               (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "54") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "54") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
               (rule "polySimp_addComm0" (formula "54") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "54") (term "0"))
               (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
               (rule "polySimp_elimOne" (formula "54") (term "0,0"))
               (rule "replace_known_left" (formula "54") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "inEqSimp_leqRight" (formula "54"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
               (rule "andLeft" (formula "5"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "0,1,0"))
               (rule "mul_literals" (formula "5") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,1,0"))
               (rule "times_zero_1" (formula "5") (term "1,0"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,1,0"))
               (rule "times_zero_1" (formula "5") (term "1,0"))
               (rule "add_literals" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "CUT: bucket >= -1 FALSE"
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_geqRight" (formula "43"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "9") (term "0,0,1,1,1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "9") (term "0,0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0,1,1,1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq0" (formula "7") (term "0,0,1,1,1,1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "7") (term "0,0,0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,1,0,1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "42")) (ifInst ""  (formula "46")))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "14") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
               (rule "add_literals" (formula "14") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "14") (term "0,1,0"))
               (rule "qeq_literals" (formula "14") (term "1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "14") (term "0,0,0,0,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,0,1,1,1,1"))
               (rule "castedGetAny" (formula "14") (term "0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,0,0,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,0,0,0,1"))
               (rule "castedGetAny" (formula "14") (term "0,0,0,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "14") (term "0,1,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "14") (term "0,0,1,0,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1,1"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "15") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
               (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
               (rule "neg_literal" (formula "16") (term "1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "translateJavaSubInt" (formula "2") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1"))
               (rule "mul_literals" (formula "2") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "2") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "1,1,1,1"))
               (rule "mul_literals" (formula "2") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "translateJavaSubInt" (formula "2") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "2") (term "1,0"))
               (rule "translateJavaAddInt" (formula "2") (term "0,0,0"))
               (rule "neg_literal" (formula "2") (term "1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "equalityToElementOfRight" (formula "45") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "translateJavaSubInt" (formula "45") (term "0,1,1,0,2,0,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "45") (term "1,1,1,0,2,0,0,0"))
               (rule "translateJavaAddInt" (formula "45") (term "0,2,1,2,0,2,0,0,0"))
               (rule "translateJavaCastInt" (formula "45") (term "1,0,1,1,1,1,1,2,0,0,0"))
               (rule "translateJavaAddInt" (formula "45") (term "0,0,1,1,0,2,0,0,0"))
               (rule "translateJavaMulInt" (formula "45") (term "0,0,2,1,2,0,2,0,0,0"))
               (rule "neg_literal" (formula "45") (term "1,1,1,0,2,0,0,0"))
               (rule "allRight" (formula "45") (inst "sk=ov_0"))
               (rule "allRight" (formula "45") (inst "sk=fv_0"))
               (rule "notRight" (formula "45"))
               (rule "polySimp_elimSub" (formula "1") (term "0,1,1,0,2"))
               (rule "mul_literals" (formula "1") (term "1,0,1,1,0,2"))
               (rule "polySimp_addLiterals" (formula "1") (term "0,1,1,0,2"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,0,2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,0,2"))
               (rule "castedGetAny" (formula "1") (term "1,0,1,1,1,1,1,2"))
               (rule "applyEq" (formula "1") (term "1,2,0,2") (ifseqformula "28"))
               (rule "polySimp_addComm1" (formula "1") (term "2,0,2"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
               (rule "andLeft" (formula "1"))
               (rule "exLeft" (formula "2") (inst "sk=iv_0"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "elementOfSetMinus" (formula "5"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "notLeft" (formula "5"))
               (rule "elementOfUnion" (formula "49"))
               (rule "orRight" (formula "49"))
               (rule "elementOfArrayRangeConcrete" (formula "50"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "inEqSimp_homoInEq0" (formula "50") (term "0"))
               (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "50") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "50") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "50") (term "0,0"))
               (rule "polySimp_addComm0" (formula "50") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "50") (term "0"))
               (rule "polySimp_mulLiterals" (formula "50") (term "0,0"))
               (rule "polySimp_elimOne" (formula "50") (term "0,0"))
               (rule "replace_known_left" (formula "50") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "inEqSimp_leqRight" (formula "50"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Case 2"
      (rule "impLeft" (formula "17") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "18"))
         (branch "Case 1"
            (rule "andRight" (formula "18"))
            (branch "Case 1"
               (rule "andRight" (formula "18"))
               (branch "Case 1"
                  (rule "andRight" (formula "18"))
                  (branch "Case 1"
                     (rule "andRight" (formula "18"))
                     (branch "Case 1"
                        (rule "andRight" (formula "18"))
                        (branch "Case 1"
                           (rule "andRight" (formula "18"))
                           (branch "Case 1"
                              (rule "close" (formula "18") (ifseqformula "1"))
                           )
                           (branch "Case 2"
                              (rule "wellFormedAnon" (formula "18"))
                               (builtin "One Step Simplification" (formula "14"))
                               (builtin "One Step Simplification" (formula "10"))
                               (builtin "One Step Simplification" (formula "9"))
                               (builtin "One Step Simplification" (formula "7"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "7"))
                              (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
                              (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
                              (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
                              (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "2,0"))
                              (rule "translateJavaSubInt" (formula "13") (term "3,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                              (rule "translateJavaSubInt" (formula "13") (term "3,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
                              (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,3,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,3,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
                              (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "18") (term "1,1"))
                              (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
                              (rule "closeTrue" (formula "14"))
                           )
                        )
                        (branch "Case 2"
                           (rule "orRight" (formula "18"))
                            (builtin "One Step Simplification" (formula "14"))
                            (builtin "One Step Simplification" (formula "10"))
                            (builtin "One Step Simplification" (formula "9"))
                            (builtin "One Step Simplification" (formula "7"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "7"))
                           (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
                           (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
                           (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,1"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "2,0"))
                           (rule "translateJavaSubInt" (formula "13") (term "3,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                           (rule "translateJavaSubInt" (formula "13") (term "3,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
                           (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
                           (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
                           (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,3,0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,3,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
                           (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "14")))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "14"))
                         (builtin "One Step Simplification" (formula "10"))
                         (builtin "One Step Simplification" (formula "9"))
                         (builtin "One Step Simplification" (formula "7"))
                         (builtin "One Step Simplification" (formula "6"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "closeTrue" (formula "15"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "14"))
                      (builtin "One Step Simplification" (formula "10"))
                      (builtin "One Step Simplification" (formula "9"))
                      (builtin "One Step Simplification" (formula "7"))
                      (builtin "One Step Simplification" (formula "6"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "closeTrue" (formula "15"))
                  )
               )
               (branch "Case 2"
                  (rule "close" (formula "18") (ifseqformula "10"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "14"))
                (builtin "One Step Simplification" (formula "10"))
                (builtin "One Step Simplification" (formula "9"))
                (builtin "One Step Simplification" (formula "7"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "7"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0,0,0"))
               (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,2,1"))
               (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "2,2,1"))
               (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "2,2,0"))
               (rule "translateJavaAddInt" (formula "18") (term "3,2,0"))
               (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "18") (term "1,1,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,1"))
               (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "13") (term "2,0"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,2,1"))
               (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,2,1"))
               (rule "translateJavaAddInt" (formula "18") (term "3,2,1"))
               (rule "translateJavaSubInt" (formula "13") (term "3,0"))
               (rule "translateJavaAddInt" (formula "13") (term "2,1"))
               (rule "translateJavaSubInt" (formula "13") (term "3,1"))
               (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
               (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,2,1"))
               (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,1,1,1"))
               (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "3,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "2,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,1,0,0,1,1"))
               (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,0,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,1,0,1,1,1"))
               (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,2,1"))
               (rule "translateJavaAddInt" (formula "13") (term "0,3,0"))
               (rule "translateJavaAddInt" (formula "13") (term "0,3,1"))
               (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,1,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,1,0,1,1,1"))
               (rule "notRight" (formula "14"))
               (rule "close" (formula "16") (ifseqformula "1"))
            )
         )
         (branch "Case 2"
            (rule "translateJavaAddInt" (formula "18") (term "1,0,0,1,0"))
            (rule "translateJavaSubInt" (formula "18") (term "2,0,0,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "1,1"))
            (rule "translateJavaSubInt" (formula "18") (term "2,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,0,0,1,0"))
            (rule "translateJavaMulInt" (formula "18") (term "0,0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,1"))
            (rule "polySimp_elimSub" (formula "18") (term "2,0,0,1,0"))
            (rule "mul_literals" (formula "18") (term "1,2,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "2,1"))
            (rule "polySimp_elimOneLeft0" (formula "18") (term "1,2,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "18") (term "2,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "18") (term "2,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,1"))
            (rule "disjointDefinition" (formula "18"))
            (rule "commuteUnion" (formula "18") (term "0,1,0,0"))
            (rule "commuteUnion_2" (formula "18") (term "1,0,0"))
            (rule "commuteIntersection" (formula "18") (term "0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "18") (term "1,2,1,1,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "18") (term "1,2,0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "4")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "24") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")) (ifInst ""  (formula "26")) (ifInst ""  (formula "20")))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "25") (term "1,1,1,1,1,0"))
            (rule "translateJavaCastInt" (formula "25") (term "0,1,1,1,1,1,0"))
            (rule "castedGetAny" (formula "25") (term "0,1,1,1,1,1,0"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "25") (term "1,2,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "25") (term "1,1,0,0"))
            (rule "commuteIntersection" (formula "25") (term "0"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaMod" (formula "7") (term "0"))
            (rule "jmod_axiom" (formula "7") (term "0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "newSym_eq" (formula "7") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                           self,
                                           bucket),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "7") (term "1,1"))
            (rule "add_zero_right" (formula "7") (term "1"))
            (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "8"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")) (ifInst ""  (formula "25")) (ifInst ""  (formula "29")) (ifInst ""  (formula "23")))
            (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "translateJavaAddInt" (formula "3") (term "1,1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "3") (term "0,0,0,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1"))
            (rule "replace_known_left" (formula "3") (term "0,1,1,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "25")) (ifInst ""  (formula "29")))
            (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "7") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "7") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "7") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "7") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "7") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "7") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "7") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "7") (term "1,0,0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1,1"))
            (rule "replace_known_left" (formula "7") (term "1,1,1,1,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
            (rule "translateJavaCastInt" (formula "8") (term "0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1"))
            (rule "translateJavaCastInt" (formula "8") (term "0,1"))
            (rule "castedGetAny" (formula "8") (term "0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
            (rule "translateJavaCastInt" (formula "4") (term "0,0"))
            (rule "castedGetAny" (formula "4") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1"))
            (rule "translateJavaCastInt" (formula "4") (term "0,1"))
            (rule "castedGetAny" (formula "4") (term "0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "26")) (ifInst ""  (formula "30")) (ifInst ""  (formula "24")))
            (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,0,1,1,1,1"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "translateJavaMod" (formula "2") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "2") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "29") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,1,0"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,0"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,0,1"))
            (rule "translateJavaCastInt" (formula "1") (term "1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "1") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,1"))
            (rule "castedGetAny" (formula "1") (term "1,0,1,1"))
            (rule "castedGetAny" (formula "1") (term "0,1,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "30") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "30") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaUnaryMinusInt" (formula "30") (term "1,1,1,1,0"))
            (rule "translateJavaSubInt" (formula "30") (term "0,1,1,1,0"))
            (rule "translateJavaAddInt" (formula "30") (term "0,0,1,1,1,0"))
            (rule "neg_literal" (formula "30") (term "1,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "30") (term "0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,1,0"))
            (rule "polySimp_addLiterals" (formula "30") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "30") (term "0,1,1,1,0"))
            (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "12") (term "0"))
            (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "12") (term "1,0,1,0,1"))
            (rule "replace_known_left" (formula "12") (term "0,0,0,0,0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "32")) (ifInst ""  (formula "28")))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "polySimp_addComm0" (formula "15") (term "1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "replace_known_left" (formula "2") (term "0,0,0,1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_commuteGeq" (formula "13"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "7"))
            (rule "mul_literals" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "12") (ifseqformula "4"))
            (rule "mul_literals" (formula "12") (term "1,1,0"))
            (rule "greater_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "15") (term "0"))
            (rule "translateJavaAddInt" (formula "15") (term "0,2,0"))
            (rule "translateJavaMulInt" (formula "15") (term "0,0,2,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,2,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
            (rule "translateJavaCastInt" (formula "7") (term "0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
            (rule "mul_literals" (formula "5") (term "0,0"))
            (rule "add_zero_left" (formula "5") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "4"))
            (rule "greater_literals" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1,0"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
            (rule "translateJavaCastInt" (formula "8") (term "0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0"))
            (rule "translateJavaSubInt" (formula "5") (term "0,0"))
            (rule "translateJavaAddInt" (formula "5") (term "0,0,0"))
            (rule "neg_literal" (formula "5") (term "1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "9") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "9") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteGeq" (formula "9") (term "1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "9") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaMod" (formula "9") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "9") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0"))
            (rule "neg_literal" (formula "10") (term "1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0"))
            (rule "translateJavaAddInt" (formula "7") (term "0,0,0"))
            (rule "neg_literal" (formula "7") (term "1,0"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")) (ifInst ""  (formula "32")) (ifInst ""  (formula "36")) (ifInst ""  (formula "30")))
            (rule "translateJavaAddInt" (formula "3") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "3") (term "0,0,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "3") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaSubInt" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,1"))
            (rule "mul_literals" (formula "3") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "3") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "3") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,1,0,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,1,0,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,1,0,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,1,0,1"))
            (rule "neg_literal" (formula "4") (term "1,0,1,0,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,1,0,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,0,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,1,0,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "1") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "35") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")) (ifInst ""  (formula "33")) (ifInst ""  (formula "37")) (ifInst ""  (formula "31")))
            (rule "translateJavaAddInt" (formula "14") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "14") (term "0,0,0,1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "9"))
            (rule "mul_literals" (formula "14") (term "0,0"))
            (rule "add_zero_left" (formula "14") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "5"))
            (rule "greater_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "mul_literals" (formula "14") (term "1,0"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "30")) (ifInst ""  (formula "33")) (ifInst ""  (formula "37")) (ifInst ""  (formula "31")))
            (rule "translateJavaAddInt" (formula "2") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0,0,1,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1,1,1,1,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "3") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaMod" (formula "3") (term "0,0,1,1"))
            (rule "jmod_axiom" (formula "3") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "3") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "34")) (ifInst ""  (formula "38")))
            (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "16") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "16") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "16") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "16") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "16") (term "1,0,0,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0"))
            (rule "inEqSimp_invertInEq0" (formula "16") (term "0,0,1,1,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "1"))
            (rule "translateJavaCastInt" (formula "17") (term "0,1"))
            (rule "castedGetAny" (formula "17") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "17"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "17"))
            (rule "polySimp_mulAssoc" (formula "11") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaMod" (formula "19") (term "0"))
            (rule "jmod_axiom" (formula "19") (term "0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
            (rule "applyEqRigid" (formula "19") (term "0,1,0") (ifseqformula "15"))
            (rule "polySimp_pullOutFactor0" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,0"))
            (rule "times_zero_1" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,0"))
            (rule "neg_literal" (formula "10") (term "1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "10"))
            (rule "mul_literals" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "6"))
            (rule "greater_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1,0"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,0"))
            (rule "neg_literal" (formula "12") (term "1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0"))
            (rule "jdiv_axiom" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,2,1"))
            (rule "eqSymm" (formula "15"))
            (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "16"))
            (rule "inEqSimp_subsumption6" (formula "15") (term "0,0") (ifseqformula "6"))
            (rule "greater_literals" (formula "15") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0"))
            (rule "leq_literals" (formula "15") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "polyDiv_pullOut" (formula "15") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0"))
            (rule "equal_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "polySimp_homoEq" (formula "15"))
            (rule "polySimp_pullOutFactor0" (formula "15") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "15") (term "1,0,0,0,1,0"))
            (rule "times_zero_1" (formula "15") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "15") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "15") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,0"))
            (rule "times_zero_1" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "13") (term "0,1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "13") (term "0,1,0,1,1"))
            (rule "eqSymm" (formula "13") (term "0,1,1"))
            (rule "castedGetAny" (formula "13") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "14") (term "1,1"))
            (rule "translateJavaAddInt" (formula "14") (term "0,0,1"))
            (rule "neg_literal" (formula "14") (term "1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "14") (term "0,1"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaMod" (formula "8") (term "0,0,1"))
            (rule "jmod_axiom" (formula "8") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "10") (term "1,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
            (rule "neg_literal" (formula "10") (term "1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "0,1"))
            (rule "mul_literals" (formula "10") (term "1,0,1"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1"))
            (rule "neg_literal" (formula "4") (term "1,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "5") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "40")) (ifInst ""  (formula "34")))
            (rule "translateJavaAddInt" (formula "5") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1,0,1,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1,0,1,1"))
            (rule "eqSymm" (formula "5") (term "0,1,1"))
            (rule "castedGetAny" (formula "5") (term "0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "5") (term "0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "5") (term "0,1,1,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "5") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "translateJavaSubInt" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,1,1"))
            (rule "mul_literals" (formula "5") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,1,1,1,1"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,1,1,1,1"))
            (rule "translateJavaAddInt" (formula "6") (term "0,0,0,1,1,1,1"))
            (rule "neg_literal" (formula "6") (term "1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0,1,1,1,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,1,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaSubInt" (formula "1") (term "0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,1,1"))
            (rule "neg_literal" (formula "1") (term "1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0,1,1,1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "1") (term "0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "18") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,1"))
            (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
            (rule "neg_literal" (formula "18") (term "1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "2") (term "0,1,1,1,1,1,1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "40")) (ifInst ""  (formula "34")))
            (rule "translateJavaAddInt" (formula "2") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0,0,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,0,0,0,0,1"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,0,0,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1,1,0,0,1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "3") (term "0,1,0,1,1,1"))
            (rule "castedGetAny" (formula "3") (term "0,1,0,1,1,1"))
            (rule "inEqSimp_commuteGeq" (formula "3") (term "0,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "34")) (ifInst ""  (formula "37")) (ifInst ""  (formula "41")) (ifInst ""  (formula "35")))
            (rule "translateJavaAddInt" (formula "4") (term "1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
            (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "4") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,1,1"))
            (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,0,0,1,1,1"))
            (rule "translateJavaAddInt" (formula "4") (term "0,0,0,0,1,1,1"))
            (rule "neg_literal" (formula "4") (term "1,0,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1,1"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,0,0,1,1"))
            (rule "translateJavaCastInt" (formula "19") (term "0,0,0,0,1,1"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0,1,0,1"))
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "37")) (ifInst ""  (formula "41")))
            (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "19") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
            (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
            (rule "add_literals" (formula "19") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "19") (term "0,1,0"))
            (rule "qeq_literals" (formula "19") (term "1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "19") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "19") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "19") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "19") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,1,0,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,1,0,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,1,1,1,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "1,1,1,1,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,1,1,1,1,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,1,1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "20") (term "0,1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "20") (term "0,0,1,0,1,1,1"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,1,1,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "20") (term "1,1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "38")) (ifInst ""  (formula "42")))
            (rule "translateJavaAddInt" (formula "20") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "20") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm1" (formula "20") (term "1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "20") (term "0,1,1,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "add_literals" (formula "20") (term "0,1,0,1,1,1,1,1"))
            (rule "add_zero_left" (formula "20") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,1,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_invertInEq0" (formula "20") (term "0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "21") (term "1,1,0,1,1,1"))
            (rule "translateJavaCastInt" (formula "21") (term "0,1,1,0,1,1,1"))
            (rule "castedGetAny" (formula "21") (term "0,1,1,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "21") (term "0,0,0,1"))
            (rule "translateJavaCastInt" (formula "21") (term "0,0,0,0,1"))
            (rule "castedGetAny" (formula "21") (term "0,0,0,0,1"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "22") (term "1"))
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "39")) (ifInst ""  (formula "43")))
            (rule "translateJavaAddInt" (formula "22") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "22") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "22") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "22") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "22") (term "0,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "22") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "22") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "22") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "22") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "22") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "22") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
            (rule "add_literals" (formula "22") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "22") (term "0,1,0"))
            (rule "qeq_literals" (formula "22") (term "1,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1"))
            (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "translateJavaSubInt" (formula "22") (term "0,1,1,1"))
            (rule "polySimp_elimSub" (formula "22") (term "0,1,1,1"))
            (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1,1"))
            (rule "mul_literals" (formula "22") (term "1,0,0,1,1,1"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,1,1"))
            (rule "mul_literals" (formula "22") (term "0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "23") (term "1"))
            (rule "translateJavaCastInt" (formula "23") (term "0,1"))
            (rule "castedGetAny" (formula "23") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "23"))
            (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "40")) (ifInst ""  (formula "44")))
            (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
            (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
            (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
            (rule "add_literals" (formula "14") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "14") (term "0,1,0"))
            (rule "qeq_literals" (formula "14") (term "1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,1"))
            (rule "add_literals" (formula "14") (term "1,0,1,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "0,1,0,0,1"))
            (rule "qeq_literals" (formula "14") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
            (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
            (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
            (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "0,0"))
            (rule "castedGetAny" (formula "14") (term "0,0"))
            (rule "equalityToElementOfRight" (formula "42") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "translateJavaCastInt" (formula "42") (term "1,0,1,1,1,2,0,0,0"))
            (rule "translateJavaAddInt" (formula "42") (term "0,2,1,2,1,2,0,0,0"))
            (rule "translateJavaSubInt" (formula "42") (term "0,1,1,1,1,0,2,0,0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "42") (term "1,1,1,1,1,0,2,0,0,0"))
            (rule "translateJavaAddInt" (formula "42") (term "0,2,1,2,1,1,0,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,0,2,1,2,1,2,0,0,0"))
            (rule "translateJavaAddInt" (formula "42") (term "0,0,1,1,1,1,0,2,0,0,0"))
            (rule "translateJavaMulInt" (formula "42") (term "0,0,2,1,2,1,1,0,2,0,0,0"))
            (rule "neg_literal" (formula "42") (term "1,1,1,1,1,0,2,0,0,0"))
            (rule "allRight" (formula "42") (inst "sk=ov_0"))
            (rule "allRight" (formula "42") (inst "sk=fv_0"))
            (rule "notRight" (formula "42"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1,1,0,2"))
            (rule "mul_literals" (formula "1") (term "1,0,1,1,1,1,0,2"))
            (rule "polySimp_addLiterals" (formula "1") (term "0,1,1,1,1,0,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,1,2"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,1,1,0,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1,1,0,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,1,2"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,1,1,0,2"))
            (rule "castedGetAny" (formula "1") (term "1,0,1,1,1,2"))
            (rule "applyEq" (formula "1") (term "1,2,1,2") (ifseqformula "25"))
            (rule "polySimp_addComm1" (formula "1") (term "2,1,2"))
            (rule "applyEq" (formula "1") (term "1,2,1,1,0,2") (ifseqformula "25"))
            (rule "polySimp_addComm1" (formula "1") (term "2,1,1,0,2"))
            (rule "elementOfIntersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfSetMinus" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
            (rule "andLeft" (formula "1"))
            (rule "exLeft" (formula "2") (inst "sk=iv_0"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "applyEq" (formula "46") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "46") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "elementOfUnion" (formula "46"))
            (rule "orRight" (formula "46"))
            (rule "elementOfArrayRangeConcrete" (formula "47"))
             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "4")))
            (rule "inEqSimp_leqRight" (formula "47"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Case 2"
          (builtin "Use Dependency Contract" (formula "22") (term "1,1,1") (ifInst ""  (formula "22") (term "1,1,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::countElement([I,int,int,int)].JML accessible clause.0") (userinteraction))
         (rule "impLeft" (formula "19") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "19"))
            (branch "Case 1"
               (rule "andRight" (formula "19"))
               (branch "Case 1"
                  (rule "andRight" (formula "19"))
                  (branch "Case 1"
                     (rule "andRight" (formula "19"))
                     (branch "Case 1"
                        (rule "andRight" (formula "19"))
                        (branch "Case 1"
                           (rule "andRight" (formula "19"))
                           (branch "Case 1"
                              (rule "andRight" (formula "19"))
                              (branch "Case 1"
                                 (rule "close" (formula "19") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "14"))
                                  (builtin "One Step Simplification" (formula "10"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "wellFormedAnon" (formula "18"))
                                  (builtin "One Step Simplification" (formula "7"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "7"))
                                 (rule "translateJavaSubInt" (formula "19") (term "0,0,0,0"))
                                 (rule "translateJavaAddInt" (formula "19") (term "1,0"))
                                 (rule "translateJavaAddInt" (formula "19") (term "2,2,0"))
                                 (rule "translateJavaAddInt" (formula "19") (term "3,2,0"))
                                 (rule "translateJavaSubInt" (formula "19") (term "0,0,0,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "1,1,0,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "1,1"))
                                 (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,2,1"))
                                 (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "2,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "3,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                                 (rule "translateJavaAddInt" (formula "13") (term "3,1"))
                                 (rule "translateJavaAddInt" (formula "14") (term "1,0,0,1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "14") (term "2,0,0,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "2,0"))
                                 (rule "translateJavaSubInt" (formula "14") (term "3,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                                 (rule "translateJavaSubInt" (formula "14") (term "3,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,2,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,2,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "2,2,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "3,2,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
                                 (rule "translateJavaSubInt" (formula "19") (term "3,0,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
                                 (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,0,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,2,1"))
                                 (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "0,2,0,0,1,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "14") (term "0,0,1,1,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "0,3,0"))
                                 (rule "translateJavaAddInt" (formula "14") (term "0,3,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,2,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,0,1,1"))
                                 (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,0,1,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,1,1,1"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                                 (rule "closeTrue" (formula "15"))
                              )
                           )
                           (branch "Case 2"
                              (rule "orRight" (formula "19"))
                               (builtin "One Step Simplification" (formula "14"))
                               (builtin "One Step Simplification" (formula "10"))
                               (builtin "One Step Simplification" (formula "9"))
                               (builtin "One Step Simplification" (formula "7"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "7"))
                              (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "19") (term "0,0,0,1"))
                              (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,2,1"))
                              (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "19") (term "0,0,0,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "1,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "2,2,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "2,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "3,2,0"))
                              (rule "translateJavaSubInt" (formula "19") (term "1,1,0,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "1,1"))
                              (rule "translateJavaAddInt" (formula "13") (term "3,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                              (rule "translateJavaAddInt" (formula "13") (term "3,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "1,0,0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "14") (term "2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "14") (term "2,0"))
                              (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,2,1"))
                              (rule "translateJavaSubInt" (formula "14") (term "3,0"))
                              (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                              (rule "translateJavaSubInt" (formula "14") (term "3,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "2,2,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "3,2,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
                              (rule "translateJavaSubInt" (formula "19") (term "3,0,1,0"))
                              (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
                              (rule "translateJavaSubInt" (formula "19") (term "3,0,1,1"))
                              (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,2,0,0,1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "14") (term "0,0,1,1,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,2,1"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,3,0"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,3,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,1,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,0,1,1"))
                              (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,0,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,1"))
                              (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,1,1,1"))
                              (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "18")))
                              (rule "closeFalse" (formula "6"))
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "14"))
                            (builtin "One Step Simplification" (formula "10"))
                            (builtin "One Step Simplification" (formula "9"))
                            (builtin "One Step Simplification" (formula "7"))
                            (builtin "One Step Simplification" (formula "6"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "14"))
                         (builtin "One Step Simplification" (formula "10"))
                         (builtin "One Step Simplification" (formula "9"))
                         (builtin "One Step Simplification" (formula "7"))
                         (builtin "One Step Simplification" (formula "6"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeTrue" (formula "16"))
                     )
                  )
                  (branch "Case 2"
                     (rule "close" (formula "19") (ifseqformula "10"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "14"))
                   (builtin "One Step Simplification" (formula "10"))
                   (builtin "One Step Simplification" (formula "9"))
                   (builtin "One Step Simplification" (formula "7"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "7"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "12") (term "1,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,2,1"))
                  (rule "translateJavaSubInt" (formula "12") (term "2,0,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "2,2,0"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "2,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "3,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "3,2,0"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,0,0,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "1,1,0,1"))
                  (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                  (rule "translateJavaAddInt" (formula "13") (term "3,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "1,0,0,1,1,0,0"))
                  (rule "translateJavaSubInt" (formula "14") (term "2,0,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "14") (term "2,0"))
                  (rule "translateJavaSubInt" (formula "14") (term "3,0"))
                  (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "3,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,2,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,2,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "2,2,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "3,2,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "2,0,1,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,2,1"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,2,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "12") (term "0,0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "13") (term "0,0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,2,0,0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "2,0,1,1"))
                  (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,1,0,0,1,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,0,1,1"))
                  (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,1,0,1,1,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "3,0,1,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,1,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "14") (term "0,0,1,1,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,3,0"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,3,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,2,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "3,0,1,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,1,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,3,0,1,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,1,0,1,1,1"))
                  (rule "notRight" (formula "15"))
                  (rule "close" (formula "18") (ifseqformula "1"))
               )
            )
            (branch "Case 2"
               (rule "translateJavaAddInt" (formula "19") (term "1,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "2,0,0,1,0"))
               (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "2,1"))
               (rule "translateJavaAddInt" (formula "19") (term "0,2,0,0,1,0"))
               (rule "translateJavaMulInt" (formula "19") (term "0,0,1,1,1,0"))
               (rule "sub_literals" (formula "19") (term "2,1"))
               (rule "polySimp_elimSub" (formula "19") (term "2,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,2,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,1,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "2,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,2,0,0,1,0"))
               (rule "disjointDefinition" (formula "19"))
               (rule "commuteUnion" (formula "19") (term "0,1,0,0"))
               (rule "commuteUnion_2" (formula "19") (term "1,0,0"))
               (rule "commuteIntersection" (formula "19") (term "0"))
               (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "19") (term "1,2,1,1,1,0"))
               (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
               (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "4")) (ifInst ""  (formula "16")))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addComm0" (formula "4") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "25") (term "1,2,1,1,1,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "25") (term "1,1,1,1,1,0"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")) (ifInst ""  (formula "27")) (ifInst ""  (formula "20")))
               (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,0,1,1,1"))
               (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
               (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,1,1,1,0"))
               (rule "translateJavaCastInt" (formula "26") (term "0,1,1,1,1,1,0"))
               (rule "castedGetAny" (formula "26") (term "0,1,1,1,1,1,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaMod" (formula "7") (term "0"))
               (rule "jmod_axiom" (formula "7") (term "0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "newSym_eq" (formula "7") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                           self,
                                           bucket),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "7") (term "1,1"))
               (rule "add_zero_right" (formula "7") (term "1"))
               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "7"))
               (rule "eqSymm" (formula "8"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
               (rule "inEqSimp_commuteGeq" (formula "4"))
               (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")) (ifInst ""  (formula "25")) (ifInst ""  (formula "30")) (ifInst ""  (formula "23")))
               (rule "translateJavaAddInt" (formula "3") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1"))
               (rule "replace_known_left" (formula "3") (term "0,1,1,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0"))
               (rule "translateJavaCastInt" (formula "3") (term "0,0"))
               (rule "castedGetAny" (formula "3") (term "0,0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1"))
               (rule "translateJavaCastInt" (formula "7") (term "0,1"))
               (rule "castedGetAny" (formula "7") (term "0,1"))
               (rule "inEqSimp_commuteGeq" (formula "7"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")) (ifInst ""  (formula "30")))
               (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "4") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "4") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "4") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "4") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1,1"))
               (rule "replace_known_left" (formula "4") (term "1,1,1,1,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
               (rule "translateJavaCastInt" (formula "5") (term "0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "8"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1"))
               (rule "polySimp_elimOne" (formula "5") (term "1"))
               (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "1"))
               (rule "translateJavaCastInt" (formula "6") (term "0,1"))
               (rule "castedGetAny" (formula "6") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "9"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
               (rule "mul_literals" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "32") (term "1,1,1,1,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "translateJavaSubInt" (formula "1") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "1") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,1"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "1") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "33") (term "1,1,1,1,1,0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "translateJavaUnaryMinusInt" (formula "33") (term "1,1,1,1,1,1,0"))
               (rule "translateJavaSubInt" (formula "33") (term "0,1,1,1,1,1,0"))
               (rule "translateJavaAddInt" (formula "33") (term "0,0,1,1,1,1,1,0"))
               (rule "neg_literal" (formula "33") (term "1,1,1,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "33") (term "0,1,1,1,1,1,0"))
               (rule "polySimp_elimOneLeft0" (formula "33") (term "1,0,1,1,1,1,1,0"))
               (rule "polySimp_addLiterals" (formula "33") (term "0,1,1,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "33") (term "0,1,1,1,1,1,0"))
               (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "14") (term "0"))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "14") (term "1,0,1,0,1"))
               (rule "replace_known_left" (formula "14") (term "1,1,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")) (ifInst ""  (formula "30")) (ifInst ""  (formula "16")) (ifInst ""  (formula "18")) (ifInst ""  (formula "35")))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "replace_known_left" (formula "6") (term "1,0,0,1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "19"))
               (rule "inEqSimp_commuteGeq" (formula "15"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "10"))
               (rule "mul_literals" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "3"))
               (rule "mul_literals" (formula "14") (term "1,1,0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
               (rule "translateJavaAddInt" (formula "17") (term "0,2,0"))
               (rule "translateJavaMulInt" (formula "17") (term "0,0,2,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,2,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,2,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "30")) (ifInst ""  (formula "33")) (ifInst ""  (formula "38")) (ifInst ""  (formula "31")))
               (rule "translateJavaAddInt" (formula "10") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "10") (term "0,0,0,1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1"))
               (rule "replace_known_left" (formula "10") (term "0,0,1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "0"))
               (rule "translateJavaCastInt" (formula "11") (term "0,0"))
               (rule "castedGetAny" (formula "11") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "11"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "3"))
               (rule "greater_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1,0"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
               (rule "translateJavaCastInt" (formula "12") (term "0,0"))
               (rule "castedGetAny" (formula "12") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
               (rule "polySimp_mulAssoc" (formula "12") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "translateJavaSubInt" (formula "5") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "5") (term "1,0"))
               (rule "translateJavaAddInt" (formula "5") (term "0,0,0"))
               (rule "neg_literal" (formula "5") (term "1,0"))
               (rule "polySimp_elimSub" (formula "5") (term "0,0"))
               (rule "mul_literals" (formula "5") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "5") (term "0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "35")) (ifInst ""  (formula "40")))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "14") (term "0,0,0,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0,1"))
               (rule "add_literals" (formula "14") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "0,0,0,1"))
               (rule "qeq_literals" (formula "14") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
               (rule "add_literals" (formula "14") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "14") (term "0,1,0"))
               (rule "qeq_literals" (formula "14") (term "1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1,1"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,1"))
               (rule "mul_literals" (formula "15") (term "0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1"))
               (rule "translateJavaCastInt" (formula "16") (term "0,1"))
               (rule "castedGetAny" (formula "16") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0"))
               (rule "translateJavaSubInt" (formula "9") (term "0,0"))
               (rule "translateJavaAddInt" (formula "9") (term "0,0,0"))
               (rule "neg_literal" (formula "9") (term "1,0"))
               (rule "polySimp_elimSub" (formula "9") (term "0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "9") (term "0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "37")) (ifInst ""  (formula "42")))
               (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "7") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "7") (term "0,0,0,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0,0,1"))
               (rule "add_literals" (formula "7") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "7") (term "0,0,0,1"))
               (rule "qeq_literals" (formula "7") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0"))
               (rule "add_literals" (formula "7") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "7") (term "0,1,0"))
               (rule "qeq_literals" (formula "7") (term "1,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "7") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "7") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,0"))
               (rule "castedGetAny" (formula "7") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "1"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "34")) (ifInst ""  (formula "37")) (ifInst ""  (formula "42")) (ifInst ""  (formula "35")))
               (rule "translateJavaAddInt" (formula "7") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "7") (term "0,0,0,1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1"))
               (rule "translateJavaCastInt" (formula "8") (term "0,1"))
               (rule "castedGetAny" (formula "8") (term "0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,0,1,1,1,1"))
               (rule "castedGetAny" (formula "2") (term "0,0,1,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")) (ifInst ""  (formula "38")) (ifInst ""  (formula "43")) (ifInst ""  (formula "36")))
               (rule "translateJavaAddInt" (formula "2") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "2") (term "0,0,0,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,0,0,1"))
               (rule "castedGetAny" (formula "2") (term "0,0,0,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")) (ifInst ""  (formula "38")) (ifInst ""  (formula "43")) (ifInst ""  (formula "36")))
               (rule "translateJavaAddInt" (formula "2") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "2") (term "0,0,0,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "2") (term "0,0,0,0,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "2") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "2") (term "0,1,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,1"))
               (rule "castedGetAny" (formula "9") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
               (rule "translateJavaCastInt" (formula "4") (term "0,0"))
               (rule "castedGetAny" (formula "4") (term "0,0"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "1") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "1") (term "1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "1") (term "0,0,0,0,1,1"))
               (rule "neg_literal" (formula "1") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "1") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")) (ifInst ""  (formula "37")) (ifInst ""  (formula "42")) (ifInst ""  (formula "35")))
               (rule "translateJavaAddInt" (formula "18") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "18") (term "0,0,0,1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0"))
               (rule "translateJavaCastInt" (formula "18") (term "0,0"))
               (rule "castedGetAny" (formula "18") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "add_zero_left" (formula "18") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "3"))
               (rule "greater_literals" (formula "18") (term "0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1,0"))
               (rule "leq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "1"))
               (rule "translateJavaCastInt" (formula "19") (term "0,1"))
               (rule "castedGetAny" (formula "19") (term "0,1"))
               (rule "inEqSimp_commuteGeq" (formula "19"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "19"))
               (rule "polySimp_mulAssoc" (formula "13") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,1,0,1"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "42")))
               (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "6") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "6") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "6") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "6") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "6") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "6") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "6") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "6") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0"))
               (rule "add_literals" (formula "6") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "6") (term "0,1,0"))
               (rule "qeq_literals" (formula "6") (term "1,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "0,0,0,1"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "38")) (ifInst ""  (formula "43")))
               (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "7") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,1,0,1,1,1,1,1"))
               (rule "add_zero_left" (formula "7") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,1,1,1,1"))
               (rule "add_zero_left" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "7") (term "0,0,1,1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "0,1,1,1,1"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "39")) (ifInst ""  (formula "44")))
               (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "9") (term "0,0,0,0,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,0,0,1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,0,0,0,1"))
               (rule "castedGetAny" (formula "9") (term "0,0,0,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,0,1,1,1,1"))
               (rule "castedGetAny" (formula "9") (term "0,0,1,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,1,0,1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0,1"))
               (rule "castedGetAny" (formula "9") (term "0,0,1,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "9") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "9") (term "0,1,1,1,1,1"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "translateJavaMod" (formula "23") (term "0"))
               (rule "jmod_axiom" (formula "23") (term "0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
               (rule "applyEqRigid" (formula "23") (term "0,1,0") (ifseqformula "20"))
               (rule "polySimp_pullOutFactor0" (formula "23") (term "0"))
               (rule "add_literals" (formula "23") (term "1,0"))
               (rule "times_zero_1" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0,1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "39")) (ifInst ""  (formula "44")))
               (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm1" (formula "13") (term "1,1,1,0,1,1,1"))
               (rule "add_literals" (formula "13") (term "0,1,1,1,0,1,1,1"))
               (rule "add_zero_left" (formula "13") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "13") (term "1,0,1,1,1,1,1"))
               (rule "add_literals" (formula "13") (term "0,1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,1"))
               (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,1"))
               (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1,1"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1,1"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "40")) (ifInst ""  (formula "45")))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
               (rule "add_literals" (formula "14") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "14") (term "0,1,0"))
               (rule "qeq_literals" (formula "14") (term "1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "14") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,0,1,1,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,1,0,1,1,1"))
               (rule "castedGetAny" (formula "14") (term "0,1,0,1,1,1"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,0,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,0,0,1"))
               (rule "castedGetAny" (formula "14") (term "0,0,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "14") (term "0,1,1,1,1,1,1"))
               (rule "castedGetAny" (formula "14") (term "0,1,1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "37")) (ifInst ""  (formula "40")) (ifInst ""  (formula "45")) (ifInst ""  (formula "38")))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1,1"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaMod" (formula "15") (term "0,0,1,1"))
               (rule "jmod_axiom" (formula "15") (term "0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,1"))
               (rule "polySimp_sepNegMonomial" (formula "15") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
               (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
               (rule "neg_literal" (formula "16") (term "1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "3"))
               (rule "greater_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1,0"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaSubInt" (formula "18") (term "0,1,1,1"))
               (rule "polySimp_elimSub" (formula "18") (term "0,1,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,1"))
               (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
               (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,1,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
               (rule "neg_literal" (formula "18") (term "1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "41")) (ifInst ""  (formula "46")))
               (rule "translateJavaAddInt" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "17") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "17") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,1,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "17") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "17") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "17") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0"))
               (rule "add_literals" (formula "17") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "17") (term "0,1,0"))
               (rule "qeq_literals" (formula "17") (term "1,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
               (rule "translateJavaCastInt" (formula "17") (term "0,0"))
               (rule "castedGetAny" (formula "17") (term "0,0"))
               (rule "jdiv_axiom" (formula "22") (term "0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,2,1"))
               (rule "eqSymm" (formula "22"))
               (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "23"))
               (rule "inEqSimp_subsumption6" (formula "22") (term "0,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
               (rule "greater_literals" (formula "22") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "leq_literals" (formula "22") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "polyDiv_pullOut" (formula "22") (term "0") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0"))
               (rule "equal_literals" (formula "22") (term "0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0"))
               (rule "add_literals" (formula "22") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "22") (term "0,0,0"))
               (rule "div_literals" (formula "22") (term "0,0"))
               (rule "add_zero_left" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "1,1,1,1,1"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "41")) (ifInst ""  (formula "46")))
               (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "19") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
               (rule "add_literals" (formula "19") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "19") (term "0,1,0"))
               (rule "qeq_literals" (formula "19") (term "1,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "1,1,1,1,1"))
               (rule "translateJavaCastInt" (formula "19") (term "0,1,1,1,1,1"))
               (rule "castedGetAny" (formula "19") (term "0,1,1,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "41")) (ifInst ""  (formula "46")))
               (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "19") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
               (rule "add_literals" (formula "19") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "19") (term "0,1,0"))
               (rule "qeq_literals" (formula "19") (term "1,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1"))
               (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "41")) (ifInst ""  (formula "46")))
               (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,1,1"))
               (rule "leq_literals" (formula "19") (term "0,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,1,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "add_literals" (formula "19") (term "1,0,1,0,1,1,1"))
               (rule "times_zero_1" (formula "19") (term "0,1,0,1,1,1"))
               (rule "qeq_literals" (formula "19") (term "1,0,1,1,1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
               (rule "add_literals" (formula "19") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "19") (term "0,1,0"))
               (rule "qeq_literals" (formula "19") (term "1,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,0,1"))
               (rule "translateJavaCastInt" (formula "19") (term "0,0,0,1"))
               (rule "castedGetAny" (formula "19") (term "0,0,0,1"))
               (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,0,0,1,1"))
               (rule "translateJavaCastInt" (formula "19") (term "0,0,0,0,1,1"))
               (rule "castedGetAny" (formula "19") (term "0,0,0,0,1,1"))
               (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0,0,1,1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "translateJavaSubInt" (formula "20") (term "0,0,0,1,1"))
               (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "20") (term "0,0,0,0,1,1"))
               (rule "neg_literal" (formula "20") (term "1,0,0,1,1"))
               (rule "polySimp_elimSub" (formula "20") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,1"))
               (rule "equalityToElementOfRight" (formula "44") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "translateJavaAddInt" (formula "44") (term "0,2,1,2,1,1,1,2,0,0,0"))
               (rule "translateJavaMulInt" (formula "44") (term "0,0,2,1,2,1,1,1,2,0,0,0"))
               (rule "allRight" (formula "44") (inst "sk=ov_0"))
               (rule "allRight" (formula "44") (inst "sk=fv_0"))
               (rule "notRight" (formula "44"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,1,2,1,1,1,2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,1,2,1,1,1,2"))
               (rule "applyEq" (formula "1") (term "1,2,1,1,1,2") (ifseqformula "26"))
               (rule "polySimp_addComm1" (formula "1") (term "2,1,1,1,2"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
               (rule "andLeft" (formula "1"))
               (rule "exLeft" (formula "2") (inst "sk=iv_0"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "5"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "notLeft" (formula "5"))
               (rule "elementOfUnion" (formula "48"))
               (rule "orRight" (formula "48"))
               (rule "elementOfArrayRangeConcrete" (formula "49"))
               (rule "eqSymm" (formula "49") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "49") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "49") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "49") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "49") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "49") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "49") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "49") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "49") (term "0,1,0"))
               (rule "elementOfUnion" (formula "48"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "closeTrue" (formula "48"))
            )
         )
         (branch "Case 2"
            (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "18") (userinteraction))
            (rule "applyEq" (formula "23") (term "1,1,1") (ifseqformula "19") (userinteraction))
            (rule "applyEq" (formula "23") (term "2,1") (ifseqformula "17") (userinteraction))
            (rule "Definition_axiom_for_writtenCountOfBucket_in_de_wiesler_BucketPointers" (formula "23") (term "1,1,0,0") (userinteraction))
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "10"))
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "7"))
             (builtin "One Step Simplification" (formula "6"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "closeTrue" (formula "20"))
         )
      )
   )
)
)
}
