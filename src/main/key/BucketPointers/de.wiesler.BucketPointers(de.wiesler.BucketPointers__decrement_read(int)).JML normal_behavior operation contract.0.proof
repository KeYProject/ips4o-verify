\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 05 15:12:55 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../main/java";

\proofObligation "#Proof Obligation Settings
#Tue Apr 05 15:12:55 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "145895")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "translateJavaMulInt" (formula "1") (term "0,1,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,1,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_decrement_read,savedHeapBefore_decrement_read"))
 (builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationFinalAssign" (formula "10") (term "1"))
(rule "variableDeclarationFinal" (formula "10") (term "1") (newnames "read_pos"))
(rule "assignmentMultiplicationInt" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "translateJavaMulInt" (formula "10") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "read"))
(rule "eval_order_array_access4" (formula "10") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this_final" (formula "10"))
 (builtin "One Step Simplification" (formula "10"))
(rule "assignment_array2" (formula "10"))
(branch "Normal Execution (x_arr != null)"
    (builtin "One Step Simplification" (formula "10"))
   (rule "compound_assignment_op_minus" (formula "10") (term "1"))
   (rule "compound_int_cast_expression" (formula "10") (term "1") (inst "#v=x"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
   (rule "remove_parentheses_right" (formula "10") (term "1"))
   (rule "compound_subtraction_2" (formula "10") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_2"))
   (rule "remove_parentheses_right" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "assignmentSubtractionInt" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "0,1,0"))
   (rule "mul_literals" (formula "10") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1,0"))
   (rule "widening_identity_cast_5" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "eval_order_array_access1" (formula "10") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr_1"))
   (rule "assignment_read_attribute_this_final" (formula "10"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "assignment_to_primitive_array_component" (formula "10"))
   (branch "Normal Execution (x_arr_1 != null)"
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallReturn" (formula "10") (term "1"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "tryEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (rule "andRight" (formula "10"))
      (branch "Case 1"
         (rule "andRight" (formula "10"))
         (branch "Case 1"
            (rule "andRight" (formula "10"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7") (inst "b=b"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaCastInt" (formula "7") (term "0,1,0,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "7") (term "0,1,1,0,0,0,0"))
               (rule "translateJavaMulInt" (formula "7") (term "1,0,1,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "7") (term "1,1,0,0,1,0,0,0"))
               (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0"))
               (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "8"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_mulComm0" (formula "8") (term "0"))
               (rule "polySimp_addComm0" (formula "13") (term "1"))
               (rule "castedGetAny" (formula "14") (term "0"))
               (rule "castedGetAny" (formula "11") (term "0"))
               (rule "castedGetAny" (formula "10") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
               (rule "leq_literals" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_exactShadow2" (formula "6") (ifseqformula "8"))
               (rule "greater_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "12"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "9"))
               (rule "greater_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "times_zero_1" (formula "8") (term "1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,0"))
               (rule "add_zero_left" (formula "8") (term "0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "translateJavaSubInt" (formula "22") (term "0,1"))
               (rule "orRight" (formula "22"))
               (rule "notRight" (formula "22"))
               (rule "polySimp_elimSub" (formula "23") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_sepNegMonomial" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradEq3" (formula "23") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
               (rule "add_literals" (formula "23") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0"))
               (rule "qeq_literals" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "false_right" (formula "23"))
               (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "23") (term "0"))
               (rule "wellFormedStorePrimitiveArray" (formula "1") (term "1,0,0,0"))
               (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
               (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
               (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
               (rule "dismissNonSelectedField" (formula "1") (term "0,1,0"))
               (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "24") (term "0"))
               (rule "translateJavaMulInt" (formula "24") (term "0,2,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,2,0"))
               (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "closeTrue" (formula "25"))
            )
            (branch "Case 2"
               (rule "andRight" (formula "10"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "10") (userinteraction))
                  (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "1,1") (userinteraction))
                  (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "0") (userinteraction))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "10") (term "1,0,1,1") (userinteraction))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "10") (term "1,0,0") (userinteraction))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,0") (userinteraction))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,1,1") (userinteraction))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "10") (term "0,1,1,1") (userinteraction))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,1,1") (userinteraction))
                  (rule "translateJavaMulInt" (formula "10") (term "0,2,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "10") (term "0,2,0,0,0"))
                  (rule "translateJavaSubInt" (formula "10") (term "1,1,1"))
                  (rule "translateJavaMulInt" (formula "10") (term "0,2,1,0,0"))
                  (rule "translateJavaSubInt" (formula "10") (term "1,0"))
                  (rule "translateJavaAddInt" (formula "10") (term "0,2,0,0,1,1"))
                  (rule "translateJavaMulInt" (formula "10") (term "0,0,2,0,0,0"))
                  (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,1,1"))
                  (rule "translateJavaMulInt" (formula "10") (term "0,2,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "10") (term "0,0,2,0,0,1,1"))
                  (rule "translateJavaMulInt" (formula "10") (term "0,0,2,1,1,1,1"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,1,1"))
                  (rule "polySimp_homoEq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,2,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0,1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0,2,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,2,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,2,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1"))
                  (rule "pullOutSelect" (formula "10") (term "0,1,1,0") (inst "selectSK=arr_0"))
                  (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "polySimp_homoEq" (formula "11"))
                  (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "equal_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "11") (term "0,1,1,0,1,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "11") (term "0,0,0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1"))
                  (rule "pullOutSelect" (formula "10") (term "1,1,1,1") (inst "selectSK=arr_1"))
                  (rule "applyEq" (formula "11") (term "0,0,1,1") (ifseqformula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "11") (term "1,1,1,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "11") (term "0,0,1,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,1"))
                  (rule "polySimp_homoEq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                  (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "9") (term "0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "8")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "false_right" (formula "11"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
                  (rule "translateJavaMulInt" (formula "9") (term "0,1,1,0,0,0,0"))
                  (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
                  (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
                  (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "9") (term "1,0,1,0,0,0,0"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0"))
                  (rule "polySimp_addComm0" (formula "15") (term "1"))
                  (rule "castedGetAny" (formula "16") (term "0"))
                  (rule "castedGetAny" (formula "13") (term "0"))
                  (rule "castedGetAny" (formula "12") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "10"))
                  (rule "greater_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
                  (rule "greater_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "24") (term "0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "24") (term "0,2,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "0,2,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,1,1"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "translateJavaMod" (formula "2") (term "0"))
                  (rule "jmod_axiom" (formula "2") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "newSym_eq" (formula "2") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::toReadCountOfBucket(heap,
                                                   self,
                                                   bucket),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "2") (term "1,1"))
                  (rule "add_zero_right" (formula "2") (term "1"))
                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
                  (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "leq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "21") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "translateJavaCastInt" (formula "21") (term "0,1,0,1,0"))
                  (rule "translateJavaCastInt" (formula "21") (term "1,1,0,1,0"))
                  (rule "castedGetAny" (formula "21") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "21") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,0"))
                  (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "19"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
                  (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "translateJavaMod" (formula "18") (term "0"))
                  (rule "jmod_axiom" (formula "18") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "newSym_eq" (formula "18") (inst "l=l_1") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "18") (term "1,1"))
                  (rule "add_zero_right" (formula "18") (term "1"))
                  (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "18"))
                  (rule "eqSymm" (formula "19"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "19"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "19"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "19"))
                  (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                  (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "15") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "14") (term "0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
                  (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "16") (ifseqformula "15"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "greater_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "26") (term "0,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "26")))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "27") (term "0,0,1,1,1"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,0,0,1,1,1"))
                  (rule "translateJavaMulInt" (formula "27") (term "0,0,2,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "0,0,2,0,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,2,0,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "27") (term "1,1,1"))
                  (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "4") (term "0"))
                  (rule "translateJavaSubInt" (formula "4") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (rule "ifthenelse_split" (formula "27") (term "0"))
                  (branch " self.buffer[1 + bucket * 2] <= -257 + self.buffer[bucket * 2] TRUE"
                     (rule "polySimp_homoEq" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "0,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "28") (term "0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "28") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1"))
                     (rule "polySimp_mulAssoc" (formula "28") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "0,1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "orRight" (formula "28"))
                     (rule "polySimp_homoEq" (formula "29"))
                     (rule "times_zero_2" (formula "29") (term "1,0"))
                     (rule "add_zero_right" (formula "29") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "29"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                     (rule "polySimp_elimOne" (formula "29") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "29") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0"))
                     (rule "qeq_literals" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "false_right" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_literals" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch " self.buffer[1 + bucket * 2] <= -257 + self.buffer[bucket * 2] FALSE"
                     (rule "polySimp_homoEq" (formula "28"))
                     (rule "times_zero_2" (formula "28") (term "1,0"))
                     (rule "add_zero_right" (formula "28") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "27"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "28"))
                     (rule "mul_literals" (formula "28") (term "1"))
                     (rule "ifEqualsInteger" (formula "28"))
                     (rule "equal_literals" (formula "28") (term "1,1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "polySimp_homoEq" (formula "28") (term "1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
                     (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                     (rule "mul_literals" (formula "28") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")))
                     (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,0,1,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "1,0,1,1,1,1") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "times_zero_2" (formula "2") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_invertInEq0" (formula "2") (term "0,1,1,1,1"))
                     (rule "times_zero_2" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "0,1,1,1,1") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "11"))
                     (rule "leq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,0,1"))
                     (rule "translateJavaCastInt" (formula "3") (term "0,1,1,0,1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")))
                     (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "3") (term "0,0,1,1,1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "3") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1,1,0,0,0,1"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,1,1,0,0,0,1"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0,0,1"))
                     (rule "commute_or" (formula "26") (term "0,0,1,0"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "4") (term "0,2,0,0,0,1,1"))
                     (rule "translateJavaMulInt" (formula "4") (term "0,0,2,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,0,2,0,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,2,0,0,0,1,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0,0,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "30")))
                     (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "4") (term "0,0,1,1,1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_subsumption1" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "4") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "4") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
                     (rule "true_left" (formula "4"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,0,0,0,1"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,0,0,0,0,0,1"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0,1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "28")))
                     (rule "translateJavaCastInt" (formula "4") (term "0,1,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,0"))
                     (rule "translateJavaCastInt" (formula "4") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "4") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "castedGetAny" (formula "4") (term "1,1,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
                     (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "4") (term "0,0,0,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "4") (term "1,1,0,1,0,0,0") (ifseqformula "23"))
                     (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_subsumption6" (formula "4") (term "0,1,0,0,0") (ifseqformula "18"))
                     (rule "greater_literals" (formula "4") (term "0,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "16"))
                     (rule "times_zero_1" (formula "4") (term "1,1,0,0,0,0,0"))
                     (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "7") (term "0,1,0"))
                     (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "7") (term "1,0"))
                     (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "7") (term "0,0,0"))
                     (rule "translateJavaAddInt" (formula "7") (term "1,0,1,0,1"))
                     (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "replace_known_right" (formula "7") (term "0,1,0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
                     (rule "polySimp_addComm0" (formula "7") (term "1,0,1,0,1"))
                     (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                     (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "8") (term "0,0,0"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,2,0,0,0"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,0,2,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,0,2,0,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0,0"))
                     (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "8") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "8") (term "1,0,1,0,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,0,1"))
                     (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "31")))
                     (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "1,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                     (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1"))
                     (rule "applyEq" (formula "8") (term "0,0,0,1,1") (ifseqformula "25"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0,1,1"))
                     (rule "applyEq" (formula "8") (term "1,0,1,1,1") (ifseqformula "25"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                     (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,2,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "4") (term "0,1,0"))
                     (rule "commute_or" (formula "29") (term "0,0"))
                     (rule "commute_and" (formula "32"))
                     (rule "jdiv_axiom" (formula "6") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "6"))
                     (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
                     (rule "inEqSimp_subsumption6" (formula "6") (term "0,0") (ifseqformula "5"))
                     (rule "greater_literals" (formula "6") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                     (rule "leq_literals" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=l_0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "6") (term "0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "polySimp_pullOutFactor0" (formula "6") (term "0,0,0"))
                     (rule "add_literals" (formula "6") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "6") (term "0,0,0"))
                     (rule "div_literals" (formula "6") (term "0,0"))
                     (rule "add_zero_left" (formula "6") (term "0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "lenNonNegative" (formula "26") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "18"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "arrayLengthNotNegative" (formula "19") (term "1"))
                     (rule "arrayLengthIsAShort" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "translateJavaMod" (formula "2") (term "0,0,1,1"))
                     (rule "jmod_axiom" (formula "2") (term "0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1"))
                     (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
                     (rule "seqGetAlphaCast" (formula "27") (term "0"))
                     (rule "castedGetAny" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "seqGetAlphaCast" (formula "23") (term "0"))
                     (rule "castedGetAny" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "nnf_notAnd" (formula "4") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "1,0,0,0,1,0"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,0,0,1,1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                     (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "3") (term "0,0,1,1,1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "17"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "3") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "17"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")))
                     (rule "true_left" (formula "3"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "3") (term "0,1,1,1,1,1,1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                     (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,1,0,1,1,1,1,1"))
                     (rule "add_zero_left" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
                     (rule "add_zero_left" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                     (rule "times_zero_2" (formula "3") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_invertInEq0" (formula "3") (term "0,1,1,1,1"))
                     (rule "times_zero_2" (formula "3") (term "1,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "3") (term "0,1,1,1,1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "15"))
                     (rule "leq_literals" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "33")))
                     (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "4") (term "0,0,1,1,1") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_subsumption1" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "4") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "4") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,1,1"))
                     (rule "translateJavaCastInt" (formula "5") (term "0,0,0,0,1,1"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,1,1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "5") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "32")))
                     (rule "translateJavaAddInt" (formula "5") (term "1,1,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "0,1,0,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "0,1,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "castedGetAny" (formula "5") (term "1,1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,0,0,0"))
                     (rule "applyEq" (formula "5") (term "0,0,1,1,0,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "5") (term "0,0,0,1,0,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "5") (term "1,1,0,1,0,0,0") (ifseqformula "27"))
                     (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "20"))
                     (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "22"))
                     (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "jdiv_axiom" (formula "26") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1") (ifseqformula "27"))
                     (rule "inEqSimp_subsumption6" (formula "26") (term "0,0") (ifseqformula "22"))
                     (rule "greater_literals" (formula "26") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "polyDiv_pullOut" (formula "26") (term "0") (inst "polyDivCoeff=l_1"))
                     (rule "equal_literals" (formula "26") (term "0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_homoEq" (formula "26"))
                     (rule "polySimp_pullOutFactor0" (formula "26") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "26") (term "1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "26") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "26") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "26") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "1,0"))
                     (rule "times_zero_1" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,1,0,1"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0,1,0,1"))
                     (rule "translateJavaSubInt" (formula "6") (term "0,0,1,0,1"))
                     (rule "translateJavaAddInt" (formula "6") (term "0,0,0,1,0,1"))
                     (rule "neg_literal" (formula "6") (term "1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "6") (term "0,0,1,0,1"))
                     (rule "mul_literals" (formula "6") (term "1,0,0,1,0,1"))
                     (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,0,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "0,0,1,0,1"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "11") (term "0,0,1,0"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0,1,0"))
                     (rule "translateJavaMulInt" (formula "11") (term "0,0,2,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,0,2,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,0"))
                     (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "9") (term "0,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")) (ifInst ""  (formula "34")))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
                     (rule "true_left" (formula "9"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0,0,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "0,0,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "9") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
                     (rule "true_left" (formula "9"))
                     (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "9") (term "0,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")) (ifInst ""  (formula "34")))
                     (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
                     (rule "true_left" (formula "9"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "0,0,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "9") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
                     (rule "true_left" (formula "9"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "0,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "0,2,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,2,0,1,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,0,0,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0,0,0,0,0,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,0,0,0,0,0,1"))
                     (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
                     (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
                     (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                     (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                     (rule "times_zero_2" (formula "9") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_invertInEq0" (formula "9") (term "0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "times_zero_2" (formula "9") (term "1,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "0,1,1,1,1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "9") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")))
                     (rule "true_left" (formula "9"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,0,0,0,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,1,1,0,0,0,1"))
                     (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0,0,1"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "9") (term "0,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0,0,1,1"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0,0,1,1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (term "1,1,1") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "32")))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0,1,1,1"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,1,0,0,0,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0,1,1,1"))
                     (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,0,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,0,0,0,1,1,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,0,1,1,1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "castedGetAny" (formula "9") (term "0,1,0,1,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "1,0,1,0,0,1,1,1") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "castedGetAny" (formula "9") (term "0,0,1,0,1,1,1"))
                     (rule "replace_known_left" (formula "9") (term "0,1,0,1,1,1") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "castedGetAny" (formula "9") (term "1,1,0,1,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,0,1,1,1"))
                     (rule "applyEq" (formula "9") (term "0,0,0,1,0,0,1,1,1") (ifseqformula "27"))
                     (rule "applyEq" (formula "9") (term "1,1,0,1,0,0,1,1,1") (ifseqformula "27"))
                     (rule "replace_known_left" (formula "9") (term "1,0,1,0,0,1,1,1") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEq" (formula "9") (term "0,0,1,1,0,0,1,1,1") (ifseqformula "27"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,1,1"))
                     (rule "inEqSimp_subsumption6" (formula "9") (term "0,1,0,0,1,1,1") (ifseqformula "22"))
                     (rule "greater_literals" (formula "9") (term "0,0,0,1,0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,1,1,1"))
                     (rule "leq_literals" (formula "9") (term "0,0,1,0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption6" (formula "9") (term "0,0,0,1,1,1") (ifseqformula "20"))
                     (rule "greater_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,1"))
                     (rule "leq_literals" (formula "9") (term "0,0,0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "10") (term "0,0,0,1,1,1"))
                     (rule "castedGetAny" (formula "10") (term "0,0,0,1,1,1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (term "1,1,1,1,1") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "32")))
                     (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0,1,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0,1,1,1,1,1"))
                     (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0,0,0,1,1,1,1,1"))
                     (rule "translateJavaMulInt" (formula "10") (term "1,0,0,0,0,0,1,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0,1,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0,1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0,0,1,1,1,1,1"))
                     (rule "replace_known_left" (formula "10") (term "1,0,0,0,0,1,1,1,1,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,1,1,1,1,1"))
                     (rule "replace_known_left" (formula "10") (term "1,0,0,1,1,1,1,1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "castedGetAny" (formula "10") (term "1,1,0,0,1,0,0,1,1,1,1,1"))
                     (rule "castedGetAny" (formula "10") (term "0,1,0,1,0,0,1,1,1,1,1"))
                     (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,1,1,1,1"))
                     (rule "replace_known_left" (formula "10") (term "0,1,0,1,1,1,1,1") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0,0,1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,0,1,1,1,1,1"))
                     (rule "applyEq" (formula "10") (term "1,1,0,1,0,0,1,1,1,1,1") (ifseqformula "27"))
                     (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,1,1,1,1,1") (ifseqformula "27"))
                     (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,1,1,1,1") (ifseqformula "27"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,1,1,1,1"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,1,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,1,1,1,1"))
                     (rule "inEqSimp_subsumption6" (formula "10") (term "0,0,0,1,1,1,1,1") (ifseqformula "20"))
                     (rule "greater_literals" (formula "10") (term "0,0,0,0,0,1,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,1,1,1"))
                     (rule "leq_literals" (formula "10") (term "0,0,0,0,1,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_subsumption6" (formula "10") (term "0,0,0,1,1,1,1,1") (ifseqformula "22"))
                     (rule "greater_literals" (formula "10") (term "0,0,0,0,0,1,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,1,1,1"))
                     (rule "leq_literals" (formula "10") (term "0,0,0,0,1,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,0,1,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "1,0,1,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "times_zero_2" (formula "2") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0"))
                     (rule "inEqSimp_invertInEq0" (formula "2") (term "0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "times_zero_2" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "0,1,1,1,1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "4")))
                     (rule "true_left" (formula "2"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,0,0,1"))
                     (rule "translateJavaCastInt" (formula "2") (term "0,0,0,0,0,1"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "1,1,0,0,1"))
                     (rule "translateJavaCastInt" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "2") (term "0,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,1,0,1,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,1,1"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "1,0,1,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,1,1,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
                     (rule "times_zero_2" (formula "2") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_invertInEq0" (formula "2") (term "0,1,1,1,1"))
                     (rule "times_zero_2" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "0,1,1,1,1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "4")))
                     (rule "true_left" (formula "2"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "2") (term "1,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1,1"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "1,0,1,1,1,1") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0,1,0,1,1,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,1,1,1,1"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,1,1,1,1"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1,0,1,1,1,1"))
                     (rule "qeq_literals" (formula "2") (term "0,1,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "5")))
                     (rule "true_left" (formula "2"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "2") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "32")))
                     (rule "translateJavaCastInt" (formula "2") (term "0,1,0,1,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "1,1,0,0,0"))
                     (rule "translateJavaCastInt" (formula "2") (term "0,0,1,0,0"))
                     (rule "translateJavaCastInt" (formula "2") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "2") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "castedGetAny" (formula "2") (term "1,1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,1,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,0,0"))
                     (rule "applyEq" (formula "2") (term "0,0,0,1,0,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "2") (term "0,0,1,1,0,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "2") (term "1,1,0,1,0,0,0") (ifseqformula "27"))
                     (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (term "0,1,0,0,0") (ifseqformula "22"))
                     (rule "greater_literals" (formula "2") (term "0,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "2") (term "0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_subsumption6" (formula "2") (term "0,0,0,0") (ifseqformula "20"))
                     (rule "greater_literals" (formula "2") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "nnf_imp2or" (formula "5") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "30") (term "0"))
                     (rule "applyEq_and_int6" (formula "34"))
                     (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,0,1"))
                     (rule "add_literals" (formula "34") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1"))
                     (rule "add_literals" (formula "34") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "34") (term "1,0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,1"))
                     (rule "qeq_literals" (formula "34") (term "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "34"))
                     (rule "polySimp_addAssoc" (formula "1") (term "1"))
                     (rule "add_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "leq_literals" (formula "34") (term "0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,1,1,1"))
                     (rule "translateJavaCastInt" (formula "3") (term "0,1,1,1,1,1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,1,1,1"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,1,1,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,0,0,1"))
                     (rule "translateJavaCastInt" (formula "3") (term "0,0,1,0,0,1"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0,1,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                     (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,1,1,0,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,0,1,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,1,1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1,1"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0,0"))
                     (rule "times_zero_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0,0,1,1,1,1") (ifseqformula "17"))
                     (rule "leq_literals" (formula "3") (term "0,0,0,1,1,1,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0,0,0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "3") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1,1,0,0,1"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,1,1,0,0,1"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,1,0,1,1,1"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,1,1,1"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,1,1,1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "33")))
                     (rule "translateJavaAddInt" (formula "4") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "4") (term "0,1,0,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "4") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,1,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "castedGetAny" (formula "4") (term "1,1,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,0,0"))
                     (rule "applyEq" (formula "4") (term "1,1,0,1,0,0,0") (ifseqformula "28"))
                     (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEq" (formula "4") (term "0,0,1,0,0,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,0") (ifseqformula "28"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "21"))
                     (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "23"))
                     (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "5") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "33")))
                     (rule "translateJavaAddInt" (formula "5") (term "1,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "translateJavaMulInt" (formula "5") (term "0,1,0,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "0,1,0,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "castedGetAny" (formula "5") (term "1,1,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "applyEq" (formula "5") (term "1,1,0,1,0,0,0") (ifseqformula "28"))
                     (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEq" (formula "5") (term "0,0,1,1,0,0,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "5") (term "0,0,1,0,0,0") (ifseqformula "28"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "21"))
                     (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "23"))
                     (rule "times_zero_1" (formula "5") (term "1,1,0,0,0,0,0"))
                     (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,1,0,1"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "35")))
                     (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
                     (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0,1,1,1"))
                     (rule "add_literals" (formula "6") (term "1,1,0,0,0,1,1,1"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,1"))
                     (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1"))
                     (rule "leq_literals" (formula "6") (term "0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,1,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,1,1,1"))
                     (rule "add_literals" (formula "6") (term "1,0,1,0,1,1,1"))
                     (rule "times_zero_1" (formula "6") (term "0,1,0,1,1,1"))
                     (rule "qeq_literals" (formula "6") (term "1,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0,1"))
                     (rule "add_literals" (formula "6") (term "1,0,1,0,0,1"))
                     (rule "times_zero_1" (formula "6") (term "0,1,0,0,1"))
                     (rule "qeq_literals" (formula "6") (term "1,0,0,1"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0,0"))
                     (rule "add_literals" (formula "6") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "6") (term "0,0,0"))
                     (rule "qeq_literals" (formula "6") (term "0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0,1,0,1"))
                     (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0,1"))
                     (rule "castedGetAny" (formula "7") (term "0,0,1,0,1"))
                     (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "translateJavaSubInt" (formula "7") (term "0,0,0,1,1,1"))
                     (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0,0,1,1,1"))
                     (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,1,1"))
                     (rule "neg_literal" (formula "7") (term "1,0,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1,1,1"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,1"))
                     (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,1,1"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "8") (term "0,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,2,0,1,0,0,1"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,0,2,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,0,2,0,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,2,0,1,0,0,1"))
                     (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "8") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "36")))
                     (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "8") (term "1,0,1,1,1,1,1"))
                     (rule "polySimp_elimSub" (formula "8") (term "1,0,1,1,1,1,1"))
                     (rule "mul_literals" (formula "8") (term "1,1,0,1,1,1,1,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0,0,1,1,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,1,1"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,1,1"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1"))
                     (rule "leq_literals" (formula "8") (term "0,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,1,1"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                     (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,0,1"))
                     (rule "add_literals" (formula "8") (term "1,0,1,0,0,1"))
                     (rule "times_zero_1" (formula "8") (term "0,1,0,0,1"))
                     (rule "qeq_literals" (formula "8") (term "1,0,0,1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,1,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,1,1"))
                     (rule "add_literals" (formula "8") (term "1,0,1,0,1,1,1"))
                     (rule "times_zero_1" (formula "8") (term "0,1,0,1,1,1"))
                     (rule "qeq_literals" (formula "8") (term "1,0,1,1,1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,0"))
                     (rule "add_literals" (formula "8") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "0,0,0"))
                     (rule "qeq_literals" (formula "8") (term "0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1"))
                     (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "8") (term "1,1,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0,0,0,1"))
                     (rule "translateJavaMulInt" (formula "8") (term "0,0,2,1,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,0,2,1,1,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,0,0,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1,1,0,1"))
                     (rule "translateJavaCastInt" (formula "8") (term "0,1,1,0,1"))
                     (rule "castedGetAny" (formula "8") (term "0,1,1,0,1"))
                     (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0,0,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "8") (term "0,0,0,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,0,0,0,1"))
                     (rule "neg_literal" (formula "8") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_elimSub" (formula "8") (term "0,0,0,0,0,0,1"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,1"))
                     (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "11") (term "0,1,1,1,1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0") (ifseqformula "14") (ifseqformula "15"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_imp2or" (formula "13") (term "0,1,1,1,1,1,1"))
                     (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "1,1,0,1"))
                     (rule "translateJavaCastInt" (formula "12") (term "0,1,1,0,1"))
                     (rule "castedGetAny" (formula "12") (term "0,1,1,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,1"))
                     (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "12") (term "1,1,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "12") (term "1,0,1,0,1"))
                     (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")) (ifInst ""  (formula "37")))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                     (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "13") (term "0,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "translateJavaUnaryMinusInt" (formula "13") (term "1,0,1,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "0,0,1,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,0,0,1,0,0,0,1"))
                     (rule "neg_literal" (formula "13") (term "1,0,1,0,0,0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "0,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,1"))
                     (rule "polySimp_addLiterals" (formula "13") (term "0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0,1"))
                     (rule "ifthenelse_split" (formula "15") (term "0"))
                     (branch " self.buffer[1 + bucket * 2] <= -1 + self.buffer[bucket * 2] TRUE"
                        (rule "polySimp_homoEq" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                        (rule "applyEq" (formula "13") (term "1,1,0,0,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq0" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "applyEq" (formula "13") (term "0,0,0,1,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "applyEq" (formula "9") (term "0,1,0,0,1") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0,0,1"))
                        (rule "applyEq" (formula "9") (term "1,1,0,0,0,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "9") (term "0,0,0,1,1") (ifseqformula "16"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1"))
                        (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "10"))
                        (rule "mul_literals" (formula "2") (term "1,1,0"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch " self.buffer[1 + bucket * 2] <= -1 + self.buffer[bucket * 2] FALSE"
                        (rule "eqSymm" (formula "15"))
                        (rule "inEqSimp_leqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "16"))
                        (rule "jdiv_axiom_inline" (formula "12") (term "0"))
                        (rule "times_zero_2" (formula "12") (term "0,0,2,0"))
                        (rule "div_literals" (formula "12") (term "1,0"))
                        (rule "qeq_literals" (formula "12") (term "0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "eqSymm" (formula "12"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "11"))
                        (rule "closeFalse" (formula "11"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "10"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_homoEq" (formula "10"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "9") (term "0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "8")))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0"))
                     (rule "leq_literals" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,1,1,0,0,0,0"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
                     (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
                     (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
                     (rule "translateJavaMulInt" (formula "9") (term "1,0,1,0,0,0,0"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "11"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1"))
                     (rule "castedGetAny" (formula "16") (term "0"))
                     (rule "castedGetAny" (formula "13") (term "0"))
                     (rule "castedGetAny" (formula "12") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                     (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
                     (rule "leq_literals" (formula "9") (term "0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "10"))
                     (rule "greater_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                     (rule "mul_literals" (formula "8") (term "0,1"))
                     (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                     (rule "greater_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "times_zero_1" (formula "10") (term "0,0"))
                     (rule "add_zero_left" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "24") (term "0"))
                     (rule "translateJavaMulInt" (formula "24") (term "0,2,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,2,0"))
                     (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "polySimp_homoEq" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0"))
                     (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "translateJavaMod" (formula "2") (term "0"))
                     (rule "jmod_axiom" (formula "2") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "newSym_eq" (formula "2") (inst "l=l_0") (inst "newSymDef=mul(de.wiesler.BucketPointers::toReadCountOfBucket(heap,
                                                   self,
                                                   bucket),
    Z(0(#)))"))
                     (rule "times_zero_1" (formula "2") (term "1,1"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "leq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "21") (term "0") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "translateJavaCastInt" (formula "21") (term "1,1,0,1,0"))
                     (rule "translateJavaCastInt" (formula "21") (term "0,1,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,1,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,0"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
                     (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "translateJavaMod" (formula "18") (term "0"))
                     (rule "jmod_axiom" (formula "18") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "18"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                     (rule "newSym_eq" (formula "18") (inst "l=l_1") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                     (rule "times_zero_1" (formula "18") (term "1,1"))
                     (rule "add_zero_right" (formula "18") (term "1"))
                     (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "18"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "19"))
                     (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "19"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "19"))
                     (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                     (rule "neg_literal" (formula "15") (term "0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "qeq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
                     (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "16") (ifseqformula "15"))
                     (rule "greater_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "26") (term "1"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                     (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "26")))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                     (rule "applyEq" (formula "1") (term "1,0,1,1,1") (ifseqformula "20"))
                     (rule "applyEq" (formula "1") (term "0,0,0,1,1") (ifseqformula "20"))
                     (rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "27") (term "1"))
                     (rule "translateJavaMulInt" (formula "27") (term "0,2,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,2,1"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b") (userinteraction))
                     (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7") (inst "b=b") (userinteraction))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "8"))
                     (rule "notLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andRight" (formula "20"))
                     (branch "Case 1"
                        (rule "andRight" (formula "20"))
                        (branch "Case 1"
                           (rule "andRight" (formula "20"))
                           (branch "Case 1"
                              (rule "andRight" (formula "20"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "20"))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "16"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "translateJavaCastInt" (formula "14") (term "0"))
                                    (rule "translateJavaAddInt" (formula "13") (term "1"))
                                    (rule "translateJavaMulInt" (formula "7") (term "1"))
                                    (rule "translateJavaMulInt" (formula "8") (term "0"))
                                    (rule "translateJavaCastInt" (formula "10") (term "1"))
                                    (rule "translateJavaCastInt" (formula "11") (term "0"))
                                    (rule "notRight" (formula "20"))
                                    (rule "close" (formula "18") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "20"))
                                    (branch "Case 1"
                                       (rule "close" (formula "20") (ifseqformula "7"))
                                    )
                                    (branch "Case 2"
                                       (rule "close" (formula "20") (ifseqformula "8"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "20"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "20"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "20"))
                                       (branch "Case 1"
                                          (rule "close" (formula "20") (ifseqformula "9"))
                                       )
                                       (branch "Case 2"
                                          (rule "close" (formula "20") (ifseqformula "10"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "close" (formula "20") (ifseqformula "11"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "close" (formula "20") (ifseqformula "12"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "close" (formula "20") (ifseqformula "13"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "20"))
                           (branch "Case 1"
                              (rule "close" (formula "20") (ifseqformula "14"))
                           )
                           (branch "Case 2"
                              (rule "close" (formula "20") (ifseqformula "15"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "20") (inst "sk=b_0") (userinteraction))
                        (rule "instAll" (formula "20") (term "1,0,0,0") (ifseqformula "16") (userinteraction))
                        (rule "impRight" (formula "21") (userinteraction))
                        (rule "unlimit_de_wiesler_BucketPointers_isValidBucketPointerint" (formula "2") (term "0,1") (userinteraction))
                        (rule "impLeft" (formula "2") (userinteraction))
                        (branch "Case 1"
                           (rule "close" (formula "18") (ifseqformula "1"))
                        )
                        (branch "Case 2"
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "unlimit_de_wiesler_BucketPointers_isValidBucketPointerint" (formula "24") (term "0") (userinteraction))
                           (rule "Definition_axiom_for_isValidBucketPointer_in_de_wiesler_BucketPointers" (formula "24") (term "0") (userinteraction))
                           (rule "Definition_axiom_for_isValidBucketPointer_in_de_wiesler_BucketPointers" (formula "4") (term "0") (userinteraction))
                            (builtin "One Step Simplification" (formula "4") (userinteraction))
                            (builtin "One Step Simplification" (formula "24") (userinteraction))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "6"))
                           (rule "andRight" (formula "30"))
                           (branch "Case 1"
                              (rule "andRight" (formula "30"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "30"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "30"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "30"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "21"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "translateJavaCastInt" (formula "23") (term "0"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                          (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1"))
                                          (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                          (rule "translateJavaAddInt" (formula "22") (term "1"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "29") (term "0,2,1"))
                                          (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                          (rule "translateJavaCastInt" (formula "20") (term "0"))
                                          (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                          (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "22") (term "1"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "23") (term "0"))
                                          (rule "castedGetAny" (formula "19") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "20") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_commuteLeq" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,1,0"))
                                          (rule "leq_literals" (formula "17") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=b_0") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,1,0,0,0"))
                                          (rule "qeq_literals" (formula "1") (term "1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "19"))
                                          (rule "greater_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                          (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "20"))
                                          (rule "greater_literals" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                          (rule "mul_literals" (formula "18") (term "0,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "24") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                                          (rule "polySimp_elimOne" (formula "6") (term "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "21") (ifseqformula "22"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                          (rule "greater_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "times_zero_1" (formula "21") (term "0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                          (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "35") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "35")))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "32") (term "0") (inst "i=i") (inst "j=j"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "translateJavaCastInt" (formula "32") (term "1,1,0,1,0"))
                                          (rule "translateJavaCastInt" (formula "32") (term "0,1,0,1,0"))
                                          (rule "castedGetAny" (formula "32") (term "1,1,0,1,0"))
                                          (rule "castedGetAny" (formula "32") (term "0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,1,0"))
                                          (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "30"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1,0"))
                                          (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "translateJavaSubInt" (formula "36") (term "0,1"))
                                          (rule "orRight" (formula "36"))
                                          (rule "notRight" (formula "36"))
                                          (rule "polySimp_elimSub" (formula "37") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "37"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq3" (formula "37") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                          (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0"))
                                          (rule "qeq_literals" (formula "37") (term "0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "false_right" (formula "37"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "30") (term "0"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "translateJavaMod" (formula "30") (term "0"))
                                          (rule "jmod_axiom" (formula "30") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "30"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                          (rule "newSym_eq" (formula "30") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "30") (term "1,1"))
                                          (rule "add_zero_right" (formula "30") (term "1"))
                                          (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "30"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "31"))
                                          (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "28") (term "1") (ifseqformula "31"))
                                          (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                          (rule "elimGcdLeq_antec" (formula "27") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "27") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "neg_literal" (formula "27") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "27") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "elimGcdGeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,1,0"))
                                          (rule "leq_literals" (formula "26") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0"))
                                          (rule "leq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "29"))
                                          (rule "polySimp_mulAssoc" (formula "28") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "inEqSimp_subsumption4" (formula "28") (ifseqformula "27"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0"))
                                          (rule "greater_literals" (formula "28") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0,1,0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "38")))
                                          (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,1,1,1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,1,1,1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,1,1,1"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,1,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,1,1"))
                                          (rule "qeq_literals" (formula "13") (term "0,1,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,0"))
                                          (rule "translateJavaCastInt" (formula "14") (term "0,1,0"))
                                          (rule "eqSymm" (formula "14") (term "0"))
                                          (rule "castedGetAny" (formula "14") (term "0,0,0"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "translateJavaMod" (formula "15") (term "0"))
                                          (rule "jmod_axiom" (formula "15") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "newSym_eq" (formula "15") (inst "l=l_1") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(mul(b_0, Z(2(#))))),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "15") (term "1,1"))
                                          (rule "add_zero_right" (formula "15") (term "1"))
                                          (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteGeq" (formula "8"))
                                          (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "9"))
                                          (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "16"))
                                          (rule "elimGcdGeq" (formula "14") (term "1") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1"))
                                          (rule "mul_literals" (formula "14") (term "0,0,0,0,0,1,0,1"))
                                          (rule "sub_literals" (formula "14") (term "0,0,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,1,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,1,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,1,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,0,1,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "0,1,0,1"))
                                          (rule "leq_literals" (formula "14") (term "1,0,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                          (rule "qeq_literals" (formula "14") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "8"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "1"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "41")))
                                          (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "1,1,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                          (rule "times_zero_2" (formula "13") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1"))
                                          (rule "translateJavaCastInt" (formula "14") (term "0,1"))
                                          (rule "castedGetAny" (formula "14") (term "0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "translateJavaMod" (formula "19") (term "0"))
                                          (rule "jmod_axiom" (formula "19") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "19"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                          (rule "newSym_eq" (formula "19") (inst "l=l_2") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(b_0, Z(2(#)))))),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "19") (term "1,1"))
                                          (rule "add_zero_right" (formula "19") (term "1"))
                                          (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
                                          (rule "eqSymm" (formula "20"))
                                          (rule "applyEq" (formula "14") (term "1") (ifseqformula "20"))
                                          (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "20"))
                                          (rule "inEqSimp_commuteGeq" (formula "12"))
                                          (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "12"))
                                          (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0"))
                                          (rule "translateJavaCastInt" (formula "6") (term "0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "40") (term "0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "40") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "0"))
                                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "44")))
                                          (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1,1"))
                                          (rule "replace_known_left" (formula "12") (term "1,1,1,1,1") (ifseqformula "13"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "12") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")))
                                          (rule "true_left" (formula "12"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                                          (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                                          (rule "castedGetAny" (formula "12") (term "0,0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1"))
                                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "44")))
                                          (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "12") (term "0,0,1,1,1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "12") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "12") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1"))
                                          (rule "translateJavaCastInt" (formula "13") (term "0,1"))
                                          (rule "castedGetAny" (formula "13") (term "0,1"))
                                          (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,0,1,1"))
                                          (rule "translateJavaSubInt" (formula "2") (term "1,0,0,0,1,1"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,0,0,0,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0,1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,1,1"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,1,1"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0,0,1,1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "1") (term "0"))
                                          (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "24"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "45")))
                                          (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "28"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "2") (term "0"))
                                          (rule "translateJavaAddInt" (formula "2") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "2") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "0,0,2,0"))
                                          (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                          (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "2") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0,1"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")) (ifInst ""  (formula "46")))
                                          (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
                                          (rule "applyEq" (formula "2") (term "0,0,0,1,1") (ifseqformula "40"))
                                          (rule "inEqSimp_commuteGeq" (formula "2") (term "0,0,1,1"))
                                          (rule "applyEq" (formula "2") (term "1,0,1,1,1") (ifseqformula "40"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "3") (term "1,1"))
                                          (rule "translateJavaMulInt" (formula "3") (term "0,2,1,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1"))
                                          (rule "arrayLengthIsAShort" (formula "34") (term "1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "lenNonNegative" (formula "41") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "41"))
                                          (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                          (rule "mul_literals" (formula "41") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "33"))
                                          (rule "leq_literals" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "arrayLengthNotNegative" (formula "34") (term "1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,1,0,1"))
                                          (rule "translateJavaCastInt" (formula "19") (term "0,0,1,0,1"))
                                          (rule "castedGetAny" (formula "19") (term "0,0,1,0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "1,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "47")))
                                          (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "19") (term "0,0,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "19") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")))
                                          (rule "true_left" (formula "19"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "47")))
                                          (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "19") (term "0,0,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "19") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")))
                                          (rule "true_left" (formula "19"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "19") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "45")))
                                          (rule "translateJavaCastInt" (formula "19") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "0,0,1,0,0"))
                                          (rule "translateJavaMulInt" (formula "19") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "19") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "1,0,0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "castedGetAny" (formula "19") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "1,0,1,0,0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "castedGetAny" (formula "19") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "0,1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "castedGetAny" (formula "19") (term "1,1,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,0,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "19") (term "1,1,0,1,0,0,0") (ifseqformula "40"))
                                          (rule "replace_known_left" (formula "19") (term "1,0,1,0,0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,0,0,0") (ifseqformula "40"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "19") (term "0,0,0,0") (ifseqformula "33"))
                                          (rule "greater_literals" (formula "19") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption6" (formula "19") (term "0,0,0,0") (ifseqformula "35"))
                                          (rule "greater_literals" (formula "19") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "seqGetAlphaCast" (formula "42") (term "0"))
                                          (rule "castedGetAny" (formula "42") (term "0"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                                          (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                                          (rule "castedGetAny" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                                          (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                          (rule "polySimp_elimOne" (formula "8") (term "0"))
                                          (rule "seqGetAlphaCast" (formula "38") (term "0"))
                                          (rule "castedGetAny" (formula "38") (term "0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "47")))
                                          (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "13") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                          (rule "times_zero_2" (formula "13") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                          (rule "inEqSimp_invertInEq0" (formula "13") (term "0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "13") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "0,1,1,1,1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0"))
                                          (rule "translateJavaCastInt" (formula "14") (term "0,0"))
                                          (rule "castedGetAny" (formula "14") (term "0,0"))
                                          (rule "commute_or" (formula "21"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,1,1,1,1"))
                                          (rule "translateJavaCastInt" (formula "18") (term "0,0,1,1,1,1"))
                                          (rule "castedGetAny" (formula "18") (term "0,0,1,1,1,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "48")))
                                          (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                          (rule "times_zero_2" (formula "18") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_invertInEq0" (formula "18") (term "0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "18") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "18") (term "0,1,1,1,1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "18") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
                                          (rule "true_left" (formula "18"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,0,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "18") (term "0,0,0,0,0,1"))
                                          (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "48")))
                                          (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "18") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "1,1,0,0,0,1,1,1"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0,0,1,1,1"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "leq_literals" (formula "18") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1,1"))
                                          (rule "add_literals" (formula "18") (term "1,0,1,0,1,1,1"))
                                          (rule "times_zero_1" (formula "18") (term "0,1,0,1,1,1"))
                                          (rule "qeq_literals" (formula "18") (term "1,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,0,1"))
                                          (rule "add_literals" (formula "18") (term "1,0,1,0,0,1"))
                                          (rule "times_zero_1" (formula "18") (term "0,1,0,0,1"))
                                          (rule "qeq_literals" (formula "18") (term "1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "18") (term "0,0,0"))
                                          (rule "add_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "0,0,0"))
                                          (rule "qeq_literals" (formula "18") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "translateJavaMod" (formula "19") (term "0,0,1,1"))
                                          (rule "jmod_axiom" (formula "19") (term "0,0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,1,1"))
                                          (rule "polySimp_sepNegMonomial" (formula "19") (term "0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "translateJavaSubInt" (formula "20") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "20") (term "0,0,0"))
                                          (rule "neg_literal" (formula "20") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "20") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
                                          (rule "translateJavaCastInt" (formula "17") (term "0,0"))
                                          (rule "castedGetAny" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "17"))
                                          (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                          (rule "polySimp_elimOne" (formula "8") (term "0"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "translateJavaSubInt" (formula "8") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "8") (term "0,0,0"))
                                          (rule "neg_literal" (formula "8") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "8") (term "0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "8") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                                          (rule "jdiv_axiom" (formula "41") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "41"))
                                          (rule "applyEqRigid" (formula "41") (term "1") (ifseqformula "42"))
                                          (rule "inEqSimp_subsumption6" (formula "41") (term "0,0") (ifseqformula "37"))
                                          (rule "greater_literals" (formula "41") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                                          (rule "leq_literals" (formula "41") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "polyDiv_pullOut" (formula "41") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,2,0"))
                                          (rule "equal_literals" (formula "41") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "polySimp_homoEq" (formula "41"))
                                          (rule "polySimp_pullOutFactor0" (formula "41") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "41") (term "1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "41") (term "0,0,0,1,0"))
                                          (rule "div_literals" (formula "41") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "41") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "41") (term "0"))
                                          (rule "add_literals" (formula "41") (term "1,0"))
                                          (rule "times_zero_1" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
                                          (rule "neg_literal" (formula "16") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0,1,0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "49")))
                                          (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "15") (term "0,0,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "15") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")))
                                          (rule "true_left" (formula "15"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0,1,1,1,1,1"))
                                          (rule "translateJavaCastInt" (formula "15") (term "0,0,1,1,1,1,1"))
                                          (rule "castedGetAny" (formula "15") (term "0,0,1,1,1,1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "1,1,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "15") (term "0,1,1,0,0,1"))
                                          (rule "castedGetAny" (formula "15") (term "0,1,1,0,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "1,1,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "49")))
                                          (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "15") (term "0,0,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "15") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "1,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "50")))
                                          (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "16") (term "0,0,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                                          (rule "true_left" (formula "16"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0,1,1"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,0,0,0,1,1"))
                                          (rule "castedGetAny" (formula "16") (term "0,0,0,0,1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,1,1,1,1"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,1,1,1,1,1,1"))
                                          (rule "castedGetAny" (formula "16") (term "0,1,1,1,1,1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,1,1,1"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "castedGetAny" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "16") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "48")))
                                          (rule "translateJavaAddInt" (formula "16") (term "1,1,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "16") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "1,0,0,0,0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "castedGetAny" (formula "16") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "0,1,0,0") (ifseqformula "45"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "castedGetAny" (formula "16") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "1,0,1,0,0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "castedGetAny" (formula "16") (term "1,1,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "16") (term "1,1,0,1,0,0,0") (ifseqformula "43"))
                                          (rule "replace_known_left" (formula "16") (term "1,0,1,0,0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "applyEq" (formula "16") (term "0,0,1,1,0,0,0") (ifseqformula "43"))
                                          (rule "applyEq" (formula "16") (term "0,0,1,0,0,0") (ifseqformula "43"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "16") (term "0,0,0,0") (ifseqformula "36"))
                                          (rule "greater_literals" (formula "16") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "16") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_subsumption6" (formula "16") (term "0,0,0,0") (ifseqformula "38"))
                                          (rule "greater_literals" (formula "16") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "16") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "48")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,1,0,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "45"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "castedGetAny" (formula "4") (term "1,1,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "4") (term "1,1,0,1,0,0,0") (ifseqformula "43"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,0") (ifseqformula "43"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,0,0,0") (ifseqformula "43"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "36"))
                                          (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "38"))
                                          (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "jdiv_axiom" (formula "24") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "25"))
                                          (rule "elimGcdGeq" (formula "24") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "sub_literals" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,0,0,1,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "24") (term "0,1,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0,0,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polyDiv_pullOut" (formula "24") (term "0,2,0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0,2,0"))
                                          (rule "equal_literals" (formula "24") (term "0,0,2,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,2,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,0,2,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,0,0,2,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,0,0,2,0"))
                                          (rule "div_literals" (formula "24") (term "0,0,2,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,2,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "2,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "2,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polyDiv_pullOut" (formula "24") (term "0,1") (inst "polyDivCoeff=l_1"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0,1"))
                                          (rule "equal_literals" (formula "24") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polySimp_homoEq" (formula "24") (term "1"))
                                          (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,0,1,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,0,0,0,1,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "0,0,0,1,0,1"))
                                          (rule "div_literals" (formula "24") (term "0,0,1,0,1"))
                                          (rule "add_zero_left" (formula "24") (term "0,1,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1"))
                                          (rule "add_literals" (formula "24") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0,1,0,1"))
                                          (rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,1"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,0,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "1,1,0,1"))
                                          (rule "translateJavaCastInt" (formula "1") (term "0,1,1,0,1"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,1,0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0,0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                                          (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,1,1") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "35"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,1,1,1,1") (ifseqformula "35"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "1") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "2") (term "0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "2") (term "1,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "2") (term "1,0,1,0,1"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "30")) (ifInst ""  (formula "51")))
                                          (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "1,1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                          (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "3") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "3") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "3") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "3") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                                          (rule "times_zero_2" (formula "3") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                          (rule "inEqSimp_invertInEq0" (formula "3") (term "0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "3") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "3") (term "0,1,1,1,1") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0"))
                                          (rule "mul_literals" (formula "3") (term "1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "35"))
                                          (rule "leq_literals" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,1,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "53")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "4") (term "0,0,1,1,1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "4") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                          (rule "true_left" (formula "4"))
                                          (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "4") (term "0,0,0,1,1"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,0,1,0,1"))
                                          (rule "replace_known_right" (formula "4") (term "0,1,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                                          (rule "true_left" (formula "4"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1,1,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,1,1,0,0,1"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,0,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,0,0,0,0,0,1"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0,1"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "51")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,1,0,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "4") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "47"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "castedGetAny" (formula "4") (term "1,1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,0") (ifseqformula "46"))
                                          (rule "applyEq" (formula "4") (term "1,1,0,1,0,0,0") (ifseqformula "46"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,0,0,0") (ifseqformula "46"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "4") (term "0,1,0,0,0") (ifseqformula "41"))
                                          (rule "greater_literals" (formula "4") (term "0,0,0,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,0"))
                                          (rule "leq_literals" (formula "4") (term "0,0,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_subsumption6" (formula "4") (term "0,0,0,0") (ifseqformula "39"))
                                          (rule "greater_literals" (formula "4") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "bucket = b_0 TRUE"
                                             (rule "applyEqReverse" (formula "12") (term "1,1") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "9"))
                                             (rule "hideAuxiliaryEq" (formula "9"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "1"))
                                             (rule "add_literals" (formula "11") (term "0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "10"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                             (rule "mul_literals" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                             (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "9"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0,0"))
                                             (rule "applyEq" (formula "7") (term "2,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "1,1,0,0,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "2,0,1,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "1,1,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,1,1,0,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "6") (term "0,1,0,2,0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "6"))
                                             (rule "polySimp_addComm1" (formula "6") (term "0"))
                                             (rule "applyEq" (formula "2") (term "2,0,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "2,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "2,0,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "1,1,1,1,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "2") (term "2,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "2,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "2,1,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "10") (term "0,0,2,0,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,1,0,0,1,1,1") (ifseqformula "8"))
                                             (rule "inEqSimp_commuteGeq" (formula "1") (term "0,1,1,1"))
                                             (rule "applyEq" (formula "2") (term "1,1,1,1,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "2") (term "2,0,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "1,1,0,1,1,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "35") (term "0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "2,0,0,0,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,1,1,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "2") (term "1,1,1,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "1,1,1,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,1,0,1,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,0,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "1,1,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "0,0,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "2,0,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,0,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,1,0,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "35") (term "0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,1,1,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "7") (term "2,0,1,0,0,0,1,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "5") (term "2,0,1,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "1") (term "1,1,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "3") (term "1,1,1,1,0,0,1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "4") (term "1,1,1,0,1,1") (ifseqformula "7"))
                                             (rule "applyEq" (formula "6") (term "2,0,0,0,0,1,1") (ifseqformula "7"))
                                             (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "27"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0"))
                                             (rule "add_literals" (formula "8") (term "0"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "26"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "26"))
                                             (rule "applyEq" (formula "1") (term "1,0,0,1,1,1") (ifseqformula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
                                             (rule "applyEq" (formula "4") (term "0,0,2,1,0") (ifseqformula "6"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "27"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "25"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                             (rule "mul_literals" (formula "4") (term "0,1"))
                                             (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                             (rule "leq_literals" (formula "4") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                                             (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0"))
                                             (rule "leq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "inEqSimp_contradInEq5" (formula "7") (ifseqformula "4"))
                                             (rule "greater_literals" (formula "7") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1"))
                                             (rule "mul_literals" (formula "7") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                          (branch "bucket = b_0 FALSE"
                                             (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "8"))
                                             (rule "applyEqReverse" (formula "9") (term "0") (ifseqformula "8"))
                                             (rule "applyEqReverse" (formula "11") (term "1,1") (ifseqformula "8"))
                                             (rule "hideAuxiliaryEq" (formula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0"))
                                             (rule "add_zero_right" (formula "8") (term "0"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "21"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "translateJavaCastInt" (formula "23") (term "0"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                          (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1"))
                                          (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                          (rule "translateJavaAddInt" (formula "22") (term "1"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                          (rule "translateJavaAddInt" (formula "29") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "29") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                          (rule "translateJavaCastInt" (formula "20") (term "0"))
                                          (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                          (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "22") (term "1"))
                                          (rule "polySimp_addComm0" (formula "29") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "23") (term "0"))
                                          (rule "castedGetAny" (formula "19") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "20") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_commuteLeq" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "17") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=b_0") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "leq_literals" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "17") (ifseqformula "19"))
                                          (rule "greater_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1"))
                                          (rule "mul_literals" (formula "17") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "23") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1"))
                                          (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "21"))
                                          (rule "greater_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                          (rule "inEqSimp_exactShadow2" (formula "21") (ifseqformula "22"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                          (rule "greater_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "times_zero_1" (formula "21") (term "0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                          (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "36") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "36")))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "37") (term "0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "translateJavaSubInt" (formula "37") (term "0,1"))
                                          (rule "orRight" (formula "37"))
                                          (rule "notRight" (formula "37"))
                                          (rule "polySimp_elimSub" (formula "38") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "38"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0"))
                                          (rule "qeq_literals" (formula "38") (term "0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "false_right" (formula "38"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "31") (term "0"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "translateJavaMod" (formula "31") (term "0"))
                                          (rule "jmod_axiom" (formula "31") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "31"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                          (rule "newSym_eq" (formula "31") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "31") (term "1,1"))
                                          (rule "add_zero_right" (formula "31") (term "1"))
                                          (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "31"))
                                          (rule "eqSymm" (formula "32"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                                          (rule "applyEq" (formula "27") (term "0") (ifseqformula "32"))
                                          (rule "applyEq" (formula "29") (term "1") (ifseqformula "32"))
                                          (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "32"))
                                          (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "32"))
                                          (rule "elimGcdGeq_antec" (formula "27") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "27") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0"))
                                          (rule "leq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "elimGcdLeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
                                          (rule "neg_literal" (formula "28") (term "0,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "28") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "28") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                                          (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0"))
                                          (rule "qeq_literals" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "30"))
                                          (rule "polySimp_mulAssoc" (formula "29") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "inEqSimp_subsumption4" (formula "29") (ifseqformula "28"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0"))
                                          (rule "greater_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "leq_literals" (formula "29") (term "0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "35") (term "0") (inst "i=i") (inst "j=j"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "translateJavaCastInt" (formula "35") (term "0,1,0,1,0"))
                                          (rule "translateJavaCastInt" (formula "35") (term "1,1,0,1,0"))
                                          (rule "castedGetAny" (formula "35") (term "0,1,0,1,0"))
                                          (rule "castedGetAny" (formula "35") (term "1,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0"))
                                          (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "33"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "33"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,0"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,0"))
                                          (rule "translateJavaCastInt" (formula "14") (term "0,1,0"))
                                          (rule "eqSymm" (formula "14") (term "0"))
                                          (rule "castedGetAny" (formula "14") (term "0,0,0"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "translateJavaMod" (formula "15") (term "0"))
                                          (rule "jmod_axiom" (formula "15") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "newSym_eq" (formula "15") (inst "l=l_1") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(mul(b_0, Z(2(#))))),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "15") (term "1,1"))
                                          (rule "add_zero_right" (formula "15") (term "1"))
                                          (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "11"))
                                          (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_commuteGeq" (formula "10"))
                                          (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "16"))
                                          (rule "elimGcdGeq" (formula "14") (term "1") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1"))
                                          (rule "sub_literals" (formula "14") (term "0,0,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "14") (term "0,0,0,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,1,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,1,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,1,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,0,1,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "0,1,0,1"))
                                          (rule "leq_literals" (formula "14") (term "1,0,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                          (rule "qeq_literals" (formula "14") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "4"))
                                          (rule "polySimp_mulAssoc" (formula "11") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                          (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1"))
                                          (rule "mul_literals" (formula "11") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1"))
                                          (rule "translateJavaCastInt" (formula "14") (term "0,1"))
                                          (rule "castedGetAny" (formula "14") (term "0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "translateJavaMod" (formula "18") (term "0"))
                                          (rule "jmod_axiom" (formula "18") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "18"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                          (rule "newSym_eq" (formula "18") (inst "l=l_2") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(b_0, Z(2(#)))))),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "18") (term "1,1"))
                                          (rule "add_zero_right" (formula "18") (term "1"))
                                          (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "18"))
                                          (rule "eqSymm" (formula "19"))
                                          (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                                          (rule "applyEq" (formula "14") (term "1") (ifseqformula "19"))
                                          (rule "applyEq" (formula "13") (term "0") (ifseqformula "19"))
                                          (rule "inEqSimp_commuteGeq" (formula "13"))
                                          (rule "nnf_imp2or" (formula "38") (term "0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "42")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1,1"))
                                          (rule "replace_known_left" (formula "4") (term "1,1,1,1,1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
                                          (rule "times_zero_2" (formula "4") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,0"))
                                          (rule "castedGetAny" (formula "5") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "5"))
                                          (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                          (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                          (rule "mul_literals" (formula "15") (term "0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "44")))
                                          (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
                                          (rule "replace_known_left" (formula "10") (term "1,1,1,1,1") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                          (rule "times_zero_2" (formula "10") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
                                          (rule "true_left" (formula "10"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
                                          (rule "translateJavaCastInt" (formula "10") (term "0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "5"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "10") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "1"))
                                           (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "44")))
                                          (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "10") (term "0,0,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "8"))
                                          (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                          (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "10") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "1"))
                                          (rule "translateJavaCastInt" (formula "11") (term "0,1"))
                                          (rule "castedGetAny" (formula "11") (term "0,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "5"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "11") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "0"))
                                          (rule "translateJavaCastInt" (formula "9") (term "0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                          (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "2") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                                          (rule "translateJavaCastInt" (formula "2") (term "0,0,1,0,0"))
                                          (rule "translateJavaCastInt" (formula "2") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaAddInt" (formula "2") (term "1,1,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "2") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,1,0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "castedGetAny" (formula "2") (term "1,1,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "2") (term "0,0,1,1,0,0,0") (ifseqformula "38"))
                                          (rule "applyEq" (formula "2") (term "1,1,0,1,0,0,0") (ifseqformula "38"))
                                          (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEq" (formula "2") (term "0,0,1,0,0,0") (ifseqformula "38"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "2") (term "0,1,0,0,0") (ifseqformula "33"))
                                          (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0,0"))
                                          (rule "greater_literals" (formula "2") (term "0,0,0,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "leq_literals" (formula "2") (term "0,0,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "inEqSimp_subsumption6" (formula "2") (term "0,0,0,0") (ifseqformula "31"))
                                          (rule "times_zero_1" (formula "2") (term "1,1,0,0,0,0,0"))
                                          (rule "greater_literals" (formula "2") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "leq_literals" (formula "2") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
                                          (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                                          (rule "translateJavaMulInt" (formula "1") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                          (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "1") (term "1,1"))
                                          (rule "translateJavaMulInt" (formula "1") (term "0,2,1,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                                          (rule "lenNonNegative" (formula "39") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "39"))
                                          (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                          (rule "mul_literals" (formula "39") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "31"))
                                          (rule "leq_literals" (formula "39") (term "0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "true_left" (formula "39"))
                                          (rule "arrayLengthIsAShort" (formula "32") (term "1"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "arrayLengthNotNegative" (formula "32") (term "1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "45")))
                                          (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "14") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "14") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "14") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "14") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "14") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "14") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                          (rule "times_zero_2" (formula "14") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_invertInEq0" (formula "14") (term "0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "14") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "14") (term "0,1,1,1,1") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "14") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0"))
                                          (rule "translateJavaCastInt" (formula "15") (term "0,0"))
                                          (rule "castedGetAny" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "5"))
                                          (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                          (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1"))
                                          (rule "mul_literals" (formula "15") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                                          (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                                          (rule "castedGetAny" (formula "12") (term "0,0"))
                                          (rule "commute_or" (formula "19"))
                                          (rule "nnf_notAnd" (formula "42") (term "0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "42") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,1,0"))
                                          (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                          (rule "castedGetAny" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "translateJavaSubInt" (formula "18") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "18") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "18") (term "0,0,0"))
                                          (rule "neg_literal" (formula "18") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "18") (term "0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "18") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                          (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                          (rule "castedGetAny" (formula "37") (term "0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                          (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "16") (term "0,0,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "8"))
                                          (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                          (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                          (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "9")))
                                          (rule "true_left" (formula "16"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0"))
                                          (rule "translateJavaCastInt" (formula "16") (term "0,0"))
                                          (rule "castedGetAny" (formula "16") (term "0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,1,0"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1,1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "46")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "4") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
                                          (rule "times_zero_2" (formula "4") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_invertInEq0" (formula "4") (term "0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "4") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "4") (term "0,1,1,1,1") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "15")))
                                          (rule "true_left" (formula "4"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "0,1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "46")))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "1,1,0,0,0,1,1,1"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "leq_literals" (formula "4") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "33"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,0,1"))
                                          (rule "add_literals" (formula "4") (term "1,0,1,0,0,1"))
                                          (rule "times_zero_1" (formula "4") (term "0,1,0,0,1"))
                                          (rule "qeq_literals" (formula "4") (term "1,0,0,1"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,1,1,1"))
                                          (rule "add_literals" (formula "4") (term "1,0,1,0,1,1,1"))
                                          (rule "times_zero_1" (formula "4") (term "0,1,0,1,1,1"))
                                          (rule "qeq_literals" (formula "4") (term "1,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0"))
                                          (rule "add_literals" (formula "4") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "0,0,0"))
                                          (rule "qeq_literals" (formula "4") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,0,1"))
                                          (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,1"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "1,1,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,1,1,0,0,1"))
                                          (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "1,1,1,1,1"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "47")))
                                          (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,1,1,1,1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                                          (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_invertInEq0" (formula "5") (term "0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "5") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "5") (term "0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
                                          (rule "mul_literals" (formula "5") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (term "0,0") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "5") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")))
                                          (rule "true_left" (formula "5"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,1,1,1"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "castedGetAny" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "5") (term "0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "47")))
                                          (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,1,1,1"))
                                          (rule "translateJavaSubInt" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "mul_literals" (formula "5") (term "1,1,0,1,1,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "1,1,1,0,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,1,1,1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,1,0,1,1,1,1,1"))
                                          (rule "add_zero_left" (formula "5") (term "1,0,1,1,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "add_zero_right" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,1,1,1"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,0,1,1,1,1"))
                                          (rule "add_zero_left" (formula "5") (term "0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,1,1,1,1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,1,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                                          (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                          (rule "inEqSimp_invertInEq0" (formula "5") (term "0,1,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "times_zero_2" (formula "5") (term "1,0,1,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "5") (term "0,1,1,1,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
                                          (rule "mul_literals" (formula "5") (term "1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (term "0,0") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "5") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")))
                                          (rule "true_left" (formula "5"))
                                          (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,0,1"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,0,0,0,0,1"))
                                          (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,1"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "5") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "45")))
                                          (rule "translateJavaMulInt" (formula "5") (term "1,0,0,0,0,0,0"))
                                          (rule "translateJavaMulInt" (formula "5") (term "0,1,0,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "5") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,1,0,1,0,0,0,0"))
                                          (rule "translateJavaAddInt" (formula "5") (term "1,1,0,0,0"))
                                          (rule "translateJavaCastInt" (formula "5") (term "0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "castedGetAny" (formula "5") (term "0,1,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "castedGetAny" (formula "5") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "castedGetAny" (formula "5") (term "1,1,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,0,0,0"))
                                          (rule "applyEq" (formula "5") (term "0,0,0,1,0,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "5") (term "1,1,0,1,0,0,0") (ifseqformula "40"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "applyEq" (formula "5") (term "0,0,1,1,0,0,0") (ifseqformula "40"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "33"))
                                          (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "inEqSimp_subsumption6" (formula "5") (term "0,0,0,0") (ifseqformula "35"))
                                          (rule "greater_literals" (formula "5") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "5") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "translateJavaSubInt" (formula "6") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "6") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "6") (term "0,0,0"))
                                          (rule "neg_literal" (formula "6") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "6") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                                          (rule "polySimp_mulAssoc" (formula "19") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1"))
                                          (rule "mul_literals" (formula "19") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                          (rule "jdiv_axiom" (formula "39") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "applyEqRigid" (formula "39") (term "1") (ifseqformula "40"))
                                          (rule "inEqSimp_subsumption6" (formula "39") (term "0,0") (ifseqformula "35"))
                                          (rule "greater_literals" (formula "39") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                                          (rule "leq_literals" (formula "39") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "polyDiv_pullOut" (formula "39") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,2,0"))
                                          (rule "equal_literals" (formula "39") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0"))
                                          (rule "add_literals" (formula "39") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "0,0,0"))
                                          (rule "div_literals" (formula "39") (term "0,0"))
                                          (rule "add_zero_left" (formula "39") (term "0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "true_left" (formula "39"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "translateJavaSubInt" (formula "12") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "12") (term "0,0,0"))
                                          (rule "neg_literal" (formula "12") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "12") (term "0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "12") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "6"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "12") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0"))
                                          (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "10") (term "0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "translateJavaMod" (formula "10") (term "0,0,1,1"))
                                          (rule "jmod_axiom" (formula "10") (term "0,0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1,1"))
                                          (rule "polySimp_sepNegMonomial" (formula "10") (term "0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1"))
                                          (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "11") (term "0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "translateJavaSubInt" (formula "11") (term "0,0"))
                                          (rule "translateJavaUnaryMinusInt" (formula "11") (term "1,0"))
                                          (rule "translateJavaAddInt" (formula "11") (term "0,0,0"))
                                          (rule "neg_literal" (formula "11") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "11") (term "0,0"))
                                          (rule "mul_literals" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_addLiterals" (formula "11") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                                          (rule "jdiv_axiom" (formula "21") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "21"))
                                          (rule "applyEqRigid" (formula "21") (term "1") (ifseqformula "22"))
                                          (rule "polyDiv_pullOut" (formula "21") (term "1,0") (inst "polyDivCoeff=l_1"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,2,1,0"))
                                          (rule "equal_literals" (formula "21") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "polySimp_pullOutFactor0" (formula "21") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "21") (term "1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "21") (term "0,0,1,0"))
                                          (rule "div_literals" (formula "21") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "21") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "polySimp_homoEq" (formula "21") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "21") (term "1"))
                                          (rule "polyDiv_pullOut" (formula "21") (term "0,1") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                                          (rule "equal_literals" (formula "21") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "21") (term "1"))
                                          (rule "polySimp_pullOutFactor0" (formula "21") (term "0,0,0,1,0,1"))
                                          (rule "add_literals" (formula "21") (term "1,0,0,0,1,0,1"))
                                          (rule "times_zero_1" (formula "21") (term "0,0,0,1,0,1"))
                                          (rule "div_literals" (formula "21") (term "0,0,1,0,1"))
                                          (rule "add_zero_left" (formula "21") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "21") (term "0,1"))
                                          (rule "add_literals" (formula "21") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "21") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0"))
                                          (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "bucket = b_0 TRUE"
                                             (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "12") (term "1,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "1"))
                                             (rule "add_literals" (formula "11") (term "0,1"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                             (rule "add_literals" (formula "6") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "18"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "14"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                             (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "18") (term "0,0,2,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "2") (term "2,0,0,0,1,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq0" (formula "1"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "6") (term "0,0,2,1,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "14") (term "0,0,2,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "30") (term "0,1,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,1,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "2") (term "2,0,0,1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "22"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                             (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "22"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,1,0") (ifseqformula "3"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "22"))
                                             (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "22"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                                             (rule "add_literals" (formula "14") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "14") (term "1,0"))
                                             (rule "add_literals" (formula "14") (term "0"))
                                             (rule "leq_literals" (formula "14"))
                                             (rule "closeFalse" (formula "14"))
                                          )
                                          (branch "bucket = b_0 FALSE"
                                             (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "11") (term "1,1") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
                                             (rule "add_literals" (formula "13") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0"))
                                             (rule "add_zero_right" (formula "13") (term "0"))
                                             (rule "leq_literals" (formula "13"))
                                             (rule "closeFalse" (formula "13"))
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "30"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "21"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "translateJavaAddInt" (formula "22") (term "1"))
                                          (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                          (rule "translateJavaAddInt" (formula "29") (term "0,2,1"))
                                          (rule "translateJavaCastInt" (formula "23") (term "0"))
                                          (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                          (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                          (rule "translateJavaCastInt" (formula "20") (term "0"))
                                          (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "29") (term "0,0,2,1"))
                                          (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                          (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "22") (term "1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "0,2,1"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "23") (term "0"))
                                          (rule "castedGetAny" (formula "19") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "20") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_commuteLeq" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "17") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=add(Z(0(#)), b_0)") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,1,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                          (rule "equal_literals" (formula "1") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                          (rule "leq_literals" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "21"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "translateJavaAddInt" (formula "29") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "29") (term "1,1"))
                                          (rule "translateJavaCastInt" (formula "23") (term "0"))
                                          (rule "translateJavaAddInt" (formula "22") (term "1"))
                                          (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                          (rule "translateJavaCastInt" (formula "19") (term "1"))
                                          (rule "translateJavaMulInt" (formula "17") (term "0"))
                                          (rule "translateJavaMulInt" (formula "16") (term "1"))
                                          (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                          (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                          (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                          (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                          (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                          (rule "translateJavaCastInt" (formula "20") (term "0"))
                                          (rule "translateJavaMulInt" (formula "29") (term "0,0,2,0"))
                                          (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                          (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                          (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "29") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "22") (term "1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "29") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "23") (term "0"))
                                          (rule "castedGetAny" (formula "19") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "20") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_commuteLeq" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "17") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=add(Z(0(#)), b_0)") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "1,1,0,1,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                          (rule "leq_literals" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                          (rule "equal_literals" (formula "1") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "30"))
                                     (builtin "One Step Simplification" (formula "26"))
                                     (builtin "One Step Simplification" (formula "21"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "translateJavaCastInt" (formula "23") (term "0"))
                                    (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "22") (term "1"))
                                    (rule "translateJavaMulInt" (formula "29") (term "0,2,1"))
                                    (rule "translateJavaMulInt" (formula "30") (term "0,2,0"))
                                    (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                    (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                    (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                    (rule "translateJavaCastInt" (formula "19") (term "1"))
                                    (rule "translateJavaMulInt" (formula "17") (term "0"))
                                    (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                    (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                    (rule "translateJavaMulInt" (formula "16") (term "1"))
                                    (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                    (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                    (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                    (rule "translateJavaCastInt" (formula "20") (term "0"))
                                    (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                    (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                    (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "eqSymm" (formula "7") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "22") (term "1"))
                                    (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                    (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                    (rule "castedGetAny" (formula "23") (term "0"))
                                    (rule "castedGetAny" (formula "19") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "20") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "30"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "inEqSimp_commuteLeq" (formula "19"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "inEqSimp_commuteLeq" (formula "6"))
                                    (rule "inEqSimp_commuteLeq" (formula "20"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "17") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                    (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0"))
                                    (rule "leq_literals" (formula "17") (term "0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_0"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=b_0") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1"))
                                    (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "20"))
                                    (rule "greater_literals" (formula "18") (term "0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                    (rule "mul_literals" (formula "18") (term "0,1"))
                                    (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "21"))
                                    (rule "greater_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1"))
                                    (rule "inEqSimp_exactShadow2" (formula "21") (ifseqformula "22"))
                                    (rule "greater_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "24") (term "0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                    (rule "mul_literals" (formula "24") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "27"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "26") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "33") (term "0"))
                                    (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                    (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "translateJavaMod" (formula "29") (term "0"))
                                    (rule "jmod_axiom" (formula "29") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                    (rule "newSym_eq" (formula "29") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                                    (rule "times_zero_1" (formula "29") (term "1,1"))
                                    (rule "add_zero_right" (formula "29") (term "1"))
                                    (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "29"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "30"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "30"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "applyEq" (formula "27") (term "1") (ifseqformula "30"))
                                    (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "30"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "elimGcdLeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,1,0"))
                                    (rule "neg_literal" (formula "26") (term "0,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "26") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "26") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elimGcdGeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "25") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                                    (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0"))
                                    (rule "leq_literals" (formula "25") (term "0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
                                    (rule "polySimp_mulAssoc" (formula "27") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "27") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                                    (rule "inEqSimp_subsumption4" (formula "27") (ifseqformula "26"))
                                    (rule "greater_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "mul_literals" (formula "27") (term "0,0"))
                                    (rule "leq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "translateJavaSubInt" (formula "37") (term "0,1"))
                                    (rule "orRight" (formula "37"))
                                    (rule "notRight" (formula "37"))
                                    (rule "polySimp_elimSub" (formula "38") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "38"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0"))
                                    (rule "qeq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "34") (term "0") (inst "i=i") (inst "j=j"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "translateJavaCastInt" (formula "34") (term "1,1,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "34") (term "0,1,0,1,0"))
                                    (rule "castedGetAny" (formula "34") (term "1,1,0,1,0"))
                                    (rule "castedGetAny" (formula "34") (term "0,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                                    (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "32"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                    (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "32"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "38")))
                                    (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
                                    (rule "replace_known_left" (formula "12") (term "1,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "1,0,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "12") (term "0,1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,0"))
                                    (rule "translateJavaCastInt" (formula "13") (term "0,1,0"))
                                    (rule "eqSymm" (formula "13") (term "0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,0"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "translateJavaMod" (formula "14") (term "0"))
                                    (rule "jmod_axiom" (formula "14") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "14"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                    (rule "newSym_eq" (formula "14") (inst "l=l_1") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(mul(b_0, Z(2(#))))),
    Z(0(#)))"))
                                    (rule "times_zero_1" (formula "14") (term "1,1"))
                                    (rule "add_zero_right" (formula "14") (term "1"))
                                    (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "9"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                                    (rule "inEqSimp_commuteGeq" (formula "8"))
                                    (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
                                    (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "15"))
                                    (rule "elimGcdGeq" (formula "13") (term "1") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1"))
                                    (rule "sub_literals" (formula "13") (term "0,0,0,0,0,0,0,1"))
                                    (rule "mul_literals" (formula "13") (term "0,0,0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,1,0,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,1,0,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,1,0,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,0,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "13") (term "0,1,0,1"))
                                    (rule "add_literals" (formula "13") (term "1,0,1,0,1"))
                                    (rule "times_zero_1" (formula "13") (term "0,1,0,1"))
                                    (rule "leq_literals" (formula "13") (term "1,0,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "13") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "1"))
                                     (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "40")))
                                    (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "11") (term "1,1,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
                                    (rule "times_zero_2" (formula "11") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "1"))
                                    (rule "translateJavaCastInt" (formula "12") (term "0,1"))
                                    (rule "castedGetAny" (formula "12") (term "0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "translateJavaMod" (formula "17") (term "0"))
                                    (rule "jmod_axiom" (formula "17") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "17"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                    (rule "newSym_eq" (formula "17") (inst "l=l_2") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(b_0, Z(2(#)))))),
    Z(0(#)))"))
                                    (rule "times_zero_1" (formula "17") (term "1,1"))
                                    (rule "add_zero_right" (formula "17") (term "1"))
                                    (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                                    (rule "applyEq" (formula "12") (term "1") (ifseqformula "18"))
                                    (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                                    (rule "inEqSimp_commuteGeq" (formula "10"))
                                    (rule "nnf_imp2or" (formula "38") (term "0"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "42") (term "0"))
                                    (rule "translateJavaCastInt" (formula "42") (term "0,0"))
                                    (rule "castedGetAny" (formula "42") (term "0,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "42")))
                                    (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "7") (term "1,1,1,1,1") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                                    (rule "times_zero_2" (formula "7") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "7"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "1"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "42")))
                                    (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "7") (term "0,0,1,1,1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "7") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1"))
                                    (rule "translateJavaCastInt" (formula "8") (term "0,1"))
                                    (rule "castedGetAny" (formula "8") (term "0,1"))
                                    (rule "commute_or_2" (formula "40") (term "0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,1,0"))
                                    (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
                                    (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                                    (rule "translateJavaMulInt" (formula "1") (term "0,0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                    (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "1") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "21"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "43")))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
                                    (rule "applyEq" (formula "1") (term "0,0,0,1,1") (ifseqformula "37"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,1,1"))
                                    (rule "applyEq" (formula "1") (term "1,0,1,1,1") (ifseqformula "37"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "2") (term "1,1"))
                                    (rule "translateJavaMulInt" (formula "2") (term "0,2,1,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "0,2,1,1"))
                                    (rule "lenNonNegative" (formula "38") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "29"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "arrayLengthIsAShort" (formula "30") (term "1"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "arrayLengthNotNegative" (formula "30") (term "1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "44")))
                                    (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "15") (term "0,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")))
                                    (rule "true_left" (formula "15"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "44")))
                                    (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,1,1,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "15") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "0,0,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "45")))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "8")))
                                    (rule "true_left" (formula "16"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,1,1,0,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "45")))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "8")))
                                    (rule "true_left" (formula "16"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,1,1,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "45")))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "16") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "44")))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "17") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,0,0") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "castedGetAny" (formula "17") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "0,1,0,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "castedGetAny" (formula "17") (term "1,1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "17") (term "0,1,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "17") (term "1,1,0,1,0,0,0") (ifseqformula "39"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,0") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "applyEq" (formula "17") (term "0,0,1,1,0,0,0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "17") (term "0,0,1,0,0,0") (ifseqformula "39"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,0") (ifseqformula "31"))
                                    (rule "greater_literals" (formula "17") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "leq_literals" (formula "17") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,0") (ifseqformula "34"))
                                    (rule "times_zero_1" (formula "17") (term "1,1,0,0,0,0,0"))
                                    (rule "greater_literals" (formula "17") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "leq_literals" (formula "17") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "0"))
                                     (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "46")))
                                    (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "11") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
                                    (rule "times_zero_2" (formula "11") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "11") (term "0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "11") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "11") (term "0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                                    (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "47")))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "0,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "10") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")))
                                    (rule "true_left" (formula "10"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,0"))
                                    (rule "castedGetAny" (formula "10") (term "0,0"))
                                    (rule "seqGetAlphaCast" (formula "42") (term "0"))
                                    (rule "castedGetAny" (formula "42") (term "0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "nnf_notAnd" (formula "43") (term "0,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "seqGetAlphaCast" (formula "38") (term "0"))
                                    (rule "castedGetAny" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "19") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "translateJavaSubInt" (formula "19") (term "0,0,0"))
                                    (rule "translateJavaUnaryMinusInt" (formula "19") (term "1,0,0"))
                                    (rule "translateJavaAddInt" (formula "19") (term "0,0,0,0"))
                                    (rule "neg_literal" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_elimSub" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "19") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "19") (term "0,0,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "47")))
                                    (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0,1,1,1,1") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0,0") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "translateJavaMod" (formula "15") (term "0,0,1,1"))
                                    (rule "jmod_axiom" (formula "15") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,1"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1"))
                                    (rule "jdiv_axiom" (formula "40") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "40"))
                                    (rule "applyEqRigid" (formula "40") (term "1") (ifseqformula "41"))
                                    (rule "inEqSimp_subsumption6" (formula "40") (term "0,0") (ifseqformula "36"))
                                    (rule "times_zero_1" (formula "40") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "polyDiv_pullOut" (formula "40") (term "0") (inst "polyDivCoeff=l_0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,2,0"))
                                    (rule "equal_literals" (formula "40") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "polySimp_homoEq" (formula "40"))
                                    (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "40") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "40") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "40") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "40") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
                                    (rule "add_literals" (formula "40") (term "1,0"))
                                    (rule "times_zero_1" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
                                    (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                                    (rule "neg_literal" (formula "16") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "48")))
                                    (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,1,1,1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "13") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "8")))
                                    (rule "true_left" (formula "13"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0"))
                                    (rule "translateJavaCastInt" (formula "13") (term "0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "48") (term "0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "translateJavaSubInt" (formula "48") (term "0,0"))
                                    (rule "translateJavaUnaryMinusInt" (formula "48") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "48") (term "0,0,0"))
                                    (rule "neg_literal" (formula "48") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "48") (term "0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "48") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "48") (term "0,0"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "translateJavaUnaryMinusInt" (formula "9") (term "1,0"))
                                    (rule "translateJavaSubInt" (formula "9") (term "0,0"))
                                    (rule "translateJavaAddInt" (formula "9") (term "0,0,0"))
                                    (rule "neg_literal" (formula "9") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "9") (term "0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "9") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1,0,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "8") (term "0,1,0,1,1,1"))
                                    (rule "castedGetAny" (formula "8") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "0,1,1,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "46")))
                                    (rule "translateJavaMulInt" (formula "8") (term "0,1,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "8") (term "0,1,0,1,0,0,0,0"))
                                    (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "8") (term "0,0,1,0,0"))
                                    (rule "translateJavaMulInt" (formula "8") (term "1,0,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "8") (term "1,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0,0,0,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "castedGetAny" (formula "8") (term "0,1,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "castedGetAny" (formula "8") (term "1,1,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "8") (term "0,1,0,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,1,0,0,0") (ifseqformula "41"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "0,0,1,0,0,0") (ifseqformula "41"))
                                    (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0") (ifseqformula "41"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "8") (term "0,1,0,0,0") (ifseqformula "36"))
                                    (rule "times_zero_1" (formula "8") (term "1,1,0,0,1,0,0,0"))
                                    (rule "greater_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "leq_literals" (formula "8") (term "0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_subsumption6" (formula "8") (term "0,0,0,0") (ifseqformula "33"))
                                    (rule "greater_literals" (formula "8") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "commute_or" (formula "45") (term "0,0"))
                                    (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "1") (term "0,0,0,1,1,1,1"))
                                    (rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,2,0,0,0,1,1,1,1"))
                                    (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "1") (term "0,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "48")))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1"))
                                    (rule "applyEq" (formula "1") (term "0,0,0,1,1") (ifseqformula "42"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,1,1"))
                                    (rule "applyEq" (formula "1") (term "1,0,1,1,1") (ifseqformula "42"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "2") (term "1,1,1,1,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")))
                                    (rule "translateJavaMulInt" (formula "2") (term "0,1,0,0,0,0,1,1,1,1,1"))
                                    (rule "translateJavaMulInt" (formula "2") (term "1,0,0,0,0,0,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "2") (term "0,1,0,1,0,0,0,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "2") (term "1,1,0,0,1,0,0,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "2") (term "1,1,0,0,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "2") (term "0,0,1,0,1,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,1,1,1,1,1") (ifseqformula "35"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "2") (term "1,0,0,1,1,1,1,1") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "castedGetAny" (formula "2") (term "1,1,0,0,1,0,0,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "2") (term "0,0,1,0,1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "2") (term "0,1,0,1,1,1,1,1") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,0,1,0,0,1,1,1,1,1"))
                                    (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,1,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,0,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,0,0,1,1,1,1,1"))
                                    (rule "applyEq" (formula "2") (term "0,0,1,1,0,0,1,1,1,1,1") (ifseqformula "42"))
                                    (rule "applyEq" (formula "2") (term "0,0,0,1,0,0,1,1,1,1,1") (ifseqformula "42"))
                                    (rule "applyEq" (formula "2") (term "1,1,0,1,0,0,1,1,1,1,1") (ifseqformula "42"))
                                    (rule "replace_known_left" (formula "2") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,1,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,1,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,1,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,1,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,1,1,1,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "2") (term "0,0,0,1,1,1,1,1") (ifseqformula "34"))
                                    (rule "greater_literals" (formula "2") (term "0,0,0,0,0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,1,1,1,1"))
                                    (rule "leq_literals" (formula "2") (term "0,0,0,0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_subsumption6" (formula "2") (term "0,0,0,1,1,1,1,1") (ifseqformula "37"))
                                    (rule "greater_literals" (formula "2") (term "0,0,0,0,0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,1,1,1,1"))
                                    (rule "leq_literals" (formula "2") (term "0,0,0,0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "jdiv_axiom" (formula "22") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "23"))
                                    (rule "polyDiv_pullOut" (formula "22") (term "0,2,0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                                    (rule "equal_literals" (formula "22") (term "0,0,2,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,2,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,2,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0,2,0"))
                                    (rule "add_literals" (formula "22") (term "1,0,0,0,2,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,2,0"))
                                    (rule "div_literals" (formula "22") (term "0,0,2,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,2,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "2,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "2,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "elimGcdGeq" (formula "22") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,1,0,0,0"))
                                    (rule "sub_literals" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,1,0,0,0"))
                                    (rule "leq_literals" (formula "22") (term "1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polyDiv_pullOut" (formula "22") (term "0,1") (inst "polyDivCoeff=l_1"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1"))
                                    (rule "equal_literals" (formula "22") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,0,0,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,1"))
                                    (rule "div_literals" (formula "22") (term "0,0,1"))
                                    (rule "add_zero_left" (formula "22") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "bucket = b_0 TRUE"
                                       (rule "applyEqReverse" (formula "50") (term "1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "36"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                       (rule "add_literals" (formula "36") (term "0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "2,0,0,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "2,0,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,1,1,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "1,1,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "2,0,1,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "2,0,0,0,1,1,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "2,0,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "2,0,0,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "0,1,0,2,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "1,1,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "1") (term "2,0,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,1,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "2,0,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "2,0,1,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "33") (term "0,0,2,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "23"))
                                       (rule "applyEq" (formula "1") (term "1,1,1,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,1,1,0,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "46") (term "0,0,2,1,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,0,0,1,1,1,1") (ifseqformula "23"))
                                       (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "23"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,0"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "25"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "23"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "46") (term "1,1") (ifseqformula "23"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "elimGcdLeq_antec" (formula "5") (inst "elimGcdRightDiv=add(Z(neglit(2(#))), l_1)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                       (rule "leq_literals" (formula "5") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                       (rule "neg_literal" (formula "5") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                       (rule "leq_literals" (formula "21") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "applyEq" (formula "46") (term "0") (ifseqformula "21"))
                                       (rule "polySimp_homoEq" (formula "46"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "46") (term "0"))
                                       (rule "add_literals" (formula "46") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "46") (term "1,0"))
                                       (rule "add_zero_right" (formula "46") (term "0"))
                                       (rule "equal_literals" (formula "46"))
                                       (rule "false_right" (formula "46"))
                                       (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(1(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elimGcdGeq_antec" (formula "33") (inst "elimGcdRightDiv=Z(2(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "33") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "33") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0"))
                                       (rule "leq_literals" (formula "33") (term "0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "5"))
                                       (rule "times_zero_1" (formula "34") (term "0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                       (rule "mul_literals" (formula "34") (term "1"))
                                       (rule "jdiv_axiom" (formula "24") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0,0,2,1"))
                                       (rule "eqSymm" (formula "24"))
                                       (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "25"))
                                       (rule "polyDiv_pullOut" (formula "24") (term "1,0") (inst "polyDivCoeff=l_2"))
                                       (rule "equal_literals" (formula "24") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "24") (term "1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "24") (term "0,0,1,0"))
                                       (rule "div_literals" (formula "24") (term "0,1,0"))
                                       (rule "add_zero_left" (formula "24") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "polySimp_homoEq" (formula "24") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "24") (term "1"))
                                       (rule "polyDiv_pullOut" (formula "24") (term "0,1") (inst "polyDivCoeff=mul(l_2, Z(neglit(1(#))))"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0,1"))
                                       (rule "equal_literals" (formula "24") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "24") (term "1"))
                                       (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,0,1,0,1"))
                                       (rule "add_literals" (formula "24") (term "1,0,0,0,1,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "0,0,0,1,0,1"))
                                       (rule "div_literals" (formula "24") (term "0,0,1,0,1"))
                                       (rule "add_zero_left" (formula "24") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1"))
                                       (rule "polySimp_pullOutFactor0" (formula "24") (term "0,1"))
                                       (rule "add_literals" (formula "24") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "46")))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0,1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,1,1,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,1,1,1,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,1,1,1,1"))
                                       (rule "qeq_literals" (formula "18") (term "0,1,0,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,1,1,1") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,0,0,1,1,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "qeq_literals" (formula "18") (term "0,0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "1,0,0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                       (rule "qeq_literals" (formula "18") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")))
                                       (rule "true_left" (formula "18"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "18") (term "1,0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "44")))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,0,1,0,1,0"))
                                       (rule "translateJavaCastInt" (formula "18") (term "1,1,0,0,1,0,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "18") (term "0,1,0,0,0,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0,1,0"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,1,0,1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0,0,1,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,1,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0,1,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,1,0,1,0"))
                                       (rule "replace_known_left" (formula "18") (term "0,1,0,1,0") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,0,1,0,0,1,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,0,0,1,0") (ifseqformula "37"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "castedGetAny" (formula "18") (term "1,1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0,0,1,0"))
                                       (rule "applyEq" (formula "18") (term "1,1,0,1,0,0,1,0") (ifseqformula "39"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,0,0,1,0") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0,0,1,0,0,1,0") (ifseqformula "39"))
                                       (rule "applyEq" (formula "18") (term "0,0,1,1,0,0,1,0") (ifseqformula "39"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,1,0"))
                                       (rule "inEqSimp_subsumption6" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "34"))
                                       (rule "times_zero_1" (formula "18") (term "1,1,0,0,1,0,0,1,0"))
                                       (rule "greater_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "leq_literals" (formula "18") (term "0,0,1,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption6" (formula "18") (term "0,0,0,1,0") (ifseqformula "31"))
                                       (rule "times_zero_1" (formula "18") (term "1,1,0,0,0,0,1,0"))
                                       (rule "greater_literals" (formula "18") (term "0,0,0,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "1,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "46")))
                                       (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,1,1"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,1,1"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1"))
                                       (rule "leq_literals" (formula "19") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,1,1,1"))
                                       (rule "add_literals" (formula "19") (term "1,0,1,0,1,1,1"))
                                       (rule "times_zero_1" (formula "19") (term "0,1,0,1,1,1"))
                                       (rule "qeq_literals" (formula "19") (term "1,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "19") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "19") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
                                       (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
                                       (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
                                       (rule "qeq_literals" (formula "19") (term "1,0,0,1"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,1,1,1,1"))
                                       (rule "translateJavaCastInt" (formula "19") (term "0,0,1,1,1,1"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,1,1,1,1"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,1,0,1"))
                                       (rule "translateJavaCastInt" (formula "19") (term "0,0,1,0,1"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,1,0,1"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,0,0,1"))
                                       (rule "translateJavaCastInt" (formula "19") (term "0,0,0,0,1"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "19") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "44")))
                                       (rule "translateJavaMulInt" (formula "19") (term "1,0,0,0,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "19") (term "0,1,0,0,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "19") (term "1,1,0,0,1,0,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "19") (term "0,1,0,1,0,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "19") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "1,0,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,1,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "0,1,0,0") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,0,1,0,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "1,0,1,0,0,0") (ifseqformula "37"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "castedGetAny" (formula "19") (term "1,1,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "19") (term "0,0,0,1,0,0,0") (ifseqformula "39"))
                                       (rule "applyEq" (formula "19") (term "1,1,0,1,0,0,0") (ifseqformula "39"))
                                       (rule "replace_known_left" (formula "19") (term "1,0,1,0,0,0") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0,0,1,1,0,0,0") (ifseqformula "39"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_subsumption6" (formula "19") (term "0,0,0,0") (ifseqformula "31"))
                                       (rule "greater_literals" (formula "19") (term "0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_subsumption6" (formula "19") (term "0,0,0,0") (ifseqformula "34"))
                                       (rule "greater_literals" (formula "19") (term "0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "20") (term "0,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0,1,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "20") (term "0,0,1,1,1,1"))
                                       (rule "translateJavaAddInt" (formula "20") (term "0,0,0,1,1,1,1"))
                                       (rule "neg_literal" (formula "20") (term "1,0,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "20") (term "0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,1,1,1,1"))
                                       (rule "polySimp_addLiterals" (formula "20") (term "0,0,1,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,0,1,1,1,1"))
                                       (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "26") (ifseqformula "27"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "1,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "47")))
                                       (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
                                       (rule "replace_known_left" (formula "13") (term "0,0,1,1,1") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0,1,1,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,1,1,1,1"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                       (rule "qeq_literals" (formula "13") (term "0,1,0,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,1,0,1,1,1"))
                                       (rule "translateJavaCastInt" (formula "14") (term "0,0,1,0,1,1,1"))
                                       (rule "castedGetAny" (formula "14") (term "0,0,1,0,1,1,1"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "1,1,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "48")))
                                       (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                       (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1,1,1,0,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1,0,1,1,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,1,0,1,1,1,1,1"))
                                       (rule "add_zero_left" (formula "14") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1,1"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                       (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                       (rule "times_zero_2" (formula "14") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "14") (term "0,1,1,1,1"))
                                       (rule "times_zero_2" (formula "14") (term "1,0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "14") (term "0,1,1,1,1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "14") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0,1,1,1,1"))
                                       (rule "translateJavaCastInt" (formula "15") (term "0,0,1,1,1,1"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,1,1,1,1"))
                                       (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "translateJavaMod" (formula "15") (term "0,0,1,1"))
                                       (rule "jmod_axiom" (formula "15") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "15") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1"))
                                       (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
                                       (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                                       (rule "neg_literal" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                       (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "12") (term "0,0,0"))
                                       (rule "translateJavaSubInt" (formula "12") (term "0,0"))
                                       (rule "neg_literal" (formula "12") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "12") (term "0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "12") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                                       (rule "applyEq" (formula "12") (term "0") (ifseqformula "24"))
                                       (rule "inEqSimp_homoInEq0" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "12") (term "0"))
                                       (rule "add_literals" (formula "12") (term "1,0"))
                                       (rule "times_zero_1" (formula "12") (term "0"))
                                       (rule "qeq_literals" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
                                       (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "17") (term "0,0,1,1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaMod" (formula "17") (term "0,0,1,1"))
                                       (rule "jmod_axiom" (formula "17") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,1,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "17") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,1,0,0,1"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,0,1,0,0,1"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "1,1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "48")))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "18") (term "0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "0,1,1,1,1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "18"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,1,0,1"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,0,1,0,1"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,1,0,1"))
                                       (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "1,1,1,1,1"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,1,1,1,1,1"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,1,1,1,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "18") (term "1,1,1,1"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "1,1,0,0,1"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "48")))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "18") (term "0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "0,1,1,1,1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "18"))
                                       (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,0,0,0,1"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "48")))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,1,0,1,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "18") (term "0,1,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "times_zero_2" (formula "18") (term "1,0,1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1"))
                                       (rule "replace_known_left" (formula "18") (term "0,1,1,1,1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "18"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "18") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "46")))
                                       (rule "translateJavaMulInt" (formula "18") (term "1,0,0,0,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "18") (term "1,1,0,0,1,0,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "18") (term "0,1,0,0,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,1,0,1,0,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "18") (term "1,1,0,0,0"))
                                       (rule "translateJavaCastInt" (formula "18") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,0,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "castedGetAny" (formula "18") (term "1,1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,1,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "0,1,0,0") (ifseqformula "43"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,0,1,0,0,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,0,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "18") (term "1,1,0,1,0,0,0") (ifseqformula "41"))
                                       (rule "replace_known_left" (formula "18") (term "1,0,1,0,0,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0,0,1,0,0,0") (ifseqformula "41"))
                                       (rule "applyEq" (formula "18") (term "0,0,1,1,0,0,0") (ifseqformula "41"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_subsumption6" (formula "18") (term "0,1,0,0,0") (ifseqformula "36"))
                                       (rule "times_zero_1" (formula "18") (term "1,1,0,0,1,0,0,0"))
                                       (rule "greater_literals" (formula "18") (term "0,0,0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "leq_literals" (formula "18") (term "0,0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption6" (formula "18") (term "0,0,0,0") (ifseqformula "33"))
                                       (rule "greater_literals" (formula "18") (term "0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "commute_or" (formula "44") (term "0,0,1,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "0,1,1,1,1,1,1"))
                                       (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                                       (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
                                       (rule "neg_literal" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_contradInEq5" (formula "16") (ifseqformula "4"))
                                       (rule "greater_literals" (formula "16") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1"))
                                       (rule "mul_literals" (formula "16") (term "0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0"))
                                       (rule "add_zero_right" (formula "16") (term "0"))
                                       (rule "leq_literals" (formula "16"))
                                       (rule "closeFalse" (formula "16"))
                                    )
                                    (branch "bucket = b_0 FALSE"
                                       (rule "applyEqReverse" (formula "50") (term "1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1"))
                                       (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "20"))
                                       (rule "greater_literals" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "4") (term "0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "leq_literals" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "21"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "translateJavaCastInt" (formula "23") (term "0"))
                                 (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                                 (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                                 (rule "translateJavaCastInt" (formula "19") (term "1"))
                                 (rule "translateJavaMulInt" (formula "17") (term "0"))
                                 (rule "translateJavaMulInt" (formula "16") (term "1"))
                                 (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                                 (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                                 (rule "translateJavaAddInt" (formula "22") (term "1"))
                                 (rule "translateJavaMulInt" (formula "29") (term "0,2,0,0"))
                                 (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                                 (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                                 (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                                 (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                                 (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                                 (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                                 (rule "translateJavaCastInt" (formula "20") (term "0"))
                                 (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                                 (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                                 (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "7") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "0,2,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                                 (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1"))
                                 (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                                 (rule "castedGetAny" (formula "23") (term "0"))
                                 (rule "castedGetAny" (formula "19") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0"))
                                 (rule "castedGetAny" (formula "20") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_commuteLeq" (formula "19"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                 (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
                                 (rule "leq_literals" (formula "16") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "leq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "pullOutSelect" (formula "29") (term "0,0") (inst "selectSK=arr_0"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=b_0") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "0,0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "qeq_literals" (formula "1") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow2" (formula "17") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,1"))
                                 (rule "greater_literals" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "times_zero_1" (formula "17") (term "0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1"))
                                 (rule "inEqSimp_exactShadow2" (formula "3") (ifseqformula "20"))
                                 (rule "greater_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "23") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0"))
                                 (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "21"))
                                 (rule "greater_literals" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "nnf_imp2or" (formula "31") (term "0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                 (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "translateJavaSubInt" (formula "34") (term "0,1"))
                                 (rule "orRight" (formula "34"))
                                 (rule "notRight" (formula "34"))
                                 (rule "polySimp_elimSub" (formula "35") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "35"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                 (rule "add_literals" (formula "35") (term "0,0"))
                                 (rule "qeq_literals" (formula "35") (term "0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "28") (term "0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "translateJavaMod" (formula "28") (term "0"))
                                 (rule "jmod_axiom" (formula "28") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "newSym_eq" (formula "28") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "28") (term "1,1"))
                                 (rule "add_zero_right" (formula "28") (term "1"))
                                 (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "28"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "26") (term "1") (ifseqformula "29"))
                                 (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "29"))
                                 (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                                 (rule "elimGcdGeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                                 (rule "leq_literals" (formula "24") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0"))
                                 (rule "leq_literals" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "elimGcdLeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                                 (rule "leq_literals" (formula "25") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "neg_literal" (formula "25") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0"))
                                 (rule "qeq_literals" (formula "25") (term "0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "27"))
                                 (rule "polySimp_mulAssoc" (formula "26") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "26") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                                 (rule "inEqSimp_subsumption4" (formula "26") (ifseqformula "25"))
                                 (rule "greater_literals" (formula "26") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "mul_literals" (formula "26") (term "0,0"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "32") (term "0") (inst "i=i") (inst "j=j"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "translateJavaCastInt" (formula "32") (term "0,1,0,1,0"))
                                 (rule "translateJavaCastInt" (formula "32") (term "1,1,0,1,0"))
                                 (rule "castedGetAny" (formula "32") (term "0,1,0,1,0"))
                                 (rule "castedGetAny" (formula "32") (term "1,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,1,0"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "30"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1,0"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "11") (term "1,0"))
                                 (rule "translateJavaCastInt" (formula "11") (term "0,1,0"))
                                 (rule "eqSymm" (formula "11") (term "0"))
                                 (rule "castedGetAny" (formula "11") (term "0,0,0"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaMod" (formula "12") (term "0"))
                                 (rule "jmod_axiom" (formula "12") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "newSym_eq" (formula "12") (inst "l=l_1") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(mul(b_0, Z(2(#))))),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "12") (term "1,1"))
                                 (rule "add_zero_right" (formula "12") (term "1"))
                                 (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_commuteGeq" (formula "7"))
                                 (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "13"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_commuteLeq" (formula "8"))
                                 (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "13"))
                                 (rule "elimGcdGeq" (formula "11") (term "1") (inst "elimGcdRightDiv=l_1") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,1"))
                                 (rule "mul_literals" (formula "11") (term "0,0,0,0,0,1,0,1"))
                                 (rule "sub_literals" (formula "11") (term "0,0,0,0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,1,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,1,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,0,1,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "0,1,0,1"))
                                 (rule "leq_literals" (formula "11") (term "1,0,1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "11") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,1"))
                                 (rule "castedGetAny" (formula "10") (term "0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "translateJavaMod" (formula "14") (term "0"))
                                 (rule "jmod_axiom" (formula "14") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "14"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                 (rule "newSym_eq" (formula "14") (inst "l=l_2") (inst "newSymDef=mul(int::select(heap,
                int[]::final(self,
                             de.wiesler.BucketPointers::$buffer),
                arr(add(Z(1(#)), mul(b_0, Z(2(#)))))),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "14") (term "1,1"))
                                 (rule "add_zero_right" (formula "14") (term "1"))
                                 (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                                 (rule "inEqSimp_commuteGeq" (formula "9"))
                                 (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "10") (term "1") (ifseqformula "15"))
                                 (rule "nnf_imp2or" (formula "34") (term "0"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "translateJavaMod" (formula "38") (term "0"))
                                 (rule "jmod_axiom" (formula "38") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "38"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")))
                                 (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "6") (term "1,1,1,0,1,1,1"))
                                 (rule "add_literals" (formula "6") (term "0,1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "6") (term "1,0,1,1,1,1,1"))
                                 (rule "add_literals" (formula "6") (term "0,1,0,1,1,1,1,1"))
                                 (rule "add_zero_left" (formula "6") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,1,1,1"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0,0,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,1,1,1"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,1,1"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "6") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,1,1,1"))
                                 (rule "replace_known_left" (formula "6") (term "1,1,1,1,1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,1,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "6") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0"))
                                 (rule "translateJavaCastInt" (formula "7") (term "0,0"))
                                 (rule "castedGetAny" (formula "7") (term "0,0"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1"))
                                 (rule "translateJavaCastInt" (formula "7") (term "0,1"))
                                 (rule "castedGetAny" (formula "7") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                 (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "35") (term "0,1,0"))
                                 (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
                                 (rule "translateJavaMulInt" (formula "1") (term "0,0,2,0"))
                                 (rule "translateJavaAddInt" (formula "1") (term "0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                 (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "1") (term "1,1"))
                                 (rule "translateJavaMulInt" (formula "1") (term "0,2,1,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                                 (rule "commute_or_2" (formula "36") (term "0"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
                                 (rule "translateJavaCastInt" (formula "8") (term "0,0"))
                                 (rule "castedGetAny" (formula "8") (term "0,0"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "39")))
                                 (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                 (rule "times_zero_2" (formula "9") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_invertInEq0" (formula "9") (term "0,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,1,1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "9") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,0"))
                                 (rule "castedGetAny" (formula "10") (term "0,0"))
                                 (rule "commute_or" (formula "13"))
                                 (rule "arrayLengthIsAShort" (formula "27") (term "1"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "arrayLengthNotNegative" (formula "27") (term "1"))
                                 (rule "lenNonNegative" (formula "34") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34"))
                                 (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                 (rule "mul_literals" (formula "34") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "26"))
                                 (rule "leq_literals" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0"))
                                 (rule "translateJavaAddInt" (formula "12") (term "0,0,0"))
                                 (rule "translateJavaSubInt" (formula "12") (term "0,0"))
                                 (rule "neg_literal" (formula "12") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "12") (term "0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "12") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "40")))
                                 (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
                                 (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1,1"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,1,1,1,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,1,1,1,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,1,1,1,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,1,1,1,1"))
                                 (rule "qeq_literals" (formula "11") (term "0,1,0,1,1,1,1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
                                 (rule "translateJavaCastInt" (formula "12") (term "0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,0"))
                                 (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                 (rule "castedGetAny" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "seqGetAlphaCast" (formula "32") (term "0"))
                                 (rule "castedGetAny" (formula "32") (term "0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0,0,1,1"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "translateJavaMod" (formula "6") (term "0,0,1,1"))
                                 (rule "jmod_axiom" (formula "6") (term "0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1,1"))
                                 (rule "polySimp_sepNegMonomial" (formula "6") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1"))
                                 (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "translateJavaUnaryMinusInt" (formula "7") (term "1,0"))
                                 (rule "translateJavaSubInt" (formula "7") (term "0,0"))
                                 (rule "translateJavaAddInt" (formula "7") (term "0,0,0"))
                                 (rule "neg_literal" (formula "7") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "0,0"))
                                 (rule "mul_literals" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "7") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                                 (rule "jdiv_axiom" (formula "33") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "34"))
                                 (rule "inEqSimp_subsumption6" (formula "33") (term "0,0") (ifseqformula "29"))
                                 (rule "times_zero_1" (formula "33") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "33") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "leq_literals" (formula "33") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "polyDiv_pullOut" (formula "33") (term "0") (inst "polyDivCoeff=l_0"))
                                 (rule "equal_literals" (formula "33") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_homoEq" (formula "33"))
                                 (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "33") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                                 (rule "add_literals" (formula "33") (term "1,0"))
                                 (rule "times_zero_1" (formula "33") (term "0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "translateJavaSubInt" (formula "8") (term "0,0"))
                                 (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0"))
                                 (rule "translateJavaAddInt" (formula "8") (term "0,0,0"))
                                 (rule "neg_literal" (formula "8") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "8") (term "0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "8") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                                 (rule "commute_or" (formula "38") (term "0,0"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "1,1,0,0,1"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "41")))
                                 (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                 (rule "times_zero_2" (formula "9") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_invertInEq0" (formula "9") (term "0,1,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,1,1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "9") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
                                 (rule "true_left" (formula "9"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,0,0,1"))
                                 (rule "translateJavaCastInt" (formula "9") (term "0,1,1,0,0,1"))
                                 (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0,1"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "9") (term "1,1,1,1,1"))
                                 (rule "translateJavaCastInt" (formula "9") (term "0,1,1,1,1,1"))
                                 (rule "castedGetAny" (formula "9") (term "0,1,1,1,1,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,1,1,1"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0,0,0,1,1"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "41")))
                                 (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,1,1,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,1,1,1,1"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,1,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                 (rule "times_zero_2" (formula "9") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_invertInEq0" (formula "9") (term "0,1,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "times_zero_2" (formula "9") (term "1,0,1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,1,1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "9") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,1,0,1,1,1"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0,1,1,1"))
                                 (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,1,1"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,0,1,1"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,0,0,0,1,1"))
                                 (rule "castedGetAny" (formula "10") (term "0,0,0,0,1,1"))
                                 (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0,0,0,0,1"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "42")))
                                 (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                 (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                 (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                 (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
                                 (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
                                 (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
                                 (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                 (rule "times_zero_2" (formula "10") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_invertInEq0" (formula "10") (term "0,1,1,1,1"))
                                 (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "10") (term "0,1,1,1,1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "10") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
                                 (rule "true_left" (formula "10"))
                                 (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,0,0,1"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,0,0,0,0,1"))
                                 (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,1"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (term "0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "40")))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0,0"))
                                 (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0,0"))
                                 (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0,0"))
                                 (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "10") (term "1,0,0,0,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,0"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "castedGetAny" (formula "10") (term "0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "10") (term "0,1,0,0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "castedGetAny" (formula "10") (term "1,1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "10") (term "0,1,0,1,0,0,0"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "10") (term "1,1,0,1,0,0,0") (ifseqformula "35"))
                                 (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "applyEq" (formula "10") (term "0,0,1,0,0,0") (ifseqformula "35"))
                                 (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,0") (ifseqformula "35"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_subsumption6" (formula "10") (term "0,0,0,0") (ifseqformula "28"))
                                 (rule "times_zero_1" (formula "10") (term "1,1,0,0,0,0,0"))
                                 (rule "greater_literals" (formula "10") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_subsumption6" (formula "10") (term "0,0,0,0") (ifseqformula "30"))
                                 (rule "greater_literals" (formula "10") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaUnaryMinusInt" (formula "11") (term "1,0"))
                                 (rule "translateJavaSubInt" (formula "11") (term "0,0"))
                                 (rule "translateJavaAddInt" (formula "11") (term "0,0,0"))
                                 (rule "neg_literal" (formula "11") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "11") (term "0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "11") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                                 (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "15") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "translateJavaSubInt" (formula "15") (term "0,0,1"))
                                 (rule "translateJavaUnaryMinusInt" (formula "15") (term "1,0,1"))
                                 (rule "translateJavaAddInt" (formula "15") (term "0,0,0,1"))
                                 (rule "neg_literal" (formula "15") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "15") (term "0,0,1"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,1"))
                                 (rule "polySimp_addLiterals" (formula "15") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "15") (term "0,0,1"))
                                 (rule "commute_or" (formula "38") (term "0,0,1,0"))
                                 (rule "jdiv_axiom" (formula "16") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "17"))
                                 (rule "elimGcdGeq" (formula "16") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "0,0,0,1,0,0,0"))
                                 (rule "sub_literals" (formula "16") (term "0,0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "16") (term "0,1,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "1,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "0,1,0,0,0"))
                                 (rule "leq_literals" (formula "16") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polyDiv_pullOut" (formula "16") (term "0,2,0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,2,0,2,0"))
                                 (rule "equal_literals" (formula "16") (term "0,0,2,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,2,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "16") (term "0,0,0,2,0"))
                                 (rule "add_literals" (formula "16") (term "1,0,0,0,2,0"))
                                 (rule "times_zero_1" (formula "16") (term "0,0,0,2,0"))
                                 (rule "div_literals" (formula "16") (term "0,0,2,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "2,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "2,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polyDiv_pullOut" (formula "16") (term "0,1") (inst "polyDivCoeff=l_1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,2,0,1"))
                                 (rule "equal_literals" (formula "16") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_pullOutFactor0" (formula "16") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "16") (term "1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "16") (term "0,0,0,1"))
                                 (rule "div_literals" (formula "16") (term "0,0,1"))
                                 (rule "add_zero_left" (formula "16") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "bucket = b_0 TRUE"
                                    (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "43") (term "0,0,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "applyEq" (formula "42") (term "0,0,2,1,0,0,0") (ifseqformula "2"))
                                    (rule "polySimp_homoEq" (formula "42"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "42") (term "0"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "2"))
                                    (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "2"))
                                    (rule "applyEq" (formula "1") (term "0,0,2,1,0") (ifseqformula "2"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "39") (term "0,0,2,1,0") (ifseqformula "2"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0"))
                                    (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "19"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "39") (term "1,0,0,1,0") (ifseqformula "17"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0"))
                                    (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "17"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "17"))
                                    (rule "polySimp_sepNegMonomial" (formula "39"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "elimGcdEq" (formula "39") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), l_1)") (inst "elimGcdLeftDiv=jdiv(add(Z(neglit(6(5(2(#))))),
         mul(l_1, Z(6(5(2(#)))))),
     Z(6(5(2(#)))))") (inst "elimGcd=Z(6(5(2(#))))"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0,1"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0"))
                                    (rule "add_literals" (formula "39") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "0,0,0"))
                                    (rule "leq_literals" (formula "39") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "0,0"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), l_2)") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "12") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "39")))
                                    (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
                                    (rule "add_zero_left" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "12") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "0,0,1,1,1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "12") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "1,0,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "12") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "40")))
                                    (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "13") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "0,0,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "14") (term "0,0,0,0,0,1"))
                                    (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "1,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "41")))
                                    (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "0,0,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "14") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                                    (rule "true_left" (formula "14"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "41")))
                                    (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "14") (term "0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "9")))
                                    (rule "true_left" (formula "14"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "14") (term "1,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "14") (term "0,1,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "14") (term "0,1,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "14") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "41")))
                                    (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "14") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "14") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "14") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "14") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0"))
                                    (rule "add_literals" (formula "14") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "14") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0,1,0,1"))
                                    (rule "translateJavaCastInt" (formula "15") (term "0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "15") (term "0,0,1,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "15") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "40")))
                                    (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "15") (term "1,1,0,0,1,0,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "15") (term "1,0,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "15") (term "0,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "15") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "castedGetAny" (formula "15") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "15") (term "0,1,0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "castedGetAny" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "15") (term "0,1,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "15") (term "1,0,1,0,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "15") (term "0,0,0,1,0,0,0") (ifseqformula "35"))
                                    (rule "applyEq" (formula "15") (term "1,1,0,1,0,0,0") (ifseqformula "35"))
                                    (rule "replace_known_left" (formula "15") (term "1,0,1,0,0,0") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "0,0,1,1,0,0,0") (ifseqformula "35"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "15") (term "0,1,0,0,0") (ifseqformula "30"))
                                    (rule "times_zero_1" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                    (rule "greater_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "leq_literals" (formula "15") (term "0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption6" (formula "15") (term "0,0,0,0") (ifseqformula "28"))
                                    (rule "times_zero_1" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "greater_literals" (formula "15") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "leq_literals" (formula "15") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                                    (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "16") (term "0,0,0"))
                                    (rule "neg_literal" (formula "16") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "16") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,0,1"))
                                    (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0,1,0,1"))
                                    (rule "translateJavaCastInt" (formula "6") (term "0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "6") (term "0,0,1,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "42")))
                                    (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "6") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "6") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "6") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "6") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")))
                                    (rule "true_left" (formula "6"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "6") (term "0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "42")))
                                    (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "6") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "6") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "6") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (term "0,0,1,1,1,1") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (term "0,0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "castedGetAny" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "43")))
                                    (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "7") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                                    (rule "times_zero_2" (formula "7") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "7") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "7") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "7") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")))
                                    (rule "true_left" (formula "7"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,1,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "7") (term "0,0,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,0,0,0,0,1"))
                                    (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "41")))
                                    (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "7") (term "1,0,0,0,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "7") (term "0,1,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "7") (term "1,1,0,0,1,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "7") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0,0,0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "castedGetAny" (formula "7") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "0,1,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "castedGetAny" (formula "7") (term "1,1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,1,1,0,0,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "7") (term "1,1,0,1,0,0,0") (ifseqformula "36"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "0,0,1,0,0,0") (ifseqformula "36"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "7") (term "0,1,0,0,0") (ifseqformula "31"))
                                    (rule "greater_literals" (formula "7") (term "0,0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0"))
                                    (rule "leq_literals" (formula "7") (term "0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_subsumption6" (formula "7") (term "0,0,0,0") (ifseqformula "29"))
                                    (rule "greater_literals" (formula "7") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "1"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "translateJavaSubInt" (formula "8") (term "0,1"))
                                    (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
                                    (rule "neg_literal" (formula "8") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "8") (term "0,1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_addLiterals" (formula "8") (term "0,1"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,1"))
                                    (rule "jdiv_axiom" (formula "22") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEq" (formula "22") (term "1") (ifseqformula "23"))
                                    (rule "elimGcdGeq" (formula "22") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,1,0,0,0"))
                                    (rule "sub_literals" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,1,0,0,0"))
                                    (rule "leq_literals" (formula "22") (term "1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polyDiv_pullOut" (formula "22") (term "0,2,0") (inst "polyDivCoeff=mul(l_2, Z(neglit(1(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,2,0"))
                                    (rule "equal_literals" (formula "22") (term "0,0,2,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,2,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0,2,0"))
                                    (rule "add_literals" (formula "22") (term "1,0,0,0,2,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,2,0"))
                                    (rule "div_literals" (formula "22") (term "0,0,2,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,2,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "2,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "2,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polyDiv_pullOut" (formula "22") (term "0,1") (inst "polyDivCoeff=l_2"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1"))
                                    (rule "equal_literals" (formula "22") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_homoEq" (formula "22") (term "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,0,1,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,0,0,0,1,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "0,0,0,1,0,1"))
                                    (rule "div_literals" (formula "22") (term "0,0,1,0,1"))
                                    (rule "add_zero_left" (formula "22") (term "0,1,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1"))
                                    (rule "add_literals" (formula "22") (term "1,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "1,1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "43")))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_invertInEq0" (formula "10") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "10") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
                                    (rule "true_left" (formula "10"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "43")))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_invertInEq0" (formula "10") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "10") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
                                    (rule "true_left" (formula "10"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "43")))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,1,1,1,1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_invertInEq0" (formula "10") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "10") (term "0,1,1,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "10") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
                                    (rule "true_left" (formula "10"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,0,0,0,0,1"))
                                    (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,0,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,1,1,0,1,1,1"))
                                    (rule "castedGetAny" (formula "10") (term "0,1,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "10") (term "0,1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "43")))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "10") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "10") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "10") (term "0,0,0"))
                                    (rule "add_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "10") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "10") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "10") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "10") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "10") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0,1,0,1"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "10") (term "0,0,1,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "41")))
                                    (rule "translateJavaMulInt" (formula "10") (term "0,1,0,0,0,0,0"))
                                    (rule "translateJavaMulInt" (formula "10") (term "1,0,0,0,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0,0"))
                                    (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0,0"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "castedGetAny" (formula "10") (term "0,1,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "castedGetAny" (formula "10") (term "1,1,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "10") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "10") (term "0,1,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "10") (term "1,1,0,1,0,0,0") (ifseqformula "36"))
                                    (rule "replace_known_left" (formula "10") (term "1,0,1,0,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "applyEq" (formula "10") (term "0,0,1,0,0,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,0") (ifseqformula "36"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "10") (term "0,1,0,0,0") (ifseqformula "31"))
                                    (rule "greater_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                                    (rule "leq_literals" (formula "10") (term "0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_subsumption6" (formula "10") (term "0,0,0,0") (ifseqformula "29"))
                                    (rule "greater_literals" (formula "10") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "41") (term "0") (ifseqformula "24") (ifseqformula "25"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "44")))
                                    (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
                                    (rule "add_zero_left" (formula "12") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                    (rule "times_zero_2" (formula "12") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_invertInEq0" (formula "12") (term "0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "times_zero_2" (formula "12") (term "1,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,1"))
                                    (rule "replace_known_left" (formula "12") (term "0,1,1,1,1") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "45")))
                                    (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "13") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "13") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "13") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "13") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "13") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1"))
                                    (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "13") (term "0,1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "translateJavaUnaryMinusInt" (formula "13") (term "1,0,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "13") (term "0,0,1,0,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "13") (term "0,0,0,1,0,1,1,1"))
                                    (rule "neg_literal" (formula "13") (term "1,0,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "0,0,1,0,1,1,1"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,1,0,1,1,1"))
                                    (rule "polySimp_addLiterals" (formula "13") (term "0,0,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,1,1,1"))
                                    (rule "seqGetAlphaCast" (formula "20") (term "1,0,0"))
                                    (rule "castedGetAny" (formula "20") (term "0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "seqGetAlphaCast" (formula "10") (term "1,0,0"))
                                    (rule "castedGetAny" (formula "10") (term "0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "45")))
                                    (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,1,1,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "15") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "0,0,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")))
                                    (rule "true_left" (formula "15"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0,0,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "castedGetAny" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "15") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "45")))
                                    (rule "translateJavaAddInt" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,1,1,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "15") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "0,0,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0,1,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,0,0,0,1,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,0,0,0,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "16") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,1,1,0,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "16") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "16") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,1,1,1,0,1,1,1"))
                                    (rule "add_zero_left" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "16") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "0,0,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                                    (rule "true_left" (formula "16"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "16") (term "0,0,0,0,0,1"))
                                    (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "16") (term "0,1,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                    (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "1,1,1,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "16") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "0,0,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,0,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "17") (term "0,0,1,1,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "17") (term "0,1,0,1"))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "17") (term "0,0,1,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (term "1,0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "45")))
                                    (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0,0,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,0,1,0,1,0"))
                                    (rule "translateJavaMulInt" (formula "17") (term "1,0,0,0,0,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "17") (term "1,1,0,0,1,0,0,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0,0,0,1,0"))
                                    (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,0,0,1,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,0,0,0,1,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,1,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,0,1,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "castedGetAny" (formula "17") (term "0,0,1,0,1,0"))
                                    (rule "replace_known_left" (formula "17") (term "0,1,0,1,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "castedGetAny" (formula "17") (term "1,1,0,0,1,0,0,1,0"))
                                    (rule "castedGetAny" (formula "17") (term "0,1,0,1,0,0,1,0"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,1,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,0,0,1,0"))
                                    (rule "applyEq" (formula "17") (term "1,1,0,1,0,0,1,0") (ifseqformula "40"))
                                    (rule "replace_known_left" (formula "17") (term "1,0,1,0,0,1,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "17") (term "0,0,1,1,0,0,1,0") (ifseqformula "40"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,1,0") (ifseqformula "33"))
                                    (rule "greater_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "17") (term "0,0,0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_subsumption6" (formula "17") (term "0,0,0,1,0") (ifseqformula "35"))
                                    (rule "greater_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "17") (term "0,0,0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "all_pull_out3" (formula "43") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "1,0,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "18") (term "0,1,0,1,1,1"))
                                    (rule "castedGetAny" (formula "18") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "18") (term "0,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "1,1,1,1,1,1"))
                                    (rule "translateJavaCastInt" (formula "18") (term "0,1,1,1,1,1,1"))
                                    (rule "castedGetAny" (formula "18") (term "0,1,1,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,1,1,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "18") (term "0,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "18") (term "0,0,1,0,0,1"))
                                    (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "47")))
                                    (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                    (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "18") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "18") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "18") (term "0,0,0"))
                                    (rule "add_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "18") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,0,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "0,1,0,0,1"))
                                    (rule "qeq_literals" (formula "18") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "1,0,1,0,1,1,1"))
                                    (rule "times_zero_1" (formula "18") (term "0,1,0,1,1,1"))
                                    (rule "qeq_literals" (formula "18") (term "1,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "18") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "47")))
                                    (rule "translateJavaSubInt" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "18") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "18") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "18") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "18") (term "0,0,1,1,1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_subsumption1" (formula "18") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "18") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "19") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "48")))
                                    (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,1,1"))
                                    (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,1,1"))
                                    (rule "mul_literals" (formula "19") (term "1,1,0,1,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1,1"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1"))
                                    (rule "replace_known_left" (formula "19") (term "0,0,1,1,1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "19") (term "1,0,1,1,1,1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0,1,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,1,1,1,1"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "add_literals" (formula "19") (term "0,0,1,0,1,1,1,1"))
                                    (rule "qeq_literals" (formula "19") (term "0,1,0,1,1,1,1"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                                    (rule "true_left" (formula "19"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "0,1,0,1"))
                                    (rule "translateJavaCastInt" (formula "19") (term "0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "19") (term "0,0,1,0,1"))
                                    (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "19") (term "1,1,0,0,1"))
                                    (rule "translateJavaCastInt" (formula "19") (term "0,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,1"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "translateJavaMod" (formula "19") (term "0,0,1,1"))
                                    (rule "jmod_axiom" (formula "19") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,1,1"))
                                    (rule "polySimp_sepNegMonomial" (formula "19") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1"))
                                    (rule "cut_direct" (formula "24") (term "0"))
                                    (branch "CUT: l_0 >= l_1 TRUE"
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "37"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "24") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "24"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "jdiv_axiom" (formula "50") (term "0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "elimGcdGeq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "sub_literals" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,0,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "0,1,0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polyDiv_pullOut" (formula "1") (term "0,2,0") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,2,0"))
                                       (rule "equal_literals" (formula "1") (term "0,0,2,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,2,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0,2,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                       (rule "div_literals" (formula "1") (term "0,0,2,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "2,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "2,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,2,0"))
                                       (rule "mul_literals" (formula "1") (term "0,2,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,2,0"))
                                       (rule "polyDiv_pullOut" (formula "1") (term "1,0") (inst "polyDivCoeff=l_1"))
                                       (rule "equal_literals" (formula "1") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                                       (rule "div_literals" (formula "1") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "close" (formula "51") (ifseqformula "1"))
                                    )
                                    (branch "CUT: l_0 >= l_1 FALSE"
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "applyEq" (formula "11") (term "0") (ifseqformula "25"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "qeq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "10") (term "1") (ifseqformula "24"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq5" (formula "21") (ifseqformula "3"))
                                       (rule "greater_literals" (formula "21") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1"))
                                       (rule "mul_literals" (formula "21") (term "0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "21"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "21") (term "0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0"))
                                       (rule "add_zero_right" (formula "21") (term "0"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "closeFalse" (formula "21"))
                                    )
                                 )
                                 (branch "bucket = b_0 FALSE"
                                    (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "43") (term "0,0,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "applyEqRigid" (formula "42") (term "0,0") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "closeTrue" (formula "42"))
                                 )
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "26"))
                               (builtin "One Step Simplification" (formula "21"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "translateJavaAddInt" (formula "29") (term "0,2,0,0"))
                              (rule "translateJavaCastInt" (formula "23") (term "0"))
                              (rule "translateJavaCastInt" (formula "19") (term "1"))
                              (rule "translateJavaMulInt" (formula "17") (term "0"))
                              (rule "translateJavaAddInt" (formula "22") (term "1"))
                              (rule "translateJavaAddInt" (formula "9") (term "0,2,0,0"))
                              (rule "translateJavaMulInt" (formula "16") (term "1"))
                              (rule "translateJavaMulInt" (formula "8") (term "0,2,0,0"))
                              (rule "translateJavaMulInt" (formula "7") (term "0,2,1,0"))
                              (rule "translateJavaMulInt" (formula "7") (term "0,2,0,1"))
                              (rule "translateJavaMulInt" (formula "3") (term "0,2,1"))
                              (rule "translateJavaMulInt" (formula "4") (term "0,2,0"))
                              (rule "translateJavaAddInt" (formula "4") (term "1,1"))
                              (rule "translateJavaAddInt" (formula "6") (term "0,2,0"))
                              (rule "translateJavaAddInt" (formula "6") (term "1,1"))
                              (rule "translateJavaAddInt" (formula "5") (term "0,2,1"))
                              (rule "translateJavaCastInt" (formula "20") (term "0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,0,2,0,0"))
                              (rule "translateJavaMulInt" (formula "9") (term "0,0,2,0,0"))
                              (rule "translateJavaMulInt" (formula "6") (term "0,0,2,0"))
                              (rule "translateJavaMulInt" (formula "5") (term "0,0,2,1"))
                              (rule "eqSymm" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1"))
                              (rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,2,1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,2,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,0,2,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,0,2,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,0,2,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0,2,1"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,2,0,0"))
                              (rule "polySimp_addComm0" (formula "22") (term "1"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "29") (term "0,2,0,0"))
                              (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0,2,1"))
                              (rule "castedGetAny" (formula "23") (term "0"))
                              (rule "castedGetAny" (formula "19") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "castedGetAny" (formula "20") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "18"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "inEqSimp_commuteLeq" (formula "5"))
                              (rule "inEqSimp_commuteLeq" (formula "19"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                              (rule "leq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "pullOutSelect" (formula "29") (term "0,0") (inst "selectSK=arr_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=add(Z(0(#)), b_0)") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,1,0,0,0"))
                              (rule "qeq_literals" (formula "1") (term "1,0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                              (rule "equal_literals" (formula "1") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "30") (term "0,0") (ifseqformula "1"))
                              (rule "close" (formula "30") (ifseqformula "10"))
                           )
                        )
                     )
                  )
               )
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "10"))
            (rule "closeTrue" (formula "10"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "10"))
         (rule "allRight" (formula "10") (inst "sk=f_0"))
         (rule "allRight" (formula "10") (inst "sk=o_0"))
         (rule "orRight" (formula "10"))
         (rule "orRight" (formula "10"))
         (rule "eqSymm" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (x_arr_1 = null)"
      (rule "false_right" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0"))
      (rule "polySimp_elimOne" (formula "7") (term "0"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (inst "b=b"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
      (rule "closeFalse" (formula "8"))
   )
   (branch "Index Out of Bounds (x_arr_1 != null, but read_pos Out of Bounds!)"
      (rule "false_right" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0"))
      (rule "polySimp_elimOne" (formula "7") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "6"))
      (rule "greater_literals" (formula "1") (term "0,0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,0,1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "8") (inst "b=b"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
      (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0"))
      (rule "translateJavaCastInt" (formula "8") (term "1,1,0,0,1,0,0,0"))
      (rule "translateJavaCastInt" (formula "8") (term "0,0,1,0"))
      (rule "translateJavaCastInt" (formula "8") (term "0,1,0,1,0,0,0"))
      (rule "translateJavaMulInt" (formula "8") (term "1,0,0,0,0,0"))
      (rule "translateJavaMulInt" (formula "8") (term "0,1,0,0,0,0"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "polySimp_mulComm0" (formula "9") (term "0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1"))
      (rule "polySimp_addComm0" (formula "14") (term "1"))
      (rule "castedGetAny" (formula "15") (term "0"))
      (rule "castedGetAny" (formula "12") (term "0"))
      (rule "castedGetAny" (formula "11") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,1,0"))
      (rule "leq_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "9"))
      (rule "greater_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "0,0"))
      (rule "mul_literals" (formula "7") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1"))
      (rule "polySimp_rightDist" (formula "7") (term "1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "0,1"))
      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0"))
      (rule "add_zero_right" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
)
(branch "Null Reference (x_arr = null)"
   (rule "false_right" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "10") (term "0"))
   (rule "replace_known_left" (formula "1") (term "1,1,1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "12"))
   (rule "add_zero_right" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "1"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0"))
   (rule "leq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "false_right" (formula "12"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")))
   (rule "closeFalse" (formula "10"))
)
(branch "Index Out of Bounds (x_arr != null, but read_pos Out of Bounds!)"
   (rule "false_right" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "6"))
   (rule "greater_literals" (formula "1") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaSubInt" (formula "11") (term "0,1"))
   (rule "orRight" (formula "11"))
   (rule "notRight" (formula "11"))
   (rule "polySimp_elimSub" (formula "12") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_sepNegMonomial" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "polySimp_elimOne" (formula "12") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
   (rule "add_literals" (formula "12") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0"))
   (rule "qeq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "false_right" (formula "12"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
   (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,0,0"))
   (rule "translateJavaCastInt" (formula "9") (term "1,1,0,0,1,0,0,0"))
   (rule "translateJavaAddInt" (formula "9") (term "1,1,0,0"))
   (rule "translateJavaCastInt" (formula "9") (term "0,0,1,0"))
   (rule "translateJavaCastInt" (formula "9") (term "0,1,0,1,0,0,0"))
   (rule "translateJavaMulInt" (formula "9") (term "0,1,0,0,0,0"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "polySimp_mulComm0" (formula "10") (term "0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1"))
   (rule "polySimp_addComm0" (formula "15") (term "1"))
   (rule "castedGetAny" (formula "16") (term "0"))
   (rule "castedGetAny" (formula "13") (term "0"))
   (rule "castedGetAny" (formula "12") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
   (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "leq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "polySimp_elimOne" (formula "12") (term "0"))
   (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "10"))
   (rule "greater_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "mul_literals" (formula "9") (term "1,0,0"))
   (rule "times_zero_1" (formula "9") (term "0,0"))
   (rule "add_zero_left" (formula "9") (term "0"))
   (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "11"))
   (rule "greater_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1"))
   (rule "polySimp_rightDist" (formula "8") (term "1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
   (rule "mul_literals" (formula "8") (term "0,1"))
   (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "2"))
   (rule "andLeft" (formula "8"))
   (rule "inEqSimp_homoInEq1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
   (rule "add_literals" (formula "8") (term "1,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0"))
   (rule "add_literals" (formula "8") (term "0"))
   (rule "leq_literals" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
)
}
