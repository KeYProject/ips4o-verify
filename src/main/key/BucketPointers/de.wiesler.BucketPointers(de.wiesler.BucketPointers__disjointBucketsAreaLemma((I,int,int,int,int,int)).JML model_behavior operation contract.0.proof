\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 29 18:13:15 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../main/java";

\proofObligation "#Proof Obligation Settings
#Tue Mar 29 18:13:15 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:writtenElementsCountElementSplitBucket([I,int,int,[I,int)].JML model_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:writtenElementsCountElementSplitBucket([I,int,int,[I,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))

(autoModeTime "24504")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre_0,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "16"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "13"))
 (builtin "One Step Simplification" (formula "12"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
(rule "allRight" (formula "16") (inst "sk=element_0") (userinteraction))
(rule "true_left" (formula "6") (userinteraction))
(rule "translateJavaAddInt" (formula "15") (term "1") (userinteraction))
(rule "translateJavaCastInt" (formula "15") (term "0,1") (userinteraction))
(rule "Definition_axiom_for_writtenElementsCountElement_in_de_wiesler_BucketPointers" (formula "15") (term "0") (inst "b=b") (userinteraction))
(rule "translateJavaCastInt" (formula "15") (term "0") (userinteraction))
(rule "bsum_split_in_three" (formula "15") (term "0") (inst "i1=split_bucket<<origin(\"User_Interaction @ node 32 (bsum_split_in_three)\",\"[]\")>>") (inst "uSub1=uSub1") (userinteraction))
(branch "Precondition"
   (rule "translateJavaAddInt" (formula "9") (term "0"))
   (rule "translateJavaSubInt" (formula "9") (term "1"))
   (rule "translateJavaSubInt" (formula "10") (term "0"))
   (rule "translateJavaAddInt" (formula "16") (term "2,1,2,0,1"))
   (rule "translateJavaSubInt" (formula "16") (term "3,1,2,0,1"))
   (rule "translateJavaSubInt" (formula "16") (term "0,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "16") (term "2,2,1,1"))
   (rule "translateJavaAddInt" (formula "10") (term "1"))
   (rule "translateJavaAddInt" (formula "16") (term "3,2,1,1"))
   (rule "translateJavaAddInt" (formula "9") (term "0,1"))
   (rule "translateJavaAddInt" (formula "10") (term "0,0"))
   (rule "translateJavaAddInt" (formula "16") (term "0,3,1,2,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,2,2,1,1"))
   (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "7")))
   (rule "closeTrue" (formula "15"))
)
(branch "Splitted Sum"
   (rule "bsum_split_in_three" (formula "15") (term "0,1") (inst "i1=split_bucket<<origin(\"User_Interaction @ node 34 (bsum_split_in_three)\",\"[]\")>>") (inst "uSub1=uSub1") (userinteraction))
   (branch "Precondition"
      (rule "translateJavaAddInt" (formula "9") (term "0"))
      (rule "translateJavaSubInt" (formula "9") (term "1"))
      (rule "translateJavaAddInt" (formula "16") (term "2,1,2,0,1"))
      (rule "translateJavaSubInt" (formula "16") (term "3,1,2,0,1"))
      (rule "translateJavaSubInt" (formula "16") (term "0,0,0,1,1"))
      (rule "translateJavaSubInt" (formula "16") (term "2,2,1,1"))
      (rule "translateJavaSubInt" (formula "10") (term "0"))
      (rule "translateJavaAddInt" (formula "10") (term "1"))
      (rule "translateJavaAddInt" (formula "16") (term "3,2,1,1"))
      (rule "translateJavaAddInt" (formula "9") (term "0,1"))
      (rule "translateJavaAddInt" (formula "16") (term "0,3,1,2,0,1"))
      (rule "translateJavaAddInt" (formula "16") (term "0,2,2,1,1"))
      (rule "translateJavaAddInt" (formula "10") (term "0,0"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")))
      (rule "closeTrue" (formula "15"))
   )
   (branch "Splitted Sum"
      (rule "eqTermCut" (formula "15") (term "0,0,0,1") (inst "s=bsum{int b;}(Z(0(#)),
             split_bucket<<origin(\"User_Interaction @ node 32 (bsum_split_in_three)\",\"[]\")>>,
             de.wiesler.BucketPointers::writtenElementsOfBucketCountElement(heap,
                                                                            self,
                                                                            values,
                                                                            begin,
                                                                            end,
                                                                            overflow,
                                                                            b,
                                                                            element_0))") (userinteraction))
      (branch "Assume bsum{int b;}(0, split_bucket, if (b = split_bucket) then (de.wiesler.Functions.countElement(values, javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)), javaSubInt(javaAddInt(begin, self.nextWriteOf(split_bucket)), 256), element_0)) else (self.writtenElementsOfBucketCountElement(values, begin, end, overflow, b, element_0))) = bsum{int b;}(0, split_bucket, self.writtenElementsOfBucketCountElement(values, begin, end, overflow, b, element_0))"
         (rule "eqTermCut" (formula "16") (term "1,0,1") (inst "s=bsum{int uSub1;}(add(split_bucket<<origin(\"User_Interaction @ node 32 (bsum_split_in_three)\",\"[]\")>>,
                     Z(1(#))),
                 int::final(self,
                            de.wiesler.BucketPointers::$num_buckets),
                 de.wiesler.BucketPointers::writtenElementsOfBucketCountElement(heap,
                                                                                self,
                                                                                values,
                                                                                begin,
                                                                                end,
                                                                                overflow,
                                                                                uSub1,
                                                                                element_0))") (userinteraction))
         (branch "Assume bsum{int uSub1;}(split_bucket + 1, self.num_buckets, if (uSub1 = split_bucket) then (de.wiesler.Functions.countElement(values, javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)), javaSubInt(javaAddInt(begin, self.nextWriteOf(split_bucket)), 256), element_0)) else (self.writtenElementsOfBucketCountElement(values, begin, end, overflow, uSub1, element_0))) = bsum{int uSub1;}(split_bucket + 1, self.num_buckets, self.writtenElementsOfBucketCountElement(values, begin, end, overflow, uSub1, element_0))"
             (builtin "One Step Simplification" (formula "17") (userinteraction))
            (rule "Definition_axiom_for_writtenElementsOfBucketCountElement_in_de_wiesler_BucketPointers" (formula "17") (term "1,0,0") (userinteraction))
            (rule "ifthenelse_split" (formula "17") (term "1,0,0") (userinteraction))
            (branch " javaSubInt(end, begin) < self.nextWriteOf(split_bucket) & de.wiesler.Buffers.BUFFER_SIZE <= self.writtenCountOfBucket(split_bucket) TRUE"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
               (rule "translateJavaAddInt" (formula "12") (term "0"))
               (rule "translateJavaSubInt" (formula "12") (term "1"))
               (rule "translateJavaSubInt" (formula "13") (term "0"))
               (rule "translateJavaAddInt" (formula "13") (term "1"))
               (rule "translateJavaAddInt" (formula "2") (term "2,1,2,0"))
               (rule "translateJavaSubInt" (formula "2") (term "3,1,2,0"))
               (rule "translateJavaAddInt" (formula "3") (term "2,1,2,0"))
               (rule "translateJavaSubInt" (formula "3") (term "3,1,2,0"))
               (rule "translateJavaSubInt" (formula "1") (term "0,0"))
               (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "2,1,2,0,0,0,1"))
               (rule "translateJavaSubInt" (formula "18") (term "3,1,2,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "2,1,0,0,1"))
               (rule "translateJavaSubInt" (formula "18") (term "3,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "2,1,2,1,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "2,0,1,0,0"))
               (rule "translateJavaSubInt" (formula "18") (term "3,1,2,1,0,1"))
               (rule "translateJavaAddInt" (formula "12") (term "0,1"))
               (rule "translateJavaAddInt" (formula "13") (term "0,0"))
               (rule "translateJavaAddInt" (formula "2") (term "0,3,1,2,0"))
               (rule "translateJavaAddInt" (formula "3") (term "0,3,1,2,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,0,1,0,0"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,1,2,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "0,3,1,2,1,0,1"))
               (rule "translateJavaAddInt" (formula "18") (term "1,0,0"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_elimSub" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "1,1"))
               (rule "polySimp_elimSub" (formula "14") (term "0"))
               (rule "mul_literals" (formula "14") (term "1,0"))
               (rule "polySimp_elimSub" (formula "3") (term "3,1,2,0"))
               (rule "mul_literals" (formula "3") (term "1,3,1,2,0"))
               (rule "polySimp_elimSub" (formula "4") (term "3,1,2,0"))
               (rule "mul_literals" (formula "4") (term "1,3,1,2,0"))
               (rule "polySimp_elimSub" (formula "19") (term "3,1,2,0,0,0,1"))
               (rule "mul_literals" (formula "19") (term "1,3,1,2,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "3,1,0,0,1"))
               (rule "mul_literals" (formula "19") (term "1,3,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "3,1,2,1,0,1"))
               (rule "mul_literals" (formula "19") (term "1,3,1,2,1,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "3,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,3,0,1,0,0"))
               (rule "polySimp_elimSub" (formula "1") (term "0"))
               (rule "polySimp_homoEq" (formula "19"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "1"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "polySimp_addComm1" (formula "3") (term "3,1,2,0"))
               (rule "polySimp_addComm1" (formula "4") (term "3,1,2,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "19") (term "3,1,2,1,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "3,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "3,1,2,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,3,1,2,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,3,1,2,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,3,1,2,1,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,3,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,3,1,2,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "3,1,0,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,3,1,0,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "bsum_induction_lower2_concrete" (formula "3") (term "1"))
               (rule "polySimp_elimSub" (formula "3") (term "1"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "bsum_induction_lower2_concrete" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_elimSub" (formula "3") (term "0"))
               (rule "polySimp_homoEq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "bsum_induction_lower2_concrete" (formula "19") (term "1,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "1,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "19") (term "0,0,0,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,0,0"))
               (rule "bsum_induction_lower2_concrete" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_elimSub" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,1,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "19") (term "0,1,0,0,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0"))
               (rule "add_zero_right" (formula "14") (term "0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0"))
               (rule "add_literals" (formula "14") (term "0"))
               (rule "qeq_literals" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,1,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "18") (term "0,0,1,0,0,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "4"))
               (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0"))
               (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0"))
               (rule "polySimp_sepNegMonomial" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "3"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,1,0"))
               (rule "times_zero_1" (formula "18") (term "1,0"))
               (rule "add_zero_right" (formula "18") (term "0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor2" (formula "18") (term "0,0,0"))
               (rule "add_literals" (formula "18") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "18") (term "0,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,0"))
               (rule "times_zero_1" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "closeTrue" (formula "18"))
            )
            (branch " javaSubInt(end, begin) < self.nextWriteOf(split_bucket) & de.wiesler.Buffers.BUFFER_SIZE <= self.writtenCountOfBucket(split_bucket) FALSE"
               (rule "ifthenelse_split" (formula "18") (term "1,1") (userinteraction))
               (branch "( javaSubInt(end, begin) < self.nextWriteOf(split_bucket) & 256 <= self.writtenCountOfBucket(split_bucket))<<SC>> TRUE"
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "18"))
               )
               (branch "( javaSubInt(end, begin) < self.nextWriteOf(split_bucket) & 256 <= self.writtenCountOfBucket(split_bucket))<<SC>> FALSE"
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "19") (term "1,0,0") (inst "i=i") (userinteraction))
                  (rule "pullOut" (formula "19") (term "2,1,1") (inst "sk=javaSubInt_0") (userinteraction))
                  (rule "bsum_split" (formula "20") (term "1,0,0") (inst "middle=javaSubInt_0") (userinteraction))
                  (rule "ifthenelse_split" (formula "20") (term "1,0,0") (userinteraction))
                  (branch " javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)) <= javaSubInt_0 & javaSubInt_0 <= javaAddInt(begin, self.nextWriteOf(split_bucket)) TRUE"
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "21") (term "1,1") (inst "i=i") (userinteraction))
                     (rule "Definition_axiom_for_countElement_in_de_wiesler_Functions" (formula "21") (term "1,0,0,1") (inst "i=i") (userinteraction))
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                     (rule "false_right" (formula "19"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,0,1,0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "2,1,2,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "20") (term "3,1,2,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "0"))
                     (rule "translateJavaSubInt" (formula "19") (term "0,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "1"))
                     (rule "translateJavaSubInt" (formula "14") (term "0"))
                     (rule "translateJavaAddInt" (formula "14") (term "1"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,1,0,0,1"))
                     (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "2,1,2,1,0,1"))
                     (rule "translateJavaSubInt" (formula "20") (term "3,1,2,1,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,1,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "0"))
                     (rule "translateJavaAddInt" (formula "3") (term "2,1,2,0"))
                     (rule "translateJavaSubInt" (formula "3") (term "3,1,2,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "2,1,2,0"))
                     (rule "translateJavaSubInt" (formula "4") (term "3,1,2,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,3,1,2,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "14") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,3,1,2,1,0,1"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "3") (term "0,3,1,2,0"))
                     (rule "translateJavaAddInt" (formula "4") (term "0,3,1,2,0"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "3,1,2,0,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "1,3,1,2,0,0,0,1"))
                     (rule "polySimp_elimSub" (formula "14") (term "1"))
                     (rule "mul_literals" (formula "14") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "0"))
                     (rule "mul_literals" (formula "15") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "3,1,2,1,0,1"))
                     (rule "mul_literals" (formula "21") (term "1,3,1,2,1,0,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "0"))
                     (rule "mul_literals" (formula "3") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "4") (term "3,1,2,0"))
                     (rule "mul_literals" (formula "4") (term "1,3,1,2,0"))
                     (rule "polySimp_elimSub" (formula "5") (term "3,1,2,0"))
                     (rule "mul_literals" (formula "5") (term "1,3,1,2,0"))
                     (rule "polySimp_homoEq" (formula "21"))
                     (rule "polySimp_homoEq" (formula "3"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "1"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "3,1,2,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "3,1,2,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "3,1,2,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "3,1,2,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "1,1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,3,1,2,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,3,1,2,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "4") (term "1"))
                     (rule "polySimp_elimSub" (formula "4") (term "1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "bsum_induction_lower2_concrete" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_elimSub" (formula "4") (term "0"))
                     (rule "polySimp_homoEq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "21") (term "1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,0,1,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "1,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "1,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "qeq_literals" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "20") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "20") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "applyEq" (formula "20") (term "1,0,0,0,0,0") (ifseqformula "5"))
                     (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "applyEq" (formula "4") (term "1,3,1,2,0,1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "4") (term "3,1,2,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,3,1,2,0,1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,3,1,2,0,1,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,3,1,2,0,1,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0,3,1,2,0,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "4") (term "0,3,1,2,0,1,0"))
                     (rule "add_literals" (formula "4") (term "1,0,3,1,2,0,1,0"))
                     (rule "times_zero_1" (formula "4") (term "0,3,1,2,0,1,0"))
                     (rule "add_zero_left" (formula "4") (term "3,1,2,0,1,0"))
                     (rule "applyEq" (formula "20") (term "1,3,1,2,1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "20") (term "3,1,2,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,3,1,2,1,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,3,1,2,1,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,3,1,2,1,0"))
                     (rule "add_zero_left" (formula "20") (term "0,0,3,1,2,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "20") (term "0,3,1,2,1,0"))
                     (rule "add_literals" (formula "20") (term "1,0,3,1,2,1,0"))
                     (rule "times_zero_1" (formula "20") (term "0,3,1,2,1,0"))
                     (rule "add_zero_left" (formula "20") (term "3,1,2,1,0"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0"))
                     (rule "applyEq" (formula "4") (term "1,3,1,2,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "4") (term "3,1,2,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,3,1,2,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,3,1,2,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0,3,1,2,0"))
                     (rule "polySimp_pullOutFactor1" (formula "4") (term "0,3,1,2,0"))
                     (rule "add_literals" (formula "4") (term "1,0,3,1,2,0"))
                     (rule "times_zero_1" (formula "4") (term "0,3,1,2,0"))
                     (rule "add_zero_left" (formula "4") (term "3,1,2,0"))
                     (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "18") (term "1,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,1,1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "1,1,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0"))
                     (rule "applyEq" (formula "3") (term "1,3,0,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "3") (term "3,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,3,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,3,0,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,3,0,0,0,0"))
                     (rule "add_zero_left" (formula "3") (term "0,0,3,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0,3,0,0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,0,3,0,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "0,3,0,0,0,0"))
                     (rule "add_zero_left" (formula "3") (term "3,0,0,0,0"))
                     (rule "applyEq" (formula "18") (term "1,3,0,0,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "18") (term "3,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,3,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,3,0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,3,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,3,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,3,0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,3,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,3,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "3,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "polySimp_sepNegMonomial" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,0"))
                     (rule "times_zero_1" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
                  (branch " javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)) <= javaSubInt_0 & javaSubInt_0 <= javaAddInt(begin, self.nextWriteOf(split_bucket)) FALSE"
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")))
                     (rule "false_right" (formula "18"))
                     (rule "translateJavaSubInt" (formula "18") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,1,0,0"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "2,1,2,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "20") (term "3,1,2,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "19") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "1") (term "0"))
                     (rule "translateJavaAddInt" (formula "12") (term "0"))
                     (rule "translateJavaSubInt" (formula "12") (term "1"))
                     (rule "translateJavaSubInt" (formula "13") (term "0"))
                     (rule "translateJavaAddInt" (formula "13") (term "1"))
                     (rule "translateJavaAddInt" (formula "2") (term "2,1,2,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "2,1,0,0,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "3,1,2,0"))
                     (rule "translateJavaSubInt" (formula "20") (term "3,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "2,1,2,1,0,1"))
                     (rule "translateJavaSubInt" (formula "20") (term "3,1,2,1,0,1"))
                     (rule "translateJavaAddInt" (formula "3") (term "2,1,2,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "3,1,1"))
                     (rule "translateJavaSubInt" (formula "3") (term "3,1,2,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,3,1,2,0,0,0,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "12") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,3,1,2,0"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,3,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "20") (term "0,3,1,2,1,0,1"))
                     (rule "translateJavaAddInt" (formula "3") (term "0,3,1,2,0"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "polySimp_elimSub" (formula "18") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "3,1,2,0,0,0,1"))
                     (rule "mul_literals" (formula "20") (term "1,3,1,2,0,0,0,1"))
                     (rule "polySimp_elimSub" (formula "1") (term "0"))
                     (rule "mul_literals" (formula "1") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1"))
                     (rule "mul_literals" (formula "12") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "0"))
                     (rule "mul_literals" (formula "13") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "2") (term "3,1,2,0"))
                     (rule "mul_literals" (formula "2") (term "1,3,1,2,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "3,1,0,0,1"))
                     (rule "mul_literals" (formula "20") (term "1,3,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "20") (term "3,1,2,1,0,1"))
                     (rule "mul_literals" (formula "20") (term "1,3,1,2,1,0,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "3,1,2,0"))
                     (rule "mul_literals" (formula "3") (term "1,3,1,2,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_homoEq" (formula "20"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "3,1,2,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "3,1,2,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "3,1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "3,1,2,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "3,1,2,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,3,1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,3,1,2,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,3,1,2,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "2") (term "1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "bsum_induction_lower2_concrete" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "polySimp_elimSub" (formula "2") (term "0"))
                     (rule "polySimp_homoEq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "20") (term "1,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,0,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "20") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                     (rule "add_literals" (formula "13") (term "1,1,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0"))
                     (rule "add_zero_right" (formula "13") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "replace_known_left" (formula "2") (term "0,1,0,0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                     (rule "add_literals" (formula "13") (term "1,1,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0"))
                     (rule "add_zero_right" (formula "13") (term "0"))
                     (rule "qeq_literals" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "19") (term "0,1,0,0,0,0,0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "applyEq" (formula "19") (term "1,0,0,0,0") (ifseqformula "3"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "1,3,1,2,0,1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "3") (term "3,1,2,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,3,1,2,0,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,3,1,2,0,1,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,3,1,2,0,1,0"))
                     (rule "add_zero_left" (formula "3") (term "0,0,3,1,2,0,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0,3,1,2,0,1,0"))
                     (rule "add_literals" (formula "3") (term "1,0,3,1,2,0,1,0"))
                     (rule "times_zero_1" (formula "3") (term "0,3,1,2,0,1,0"))
                     (rule "add_zero_left" (formula "3") (term "3,1,2,0,1,0"))
                     (rule "applyEq" (formula "19") (term "1,3,1,2,1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "19") (term "3,1,2,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,3,1,2,1,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,3,1,2,1,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,3,1,2,1,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,3,1,2,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,3,1,2,1,0"))
                     (rule "add_literals" (formula "19") (term "1,0,3,1,2,1,0"))
                     (rule "times_zero_1" (formula "19") (term "0,3,1,2,1,0"))
                     (rule "add_zero_left" (formula "19") (term "3,1,2,1,0"))
                     (rule "applyEq" (formula "4") (term "1,3,1,2,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "4") (term "3,1,2,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,3,1,2,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,3,1,2,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,3,1,2,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0,3,1,2,0"))
                     (rule "polySimp_pullOutFactor1" (formula "4") (term "0,3,1,2,0"))
                     (rule "add_literals" (formula "4") (term "1,0,3,1,2,0"))
                     (rule "times_zero_1" (formula "4") (term "0,3,1,2,0"))
                     (rule "add_zero_left" (formula "4") (term "3,1,2,0"))
                     (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "Assume bsum{int uSub1;}(split_bucket + 1, self.num_buckets, if (uSub1 = split_bucket) then (de.wiesler.Functions.countElement(values, javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)), javaSubInt(javaAddInt(begin, self.nextWriteOf(split_bucket)), 256), element_0)) else (self.writtenElementsOfBucketCountElement(values, begin, end, overflow, uSub1, element_0))) != bsum{int uSub1;}(split_bucket + 1, self.num_buckets, self.writtenElementsOfBucketCountElement(values, begin, end, overflow, uSub1, element_0))"
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "equal_bsum1" (formula "13") (userinteraction))
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaAddInt" (formula "10") (term "0"))
            (rule "translateJavaSubInt" (formula "10") (term "1"))
            (rule "translateJavaAddInt" (formula "14") (term "2,1,2,0"))
            (rule "translateJavaSubInt" (formula "14") (term "3,1,2,0"))
            (rule "translateJavaSubInt" (formula "11") (term "0"))
            (rule "translateJavaAddInt" (formula "11") (term "1"))
            (rule "translateJavaAddInt" (formula "1") (term "2,1,2,0"))
            (rule "translateJavaSubInt" (formula "1") (term "3,1,2,0"))
            (rule "translateJavaSubInt" (formula "18") (term "2,2,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,1,2,1,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "0,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,1,2,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "18") (term "3,2,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "2,1,0,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "3,1,2,0,0,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "3,1,2,1,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "3,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "13") (term "0,3,0,1,1,0"))
            (rule "translateJavaAddInt" (formula "13") (term "2,0,1,1,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,1"))
            (rule "translateJavaAddInt" (formula "14") (term "0,3,1,2,0"))
            (rule "translateJavaAddInt" (formula "11") (term "0,0"))
            (rule "translateJavaAddInt" (formula "1") (term "0,3,1,2,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,2,1,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,3,1,2,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,3,1,2,1,0,1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,3,1,0,0,1"))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1,1,0"))
            (rule "allRight" (formula "13") (inst "sk=uSub1_0"))
            (rule "impRight" (formula "13"))
            (rule "orRight" (formula "14"))
            (rule "andLeft" (formula "1"))
            (rule "notRight" (formula "15"))
            (rule "eqSymm" (formula "16"))
            (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_elimSub" (formula "21") (term "0,0,0,1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1"))
            (rule "mul_literals" (formula "13") (term "1,1"))
            (rule "polySimp_elimSub" (formula "17") (term "3,1,2,0"))
            (rule "mul_literals" (formula "17") (term "1,3,1,2,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0"))
            (rule "mul_literals" (formula "14") (term "1,0"))
            (rule "polySimp_elimSub" (formula "4") (term "3,1,2,0"))
            (rule "mul_literals" (formula "4") (term "1,3,1,2,0"))
            (rule "polySimp_elimSub" (formula "21") (term "2,2,1,1"))
            (rule "mul_literals" (formula "21") (term "1,2,2,1,1"))
            (rule "polySimp_elimSub" (formula "21") (term "3,1,2,0,0,0,1"))
            (rule "mul_literals" (formula "21") (term "1,3,1,2,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "21") (term "3,1,2,1,0,1"))
            (rule "mul_literals" (formula "21") (term "1,3,1,2,1,0,1"))
            (rule "polySimp_elimSub" (formula "21") (term "3,1,0,0,1"))
            (rule "mul_literals" (formula "21") (term "1,3,1,0,0,1"))
            (rule "polySimp_elimSub" (formula "16") (term "3,1"))
            (rule "mul_literals" (formula "16") (term "1,3,1"))
            (rule "polySimp_homoEq" (formula "21"))
            (rule "polySimp_addComm0" (formula "17") (term "0,1"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1"))
            (rule "polySimp_addComm1" (formula "13") (term "1"))
            (rule "polySimp_addComm1" (formula "17") (term "3,1,2,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0"))
            (rule "polySimp_addComm1" (formula "4") (term "3,1,2,0"))
            (rule "polySimp_addComm1" (formula "16") (term "3,1"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1"))
            (rule "polySimp_addComm0" (formula "17") (term "0,3,1,2,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0,3,1,2,0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,3,1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "2,2,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "3,1,2,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,2,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "3,1,2,1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "3,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,3,1,2,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,3,1,2,1,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,3,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "bsum_induction_lower2_concrete" (formula "17") (term "1"))
            (rule "polySimp_elimSub" (formula "17") (term "1"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "bsum_induction_lower2_concrete" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "polySimp_elimSub" (formula "17") (term "0"))
            (rule "polySimp_homoEq" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
            (rule "polySimp_addComm0" (formula "17") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "bsum_induction_lower2_concrete" (formula "21") (term "1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
            (rule "bsum_induction_lower2_concrete" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "17") (term "0,0,0,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "polySimp_pullOutFactor2b" (formula "21") (term "0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0"))
            (rule "replace_known_left" (formula "17") (term "0,0,1,0,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "21") (term "0,0,1,0,0,0,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "21") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "21") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,1,0"))
            (rule "times_zero_1" (formula "14") (term "1,0"))
            (rule "add_zero_right" (formula "14") (term "0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,1,0"))
            (rule "times_zero_1" (formula "14") (term "1,0"))
            (rule "add_zero_right" (formula "14") (term "0"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "applyEq" (formula "15") (term "6,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
      (branch "Assume bsum{int b;}(0, split_bucket, if (b = split_bucket) then (de.wiesler.Functions.countElement(values, javaAddInt(begin, de.wiesler.BucketPointers::bucketStart(self, split_bucket)), javaSubInt(javaAddInt(begin, self.nextWriteOf(split_bucket)), 256), element_0)) else (self.writtenElementsOfBucketCountElement(values, begin, end, overflow, b, element_0))) != bsum{int b;}(0, split_bucket, self.writtenElementsOfBucketCountElement(values, begin, end, overflow, b, element_0))"
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "equal_bsum1" (formula "12") (userinteraction))
         (rule "allRight" (formula "12") (inst "sk=b_0") (userinteraction))
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaAddInt" (formula "13") (term "2,1,2,0"))
         (rule "translateJavaSubInt" (formula "13") (term "3,1,2,0"))
         (rule "translateJavaAddInt" (formula "9") (term "0"))
         (rule "translateJavaSubInt" (formula "9") (term "1"))
         (rule "translateJavaSubInt" (formula "10") (term "0"))
         (rule "translateJavaAddInt" (formula "10") (term "1"))
         (rule "translateJavaSubInt" (formula "17") (term "2,2,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "2,1,2,0,0,0,1"))
         (rule "translateJavaSubInt" (formula "17") (term "3,1,2,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "17") (term "3,2,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "2,1,2,1,0,1"))
         (rule "translateJavaSubInt" (formula "17") (term "0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "2,1,0,0,1"))
         (rule "translateJavaSubInt" (formula "17") (term "3,1,2,1,0,1"))
         (rule "translateJavaSubInt" (formula "17") (term "3,1,0,0,1"))
         (rule "translateJavaAddInt" (formula "12") (term "2,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "3,0,1,1"))
         (rule "translateJavaAddInt" (formula "13") (term "0,3,1,2,0"))
         (rule "translateJavaAddInt" (formula "9") (term "0,1"))
         (rule "translateJavaAddInt" (formula "10") (term "0,0"))
         (rule "translateJavaAddInt" (formula "17") (term "0,2,2,1,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,3,1,2,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,3,1,2,1,0,1"))
         (rule "translateJavaAddInt" (formula "17") (term "0,3,1,0,0,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,3,0,1,1"))
         (rule "impRight" (formula "12"))
         (rule "orRight" (formula "13"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "14"))
         (rule "eqSymm" (formula "15"))
         (rule "eqSymm" (formula "1"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_elimSub" (formula "20") (term "0,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "16") (term "3,1,2,0"))
         (rule "mul_literals" (formula "16") (term "1,3,1,2,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1"))
         (rule "mul_literals" (formula "12") (term "1,1"))
         (rule "polySimp_elimSub" (formula "13") (term "0"))
         (rule "mul_literals" (formula "13") (term "1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,2,1,1"))
         (rule "mul_literals" (formula "20") (term "1,2,2,1,1"))
         (rule "polySimp_elimSub" (formula "20") (term "3,1,2,0,0,0,1"))
         (rule "mul_literals" (formula "20") (term "1,3,1,2,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "20") (term "3,1,2,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,3,1,2,1,0,1"))
         (rule "polySimp_elimSub" (formula "20") (term "3,1,0,0,1"))
         (rule "mul_literals" (formula "20") (term "1,3,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "15") (term "3,1"))
         (rule "mul_literals" (formula "15") (term "1,3,1"))
         (rule "polySimp_homoEq" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "3,1,2,0"))
         (rule "polySimp_addComm1" (formula "12") (term "1"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "polySimp_addComm1" (formula "15") (term "3,1"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,1,1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,3,1,2,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "0,3,1"))
         (rule "polySimp_addComm1" (formula "20") (term "3,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "3,1,2,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "2,2,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "3,1,2,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,3,1,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,3,1,2,0,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,2,2,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,3,1,2,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "polySimp_rightDist" (formula "20") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
         (rule "bsum_induction_lower2_concrete" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "1,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
         (rule "bsum_induction_lower2_concrete" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_elimSub" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0,0,0,0,0"))
         (rule "replace_known_left" (formula "20") (term "0,1,0,0,0,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "replace_known_left" (formula "20") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_pullOutFactor1" (formula "20") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "20") (term "1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "20") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
         (rule "mul_literals" (formula "13") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0"))
         (rule "add_zero_right" (formula "13") (term "0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0"))
         (rule "add_zero_right" (formula "13") (term "0"))
         (rule "qeq_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,0,0,0"))
         (rule "applyEq" (formula "15") (term "1,1,2,1,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "2,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
)
)
}
